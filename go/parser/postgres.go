// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

// Helper functions for RenameStmt
func qualifiedNameToStringList(node ast.Node) []*ast.String {
	if rangeVar, ok := node.(*ast.RangeVar); ok {
		result := []*ast.String{}
		if rangeVar.SchemaName != "" {
			result = append(result, ast.NewString(rangeVar.SchemaName))
		}
		result = append(result, ast.NewString(rangeVar.RelName))
		return result
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		result := []*ast.String{}
		for _, item := range nodeList.Items {
			if str, ok := item.(*ast.String); ok {
				result = append(result, str)
			}
		}
		return result
	}
	// Fallback: treat as single name
	return []*ast.String{ast.NewString("unknown")}
}

func qualifiedNameToRangeVar(node ast.Node) *ast.RangeVar {
	if rangeVar, ok := node.(*ast.RangeVar); ok {
		return rangeVar
	}
	// Fallback: create from qualified name
	return &ast.RangeVar{RelName: "unknown"}
}

// nodeListToStringSlice converts a NodeList to []string for TypeName
func nodeListToStringSlice(nodeList *ast.NodeList) []string {
	result := []string{}
	for _, item := range nodeList.Items {
		if str, ok := item.(*ast.String); ok {
			result = append(result, str.SVal)
		}
	}
	return result
}

//line postgres.y:72
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node       ast.Node
	stmt       ast.Stmt
	stmtList   []ast.Stmt
	list       *ast.NodeList
	strList    []string
	astStrList []*ast.String

	// Specific AST node types
	onconflict    *ast.OnConflictClause
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	rangeVar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	partboundspec *ast.PartitionBoundSpec

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const ORDER_P = 57412
const BY = 57413
const GROUP_P = 57414
const HAVING = 57415
const INTO = 57416
const ON = 57417
const JOIN = 57418
const INNER_P = 57419
const LEFT = 57420
const RIGHT = 57421
const FULL = 57422
const OUTER_P = 57423
const CROSS = 57424
const NATURAL = 57425
const USING = 57426
const RECURSIVE = 57427
const MATERIALIZED = 57428
const LATERAL = 57429
const VALUES = 57430
const SEARCH = 57431
const BREADTH = 57432
const DEPTH = 57433
const CYCLE = 57434
const FIRST_P = 57435
const LAST_P = 57436
const SET = 57437
const ASC = 57438
const DESC = 57439
const INSERT = 57440
const UPDATE = 57441
const DELETE_P = 57442
const MERGE = 57443
const RETURNING = 57444
const CONFLICT = 57445
const OVERRIDING = 57446
const USER = 57447
const SYSTEM_P = 57448
const MATCHED = 57449
const THEN = 57450
const SOURCE = 57451
const TARGET = 57452
const DO = 57453
const NOTHING = 57454
const COPY = 57455
const PROGRAM = 57456
const STDIN = 57457
const STDOUT = 57458
const BINARY = 57459
const FREEZE = 57460
const CONSTRAINT = 57461
const VERBOSE = 57462
const ANALYZE = 57463
const CURRENT_P = 57464
const CURSOR = 57465
const OF = 57466
const COLUMNS = 57467
const ORDINALITY = 57468
const XMLTABLE = 57469
const JSON_TABLE = 57470
const ROWS = 57471
const PATH = 57472
const PASSING = 57473
const FOR = 57474
const NESTED = 57475
const REF_P = 57476
const XMLNAMESPACES = 57477
const ARRAY = 57478
const ERROR = 57479
const ERROR_P = 57480
const EMPTY = 57481
const EMPTY_P = 57482
const OBJECT_P = 57483
const WRAPPER = 57484
const CONDITIONAL = 57485
const UNCONDITIONAL = 57486
const QUOTES = 57487
const OMIT = 57488
const KEEP = 57489
const SCALAR = 57490
const STRING_P = 57491
const ENCODING = 57492
const DELIMITER = 57493
const DELIMITERS = 57494
const HEADER_P = 57495
const QUOTE = 57496
const FORCE = 57497
const CSV = 57498
const VALUE_P = 57499
const JSON_QUERY = 57500
const JSON_VALUE = 57501
const JSON_SERIALIZE = 57502
const JSON_OBJECT = 57503
const JSON_ARRAY = 57504
const JSON_OBJECTAGG = 57505
const JSON_ARRAYAGG = 57506
const JSON_EXISTS = 57507
const JSON_SCALAR = 57508
const FORMAT = 57509
const JSON = 57510
const UTF8 = 57511
const WITHOUT = 57512
const BIT = 57513
const NUMERIC = 57514
const INTEGER = 57515
const SMALLINT = 57516
const BIGINT = 57517
const REAL = 57518
const FLOAT_P = 57519
const DOUBLE_P = 57520
const PRECISION = 57521
const CHARACTER = 57522
const CHAR_P = 57523
const VARCHAR = 57524
const NATIONAL = 57525
const NCHAR = 57526
const VARYING = 57527
const TIMESTAMP = 57528
const INTERVAL = 57529
const INT_P = 57530
const DECIMAL_P = 57531
const DEC = 57532
const BOOLEAN_P = 57533
const VARIADIC = 57534
const ABORT_P = 57535
const ABSENT = 57536
const ABSOLUTE_P = 57537
const ACCESS = 57538
const ACTION = 57539
const ADD_P = 57540
const ADMIN = 57541
const AFTER = 57542
const AGGREGATE = 57543
const ALSO = 57544
const ALWAYS = 57545
const ANALYSE = 57546
const ASENSITIVE = 57547
const ASSERTION = 57548
const ASSIGNMENT = 57549
const ATOMIC = 57550
const ATTACH = 57551
const ATTRIBUTE = 57552
const AUTHORIZATION = 57553
const BACKWARD = 57554
const BEFORE = 57555
const BEGIN_P = 57556
const CACHE = 57557
const CALL = 57558
const CALLED = 57559
const CASCADED = 57560
const CATALOG_P = 57561
const CHAIN = 57562
const CHARACTERISTICS = 57563
const CHECKPOINT = 57564
const CLASS = 57565
const CLOSE = 57566
const CLUSTER = 57567
const COALESCE = 57568
const COLLATION = 57569
const COMMENT = 57570
const COMMENTS = 57571
const COMMIT = 57572
const COMMITTED = 57573
const COMPRESSION = 57574
const CONFIGURATION = 57575
const CONNECTION = 57576
const CONSTRAINTS = 57577
const CONTENT_P = 57578
const CONTINUE_P = 57579
const CONVERSION_P = 57580
const COST = 57581
const CUBE = 57582
const CURRENT_CATALOG = 57583
const CURRENT_DATE = 57584
const CURRENT_ROLE = 57585
const CURRENT_SCHEMA = 57586
const CURRENT_TIME = 57587
const CURRENT_TIMESTAMP = 57588
const CURRENT_USER = 57589
const DATA_P = 57590
const DATABASE = 57591
const DAY_P = 57592
const DEALLOCATE = 57593
const DECLARE = 57594
const DEFAULTS = 57595
const DEFERRABLE = 57596
const DEFERRED = 57597
const DEFINER = 57598
const DEPENDS = 57599
const DETACH = 57600
const DICTIONARY = 57601
const DISABLE_P = 57602
const DISCARD = 57603
const DOCUMENT_P = 57604
const DOMAIN_P = 57605
const EACH = 57606
const ELSE = 57607
const ENABLE_P = 57608
const ENCRYPTED = 57609
const END_P = 57610
const ENUM_P = 57611
const EVENT = 57612
const EXCEPT = 57613
const EXCLUDE = 57614
const EXCLUDING = 57615
const EXCLUSIVE = 57616
const EXECUTE = 57617
const EXPLAIN = 57618
const EXPRESSION = 57619
const EXTENSION = 57620
const EXTERNAL = 57621
const EXTRACT = 57622
const FAMILY = 57623
const FETCH = 57624
const FILTER = 57625
const FINALIZE = 57626
const FOLLOWING = 57627
const FOREIGN = 57628
const FORWARD = 57629
const FUNCTION = 57630
const FUNCTIONS = 57631
const GENERATED = 57632
const GLOBAL = 57633
const GRANT = 57634
const GRANTED = 57635
const GREATEST = 57636
const GROUPING = 57637
const GROUPS = 57638
const HANDLER = 57639
const HOLD = 57640
const HOUR_P = 57641
const IDENTITY_P = 57642
const IMMEDIATE = 57643
const IMMUTABLE = 57644
const IMPLICIT_P = 57645
const IMPORT_P = 57646
const INCLUDE = 57647
const INCLUDING = 57648
const INCREMENT = 57649
const INDENT = 57650
const INDEX = 57651
const INDEXES = 57652
const INHERIT = 57653
const INHERITS = 57654
const INITIALLY = 57655
const INLINE_P = 57656
const INPUT_P = 57657
const INSENSITIVE = 57658
const INSTEAD = 57659
const INTERSECT = 57660
const INVOKER = 57661
const ISOLATION = 57662
const KEYS = 57663
const LABEL = 57664
const LANGUAGE = 57665
const LARGE_P = 57666
const LATERAL_P = 57667
const LEAKPROOF = 57668
const LEAST = 57669
const LEADING = 57670
const LEVEL = 57671
const LISTEN = 57672
const LOAD = 57673
const LOCALTIME = 57674
const LOCALTIMESTAMP = 57675
const LOCATION = 57676
const LOCK_P = 57677
const LOCKED = 57678
const LOGGED = 57679
const MAPPING = 57680
const MATCH = 57681
const MAXVALUE = 57682
const MERGE_ACTION = 57683
const METHOD = 57684
const MINUTE_P = 57685
const MINVALUE = 57686
const MODE = 57687
const MONTH_P = 57688
const MOVE = 57689
const NAME_P = 57690
const NAMES = 57691
const NEW = 57692
const NEXT = 57693
const NFC = 57694
const NFD = 57695
const NFKC = 57696
const NFKD = 57697
const NO = 57698
const NONE = 57699
const NORMALIZE = 57700
const NORMALIZED = 57701
const NOTIFY = 57702
const NOWAIT = 57703
const NULLIF = 57704
const OUT_P = 57705
const OVERLAY = 57706
const OVERLAPS = 57707
const OWNED = 57708
const OWNER = 57709
const PARALLEL = 57710
const PARAMETER = 57711
const PARSER = 57712
const PARTIAL = 57713
const PARTITION = 57714
const PASSWORD = 57715
const PLACING = 57716
const PLAN = 57717
const PLANS = 57718
const POLICY = 57719
const POSITION = 57720
const PRECEDING = 57721
const PREPARE = 57722
const PREPARED = 57723
const PRESERVE = 57724
const PRIMARY = 57725
const PRIOR = 57726
const PRIVILEGES = 57727
const PROCEDURAL = 57728
const PROCEDURE = 57729
const PROCEDURES = 57730
const PUBLICATION = 57731
const RANGE = 57732
const READ = 57733
const REASSIGN = 57734
const RECHECK = 57735
const REFERENCES = 57736
const REFERENCING = 57737
const REFRESH = 57738
const REINDEX = 57739
const RELATIVE_P = 57740
const RELEASE = 57741
const RENAME = 57742
const REPEATABLE = 57743
const REPLICA = 57744
const RESET = 57745
const RESTART = 57746
const RETURN = 57747
const RETURNS = 57748
const REVOKE = 57749
const ROLE = 57750
const ROLLBACK = 57751
const ROLLUP = 57752
const ROUTINE = 57753
const ROUTINES = 57754
const ROW = 57755
const RULE = 57756
const SAVEPOINT = 57757
const SCHEMA = 57758
const SCHEMAS = 57759
const SCROLL = 57760
const SECOND_P = 57761
const SECURITY = 57762
const SEQUENCE = 57763
const SEQUENCES = 57764
const SERIALIZABLE = 57765
const SERVER = 57766
const SESSION = 57767
const SESSION_USER = 57768
const SETS = 57769
const SETOF = 57770
const SHARE = 57771
const SHOW = 57772
const SIMPLE = 57773
const SKIP = 57774
const SNAPSHOT = 57775
const SOME = 57776
const SQL_P = 57777
const STABLE = 57778
const STANDALONE_P = 57779
const START = 57780
const STATEMENT = 57781
const STATISTICS = 57782
const STORAGE = 57783
const STORED = 57784
const STRICT_P = 57785
const STRIP_P = 57786
const SUBSCRIPTION = 57787
const SUBSTRING = 57788
const SUPPORT = 57789
const SYSID = 57790
const SYSTEM_USER = 57791
const TABLES = 57792
const TABLESPACE = 57793
const TABLESAMPLE = 57794
const TEMP = 57795
const TEMPLATE = 57796
const TEMPORARY = 57797
const TEXT_P = 57798
const TIES = 57799
const TRAILING = 57800
const TRANSACTION = 57801
const TRANSFORM = 57802
const TREAT = 57803
const TRIGGER = 57804
const TRIM = 57805
const TRUNCATE = 57806
const TRUSTED = 57807
const TYPE_P = 57808
const TYPES_P = 57809
const UESCAPE = 57810
const UNBOUNDED = 57811
const UNCOMMITTED = 57812
const UNENCRYPTED = 57813
const UNION = 57814
const UNIQUE = 57815
const UNLISTEN = 57816
const UNLOGGED = 57817
const UNTIL = 57818
const VACUUM = 57819
const VALID = 57820
const VALIDATE = 57821
const VALIDATOR = 57822
const VERSION_P = 57823
const VIEW = 57824
const VIEWS = 57825
const VOLATILE = 57826
const WHITESPACE_P = 57827
const WINDOW = 57828
const WITHIN = 57829
const WORK = 57830
const WRITE = 57831
const XML_P = 57832
const XMLATTRIBUTES = 57833
const XMLCONCAT = 57834
const XMLELEMENT = 57835
const XMLEXISTS = 57836
const XMLFOREST = 57837
const XMLPARSE = 57838
const XMLPI = 57839
const XMLROOT = 57840
const XMLSERIALIZE = 57841
const YEAR_P = 57842
const YES_P = 57843
const INOUT = 57844
const OTHERS = 57845
const OLD = 57846
const KEY = 57847
const OFF = 57848
const OIDS = 57849
const OPTION = 57850
const OPTIONS = 57851
const OVER = 57852
const ORDER = 57853
const ANY = 57854
const BOTH = 57855
const CAST = 57856
const CHECK = 57857
const COLUMN = 57858
const FORMAT_LA = 57859
const NOT_LA = 57860
const NULLS_LA = 57861
const WITH_LA = 57862
const WITHOUT_LA = 57863
const MODE_TYPE_NAME = 57864
const MODE_PLPGSQL_EXPR = 57865
const MODE_PLPGSQL_ASSIGN1 = 57866
const MODE_PLPGSQL_ASSIGN2 = 57867
const MODE_PLPGSQL_ASSIGN3 = 57868
const UMINUS = 57869

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"ORDER_P",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:7694

// Helper functions for converting between grammar types and AST types

// KeyActionsHelper is a simple helper to hold both update and delete actions
type KeyActionsHelper struct {
	ast.BaseNode
	UpdateAction byte
	DeleteAction byte
}

// newKeyActionsHelper creates a new KeyActionsHelper
func newKeyActionsHelper(updateAction, deleteAction byte) *KeyActionsHelper {
	return &KeyActionsHelper{
		BaseNode:     ast.BaseNode{Tag: ast.T_Invalid}, // Use T_Invalid for helper nodes
		UpdateAction: updateAction,
		DeleteAction: deleteAction,
	}
}

// convertAstStrListToStringSlice converts []*ast.String to []string
func convertAstStrListToStringSlice(astStrList []*ast.String) []string {
	if astStrList == nil {
		return nil
	}
	result := make([]string, len(astStrList))
	for i, astStr := range astStrList {
		if astStr != nil {
			result[i] = astStr.SVal
		}
	}
	return result
}

// convertStringSliceToString converts []*ast.String to a single operator string
func convertStringSliceToString(astStrList []*ast.String) string {
	if astStrList == nil || len(astStrList) == 0 {
		return ""
	}
	// For operators, join with "." for qualified names like "pg_catalog.="
	var parts []string
	for _, astStr := range astStrList {
		if astStr != nil {
			parts = append(parts, astStr.SVal)
		}
	}
	if len(parts) == 1 {
		return parts[0]
	}
	return strings.Join(parts, ".")
}

// convertToResTargetList converts a slice of ast.Node to []*ast.ResTarget
func convertToResTargetList(nodes []ast.Node) []*ast.ResTarget {
	if nodes == nil {
		return nil
	}
	targets := make([]*ast.ResTarget, len(nodes))
	for i, node := range nodes {
		if target, ok := node.(*ast.ResTarget); ok {
			targets[i] = target
		}
	}
	return targets
}

// convertToIntoClause converts an ast.Node to *ast.IntoClause
func convertToIntoClause(node ast.Node) *ast.IntoClause {
	if node == nil {
		return nil
	}
	if intoClause, ok := node.(*ast.IntoClause); ok {
		return intoClause
	}
	return nil
}

// convertToStringList converts an ast.Node to []*ast.String
func convertToStringList(node ast.Node) []*ast.String {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		strings := make([]*ast.String, len(nodeList.Items))
		for i, item := range nodeList.Items {
			if str, ok := item.(*ast.String); ok {
				strings[i] = str
			}
		}
		return strings
	}
	return nil
}

// convertNodeToStringList converts an ast.Node (which is a NodeList) to []string
func convertNodeToStringList(node ast.Node) []string {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		strings := make([]string, len(nodeList.Items))
		for i, item := range nodeList.Items {
			if str, ok := item.(*ast.String); ok {
				strings[i] = str.SVal
			}
		}
		return strings
	}
	return nil
}

// convertToNodeList converts an ast.Node to []ast.Node
func convertToNodeList(node ast.Node) []ast.Node {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		return nodeList.Items
	}
	// If it's a single node, wrap it in a slice
	return []ast.Node{node}
}

// convertToNodeListPtr converts an ast.Node to *ast.NodeList
func convertToNodeListPtr(node ast.Node) *ast.NodeList {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		return nodeList
	}
	// If it's a single node, wrap it in a NodeList
	result := ast.NewNodeList()
	result.Append(node)
	return result
}

// Phase 3F DDL Helper Functions
// These functions convert between grammar types and AST types for DDL operations

// convertToRangeVarList converts an ast.Node to []*ast.RangeVar
func convertToRangeVarList(node ast.Node) []*ast.RangeVar {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		rangeVars := make([]*ast.RangeVar, 0, len(nodeList.Items))
		for _, item := range nodeList.Items {
			if rangeVar, ok := item.(*ast.RangeVar); ok {
				rangeVars = append(rangeVars, rangeVar)
			}
		}
		return rangeVars
	}
	return nil
}

// convertToPartitionSpec converts an ast.Node to *ast.PartitionSpec
func convertToPartitionSpec(node ast.Node) *ast.PartitionSpec {
	// TODO: Implement proper PartitionSpec conversion when needed
	return nil
}

// convertToOnCommitAction converts a string, int, or OnCommitAction to ast.OnCommitAction
func convertToOnCommitAction(node interface{}) ast.OnCommitAction {
	if node == nil {
		return ast.ONCOMMIT_NOOP
	}
	switch v := node.(type) {
	case ast.OnCommitAction:
		return v
	case int:
		return ast.OnCommitAction(v)
	case string:
		switch v {
		case "drop":
			return ast.ONCOMMIT_DROP
		case "delete_rows":
			return ast.ONCOMMIT_DELETE_ROWS
		case "preserve_rows":
			return ast.ONCOMMIT_PRESERVE_ROWS
		default:
			return ast.ONCOMMIT_NOOP
		}
	}
	return ast.ONCOMMIT_NOOP
}

// convertToString converts various types to string
func convertToString(node interface{}) string {
	if node == nil {
		return ""
	}
	switch v := node.(type) {
	case string:
		return v
	case *ast.String:
		return v.SVal
	}
	return ""
}

// convertToConstraintList converts an ast.Node to []*ast.Constraint
func convertToConstraintList(node ast.Node) *ast.NodeList {
	if node == nil {
		return ast.NewNodeList()
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		return nodeList
	}
	return ast.NewNodeList()
}

// convertToMatchType converts a byte to PostgreSQL match type
func convertToMatchType(node interface{}) byte {
	if b, ok := node.(byte); ok {
		return b
	}
	return byte('s') // default to SIMPLE
}

// convertToBool converts interface{} to bool
func convertToBool(node interface{}) bool {
	if b, ok := node.(bool); ok {
		return b
	}
	if i, ok := node.(int); ok {
		return i != 0
	}
	return false
}

// convertToIndexElemList converts an ast.Node to []*ast.IndexElem
func convertToIndexElemList(node ast.Node) []*ast.IndexElem {
	if node == nil {
		return nil
	}
	nodeList, ok := node.(*ast.NodeList)
	if !ok || nodeList == nil {
		return nil
	}
	indexElems := make([]*ast.IndexElem, 0, len(nodeList.Items))
	for _, item := range nodeList.Items {
		if indexElem, ok := item.(*ast.IndexElem); ok {
			indexElems = append(indexElems, indexElem)
		}
	}
	return indexElems
}

// convertToDefElemList converts an ast.Node to []*ast.DefElem
func convertToDefElemList(node ast.Node) []*ast.DefElem {
	if node == nil {
		return nil
	}
	nodeList, ok := node.(*ast.NodeList)
	if !ok || nodeList == nil {
		return nil
	}
	defElems := make([]*ast.DefElem, 0, len(nodeList.Items))
	for _, item := range nodeList.Items {
		if defElem, ok := item.(*ast.DefElem); ok {
			defElems = append(defElems, defElem)
		}
	}
	return defElems
}

// convertToAlterTableCmdList converts an ast.Node to []*ast.AlterTableCmd
func convertToAlterTableCmdList(node ast.Node) []*ast.AlterTableCmd {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		alterCmds := make([]*ast.AlterTableCmd, 0, len(nodeList.Items))
		for _, item := range nodeList.Items {
			if alterCmd, ok := item.(*ast.AlterTableCmd); ok {
				alterCmds = append(alterCmds, alterCmd)
			}
		}
		return alterCmds
	}
	return nil
}

// convertToDropBehavior converts interface{} to ast.DropBehavior
func convertToDropBehavior(node interface{}) ast.DropBehavior {
	if node == nil {
		return ast.DropRestrict
	}
	if behavior, ok := node.(ast.DropBehavior); ok {
		return behavior
	}
	return ast.DropRestrict
}

// convertToObjectType converts interface{} to ast.ObjectType
func convertToObjectType(node interface{}) ast.ObjectType {
	if objType, ok := node.(ast.ObjectType); ok {
		return objType
	}
	return ast.OBJECT_TABLE
}

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

func convertDefElemListToNodeList(defElems []*ast.DefElem) *ast.NodeList {
	if defElems == nil {
		return nil
	}
	nodeList := ast.NewNodeList()
	for _, defElem := range defElems {
		nodeList.Append(defElem)
	}
	return nodeList
}

// convertToTableLikeOption converts interface{} to ast.TableLikeOption
func convertToTableLikeOption(node interface{}) ast.TableLikeOption {
	if node == nil {
		return ast.TableLikeOption(0)
	}
	switch v := node.(type) {
	case ast.TableLikeOption:
		return v
	case int:
		return ast.TableLikeOption(v)
	}
	return ast.TableLikeOption(0)
}

// convertToTypeName converts ast.Node to *ast.TypeName
func convertToTypeName(node ast.Node) *ast.TypeName {
	if node == nil {
		return nil
	}
	switch v := node.(type) {
	case *ast.TypeName:
		return v
	}
	return nil
}

// convertToInt converts interface{} to int
func convertToInt(val interface{}) int {
	if val == nil {
		return 0
	}
	if i, ok := val.(int); ok {
		return i
	}
	return 0
}

// processConstraintAttributeSpec processes constraint attribute specification bitmask
// This is a simplified version of processCASbits from PostgreSQL
func processConstraintAttributeSpec(casbits int, constraint *ast.Constraint) {
	if casbits&ast.CAS_DEFERRABLE != 0 {
		constraint.Deferrable = true
	} else if casbits&ast.CAS_NOT_DEFERRABLE != 0 {
		constraint.Deferrable = false
	}

	if casbits&ast.CAS_INITIALLY_DEFERRED != 0 {
		constraint.Initdeferred = true
	} else if casbits&ast.CAS_INITIALLY_IMMEDIATE != 0 {
		constraint.Initdeferred = false
	}

	if casbits&ast.CAS_NOT_VALID != 0 {
		constraint.SkipValidation = true
		constraint.InitiallyValid = false
	} else {
		constraint.SkipValidation = false
		constraint.InitiallyValid = true
	}

	if casbits&ast.CAS_NO_INHERIT != 0 {
		constraint.IsNoInherit = true
	}
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 16,
	542, 16,
	-2, 1265,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 20,
	309, 1744,
	-2, 1577,
	-1, 32,
	1, 16,
	542, 16,
	-2, 1265,
	-1, 551,
	16, 1130,
	17, 1130,
	533, 1130,
	-2, 35,
	-1, 552,
	16, 1131,
	17, 1131,
	533, 1131,
	-2, 36,
	-1, 879,
	1, 595,
	64, 595,
	65, 595,
	74, 595,
	75, 595,
	102, 595,
	534, 595,
	542, 595,
	543, 595,
	-2, 1202,
	-1, 1335,
	533, 1110,
	-2, 1096,
	-1, 1492,
	533, 1746,
	-2, 158,
	-1, 1611,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1027,
	-1, 1612,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1028,
	-1, 1613,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1029,
	-1, 1614,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1030,
	-1, 1615,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1031,
	-1, 1616,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1032,
	-1, 1621,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1040,
	-1, 1627,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1044,
	-1, 1667,
	533, 1109,
	-2, 1134,
	-1, 1875,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1042,
	-1, 1876,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1046,
	-1, 1889,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1059,
	-1, 1951,
	533, 1110,
	-2, 51,
	-1, 1957,
	152, 1509,
	-2, 1442,
	-1, 2001,
	6, 1673,
	12, 1673,
	536, 1673,
	537, 1673,
	-2, 1647,
	-1, 2073,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1041,
	-1, 2078,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1061,
	-1, 2079,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1045,
	-1, 2226,
	6, 1673,
	12, 1673,
	536, 1673,
	537, 1673,
	-2, 1666,
	-1, 2291,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1043,
	-1, 2292,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1047,
	-1, 2296,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1053,
	-1, 2304,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1073,
	-1, 2305,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1074,
	-1, 2306,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1075,
	-1, 2307,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1076,
	-1, 2308,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1077,
	-1, 2309,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1078,
	-1, 2310,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1055,
	-1, 2311,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1060,
	-1, 2459,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1054,
	-1, 2460,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1056,
	-1, 2461,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1062,
	-1, 2959,
	7, 1390,
	-2, 235,
}

const yyPrivate = 57344

const yyLast = 41947

var yyAct = [...]int16{
	516, 3019, 1870, 2956, 3077, 3018, 3061, 3047, 2837, 1681,
	721, 3030, 2763, 680, 2936, 2343, 2663, 3003, 2957, 2571,
	1503, 2617, 2319, 1743, 1642, 2924, 2782, 1348, 116, 2878,
	2832, 2394, 2925, 2923, 2805, 116, 2767, 2206, 623, 116,
	2759, 1684, 2238, 2591, 1453, 1983, 2822, 2338, 2725, 116,
	116, 116, 116, 2529, 2585, 550, 116, 116, 2801, 116,
	550, 2359, 711, 689, 2861, 550, 2318, 550, 1792, 1969,
	2701, 585, 2688, 2694, 2537, 2618, 614, 116, 1749, 116,
	1641, 615, 2183, 2510, 2393, 2154, 2486, 584, 2401, 2760,
	2483, 549, 2336, 1961, 2563, 2327, 1724, 2517, 2792, 1946,
	2242, 2364, 2442, 617, 2196, 1708, 1719, 1791, 2493, 2251,
	686, 686, 2636, 2350, 1701, 17, 2162, 624, 116, 2346,
	1894, 5, 1764, 2406, 1932, 2000, 1664, 2148, 1907, 1977,
	2178, 2130, 2833, 1685, 1700, 1924, 1455, 1722, 1487, 807,
	107, 1721, 670, 525, 830, 774, 749, 17, 727, 1796,
	1953, 1744, 17, 1707, 725, 1454, 1703, 1696, 1428, 526,
	16, 1635, 113, 1706, 2158, 1660, 1705, 1332, 1632, 522,
	1698, 613, 1341, 730, 1600, 630, 630, 1715, 621, 728,
	583, 671, 514, 534, 835, 1699, 106, 810, 772, 852,
	808, 808, 808, 2954, 1871, 1797, 2953, 1476, 3106, 3096,
	1671, 809, 809, 809, 3017, 820, 3015, 2993, 2993, 1935,
	3001, 2992, 1691, 2728, 2979, 1434, 2963, 2943, 701, 1434,
	2993, 684, 2940, 2980, 855, 1912, 2944, 2880, 2853, 2846,
	2817, 2468, 2790, 2811, 2789, 2788, 2381, 2854, 2847, 2818,
	2717, 2791, 2785, 1434, 1434, 2596, 1601, 684, 2727, 1441,
	855, 2786, 2295, 697, 606, 607, 2381, 2728, 855, 2723,
	2685, 2662, 700, 657, 853, 1442, 2906, 2645, 813, 2468,
	2661, 2593, 1446, 1443, 2733, 1441, 2646, 2626, 2613, 2477,
	1440, 1444, 1439, 1441, 1445, 2476, 2625, 813, 2478, 2341,
	854, 1442, 2467, 2390, 813, 1474, 2106, 1922, 1446, 1442,
	2389, 2468, 2391, 2388, 712, 2085, 2086, 2087, 2088, 2381,
	2382, 2362, 2381, 1959, 2098, 2070, 1895, 2024, 2011, 2381,
	2363, 1917, 684, 1434, 1434, 855, 2025, 2012, 1911, 1902,
	1918, 858, 859, 860, 861, 1860, 1718, 1912, 1434, 1677,
	1673, 707, 1435, 511, 1434, 813, 32, 699, 813, 1434,
	1441, 1434, 2088, 2099, 861, 703, 694, 2013, 2248, 702,
	693, 1892, 1578, 2014, 694, 822, 1442, 1578, 822, 1498,
	811, 811, 3042, 1446, 2884, 684, 2711, 2863, 855, 2840,
	831, 832, 2603, 2552, 2408, 2316, 2395, 2168, 2315, 1468,
	2314, 831, 832, 833, 1746, 1501, 2313, 2140, 855, 2101,
	1958, 1891, 1867, 1441, 829, 3097, 2075, 1865, 1862, 1861,
	1672, 1544, 720, 668, 672, 672, 2082, 2115, 667, 1442,
	2092, 2093, 2094, 1441, 39, 2627, 1446, 2841, 3072, 722,
	1504, 2941, 2806, 2912, 2905, 2870, 2795, 2784, 2700, 684,
	2696, 1962, 855, 2838, 2674, 2667, 865, 866, 867, 2616,
	2578, 2561, 2559, 2558, 2557, 2352, 2472, 2433, 1436, 2370,
	2356, 1437, 2340, 2332, 2142, 1443, 2135, 1441, 1990, 1989,
	1982, 1950, 1440, 1444, 1439, 29, 1445, 1949, 518, 1451,
	1438, 871, 872, 1442, 1905, 1636, 1742, 2082, 1334, 1593,
	1446, 2092, 2093, 2094, 2082, 29, 1523, 1339, 1337, 837,
	822, 824, 26, 2294, 773, 710, 27, 29, 706, 2110,
	2945, 2438, 114, 2121, 1692, 521, 831, 832, 1947, 686,
	2802, 116, 26, 716, 116, 116, 27, 31, 2550, 116,
	512, 2149, 2377, 2275, 26, 2270, 1499, 1496, 27, 2031,
	1475, 2666, 3032, 1449, 2041, 116, 116, 31, 1818, 2673,
	1814, 527, 1494, 1748, 1760, 1747, 660, 544, 2232, 31,
	2764, 517, 537, 540, 542, 1773, 2383, 1532, 577, 578,
	665, 580, 1513, 1512, 684, 2118, 1771, 855, 605, 2942,
	2234, 865, 866, 867, 533, 531, 532, 530, 2810, 609,
	2714, 611, 2712, 1436, 116, 116, 1437, 2033, 1477, 2082,
	1443, 1978, 1441, 2092, 2093, 2094, 855, 1440, 1444, 1439,
	2864, 1445, 2450, 1772, 1507, 1438, 871, 872, 1442, 3009,
	684, 1511, 2263, 855, 1770, 1446, 2260, 865, 866, 867,
	704, 1817, 1529, 2254, 1525, 2169, 2023, 1469, 2020, 1436,
	2019, 2381, 1437, 3033, 2381, 1782, 1443, 1522, 1441, 2231,
	1502, 2282, 2056, 1440, 1444, 1439, 2055, 1445, 522, 522,
	615, 1438, 871, 872, 1442, 2566, 1851, 1850, 1849, 1848,
	684, 1446, 1691, 855, 1500, 1842, 686, 686, 686, 686,
	768, 2381, 1841, 686, 2927, 1833, 753, 1821, 2594, 759,
	1565, 762, 1552, 2594, 684, 804, 799, 855, 1441, 798,
	797, 865, 866, 867, 686, 796, 116, 686, 792, 806,
	817, 813, 684, 1436, 1442, 855, 1457, 791, 1458, 2594,
	1443, 1446, 1441, 790, 789, 1691, 1473, 1440, 1444, 1439,
	788, 1445, 1504, 854, 1485, 1438, 871, 872, 1442, 2850,
	1441, 787, 116, 2074, 615, 1446, 856, 857, 858, 859,
	860, 861, 116, 781, 874, 779, 1442, 814, 116, 778,
	777, 818, 116, 1446, 2160, 116, 776, 1520, 775, 1430,
	771, 780, 856, 857, 858, 859, 860, 861, 1527, 1480,
	856, 857, 858, 859, 860, 861, 116, 1479, 2272, 2037,
	2384, 2034, 834, 2592, 116, 116, 2167, 843, 1467, 2922,
	2424, 116, 116, 116, 116, 2082, 615, 615, 1761, 2092,
	2093, 2094, 2851, 1508, 1433, 2416, 615, 664, 821, 2021,
	1517, 2293, 1789, 686, 1510, 1509, 1466, 2862, 17, 1780,
	1484, 845, 1335, 44, 1775, 1448, 1759, 838, 839, 666,
	37, 842, 592, 1987, 826, 827, 828, 856, 857, 858,
	859, 860, 861, 2155, 116, 686, 1584, 686, 686, 686,
	686, 686, 686, 686, 686, 686, 686, 686, 686, 686,
	686, 1481, 2839, 1506, 686, 2114, 686, 615, 703, 686,
	2409, 2410, 702, 1577, 2966, 1587, 1524, 1338, 2414, 2415,
	1431, 2082, 1582, 2387, 1604, 2092, 2093, 2094, 1343, 2772,
	856, 857, 858, 859, 860, 861, 2876, 2097, 2545, 630,
	2022, 630, 1986, 1516, 1535, 2541, 1580, 1539, 851, 1340,
	856, 857, 858, 859, 860, 861, 529, 687, 2783, 2089,
	2090, 2091, 1493, 1495, 1478, 2564, 630, 2358, 2083, 2084,
	2085, 2086, 2087, 2088, 849, 684, 874, 630, 855, 1478,
	2707, 1521, 2229, 1628, 2179, 862, 863, 864, 2001, 30,
	2678, 1533, 2973, 2186, 856, 857, 858, 859, 860, 861,
	2357, 803, 1450, 1441, 726, 2928, 1881, 1576, 2765, 30,
	1328, 1329, 1330, 1331, 1579, 1598, 2386, 1333, 1478, 1442,
	1478, 30, 25, 1340, 1478, 1478, 1446, 801, 1585, 1478,
	2089, 2090, 2091, 1478, 25, 1478, 2679, 1343, 1427, 2083,
	2084, 2085, 2086, 2087, 2088, 2150, 2083, 2084, 2085, 2086,
	2087, 2088, 1478, 1597, 1980, 1595, 1596, 1586, 2671, 593,
	2344, 2487, 2385, 714, 662, 2929, 1603, 3036, 1491, 718,
	719, 723, 684, 1993, 708, 855, 545, 3006, 836, 865,
	866, 867, 825, 1574, 2630, 848, 3049, 765, 3005, 2273,
	2038, 1436, 2035, 2417, 1437, 2201, 45, 2418, 1443, 1515,
	1441, 2403, 840, 841, 2204, 1440, 1444, 1439, 1638, 1445,
	2490, 874, 2623, 1438, 871, 872, 1442, 594, 3055, 2354,
	862, 863, 864, 1446, 2852, 2962, 2470, 2920, 2530, 856,
	857, 858, 859, 860, 861, 2624, 783, 784, 800, 1910,
	2631, 1994, 2089, 2090, 2091, 3105, 3094, 3104, 3007, 3101,
	3100, 2083, 2084, 2085, 2086, 2087, 2088, 874, 856, 857,
	858, 859, 860, 861, 3080, 1490, 862, 863, 864, 850,
	2642, 3079, 2527, 2860, 3093, 856, 857, 858, 859, 860,
	861, 3063, 3062, 3082, 3085, 3081, 2643, 847, 2547, 672,
	3086, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
	1614, 1615, 1616, 1617, 1618, 3083, 3065, 770, 1621, 3045,
	1627, 3084, 3064, 1631, 3046, 684, 2187, 3099, 855, 3098,
	3048, 3108, 802, 3060, 1971, 856, 857, 858, 859, 860,
	861, 874, 1575, 2402, 2339, 2736, 3033, 2997, 2915, 2914,
	862, 863, 864, 1441, 1996, 661, 1874, 2823, 1429, 856,
	857, 858, 859, 860, 861, 1489, 3029, 546, 43, 1442,
	42, 3054, 2531, 1973, 2828, 2670, 1446, 856, 857, 858,
	859, 860, 861, 2141, 2825, 2188, 1548, 3089, 47, 3067,
	46, 2543, 2955, 2824, 1514, 3066, 3068, 3069, 2830, 2481,
	2826, 2369, 2546, 2641, 2123, 1727, 1518, 1488, 2320, 1497,
	1528, 1716, 3020, 2506, 1531, 3025, 2836, 1534, 2502, 3023,
	21, 3024, 3026, 695, 20, 22, 1970, 2082, 2189, 2742,
	2743, 2092, 2093, 2094, 29, 2465, 2834, 2746, 1555, 2317,
	2634, 2741, 2632, 2081, 1549, 674, 1563, 1564, 2466, 2635,
	2745, 2202, 2497, 1570, 1571, 1572, 1573, 1787, 2089, 2090,
	2091, 26, 2349, 2842, 2843, 27, 2841, 2083, 2084, 2085,
	2086, 2087, 2088, 3053, 2203, 1643, 1909, 23, 686, 1908,
	686, 2542, 3000, 2827, 1682, 1683, 31, 2972, 2499, 2500,
	2518, 2971, 2972, 2519, 2971, 2835, 2520, 1786, 2702, 2703,
	2608, 1788, 105, 2885, 2886, 1906, 1602, 2002, 2721, 715,
	3022, 19, 3027, 1908, 2521, 2720, 2607, 2606, 2464, 3004,
	2605, 2508, 2501, 2544, 2504, 2505, 2507, 2503, 2496, 1785,
	663, 1955, 1956, 33, 34, 35, 36, 26, 610, 2841,
	2911, 27, 1669, 2174, 2089, 2090, 2091, 1688, 1676, 2951,
	3059, 2523, 1745, 2083, 2084, 2085, 2086, 2087, 2088, 1995,
	2001, 2522, 31, 2360, 2793, 2709, 1750, 2153, 1554, 1667,
	1553, 2524, 2952, 1461, 1460, 686, 2131, 686, 686, 2330,
	686, 686, 615, 2126, 2125, 3107, 105, 3092, 3091, 3090,
	3043, 1686, 2215, 1689, 2664, 528, 2970, 1457, 2968, 2926,
	2371, 1712, 1712, 1675, 1746, 1858, 1834, 1729, 1485, 615,
	856, 857, 858, 859, 860, 861, 1680, 1505, 815, 794,
	116, 116, 793, 785, 1485, 1952, 1925, 1930, 1928, 1929,
	1927, 698, 1923, 1926, 1751, 853, 1755, 2329, 1925, 1930,
	1928, 1929, 1927, 1871, 1923, 1926, 2328, 524, 1925, 1930,
	1928, 1929, 1927, 1668, 1923, 1926, 116, 520, 1628, 2813,
	2812, 2217, 2747, 2621, 1740, 750, 2451, 2423, 116, 2129,
	1930, 1928, 1929, 1927, 2420, 2361, 2264, 2261, 116, 1697,
	1465, 696, 116, 1464, 1948, 1726, 2372, 581, 1601, 874,
	523, 1639, 2873, 2601, 1340, 2373, 2598, 2457, 862, 863,
	864, 2525, 2526, 2446, 2440, 107, 2439, 856, 857, 858,
	859, 860, 861, 2280, 2374, 2279, 2274, 630, 2269, 2066,
	2065, 2064, 2063, 2062, 2060, 119, 2059, 2057, 2053, 2052,
	2040, 2039, 2036, 1694, 686, 1968, 548, 1967, 1880, 1843,
	615, 582, 1712, 1878, 1634, 2190, 582, 1783, 582, 1830,
	1637, 106, 597, 1569, 599, 1633, 1634, 1882, 1568, 1567,
	1566, 1738, 1562, 686, 686, 1695, 1561, 1560, 1690, 1559,
	1558, 1557, 1551, 686, 686, 1550, 1547, 686, 686, 1546,
	552, 1717, 1665, 1545, 2216, 552, 589, 1714, 1731, 1543,
	552, 1530, 552, 1526, 1519, 1462, 1866, 1864, 1863, 589,
	589, 1591, 686, 686, 686, 1629, 1590, 1630, 3038, 649,
	649, 1901, 686, 1798, 1620, 3037, 1820, 1804, 1624, 2902,
	1808, 2671, 2754, 1812, 2404, 1623, 1625, 1622, 3016, 1626,
	1619, 2398, 1457, 686, 1873, 552, 552, 1538, 686, 1888,
	1765, 1934, 1934, 550, 1799, 1712, 1934, 1934, 1934, 758,
	856, 857, 858, 859, 860, 861, 1854, 752, 2577, 2207,
	1856, 1985, 1857, 2395, 2586, 1859, 116, 2937, 116, 116,
	116, 1984, 1829, 2695, 1815, 808, 2219, 1868, 1819, 1678,
	111, 1617, 1618, 686, 1621, 1627, 809, 1844, 1845, 2392,
	2365, 1855, 1588, 1667, 1667, 1667, 1745, 1589, 1975, 3,
	112, 1592, 2009, 108, 24, 1594, 2220, 1737, 1730, 2221,
	1470, 1869, 1872, 2222, 1343, 2494, 2576, 2575, 30, 1954,
	2176, 1954, 2006, 688, 695, 2218, 2004, 1879, 1896, 694,
	1974, 25, 519, 1877, 1966, 2223, 24, 1728, 1599, 2003,
	2089, 2090, 2091, 1541, 1537, 844, 726, 819, 1890, 2083,
	2084, 2085, 2086, 2087, 2088, 816, 812, 1936, 805, 1940,
	691, 1713, 1713, 786, 692, 1919, 690, 764, 1897, 1898,
	1903, 761, 757, 2226, 751, 116, 2400, 2399, 659, 2907,
	2816, 2777, 2637, 2584, 2480, 2405, 1452, 1915, 1914, 1432,
	2224, 61, 1899, 1900, 1913, 694, 1939, 3052, 1951, 615,
	2030, 1941, 2026, 2027, 1965, 106, 1938, 2225, 1957, 1937,
	2437, 2435, 686, 3034, 98, 686, 694, 694, 686, 686,
	1979, 686, 686, 686, 695, 2419, 686, 686, 2152, 2877,
	1942, 1972, 2794, 1643, 1997, 2005, 686, 2007, 1999, 1988,
	686, 686, 2888, 2692, 2227, 2376, 1976, 2177, 40, 686,
	1931, 81, 82, 1686, 1639, 1943, 1944, 1945, 80, 1457,
	1992, 754, 2938, 1712, 1763, 2766, 1712, 1875, 1876, 2159,
	41, 2921, 2538, 2535, 2134, 2067, 2185, 1934, 1934, 1934,
	1934, 1934, 1889, 2157, 2195, 2028, 2687, 2163, 1723, 2161,
	686, 686, 1720, 686, 2996, 2342, 3021, 2735, 2831, 2629,
	1485, 2485, 1713, 2165, 2821, 2045, 1665, 1665, 1665, 2050,
	2239, 2479, 2335, 2100, 2724, 1485, 1904, 28, 2604, 2180,
	2463, 1674, 18, 2184, 1459, 110, 109, 1667, 2184, 2815,
	2184, 2198, 1735, 1736, 115, 669, 2656, 1916, 2032, 1998,
	2647, 2758, 1920, 2509, 2351, 2235, 2498, 2068, 2151, 2071,
	2069, 2042, 38, 2197, 2323, 2211, 2228, 2104, 2105, 2107,
	17, 1463, 2103, 2348, 2347, 17, 17, 526, 1781, 2744,
	2740, 2739, 2116, 2117, 2193, 2113, 1679, 2345, 2246, 1693,
	1803, 2240, 1447, 2120, 2170, 713, 2119, 1981, 15, 2111,
	1816, 2112, 2245, 14, 13, 2122, 12, 2166, 11, 2164,
	2132, 2133, 2128, 1713, 10, 1713, 9, 8, 7, 6,
	2192, 1645, 2194, 2241, 1893, 686, 686, 2243, 1658, 1336,
	823, 643, 686, 2145, 686, 686, 686, 686, 686, 686,
	686, 686, 686, 686, 686, 686, 2199, 642, 686, 645,
	686, 2156, 644, 686, 552, 630, 1666, 686, 2124, 1639,
	651, 2127, 2175, 629, 628, 2198, 627, 626, 625, 683,
	679, 2297, 686, 2230, 2212, 2213, 1712, 1712, 2321, 2233,
	1712, 547, 1639, 2256, 1784, 2237, 2008, 2029, 1790, 2708,
	709, 1934, 886, 550, 1471, 2515, 2136, 2137, 2138, 2139,
	883, 4, 2, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1485, 615,
	1340, 0, 0, 0, 630, 0, 2072, 1485, 0, 2073,
	2378, 0, 0, 0, 0, 2078, 2079, 2080, 0, 0,
	0, 0, 0, 0, 1667, 0, 0, 0, 1667, 0,
	1665, 686, 0, 0, 2108, 2109, 0, 2290, 1765, 0,
	2253, 0, 0, 672, 0, 686, 0, 0, 0, 0,
	2199, 0, 0, 0, 0, 0, 0, 0, 2380, 2312,
	0, 0, 0, 2103, 0, 0, 2366, 0, 1960, 2333,
	1963, 1964, 0, 0, 2271, 2368, 0, 0, 2337, 2276,
	0, 0, 0, 0, 0, 2146, 0, 2147, 0, 0,
	0, 552, 552, 552, 552, 2334, 0, 0, 552, 0,
	0, 2428, 0, 0, 2367, 0, 0, 0, 0, 2353,
	0, 0, 0, 1713, 2396, 0, 1713, 0, 1345, 552,
	0, 0, 552, 0, 686, 686, 686, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	0, 2325, 2326, 0, 2375, 2331, 0, 2413, 2427, 2355,
	2407, 0, 2421, 2422, 630, 0, 0, 0, 0, 0,
	686, 1712, 0, 2412, 2429, 0, 0, 0, 0, 0,
	686, 686, 686, 0, 2407, 0, 0, 2058, 0, 2443,
	0, 1713, 2443, 2425, 2426, 0, 0, 116, 2430, 0,
	0, 0, 2533, 0, 2165, 0, 0, 2445, 0, 0,
	116, 2198, 116, 0, 0, 2431, 2432, 0, 0, 2291,
	2292, 0, 2562, 0, 0, 0, 2296, 0, 0, 0,
	0, 0, 2198, 1643, 0, 615, 615, 1345, 0, 0,
	0, 0, 2310, 649, 2311, 649, 0, 1665, 552, 0,
	0, 1665, 0, 0, 2197, 0, 0, 2514, 2513, 0,
	0, 1752, 2471, 0, 615, 615, 2322, 0, 0, 2458,
	649, 0, 0, 2462, 1643, 0, 2475, 2555, 0, 0,
	552, 649, 552, 552, 552, 552, 552, 552, 552, 552,
	552, 552, 552, 552, 552, 552, 2528, 2495, 0, 552,
	2164, 552, 2553, 2246, 552, 2492, 2240, 2512, 1345, 2198,
	2609, 2572, 2573, 2569, 2491, 1713, 2199, 2245, 2560, 550,
	2534, 2588, 2619, 2565, 686, 2567, 1713, 1713, 2595, 686,
	1713, 2610, 0, 0, 0, 686, 2568, 2199, 0, 0,
	2580, 2581, 2243, 1713, 0, 2397, 2556, 0, 0, 0,
	0, 0, 0, 0, 2587, 2659, 2474, 0, 0, 2411,
	2579, 0, 0, 0, 0, 0, 2582, 2583, 0, 0,
	630, 2551, 0, 0, 0, 0, 553, 0, 0, 2443,
	615, 0, 0, 0, 0, 0, 686, 116, 2511, 0,
	0, 2665, 0, 0, 2600, 0, 0, 0, 0, 686,
	686, 0, 0, 0, 0, 0, 2672, 116, 2660, 0,
	0, 2615, 2644, 2620, 2199, 2658, 2612, 2614, 0, 686,
	0, 0, 0, 0, 2337, 17, 0, 615, 0, 0,
	0, 0, 2611, 2704, 0, 0, 0, 591, 2459, 2460,
	2461, 2648, 0, 0, 0, 0, 2184, 0, 0, 1457,
	591, 591, 2649, 2681, 0, 2638, 2669, 2726, 2639, 2640,
	0, 2690, 2691, 0, 0, 0, 686, 0, 0, 2689,
	2693, 2737, 0, 120, 2473, 2686, 2677, 0, 2682, 2697,
	0, 2699, 2184, 2716, 2184, 0, 2489, 0, 2684, 0,
	0, 0, 2680, 2722, 0, 0, 0, 0, 2729, 2705,
	0, 0, 116, 2710, 1883, 1887, 0, 0, 2768, 0,
	0, 0, 0, 0, 0, 686, 0, 2761, 0, 0,
	0, 0, 2713, 0, 0, 0, 0, 2776, 2719, 0,
	0, 1713, 0, 0, 590, 0, 0, 2184, 0, 0,
	2748, 1643, 2749, 2750, 2751, 0, 0, 590, 590, 2798,
	686, 630, 2732, 2731, 0, 0, 2658, 0, 2683, 0,
	0, 0, 0, 0, 2752, 2814, 2755, 0, 0, 2619,
	2757, 1713, 0, 0, 686, 2778, 0, 686, 0, 618,
	0, 0, 0, 2771, 0, 2780, 2773, 2774, 0, 0,
	0, 0, 1713, 0, 2781, 2184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2819, 0, 0, 0, 515,
	515, 686, 0, 2769, 2848, 2803, 678, 0, 0, 2796,
	0, 2800, 0, 0, 0, 2198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2865, 2797, 579, 2799, 2633,
	2855, 2856, 2883, 595, 2820, 598, 2869, 600, 601, 602,
	603, 604, 2893, 2184, 2184, 608, 0, 2896, 630, 2726,
	0, 0, 619, 2734, 686, 686, 0, 0, 686, 1713,
	0, 0, 0, 0, 2867, 0, 1457, 2844, 2875, 1713,
	1686, 2866, 2511, 2881, 2889, 0, 0, 2779, 2909, 0,
	0, 2871, 2890, 2891, 0, 2768, 615, 615, 2689, 2872,
	2874, 0, 2887, 2882, 0, 686, 0, 2897, 2899, 2516,
	0, 2198, 2858, 2859, 2898, 2917, 2919, 2904, 2932, 0,
	2908, 2910, 2554, 2706, 2934, 0, 0, 0, 2913, 0,
	2199, 2916, 0, 2939, 0, 2894, 2895, 0, 2930, 0,
	0, 0, 0, 0, 0, 0, 2958, 686, 0, 2076,
	2077, 2658, 0, 686, 0, 0, 2946, 2095, 2096, 0,
	2933, 0, 0, 552, 0, 552, 2948, 0, 0, 2947,
	2935, 0, 2918, 2918, 0, 0, 2950, 2960, 1884, 1884,
	0, 2252, 686, 0, 0, 0, 2868, 2975, 0, 2977,
	2974, 2969, 2965, 2988, 2989, 2990, 2619, 2967, 2978, 0,
	2769, 0, 0, 0, 0, 2987, 615, 2981, 0, 0,
	2246, 2998, 2999, 2240, 2984, 2964, 2199, 2991, 0, 2775,
	3012, 2198, 0, 0, 2245, 3002, 0, 3010, 2985, 2976,
	3008, 2879, 2986, 3011, 2958, 0, 0, 2995, 0, 0,
	0, 0, 0, 3013, 2982, 3014, 0, 0, 0, 2243,
	3035, 3031, 3028, 0, 2807, 0, 0, 0, 0, 0,
	552, 686, 552, 552, 3039, 552, 552, 0, 1713, 3040,
	3041, 0, 0, 0, 0, 2215, 0, 630, 0, 0,
	0, 2146, 2918, 3050, 3051, 0, 552, 552, 3056, 3057,
	630, 0, 0, 3058, 0, 0, 0, 3071, 3070, 2676,
	3076, 3075, 0, 3078, 3074, 0, 0, 0, 0, 0,
	0, 649, 0, 2958, 0, 2857, 3088, 3087, 0, 2698,
	0, 0, 0, 0, 0, 0, 2199, 0, 0, 3078,
	1345, 0, 3095, 0, 0, 0, 0, 0, 2958, 0,
	3103, 3102, 0, 2961, 2217, 589, 0, 0, 0, 1345,
	0, 0, 0, 0, 0, 2298, 2299, 2300, 2301, 2302,
	2303, 2304, 2305, 2306, 2307, 2308, 2309, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 589, 2252, 0,
	2879, 0, 0, 0, 2252, 1713, 0, 0, 0, 2252,
	2252, 0, 589, 589, 0, 0, 0, 0, 0, 0,
	0, 2252, 2252, 0, 1345, 0, 0, 0, 0, 2931,
	0, 0, 0, 0, 2762, 0, 0, 2434, 2436, 552,
	0, 0, 0, 1884, 1884, 0, 0, 552, 0, 0,
	0, 1884, 1884, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 552,
	0, 2146, 0, 0, 0, 1713, 0, 684, 552, 552,
	855, 2540, 552, 552, 865, 866, 867, 2216, 0, 2539,
	2545, 1713, 0, 0, 0, 0, 0, 2541, 0, 1347,
	0, 0, 0, 1443, 0, 1441, 0, 552, 552, 552,
	1440, 1444, 1439, 515, 1445, 2143, 0, 552, 1438, 871,
	872, 1442, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 0,
	0, 0, 0, 552, 0, 0, 0, 0, 552, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2215, 0, 0, 0, 2536,
	0, 0, 0, 2208, 0, 0, 0, 0, 0, 2219,
	0, 0, 2214, 0, 0, 3044, 0, 0, 552, 0,
	0, 0, 782, 0, 0, 0, 1346, 2434, 2436, 0,
	0, 1713, 2434, 2436, 0, 795, 0, 2252, 1347, 2220,
	0, 0, 2221, 2252, 2252, 0, 2222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2252, 0, 2218, 0,
	0, 0, 0, 2215, 2217, 0, 0, 0, 2223, 1345,
	1345, 1345, 0, 0, 0, 0, 0, 0, 0, 1884,
	1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884,
	1884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 734, 2226, 0, 0, 1347,
	735, 0, 0, 0, 744, 0, 0, 0, 0, 0,
	0, 0, 0, 2224, 0, 0, 0, 0, 0, 2252,
	0, 0, 2217, 0, 2548, 1346, 0, 515, 0, 878,
	2225, 0, 0, 0, 0, 0, 0, 552, 0, 0,
	552, 0, 0, 552, 552, 0, 552, 552, 552, 0,
	0, 552, 552, 0, 0, 0, 0, 0, 0, 0,
	2547, 552, 0, 0, 0, 552, 552, 2227, 737, 878,
	0, 0, 0, 0, 552, 0, 0, 2216, 0, 0,
	0, 0, 0, 2549, 0, 0, 0, 0, 552, 0,
	1542, 552, 0, 0, 2179, 0, 1346, 743, 0, 0,
	2628, 0, 0, 734, 0, 0, 1556, 0, 735, 0,
	2205, 0, 744, 0, 0, 552, 552, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 2949, 0, 748, 0,
	0, 0, 0, 1581, 0, 0, 1583, 0, 0, 2209,
	0, 0, 0, 0, 0, 2216, 0, 0, 0, 0,
	0, 0, 2207, 2543, 0, 0, 552, 2675, 0, 0,
	0, 0, 0, 0, 2546, 0, 0, 0, 0, 2219,
	0, 733, 0, 0, 0, 0, 737, 0, 1345, 649,
	1345, 0, 731, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 0, 0, 0, 0, 0, 2787, 738, 2220,
	0, 0, 2221, 0, 0, 743, 2222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2218, 0,
	0, 0, 0, 0, 0, 2482, 1884, 0, 2223, 0,
	0, 732, 0, 740, 0, 0, 748, 2219, 0, 739,
	552, 552, 0, 2542, 0, 0, 0, 552, 649, 552,
	552, 552, 552, 552, 552, 552, 552, 552, 552, 552,
	552, 0, 0, 552, 0, 552, 2226, 2220, 552, 0,
	2221, 0, 552, 0, 2222, 0, 0, 0, 0, 733,
	552, 0, 0, 2224, 741, 2544, 2218, 552, 0, 0,
	731, 552, 552, 0, 0, 552, 2223, 0, 0, 0,
	2225, 0, 2210, 1978, 874, 0, 738, 0, 552, 0,
	0, 0, 0, 862, 863, 864, 0, 0, 0, 0,
	0, 0, 856, 857, 858, 859, 860, 861, 0, 742,
	0, 0, 0, 0, 2226, 0, 0, 2227, 0, 732,
	745, 740, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 2224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 552, 0, 2225, 2622,
	0, 0, 0, 1800, 1884, 747, 746, 0, 0, 0,
	552, 649, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 1504, 0, 0, 649, 0,
	0, 0, 0, 0, 0, 2227, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 589, 89, 0,
	589, 1884, 0, 0, 0, 2900, 2901, 742, 0, 2903,
	0, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 736, 2252, 0, 0, 0, 0, 0, 552,
	552, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 729, 750, 747, 746, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 552, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 552, 552, 552, 0, 0,
	0, 1884, 0, 0, 0, 0, 0, 0, 1345, 0,
	0, 684, 0, 0, 855, 0, 0, 0, 865, 866,
	867, 0, 0, 0, 0, 0, 552, 0, 95, 0,
	1436, 0, 0, 1437, 0, 0, 0, 1443, 0, 1441,
	0, 0, 0, 0, 1440, 1444, 1439, 552, 1445, 0,
	736, 0, 1438, 871, 872, 1442, 0, 0, 0, 91,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 649, 84, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 589, 0, 2829,
	97, 1347, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 552, 0, 591, 0, 0, 0,
	1347, 0, 0, 0, 552, 0, 0, 0, 0, 552,
	0, 85, 0, 0, 552, 0, 0, 0, 0, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 0, 0, 0, 0, 2657, 0, 0,
	0, 0, 0, 591, 591, 878, 878, 878, 878, 0,
	878, 0, 0, 0, 0, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1884,
	1884, 552, 0, 1884, 0, 0, 0, 0, 1346, 102,
	0, 0, 0, 589, 552, 552, 0, 1345, 79, 0,
	0, 99, 0, 590, 0, 0, 0, 1346, 0, 0,
	0, 0, 0, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 0, 100, 0,
	589, 0, 0, 87, 0, 590, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 590, 93, 0, 878, 649, 0, 0, 0, 0,
	0, 552, 1346, 1345, 0, 1732, 1733, 1734, 94, 0,
	0, 0, 0, 0, 104, 0, 1741, 0, 83, 0,
	0, 0, 1345, 0, 1753, 0, 1757, 1758, 2657, 0,
	0, 0, 1762, 0, 88, 1766, 1767, 0, 0, 1774,
	0, 1776, 1779, 552, 0, 0, 0, 0, 0, 0,
	552, 0, 0, 0, 0, 1801, 1802, 0, 0, 1806,
	1807, 0, 1810, 1811, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1822, 0, 1823, 1824, 1825, 1826, 1827,
	1828, 0, 0, 1831, 1832, 552, 0, 1835, 1836, 1837,
	1838, 1839, 1840, 0, 0, 0, 0, 0, 1846, 1847,
	0, 0, 649, 0, 1852, 1853, 0, 684, 0, 552,
	855, 0, 552, 0, 865, 866, 867, 0, 0, 0,
	1347, 1347, 1347, 0, 0, 0, 1436, 0, 0, 1437,
	0, 0, 0, 1443, 0, 1441, 0, 0, 0, 0,
	1440, 1444, 1439, 0, 1445, 0, 552, 0, 1438, 871,
	872, 1442, 0, 0, 0, 0, 0, 0, 1446, 0,
	552, 0, 589, 0, 0, 0, 0, 1345, 0, 0,
	0, 1345, 878, 878, 878, 878, 878, 878, 878, 878,
	878, 878, 878, 878, 878, 878, 0, 0, 878, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 878, 552,
	552, 0, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 1346, 1346,
	0, 0, 0, 2657, 0, 0, 0, 0, 0, 0,
	552, 0, 878, 0, 0, 0, 0, 0, 874, 0,
	552, 0, 0, 0, 0, 878, 552, 862, 863, 864,
	0, 0, 0, 0, 2804, 0, 856, 857, 858, 859,
	860, 861, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1991, 0, 552, 1345, 0, 0, 0, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2015, 2016, 2017, 2018, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 552, 0, 0,
	1345, 649, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 649, 0, 0, 0, 0, 1347,
	0, 1347, 0, 0, 2043, 2044, 0, 2047, 2048, 2049,
	0, 0, 1347, 0, 0, 0, 552, 0, 0, 0,
	2054, 0, 0, 0, 0, 0, 0, 0, 0, 684,
	0, 0, 855, 2061, 0, 0, 865, 866, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 1437, 0, 0, 0, 1443, 552, 1441, 0, 0,
	0, 0, 1440, 1444, 1439, 0, 1445, 0, 0, 2349,
	1438, 871, 872, 1442, 0, 0, 0, 0, 684, 0,
	1446, 855, 0, 0, 0, 865, 866, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1436, 1346, 0,
	1437, 0, 878, 878, 1443, 0, 1441, 0, 0, 1346,
	0, 1440, 1444, 1439, 0, 1445, 878, 0, 0, 1438,
	871, 872, 1442, 0, 0, 0, 0, 0, 0, 1446,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 684, 878, 0, 855,
	0, 0, 0, 865, 866, 867, 2171, 2172, 2173, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 1437, 0,
	0, 0, 1443, 0, 1441, 0, 2191, 0, 0, 1440,
	1444, 1439, 0, 1445, 0, 0, 0, 1438, 871, 872,
	1442, 0, 0, 0, 0, 0, 2236, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 2255, 0, 0, 0, 0, 0, 0, 0,
	0, 2257, 2258, 2259, 0, 0, 2262, 0, 0, 2265,
	2266, 2267, 2268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2277, 2278, 0, 0, 0, 2281, 591, 2283,
	2284, 591, 2285, 2286, 2287, 2288, 2289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 874, 0, 0, 0, 0, 0,
	0, 0, 0, 862, 863, 864, 0, 0, 0, 0,
	2574, 0, 856, 857, 858, 859, 860, 861, 0, 878,
	878, 0, 0, 0, 0, 878, 878, 878, 0, 0,
	0, 0, 0, 2324, 0, 0, 0, 0, 684, 0,
	0, 855, 0, 0, 0, 865, 866, 867, 0, 0,
	0, 0, 0, 0, 0, 878, 878, 1436, 0, 1347,
	1437, 0, 0, 0, 1443, 590, 1441, 0, 590, 0,
	0, 1440, 1444, 1439, 0, 1445, 0, 0, 0, 1438,
	871, 872, 1442, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 878, 878, 0, 0, 0, 0, 0,
	684, 0, 0, 855, 0, 0, 0, 865, 866, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 1437, 0, 0, 0, 1443, 0, 1441, 0,
	0, 0, 0, 1440, 1444, 1439, 0, 1445, 0, 0,
	0, 1438, 871, 872, 1442, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 1346, 0, 591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 684,
	2441, 0, 855, 2444, 0, 0, 865, 866, 867, 2447,
	2448, 2449, 0, 0, 2452, 2453, 2454, 0, 1436, 2455,
	2456, 1437, 0, 0, 0, 1443, 0, 1441, 0, 0,
	0, 0, 1440, 1444, 1439, 0, 1445, 0, 0, 0,
	1438, 871, 872, 1442, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2469, 0, 0, 0, 0, 0, 0, 0, 878, 878,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 874, 878, 878, 0,
	0, 0, 0, 0, 591, 862, 863, 864, 1347, 878,
	2532, 0, 0, 0, 856, 857, 858, 859, 860, 861,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 735, 0, 0, 0, 744, 0, 0, 0, 0,
	0, 591, 734, 0, 2344, 874, 0, 735, 0, 0,
	0, 744, 0, 0, 862, 863, 864, 0, 0, 0,
	0, 0, 0, 856, 857, 858, 859, 860, 861, 0,
	0, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 2589,
	2590, 0, 0, 1347, 0, 0, 2597, 0, 878, 737,
	2599, 590, 0, 0, 0, 1346, 0, 2602, 0, 0,
	0, 0, 0, 874, 0, 737, 0, 0, 0, 0,
	0, 0, 862, 863, 864, 0, 0, 0, 743, 2182,
	0, 856, 857, 858, 859, 860, 861, 0, 590, 0,
	0, 0, 0, 0, 743, 0, 878, 878, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 734, 748,
	878, 0, 0, 735, 0, 0, 0, 744, 0, 0,
	0, 1346, 0, 0, 0, 748, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2668, 0, 0, 0,
	1346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 756, 0, 0, 0, 0, 733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 738,
	0, 737, 0, 591, 0, 0, 0, 0, 1347, 0,
	0, 734, 1347, 0, 0, 738, 735, 0, 2715, 0,
	744, 2718, 0, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 740, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	740, 2738, 0, 0, 0, 874, 739, 0, 0, 0,
	0, 748, 0, 0, 862, 863, 864, 0, 0, 1670,
	0, 0, 0, 856, 857, 858, 859, 860, 861, 0,
	0, 0, 0, 0, 737, 741, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 741, 0, 0, 733, 1346, 0, 0, 0, 1346,
	0, 0, 0, 743, 0, 0, 0, 874, 0, 0,
	0, 0, 0, 0, 1347, 0, 862, 863, 864, 0,
	742, 738, 2808, 1640, 2809, 856, 857, 858, 859, 860,
	861, 745, 0, 0, 748, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 1347, 0, 878, 0, 0, 740, 0, 0, 0,
	0, 0, 739, 0, 755, 0, 747, 746, 0, 0,
	0, 0, 0, 0, 2849, 0, 874, 733, 0, 0,
	2051, 0, 747, 746, 0, 862, 863, 864, 0, 0,
	0, 0, 0, 0, 856, 857, 858, 859, 860, 861,
	0, 0, 0, 0, 738, 0, 0, 741, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 0, 0,
	2892, 0, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 740,
	0, 0, 0, 736, 0, 739, 0, 0, 1346, 0,
	0, 0, 742, 0, 878, 0, 0, 0, 0, 736,
	0, 0, 0, 745, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 750,
	741, 0, 0, 0, 0, 0, 2046, 0, 747, 746,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 0, 2983, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 878, 1813,
	0, 747, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 736, 0,
	0, 0, 0, 0, 3073, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 750, 0,
	0, 878, 1349, 131, 1355, 148, 557, 1365, 198, 235,
	457, 1352, 1397, 297, 1402, 350, 354, 1426, 448, 1359,
	1362, 1372, 1375, 206, 1380, 562, 1388, 568, 1398, 574,
	1417, 423, 1423, 564, 565, 570, 136, 494, 447, 266,
	1411, 1357, 1415, 304, 1408, 1384, 1424, 1401, 1413, 1394,
	1399, 0, 144, 1386, 1387, 1391, 1400, 566, 563, 567,
	573, 561, 571, 558, 569, 1421, 341, 274, 0, 498,
	370, 143, 190, 177, 219, 261, 378, 1356, 1374, 251,
	427, 186, 276, 1407, 165, 310, 1420, 402, 273, 1414,
	385, 405, 1376, 294, 171, 333, 392, 393, 555, 560,
	1364, 576, 1351, 175, 176, 299, 157, 307, 510, 475,
	363, 320, 318, 1382, 285, 342, 505, 1354, 0, 205,
	0, 200, 298, 442, 163, 421, 336, 303, 255, 366,
	397, 202, 187, 188, 231, 335, 221, 173, 432, 472,
	476, 474, 470, 467, 471, 468, 469, 473, 222, 466,
	0, 440, 450, 484, 464, 492, 449, 489, 459, 197,
	488, 453, 452, 499, 479, 480, 433, 495, 465, 463,
	456, 455, 451, 1422, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 132, 1350, 133, 134, 135, 137,
	138, 139, 554, 140, 141, 142, 145, 146, 147, 149,
	150, 151, 152, 153, 154, 155, 156, 454, 556, 158,
	159, 160, 161, 162, 164, 166, 167, 168, 169, 170,
	172, 174, 1366, 1367, 1368, 559, 1369, 1370, 1371, 178,
	179, 180, 181, 182, 183, 1373, 184, 185, 189, 191,
	192, 193, 194, 195, 196, 199, 1377, 201, 203, 1378,
	204, 207, 1379, 208, 209, 210, 211, 212, 213, 214,
	215, 458, 216, 1381, 217, 218, 220, 1383, 223, 224,
	225, 226, 227, 1385, 228, 460, 461, 229, 230, 232,
	233, 234, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 1389, 248, 249, 250, 252, 1390,
	253, 254, 257, 258, 259, 260, 1392, 262, 477, 1393,
	263, 264, 265, 1395, 1396, 267, 268, 269, 270, 271,
	272, 275, 478, 277, 278, 279, 280, 281, 282, 283,
	284, 286, 287, 288, 289, 290, 291, 292, 481, 482,
	293, 295, 296, 483, 485, 486, 572, 311, 312, 313,
	314, 315, 316, 317, 319, 1404, 321, 322, 323, 487,
	324, 325, 326, 327, 1405, 328, 329, 330, 331, 332,
	334, 337, 338, 339, 340, 1406, 343, 344, 345, 346,
	347, 348, 349, 351, 352, 353, 355, 356, 357, 358,
	359, 360, 361, 362, 490, 364, 365, 367, 368, 369,
	371, 372, 373, 374, 375, 376, 377, 1409, 379, 491,
	380, 381, 382, 383, 384, 1410, 386, 387, 388, 389,
	390, 391, 394, 395, 396, 398, 399, 493, 400, 401,
	1412, 403, 404, 575, 406, 407, 408, 409, 410, 1416,
	411, 412, 496, 413, 497, 414, 415, 416, 417, 418,
	419, 420, 422, 1418, 1419, 424, 425, 426, 428, 429,
	430, 431, 434, 435, 436, 437, 438, 1425, 439, 441,
	443, 444, 500, 501, 502, 503, 504, 506, 507, 508,
	509, 445, 446, 462, 308, 302, 256, 300, 301, 305,
	306, 309, 1403, 1353, 1358, 1360, 1361, 1363, 0, 0,
	0, 0, 0, 0, 0, 0, 885, 0, 0, 0,
	0, 0, 0, 684, 0, 0, 855, 0, 0, 1342,
	865, 866, 867, 896, 898, 882, 925, 946, 0, 997,
	1043, 1013, 868, 1130, 1136, 869, 1197, 1201, 0, 879,
	927, 876, 977, 992, 1007, 1019, 875, 880, 873, 1134,
	881, 1278, 1289, 1309, 870, 871, 872, 877, 1270, 1327,
	1096, 1255, 907, 0, 884, 1221, 0, 0, 1144, 1259,
	0, 0, 0, 921, 0, 0, 0, 0, 1069, 1058,
	1092, 1205, 1030, 1150, 958, 1117, 1295, 1187, 1106, 0,
	1301, 1219, 920, 986, 970, 1022, 1087, 1228, 903, 987,
	1062, 1293, 982, 1108, 0, 949, 1152, 1294, 1257, 1105,
	1268, 1238, 1263, 993, 1131, 956, 1178, 1245, 1246, 916,
	1029, 951, 1304, 901, 961, 969, 1139, 940, 1147, 1325,
	1079, 1212, 1162, 1160, 0, 1119, 1188, 1320, 0, 0,
	1006, 0, 1000, 1138, 1312, 947, 1286, 1181, 1143, 1081,
	1215, 1250, 1002, 983, 984, 1040, 1180, 1025, 959, 1300,
	1076, 1080, 1078, 1074, 1071, 1075, 1072, 1073, 1077, 1027,
	1070, 0, 0, 917, 1137, 1065, 1235, 915, 1184, 1023,
	996, 0, 0, 0, 1302, 1116, 1118, 0, 1271, 1066,
	1064, 975, 974, 918, 1303, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 897, 899, 900, 904, 905, 906,
	908, 909, 910, 911, 912, 913, 914, 922, 923, 924,
	926, 929, 930, 931, 933, 934, 935, 936, 937, 938,
	941, 942, 943, 944, 945, 948, 950, 952, 953, 954,
	955, 957, 960, 962, 963, 964, 965, 966, 967, 968,
	971, 972, 0, 973, 976, 978, 979, 980, 981, 985,
	988, 989, 990, 991, 994, 995, 998, 999, 1001, 1003,
	1004, 1005, 1008, 0, 1009, 1010, 1011, 1012, 1014, 1015,
	1016, 1017, 1018, 1020, 0, 0, 1021, 1024, 1026, 1028,
	1031, 1032, 1033, 1034, 0, 1035, 1036, 1037, 1038, 1039,
	1041, 0, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1063,
	0, 1067, 1068, 1083, 1084, 1085, 1086, 1088, 1090, 1091,
	1089, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1107, 1109, 1110, 0, 1111, 1112, 0, 1113,
	1114, 1115, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, 1132, 1133, 1135, 1149, 1151, 0, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1161, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1179, 1182, 1183, 1185, 1186, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1198, 1199, 1200, 1202, 1203, 1204,
	1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1216, 1217,
	1218, 0, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1230,
	1229, 1231, 1232, 1233, 1234, 1236, 1237, 1239, 1240, 1241,
	1242, 1243, 1244, 1247, 1248, 1249, 1251, 1252, 1253, 1254,
	1256, 1258, 1260, 1262, 1261, 1264, 1265, 1266, 1267, 1269,
	1272, 1273, 1274, 1275, 1276, 1277, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1287, 0, 1288, 1290, 1291, 1292, 1296,
	1297, 1298, 1299, 1305, 1306, 1307, 1308, 1310, 0, 0,
	1311, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1321, 1322,
	1323, 1324, 0, 1326, 1059, 1148, 1142, 1082, 1140, 1141,
	1145, 1146, 0, 0, 902, 919, 928, 932, 939, 0,
	874, 0, 0, 0, 0, 0, 0, 1344, 0, 862,
	863, 864, 0, 0, 0, 0, 0, 0, 856, 857,
	858, 859, 860, 861, 1349, 131, 1355, 148, 557, 1365,
	198, 235, 457, 1352, 1397, 297, 1402, 350, 354, 1426,
	448, 1359, 1362, 1372, 1375, 206, 1380, 562, 1388, 568,
	1398, 574, 1417, 423, 1423, 564, 565, 570, 136, 494,
	447, 266, 1411, 1357, 1415, 304, 1408, 1384, 1424, 1401,
	1413, 1394, 1399, 0, 144, 1386, 1387, 1391, 1400, 566,
	563, 567, 573, 561, 571, 558, 569, 1421, 341, 274,
	0, 498, 370, 143, 190, 177, 219, 261, 378, 1356,
	1374, 251, 427, 186, 276, 1407, 165, 310, 1420, 402,
	273, 1414, 385, 405, 1376, 294, 171, 333, 392, 393,
	555, 560, 1364, 576, 1351, 175, 176, 299, 157, 307,
	510, 475, 363, 320, 318, 1382, 285, 342, 505, 1354,
	0, 205, 0, 200, 298, 442, 163, 421, 336, 303,
	255, 366, 397, 202, 187, 188, 231, 335, 221, 173,
	432, 472, 476, 474, 470, 467, 471, 468, 469, 473,
	222, 466, 0, 440, 450, 484, 464, 492, 449, 489,
	459, 197, 488, 453, 452, 499, 479, 480, 433, 495,
	465, 463, 456, 455, 451, 1422, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 132, 1350, 133, 134,
	135, 137, 138, 139, 554, 140, 141, 142, 145, 146,
	147, 149, 150, 151, 152, 153, 154, 155, 156, 454,
	556, 158, 159, 160, 161, 162, 164, 166, 167, 168,
	169, 170, 172, 174, 1366, 1367, 1368, 559, 1369, 1370,
	1371, 178, 179, 180, 181, 182, 183, 1373, 184, 185,
	189, 191, 192, 193, 194, 195, 196, 199, 1377, 201,
	203, 1378, 204, 207, 1379, 208, 209, 210, 211, 212,
	213, 214, 215, 458, 216, 1381, 217, 218, 220, 1383,
	223, 224, 225, 226, 227, 1385, 228, 460, 461, 229,
	230, 232, 233, 234, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 1389, 248, 249, 250,
	252, 1390, 253, 254, 257, 258, 259, 260, 1392, 262,
	477, 1393, 263, 264, 265, 1395, 1396, 267, 268, 269,
	270, 271, 272, 275, 478, 277, 278, 279, 280, 281,
	282, 283, 284, 286, 287, 288, 289, 290, 291, 292,
	481, 482, 293, 295, 296, 483, 485, 486, 572, 311,
	312, 313, 314, 315, 316, 317, 319, 1404, 321, 322,
	323, 487, 324, 325, 326, 327, 1405, 328, 329, 330,
	331, 332, 334, 337, 338, 339, 340, 1406, 343, 344,
	345, 346, 347, 348, 349, 351, 352, 353, 355, 356,
	357, 358, 359, 360, 361, 362, 490, 364, 365, 367,
	368, 369, 371, 372, 373, 374, 375, 376, 377, 1409,
	379, 491, 380, 381, 382, 383, 384, 1410, 386, 387,
	388, 389, 390, 391, 394, 395, 396, 398, 399, 493,
	400, 401, 1412, 403, 404, 575, 406, 407, 408, 409,
	410, 1416, 411, 412, 496, 413, 497, 414, 415, 416,
	417, 418, 419, 420, 422, 1418, 1419, 424, 425, 426,
	428, 429, 430, 431, 434, 435, 436, 437, 438, 1425,
	439, 441, 443, 444, 500, 501, 502, 503, 504, 506,
	507, 508, 509, 445, 446, 462, 308, 302, 256, 300,
	301, 305, 306, 309, 1403, 1353, 1358, 1360, 1361, 1363,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 131, 1355,
	148, 557, 1365, 1795, 235, 457, 1352, 1397, 297, 1402,
	350, 354, 1426, 448, 1359, 1362, 1372, 1375, 206, 1380,
	562, 1388, 568, 1398, 574, 1417, 423, 1423, 564, 565,
	570, 136, 494, 447, 266, 1411, 1357, 1415, 304, 1408,
	1384, 1424, 1401, 1413, 1394, 1399, 0, 144, 1386, 1387,
	1391, 1400, 566, 563, 567, 573, 561, 571, 558, 569,
	1421, 341, 274, 0, 498, 370, 143, 190, 177, 219,
	261, 1793, 1356, 1374, 251, 427, 186, 276, 1407, 165,
	310, 1420, 402, 273, 1414, 385, 405, 1376, 294, 171,
	333, 392, 393, 555, 560, 1364, 576, 1351, 175, 176,
	299, 157, 307, 510, 475, 363, 320, 318, 1382, 285,
	342, 505, 1354, 0, 205, 0, 200, 298, 442, 163,
	421, 336, 303, 255, 366, 397, 202, 187, 188, 231,
	335, 221, 173, 432, 472, 476, 474, 470, 467, 471,
	468, 469, 473, 222, 466, 0, 440, 450, 484, 464,
	492, 449, 489, 459, 197, 488, 453, 452, 499, 479,
	480, 433, 495, 465, 463, 456, 455, 451, 1422, 121,
	122, 123, 124, 125, 1794, 127, 128, 129, 130, 132,
	1350, 133, 134, 135, 137, 138, 139, 554, 140, 141,
	142, 145, 146, 147, 149, 150, 151, 152, 153, 154,
	155, 156, 454, 556, 158, 159, 160, 161, 162, 164,
	166, 167, 168, 169, 170, 172, 174, 1366, 1367, 1368,
	559, 1369, 1370, 1371, 178, 179, 180, 181, 182, 183,
	1373, 184, 185, 189, 191, 192, 193, 194, 195, 196,
	199, 1377, 201, 203, 1378, 204, 207, 1379, 208, 209,
	210, 211, 212, 213, 214, 215, 458, 216, 1381, 217,
	218, 220, 1383, 223, 224, 225, 226, 227, 1385, 228,
	460, 461, 229, 230, 232, 233, 234, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 1389,
	248, 249, 250, 252, 1390, 253, 254, 257, 258, 259,
	260, 1392, 262, 477, 1393, 263, 264, 265, 1395, 1396,
	267, 268, 269, 270, 271, 272, 275, 478, 277, 278,
	279, 280, 281, 282, 283, 284, 286, 287, 288, 289,
	290, 291, 292, 481, 482, 293, 295, 296, 483, 485,
	486, 572, 311, 312, 313, 314, 315, 316, 317, 319,
	1404, 321, 322, 323, 487, 324, 325, 326, 327, 1405,
	328, 329, 330, 331, 332, 334, 337, 338, 339, 340,
	1406, 343, 344, 345, 346, 347, 348, 349, 351, 352,
	353, 355, 356, 357, 358, 359, 360, 361, 362, 490,
	364, 365, 367, 368, 369, 371, 372, 373, 374, 375,
	376, 377, 1409, 379, 491, 380, 381, 382, 383, 384,
	1410, 386, 387, 388, 389, 390, 391, 394, 395, 396,
	398, 399, 493, 400, 401, 1412, 403, 404, 575, 406,
	407, 408, 409, 410, 1416, 411, 412, 496, 413, 497,
	414, 415, 416, 417, 418, 419, 420, 422, 1418, 1419,
	424, 425, 426, 428, 429, 430, 431, 434, 435, 436,
	437, 438, 1425, 439, 441, 443, 444, 500, 501, 502,
	503, 504, 506, 507, 508, 509, 445, 446, 462, 308,
	302, 256, 300, 301, 305, 306, 309, 1403, 1353, 1358,
	1360, 1361, 1363, 648, 0, 2248, 695, 0, 0, 0,
	1644, 694, 0, 0, 0, 0, 0, 1655, 1656, 1657,
	1349, 131, 1355, 148, 557, 1365, 198, 235, 0, 1352,
	1397, 297, 1402, 350, 354, 1426, 0, 1359, 1362, 1372,
	1375, 206, 1380, 562, 1388, 568, 1398, 574, 1417, 423,
	1423, 564, 565, 570, 136, 647, 447, 266, 1411, 1357,
	1415, 2247, 1408, 1384, 1424, 1401, 1413, 1394, 1399, 0,
	144, 1386, 1387, 1391, 1400, 566, 563, 567, 573, 561,
	571, 558, 569, 1421, 341, 274, 0, 0, 370, 143,
	190, 177, 219, 261, 378, 1356, 1374, 251, 427, 186,
	276, 1407, 165, 310, 1420, 402, 273, 1414, 385, 405,
	1376, 294, 171, 333, 392, 393, 555, 560, 1364, 576,
	1351, 175, 176, 299, 157, 307, 0, 0, 363, 320,
	318, 1382, 285, 342, 0, 1354, 0, 205, 0, 200,
	298, 442, 163, 421, 336, 303, 255, 366, 397, 202,
	187, 188, 231, 335, 221, 173, 432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 440,
	650, 640, 632, 633, 634, 635, 636, 637, 0, 652,
	653, 654, 655, 656, 433, 646, 0, 631, 638, 639,
	641, 1422, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 132, 1350, 133, 134, 135, 137, 138, 139,
	554, 140, 141, 142, 145, 146, 147, 149, 150, 151,
	152, 153, 154, 155, 156, 0, 556, 158, 159, 160,
	161, 162, 164, 166, 167, 168, 169, 170, 172, 174,
	1366, 1367, 1368, 559, 1369, 1370, 1371, 178, 179, 180,
	181, 182, 183, 1373, 184, 185, 189, 191, 192, 193,
	194, 195, 196, 199, 1377, 201, 203, 1378, 204, 207,
	1379, 208, 209, 210, 211, 212, 213, 214, 215, 0,
	216, 1381, 217, 218, 220, 1383, 223, 224, 225, 226,
	227, 1385, 228, 0, 0, 229, 230, 232, 233, 234,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 1389, 248, 249, 250, 252, 1390, 253, 254,
	257, 258, 259, 260, 1392, 262, 0, 1393, 263, 264,
	265, 1395, 1396, 267, 268, 269, 270, 271, 272, 275,
	0, 277, 278, 279, 280, 281, 282, 283, 284, 286,
	287, 288, 289, 290, 291, 292, 2244, 0, 293, 295,
	296, 0, 0, 0, 572, 311, 312, 313, 314, 315,
	316, 317, 319, 1404, 321, 322, 323, 0, 324, 325,
	326, 327, 1405, 328, 329, 330, 331, 332, 334, 337,
	338, 339, 340, 1406, 343, 344, 345, 346, 347, 348,
	349, 351, 352, 353, 355, 356, 357, 358, 359, 360,
	361, 362, 0, 364, 365, 367, 368, 369, 371, 372,
	373, 374, 375, 376, 377, 1409, 379, 0, 380, 381,
	382, 383, 384, 1410, 386, 387, 388, 389, 390, 391,
	394, 395, 396, 398, 399, 0, 400, 401, 1412, 403,
	404, 575, 406, 407, 408, 409, 410, 1416, 411, 412,
	0, 413, 0, 414, 415, 416, 417, 418, 419, 420,
	422, 1418, 1419, 424, 425, 426, 428, 429, 430, 431,
	434, 435, 436, 437, 438, 1425, 439, 441, 443, 444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 445,
	446, 0, 308, 302, 256, 300, 301, 305, 306, 309,
	1403, 1353, 1358, 1360, 1361, 1363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1652, 1653, 1654, 0,
	0, 0, 0, 0, 0, 2249, 2250, 1648, 1649, 1650,
	1651, 551, 0, 688, 695, 0, 0, 0, 684, 694,
	681, 0, 0, 0, 0, 0, 0, 0, 1662, 131,
	0, 148, 557, 0, 198, 235, 457, 0, 677, 297,
	0, 350, 354, 0, 448, 0, 0, 0, 1663, 206,
	691, 562, 0, 568, 692, 574, 690, 423, 0, 564,
	565, 570, 136, 494, 447, 266, 0, 0, 0, 685,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 566, 563, 567, 573, 561, 571, 558,
	569, 0, 341, 274, 0, 498, 370, 143, 190, 177,
	219, 261, 378, 0, 0, 251, 427, 186, 276, 0,
	165, 310, 0, 402, 273, 0, 385, 405, 0, 294,
	171, 333, 392, 393, 555, 560, 0, 576, 0, 175,
	176, 299, 157, 307, 510, 475, 363, 320, 318, 0,
	285, 342, 505, 0, 0, 205, 0, 200, 298, 442,
	163, 421, 336, 303, 255, 366, 397, 202, 187, 188,
	231, 335, 221, 173, 432, 472, 476, 474, 470, 467,
	471, 468, 469, 473, 222, 466, 0, 440, 450, 484,
	464, 492, 449, 489, 459, 197, 488, 453, 452, 499,
	479, 480, 433, 495, 465, 463, 456, 455, 451, 1661,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	132, 0, 133, 134, 135, 137, 138, 139, 554, 140,
	141, 142, 145, 146, 147, 149, 150, 151, 152, 153,
	154, 155, 156, 454, 556, 158, 159, 160, 161, 162,
	164, 166, 167, 168, 169, 170, 172, 174, 0, 0,
	0, 559, 0, 0, 0, 178, 179, 180, 181, 182,
	183, 0, 184, 185, 189, 191, 192, 193, 194, 195,
	196, 199, 0, 201, 203, 0, 204, 207, 0, 208,
	209, 210, 211, 212, 213, 214, 215, 458, 216, 0,
	217, 218, 220, 0, 223, 224, 225, 226, 227, 0,
	228, 460, 461, 229, 230, 232, 233, 234, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 248, 249, 250, 252, 0, 253, 254, 257, 258,
	259, 260, 0, 262, 477, 0, 263, 264, 265, 0,
	0, 267, 268, 269, 270, 271, 272, 275, 478, 277,
	278, 279, 280, 281, 282, 283, 284, 286, 287, 288,
	289, 290, 291, 292, 481, 482, 293, 295, 296, 483,
	485, 486, 572, 311, 312, 313, 314, 315, 316, 317,
	319, 0, 321, 322, 323, 487, 324, 325, 326, 327,
	0, 328, 329, 330, 331, 332, 334, 337, 338, 339,
	340, 0, 343, 344, 345, 346, 347, 348, 349, 351,
	352, 353, 355, 356, 357, 358, 359, 360, 361, 362,
	490, 364, 365, 367, 368, 369, 371, 372, 373, 374,
	375, 376, 377, 0, 379, 491, 380, 381, 382, 383,
	384, 0, 386, 387, 388, 389, 390, 391, 394, 395,
	396, 398, 399, 493, 400, 401, 0, 403, 404, 575,
	406, 407, 408, 409, 410, 0, 411, 412, 496, 413,
	497, 414, 415, 416, 417, 418, 419, 420, 422, 0,
	0, 424, 425, 426, 428, 429, 430, 431, 434, 435,
	436, 437, 438, 0, 439, 441, 443, 444, 500, 501,
	502, 503, 504, 506, 507, 508, 509, 445, 446, 462,
	308, 302, 256, 300, 301, 305, 306, 309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 551, 0, 688,
	695, 0, 0, 0, 684, 694, 681, 0, 0, 0,
	682, 1659, 0, 675, 676, 131, 0, 148, 557, 0,
	198, 235, 457, 0, 677, 297, 0, 350, 354, 0,
	448, 0, 0, 0, 0, 206, 691, 562, 0, 568,
	692, 574, 690, 423, 0, 564, 565, 570, 136, 494,
	447, 266, 0, 0, 0, 685, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 566,
	563, 567, 573, 561, 571, 558, 569, 0, 341, 274,
	0, 498, 370, 143, 190, 177, 219, 261, 378, 0,
	0, 251, 427, 186, 276, 0, 165, 310, 0, 402,
	273, 0, 385, 405, 0, 294, 171, 333, 392, 393,
	555, 560, 0, 576, 0, 175, 176, 299, 157, 307,
	510, 475, 363, 320, 318, 0, 285, 342, 505, 0,
	0, 205, 0, 200, 298, 442, 163, 421, 336, 303,
	255, 366, 397, 202, 187, 188, 231, 335, 221, 173,
	432, 472, 476, 474, 470, 467, 471, 468, 469, 473,
	222, 466, 0, 440, 450, 484, 464, 492, 449, 489,
	459, 197, 488, 453, 452, 499, 479, 480, 433, 495,
	465, 463, 456, 455, 451, 0, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 132, 0, 133, 134,
	135, 137, 138, 139, 554, 140, 141, 142, 145, 146,
	147, 149, 150, 151, 152, 153, 154, 155, 156, 454,
	556, 158, 159, 160, 161, 162, 164, 166, 167, 168,
	169, 170, 172, 174, 0, 0, 0, 559, 0, 0,
	0, 178, 179, 180, 181, 182, 183, 0, 184, 185,
	189, 191, 192, 193, 194, 195, 196, 199, 0, 201,
	203, 0, 204, 207, 0, 208, 209, 210, 211, 212,
	213, 214, 215, 458, 216, 0, 217, 218, 220, 0,
	223, 224, 225, 226, 227, 0, 228, 460, 461, 229,
	230, 232, 233, 234, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 248, 249, 250,
	252, 0, 253, 254, 257, 258, 259, 260, 0, 262,
	477, 0, 263, 264, 265, 0, 0, 267, 268, 269,
	270, 271, 272, 275, 478, 277, 278, 279, 280, 281,
	282, 283, 284, 286, 287, 288, 289, 290, 291, 292,
	481, 482, 293, 295, 296, 483, 485, 486, 572, 311,
	312, 313, 314, 315, 316, 317, 319, 0, 321, 322,
	323, 487, 324, 325, 326, 327, 0, 328, 329, 330,
	331, 332, 334, 337, 338, 339, 340, 0, 343, 344,
	345, 346, 347, 348, 349, 351, 352, 353, 355, 356,
	357, 358, 359, 360, 361, 362, 490, 364, 365, 367,
	368, 369, 371, 372, 373, 374, 375, 376, 377, 0,
	379, 491, 380, 381, 382, 383, 384, 0, 386, 387,
	388, 389, 390, 391, 394, 395, 396, 398, 399, 493,
	400, 401, 0, 403, 404, 575, 406, 407, 408, 409,
	410, 0, 411, 412, 496, 413, 497, 414, 415, 416,
	417, 418, 419, 420, 422, 0, 0, 424, 425, 426,
	428, 429, 430, 431, 434, 435, 436, 437, 438, 0,
	439, 441, 443, 444, 500, 501, 502, 503, 504, 506,
	507, 508, 509, 445, 446, 462, 308, 302, 256, 300,
	301, 305, 306, 309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 551, 0, 688, 695, 0, 0,
	0, 684, 694, 681, 0, 0, 682, 0, 0, 675,
	676, 673, 131, 0, 148, 557, 0, 198, 235, 457,
	0, 677, 297, 0, 350, 354, 0, 448, 0, 0,
	0, 0, 206, 691, 562, 0, 568, 692, 574, 690,
	423, 0, 564, 565, 570, 136, 494, 447, 266, 0,
	0, 0, 685, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 0, 0, 0, 0, 566, 563, 567, 573,
	561, 571, 558, 569, 0, 341, 274, 0, 498, 370,
	143, 190, 177, 219, 261, 378, 0, 0, 251, 427,
	186, 276, 0, 165, 310, 0, 402, 273, 0, 385,
	405, 0, 294, 171, 333, 392, 393, 555, 560, 0,
	576, 0, 175, 176, 299, 157, 307, 510, 475, 363,
	320, 318, 0, 285, 342, 505, 0, 0, 205, 0,
	200, 298, 442, 163, 421, 336, 303, 255, 366, 397,
	202, 187, 188, 231, 335, 221, 173, 432, 472, 476,
	474, 470, 467, 471, 468, 469, 473, 222, 466, 0,
	440, 450, 484, 464, 492, 449, 489, 459, 197, 488,
	453, 452, 499, 479, 480, 433, 495, 465, 463, 456,
	455, 451, 2102, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 132, 0, 133, 134, 135, 137, 138,
	139, 554, 140, 141, 142, 145, 146, 147, 149, 150,
	151, 152, 153, 154, 155, 156, 454, 556, 158, 159,
	160, 161, 162, 164, 166, 167, 168, 169, 170, 172,
	174, 0, 0, 0, 559, 0, 0, 0, 178, 179,
	180, 181, 182, 183, 0, 184, 185, 189, 191, 192,
	193, 194, 195, 196, 199, 0, 201, 203, 0, 204,
	207, 0, 208, 209, 210, 211, 212, 213, 214, 215,
	458, 216, 0, 217, 218, 220, 0, 223, 224, 225,
	226, 227, 0, 228, 460, 461, 229, 230, 232, 233,
	234, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 248, 249, 250, 252, 0, 253,
	254, 257, 258, 259, 260, 0, 262, 477, 0, 263,
	264, 265, 0, 0, 267, 268, 269, 270, 271, 272,
	275, 478, 277, 278, 279, 280, 281, 282, 283, 284,
	286, 287, 288, 289, 290, 291, 292, 481, 482, 293,
	295, 296, 483, 485, 486, 572, 311, 312, 313, 314,
	315, 316, 317, 319, 0, 321, 322, 323, 487, 324,
	325, 326, 327, 0, 328, 329, 330, 331, 332, 334,
	337, 338, 339, 340, 0, 343, 344, 345, 346, 347,
	348, 349, 351, 352, 353, 355, 356, 357, 358, 359,
	360, 361, 362, 490, 364, 365, 367, 368, 369, 371,
	372, 373, 374, 375, 376, 377, 0, 379, 491, 380,
	381, 382, 383, 384, 0, 386, 387, 388, 389, 390,
	391, 394, 395, 396, 398, 399, 493, 400, 401, 0,
	403, 404, 575, 406, 407, 408, 409, 410, 0, 411,
	412, 496, 413, 497, 414, 415, 416, 417, 418, 419,
	420, 422, 0, 0, 424, 425, 426, 428, 429, 430,
	431, 434, 435, 436, 437, 438, 0, 439, 441, 443,
	444, 500, 501, 502, 503, 504, 506, 507, 508, 509,
	445, 446, 462, 308, 302, 256, 300, 301, 305, 306,
	309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	551, 0, 688, 695, 0, 0, 0, 684, 694, 681,
	0, 0, 0, 682, 0, 0, 675, 676, 131, 0,
	148, 557, 0, 198, 235, 457, 0, 677, 297, 0,
	350, 354, 0, 448, 0, 0, 0, 0, 206, 691,
	562, 0, 568, 692, 574, 690, 423, 0, 564, 565,
	570, 136, 494, 447, 266, 0, 0, 0, 685, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 0, 0,
	0, 0, 566, 563, 567, 573, 561, 571, 558, 569,
	0, 341, 274, 0, 498, 370, 143, 190, 177, 219,
	261, 378, 0, 0, 251, 427, 186, 276, 0, 165,
	310, 0, 402, 273, 0, 385, 405, 0, 294, 171,
	333, 392, 393, 555, 560, 0, 576, 0, 175, 176,
	299, 157, 307, 510, 475, 363, 320, 318, 0, 285,
	342, 505, 0, 0, 205, 0, 200, 298, 442, 163,
	421, 336, 303, 255, 366, 397, 202, 187, 188, 231,
	335, 221, 173, 432, 472, 476, 474, 470, 467, 471,
	468, 469, 473, 222, 466, 0, 440, 450, 484, 464,
	492, 449, 489, 459, 197, 488, 453, 452, 499, 479,
	480, 433, 495, 465, 463, 456, 455, 451, 0, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 132,
	0, 133, 134, 135, 137, 138, 139, 554, 140, 141,
	142, 145, 146, 147, 149, 150, 151, 152, 153, 154,
	155, 156, 454, 556, 158, 159, 160, 161, 162, 164,
	166, 167, 168, 169, 170, 172, 174, 0, 0, 0,
	559, 0, 0, 0, 178, 179, 180, 181, 182, 183,
	0, 184, 185, 189, 191, 192, 193, 194, 195, 196,
	199, 0, 201, 203, 0, 204, 207, 0, 208, 209,
	210, 211, 212, 213, 214, 215, 458, 216, 0, 217,
	218, 220, 0, 223, 224, 225, 226, 227, 0, 228,
	460, 461, 229, 230, 232, 233, 234, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	248, 249, 250, 252, 0, 253, 254, 257, 258, 259,
	260, 0, 262, 477, 0, 263, 264, 265, 0, 0,
	267, 268, 269, 270, 271, 272, 275, 478, 277, 278,
	279, 280, 281, 282, 283, 284, 286, 287, 288, 289,
	290, 291, 292, 481, 482, 293, 295, 296, 483, 485,
	486, 572, 311, 312, 313, 314, 315, 316, 317, 319,
	0, 321, 322, 323, 487, 324, 325, 326, 327, 0,
	328, 329, 330, 331, 332, 334, 337, 338, 339, 340,
	0, 343, 344, 345, 346, 347, 348, 349, 351, 352,
	353, 355, 356, 357, 358, 359, 360, 361, 362, 490,
	364, 365, 367, 368, 369, 371, 372, 373, 374, 375,
	376, 377, 0, 379, 491, 380, 381, 382, 383, 384,
	0, 386, 387, 388, 389, 390, 391, 394, 395, 396,
	398, 399, 493, 400, 401, 0, 403, 404, 575, 406,
	407, 408, 409, 410, 0, 411, 412, 496, 413, 497,
	414, 415, 416, 417, 418, 419, 420, 422, 0, 0,
	424, 425, 426, 428, 429, 430, 431, 434, 435, 436,
	437, 438, 0, 439, 441, 443, 444, 500, 501, 502,
	503, 504, 506, 507, 508, 509, 445, 446, 462, 308,
	302, 256, 300, 301, 305, 306, 309, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 551, 0, 688, 695,
	0, 0, 0, 684, 694, 681, 0, 0, 0, 682,
	0, 0, 675, 676, 131, 0, 148, 557, 0, 198,
	235, 457, 0, 677, 297, 0, 350, 354, 0, 448,
	0, 0, 0, 0, 206, 691, 562, 0, 568, 692,
	574, 690, 423, 0, 564, 565, 570, 136, 494, 447,
	266, 0, 0, 0, 685, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 0, 0, 0, 0, 566, 563,
	567, 573, 561, 571, 558, 569, 0, 341, 274, 0,
	498, 370, 143, 190, 177, 219, 261, 378, 0, 0,
	251, 427, 186, 276, 0, 165, 310, 0, 402, 273,
	0, 385, 405, 0, 294, 171, 333, 392, 393, 555,
	560, 0, 576, 0, 1921, 176, 299, 157, 307, 510,
	475, 363, 320, 318, 0, 285, 342, 505, 0, 0,
	205, 0, 200, 298, 442, 163, 421, 336, 303, 255,
	366, 397, 202, 187, 188, 231, 335, 221, 173, 432,
	472, 476, 474, 470, 467, 471, 468, 469, 473, 222,
	466, 0, 440, 450, 484, 464, 492, 449, 489, 459,
	197, 488, 453, 452, 499, 479, 480, 433, 495, 465,
	463, 456, 455, 451, 0, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 132, 0, 133, 134, 135,
	137, 138, 139, 554, 140, 141, 142, 145, 146, 147,
	149, 150, 151, 152, 153, 154, 155, 156, 454, 556,
	158, 159, 160, 161, 162, 164, 166, 167, 168, 169,
	170, 172, 174, 0, 0, 0, 559, 0, 0, 0,
	178, 179, 180, 181, 182, 183, 0, 184, 185, 189,
	191, 192, 193, 194, 195, 196, 199, 0, 201, 203,
	0, 204, 207, 0, 208, 209, 210, 211, 212, 213,
	214, 215, 458, 216, 0, 217, 218, 220, 0, 223,
	224, 225, 226, 227, 0, 228, 460, 461, 229, 230,
	232, 233, 234, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 248, 249, 250, 252,
	0, 253, 254, 257, 258, 259, 260, 0, 262, 477,
	0, 263, 264, 265, 0, 0, 267, 268, 269, 270,
	271, 272, 275, 478, 277, 278, 279, 280, 281, 282,
	283, 284, 286, 287, 288, 289, 290, 291, 292, 481,
	482, 293, 295, 296, 483, 485, 486, 572, 311, 312,
	313, 314, 315, 316, 317, 319, 0, 321, 322, 323,
	487, 324, 325, 326, 327, 0, 328, 329, 330, 331,
	332, 334, 337, 338, 339, 340, 0, 343, 344, 345,
	346, 347, 348, 349, 351, 352, 353, 355, 356, 357,
	358, 359, 360, 361, 362, 490, 364, 365, 367, 368,
	369, 371, 372, 373, 374, 375, 376, 377, 0, 379,
	491, 380, 381, 382, 383, 384, 0, 386, 387, 388,
	389, 390, 391, 394, 395, 396, 398, 399, 493, 400,
	401, 0, 403, 404, 575, 406, 407, 408, 409, 410,
	0, 411, 412, 496, 413, 497, 414, 415, 416, 417,
	418, 419, 420, 422, 0, 0, 424, 425, 426, 428,
	429, 430, 431, 434, 435, 436, 437, 438, 0, 439,
	441, 443, 444, 500, 501, 502, 503, 504, 506, 507,
	508, 509, 445, 446, 462, 308, 302, 256, 300, 301,
	305, 306, 309, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 551, 0, 688, 695, 0, 0, 0, 0,
	694, 681, 0, 0, 0, 682, 0, 0, 675, 676,
	131, 0, 148, 557, 0, 198, 235, 457, 0, 0,
	297, 0, 350, 354, 0, 448, 0, 0, 2488, 0,
	206, 691, 562, 0, 568, 692, 574, 690, 423, 0,
	564, 565, 570, 136, 494, 447, 266, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 566, 563, 567, 573, 561, 571,
	558, 569, 0, 341, 274, 0, 498, 370, 143, 190,
	177, 219, 261, 378, 0, 0, 251, 427, 186, 276,
	0, 165, 310, 0, 402, 273, 0, 385, 405, 0,
	294, 171, 333, 392, 393, 555, 560, 0, 576, 0,
	175, 176, 299, 157, 307, 510, 475, 363, 320, 318,
	0, 285, 342, 505, 0, 0, 205, 0, 200, 298,
	442, 163, 421, 336, 303, 255, 366, 397, 202, 187,
	188, 231, 335, 221, 173, 432, 472, 476, 474, 470,
	467, 471, 468, 469, 473, 222, 466, 0, 440, 450,
	484, 464, 492, 449, 489, 459, 197, 488, 453, 452,
	499, 479, 480, 433, 495, 465, 463, 456, 455, 451,
	0, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 132, 0, 133, 134, 135, 137, 138, 139, 554,
	140, 141, 142, 145, 146, 147, 149, 150, 151, 152,
	153, 154, 155, 156, 454, 556, 158, 159, 160, 161,
	162, 164, 166, 167, 168, 169, 170, 172, 174, 0,
	0, 0, 559, 0, 0, 0, 178, 179, 180, 181,
	182, 183, 0, 184, 185, 189, 191, 192, 193, 194,
	195, 196, 199, 0, 201, 203, 0, 204, 207, 0,
	208, 209, 210, 211, 212, 213, 214, 215, 458, 216,
	0, 217, 218, 220, 0, 223, 224, 225, 226, 227,
	0, 228, 460, 461, 229, 230, 232, 233, 234, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 248, 249, 250, 252, 0, 253, 254, 257,
	258, 259, 260, 0, 262, 477, 0, 263, 264, 265,
	0, 0, 267, 268, 269, 270, 271, 272, 275, 478,
	277, 278, 279, 280, 281, 282, 283, 284, 286, 287,
	288, 289, 290, 291, 292, 481, 482, 293, 295, 296,
	483, 485, 486, 572, 311, 312, 313, 314, 315, 316,
	317, 319, 0, 321, 322, 323, 487, 324, 325, 326,
	327, 0, 328, 329, 330, 331, 332, 334, 337, 338,
	339, 340, 0, 343, 344, 345, 346, 347, 348, 349,
	351, 352, 353, 355, 356, 357, 358, 359, 360, 361,
	362, 490, 364, 365, 367, 368, 369, 371, 372, 373,
	374, 375, 376, 377, 0, 379, 491, 380, 381, 382,
	383, 384, 0, 386, 387, 388, 389, 390, 391, 394,
	395, 396, 398, 399, 493, 400, 401, 0, 403, 404,
	575, 406, 407, 408, 409, 410, 0, 411, 412, 496,
	413, 497, 414, 415, 416, 417, 418, 419, 420, 422,
	0, 0, 424, 425, 426, 428, 429, 430, 431, 434,
	435, 436, 437, 438, 0, 439, 441, 443, 444, 500,
	501, 502, 503, 504, 506, 507, 508, 509, 445, 446,
	462, 308, 302, 256, 300, 301, 305, 306, 309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 551, 0,
	688, 695, 0, 0, 0, 0, 694, 681, 0, 0,
	0, 682, 0, 0, 1885, 1886, 131, 0, 148, 557,
	0, 198, 235, 457, 0, 0, 297, 0, 350, 354,
	0, 448, 0, 0, 0, 0, 206, 691, 562, 0,
	568, 692, 574, 690, 423, 0, 564, 565, 570, 136,
	494, 447, 266, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 0,
	566, 563, 567, 573, 561, 571, 558, 569, 0, 341,
	274, 0, 498, 370, 143, 190, 177, 219, 261, 378,
	0, 0, 251, 427, 186, 276, 0, 165, 310, 0,
	402, 273, 0, 385, 405, 0, 294, 171, 333, 392,
	393, 555, 560, 0, 576, 0, 175, 176, 299, 157,
	307, 510, 475, 363, 320, 318, 0, 285, 342, 505,
	0, 0, 205, 0, 200, 298, 442, 163, 421, 336,
	303, 255, 366, 397, 202, 187, 188, 231, 335, 221,
	173, 432, 472, 476, 474, 470, 467, 471, 468, 469,
	473, 222, 466, 0, 440, 450, 484, 464, 492, 449,
	489, 459, 197, 488, 453, 452, 499, 479, 480, 433,
	495, 465, 463, 456, 455, 451, 0, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 132, 0, 133,
	134, 135, 137, 138, 139, 554, 140, 141, 142, 145,
	146, 147, 149, 150, 151, 152, 153, 154, 155, 156,
	454, 556, 158, 159, 160, 161, 162, 164, 166, 167,
	168, 169, 170, 172, 174, 0, 0, 0, 559, 0,
	0, 0, 178, 179, 180, 181, 182, 183, 0, 184,
	185, 189, 191, 192, 193, 194, 195, 196, 199, 0,
	201, 203, 0, 204, 207, 0, 208, 209, 210, 211,
	212, 213, 214, 215, 458, 216, 0, 217, 218, 220,
	0, 223, 224, 225, 226, 227, 0, 228, 460, 461,
	229, 230, 232, 233, 234, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 248, 249,
	250, 252, 0, 253, 254, 257, 258, 259, 260, 0,
	262, 477, 0, 263, 264, 265, 0, 0, 267, 268,
	269, 270, 271, 272, 275, 478, 277, 278, 279, 280,
	281, 282, 283, 284, 286, 287, 288, 289, 290, 291,
	292, 481, 482, 293, 295, 296, 483, 485, 486, 572,
	311, 312, 313, 314, 315, 316, 317, 319, 0, 321,
	322, 323, 487, 324, 325, 326, 327, 0, 328, 329,
	330, 331, 332, 334, 337, 338, 339, 340, 0, 343,
	344, 345, 346, 347, 348, 349, 351, 352, 353, 355,
	356, 357, 358, 359, 360, 361, 362, 490, 364, 365,
	367, 368, 369, 371, 372, 373, 374, 375, 376, 377,
	0, 379, 491, 380, 381, 382, 383, 384, 0, 386,
	387, 388, 389, 390, 391, 394, 395, 396, 398, 399,
	493, 400, 401, 0, 403, 404, 575, 406, 407, 408,
	409, 410, 0, 411, 412, 496, 413, 497, 414, 415,
	416, 417, 418, 419, 420, 422, 0, 0, 424, 425,
	426, 428, 429, 430, 431, 434, 435, 436, 437, 438,
	0, 439, 441, 443, 444, 500, 501, 502, 503, 504,
	506, 507, 508, 509, 445, 446, 462, 308, 302, 256,
	300, 301, 305, 306, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 551, 0, 688, 695, 0, 0,
	0, 0, 694, 681, 0, 0, 0, 682, 0, 0,
	1885, 1886, 131, 0, 148, 557, 0, 198, 235, 457,
	0, 0, 297, 0, 350, 354, 0, 448, 0, 0,
	0, 0, 206, 691, 562, 0, 568, 692, 574, 690,
	423, 0, 564, 565, 570, 136, 494, 447, 266, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 0, 0, 0, 0, 566, 563, 567, 573,
	561, 571, 558, 569, 0, 341, 274, 0, 498, 370,
	143, 190, 177, 219, 261, 378, 0, 0, 251, 427,
	186, 276, 0, 165, 310, 0, 402, 273, 0, 385,
	405, 0, 294, 171, 333, 392, 393, 555, 560, 0,
	576, 0, 175, 176, 299, 157, 307, 510, 475, 363,
	320, 318, 0, 285, 342, 505, 0, 0, 205, 0,
	200, 298, 442, 163, 421, 336, 303, 255, 366, 397,
	202, 187, 188, 231, 335, 221, 173, 432, 472, 476,
	474, 470, 467, 471, 468, 469, 473, 222, 466, 0,
	440, 450, 484, 464, 492, 449, 489, 459, 197, 488,
	453, 452, 499, 479, 480, 433, 495, 465, 463, 456,
	455, 451, 0, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 132, 0, 133, 134, 135, 137, 138,
	139, 554, 140, 141, 142, 145, 146, 147, 149, 150,
	151, 152, 153, 154, 155, 156, 454, 556, 158, 159,
	160, 161, 162, 164, 166, 167, 168, 169, 170, 172,
	174, 0, 0, 0, 559, 0, 0, 0, 178, 179,
	180, 181, 182, 183, 0, 184, 185, 189, 191, 192,
	193, 194, 195, 196, 199, 0, 201, 203, 0, 204,
	207, 0, 208, 209, 210, 211, 212, 213, 214, 215,
	458, 216, 0, 217, 218, 220, 0, 223, 224, 225,
	226, 227, 0, 228, 460, 461, 229, 230, 232, 233,
	234, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 248, 249, 250, 252, 0, 253,
	254, 257, 258, 259, 260, 0, 262, 477, 0, 263,
	264, 265, 0, 0, 267, 268, 269, 270, 271, 272,
	275, 478, 277, 278, 279, 280, 281, 282, 283, 284,
	286, 287, 288, 289, 290, 291, 292, 481, 482, 293,
	295, 296, 483, 485, 486, 572, 311, 312, 313, 314,
	315, 316, 317, 319, 0, 321, 322, 323, 487, 324,
	325, 326, 327, 0, 328, 329, 330, 331, 332, 334,
	337, 338, 339, 340, 0, 343, 344, 345, 346, 347,
	348, 349, 351, 352, 353, 355, 356, 357, 358, 359,
	360, 361, 362, 490, 364, 365, 367, 368, 369, 371,
	372, 373, 374, 375, 376, 377, 0, 379, 491, 380,
	381, 382, 383, 384, 0, 386, 387, 388, 389, 390,
	391, 394, 395, 396, 398, 399, 493, 400, 401, 0,
	403, 404, 575, 406, 407, 408, 409, 410, 0, 411,
	412, 496, 413, 497, 414, 415, 416, 417, 418, 419,
	420, 422, 0, 0, 424, 425, 426, 428, 429, 430,
	431, 434, 435, 436, 437, 438, 0, 439, 441, 443,
	444, 500, 501, 502, 503, 504, 506, 507, 508, 509,
	445, 446, 462, 308, 302, 256, 300, 301, 305, 306,
	309, 551, 0, 688, 695, 0, 0, 0, 0, 694,
	681, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 148, 557, 682, 198, 235, 457, 0, 0, 297,
	0, 350, 354, 0, 448, 0, 0, 0, 0, 206,
	691, 562, 0, 568, 692, 574, 690, 423, 0, 564,
	565, 570, 136, 494, 447, 266, 0, 0, 0, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 2484, 0,
	0, 0, 0, 566, 563, 567, 573, 561, 571, 558,
	569, 0, 341, 274, 0, 498, 370, 143, 190, 177,
	219, 261, 378, 0, 0, 251, 427, 186, 276, 0,
	165, 310, 0, 402, 273, 0, 385, 405, 0, 294,
	171, 333, 392, 393, 555, 560, 0, 576, 0, 175,
	176, 299, 157, 307, 510, 475, 363, 320, 318, 0,
	285, 342, 505, 0, 0, 205, 0, 200, 298, 442,
	163, 421, 336, 303, 255, 366, 397, 202, 187, 188,
	231, 335, 221, 173, 432, 472, 476, 474, 470, 467,
	471, 468, 469, 473, 222, 466, 0, 440, 450, 484,
	464, 492, 449, 489, 459, 197, 488, 453, 452, 499,
	479, 480, 433, 495, 465, 463, 456, 455, 451, 0,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	132, 0, 133, 134, 135, 137, 138, 139, 554, 140,
	141, 142, 145, 146, 147, 149, 150, 151, 152, 153,
	154, 155, 156, 454, 556, 158, 159, 160, 161, 162,
	164, 166, 167, 168, 169, 170, 172, 174, 0, 0,
	0, 559, 0, 0, 0, 178, 179, 180, 181, 182,
	183, 0, 184, 185, 189, 191, 192, 193, 194, 195,
	196, 199, 0, 201, 203, 0, 204, 207, 0, 208,
	209, 210, 211, 212, 213, 214, 215, 458, 216, 0,
	217, 218, 220, 0, 223, 224, 225, 226, 227, 0,
	228, 460, 461, 229, 230, 232, 233, 234, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 248, 249, 250, 252, 0, 253, 254, 257, 258,
	259, 260, 0, 262, 477, 0, 263, 264, 265, 0,
	0, 267, 268, 269, 270, 271, 272, 275, 478, 277,
	278, 279, 280, 281, 282, 283, 284, 286, 287, 288,
	289, 290, 291, 292, 481, 482, 293, 295, 296, 483,
	485, 486, 572, 311, 312, 313, 314, 315, 316, 317,
	319, 0, 321, 322, 323, 487, 324, 325, 326, 327,
	0, 328, 329, 330, 331, 332, 334, 337, 338, 339,
	340, 0, 343, 344, 345, 346, 347, 348, 349, 351,
	352, 353, 355, 356, 357, 358, 359, 360, 361, 362,
	490, 364, 365, 367, 368, 369, 371, 372, 373, 374,
	375, 376, 377, 0, 379, 491, 380, 381, 382, 383,
	384, 0, 386, 387, 388, 389, 390, 391, 394, 395,
	396, 398, 399, 493, 400, 401, 0, 403, 404, 575,
	406, 407, 408, 409, 410, 0, 411, 412, 496, 413,
	497, 414, 415, 416, 417, 418, 419, 420, 422, 0,
	0, 424, 425, 426, 428, 429, 430, 431, 434, 435,
	436, 437, 438, 0, 439, 441, 443, 444, 500, 501,
	502, 503, 504, 506, 507, 508, 509, 445, 446, 462,
	308, 302, 256, 300, 301, 305, 306, 309, 551, 0,
	688, 695, 0, 0, 0, 0, 694, 681, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 148, 557,
	682, 198, 235, 457, 0, 0, 297, 0, 350, 354,
	0, 448, 0, 0, 0, 0, 206, 691, 562, 0,
	568, 692, 574, 690, 423, 0, 564, 565, 570, 136,
	494, 447, 266, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 0,
	566, 563, 567, 573, 561, 571, 558, 569, 0, 341,
	274, 0, 498, 370, 143, 190, 177, 219, 261, 378,
	0, 0, 251, 427, 186, 276, 0, 165, 310, 0,
	402, 273, 0, 385, 405, 0, 294, 171, 333, 392,
	393, 555, 560, 0, 576, 0, 175, 176, 299, 157,
	307, 510, 475, 363, 320, 318, 0, 285, 342, 2144,
	0, 0, 205, 0, 200, 298, 442, 163, 421, 336,
	303, 255, 366, 397, 202, 187, 188, 231, 335, 221,
	173, 432, 472, 476, 474, 470, 467, 471, 468, 469,
	473, 222, 466, 0, 440, 450, 484, 464, 492, 449,
	489, 459, 197, 488, 453, 452, 499, 479, 480, 433,
	495, 465, 463, 456, 455, 451, 0, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 132, 0, 133,
	134, 135, 137, 138, 139, 554, 140, 141, 142, 145,
	146, 147, 149, 150, 151, 152, 153, 154, 155, 156,
	454, 556, 158, 159, 160, 161, 162, 164, 166, 167,
	168, 169, 170, 172, 174, 0, 0, 0, 559, 0,
	0, 0, 178, 179, 180, 181, 182, 183, 0, 184,
	185, 189, 191, 192, 193, 194, 195, 196, 199, 0,
	201, 203, 0, 204, 207, 0, 208, 209, 210, 211,
	212, 213, 214, 215, 458, 216, 0, 217, 218, 220,
	0, 223, 224, 225, 226, 227, 0, 228, 460, 461,
	229, 230, 232, 233, 234, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 248, 249,
	250, 252, 0, 253, 254, 257, 258, 259, 260, 0,
	262, 477, 0, 263, 264, 265, 0, 0, 267, 268,
	269, 270, 271, 272, 275, 478, 277, 278, 279, 280,
	281, 282, 283, 284, 286, 287, 288, 289, 290, 291,
	292, 481, 482, 293, 295, 296, 483, 485, 486, 572,
	311, 312, 313, 314, 315, 316, 317, 319, 0, 321,
	322, 323, 487, 324, 325, 326, 327, 0, 328, 329,
	330, 331, 332, 334, 337, 338, 339, 340, 0, 343,
	344, 345, 346, 347, 348, 349, 351, 352, 353, 355,
	356, 357, 358, 359, 360, 361, 362, 490, 364, 365,
	367, 368, 369, 371, 372, 373, 374, 375, 376, 377,
	0, 379, 491, 380, 381, 382, 383, 384, 0, 386,
	387, 388, 389, 390, 391, 394, 395, 396, 398, 399,
	493, 400, 401, 0, 403, 404, 575, 406, 407, 408,
	409, 410, 0, 411, 412, 496, 413, 497, 414, 415,
	416, 417, 418, 419, 420, 422, 0, 0, 424, 425,
	426, 428, 429, 430, 431, 434, 435, 436, 437, 438,
	0, 439, 441, 443, 444, 500, 501, 502, 503, 504,
	506, 507, 508, 509, 445, 446, 462, 308, 302, 256,
	300, 301, 305, 306, 309, 551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 148, 557, 682, 198, 235,
	457, 0, 0, 297, 0, 350, 354, 29, 448, 0,
	0, 0, 0, 206, 0, 562, 0, 568, 0, 574,
	0, 423, 0, 564, 565, 570, 136, 494, 447, 266,
	0, 0, 0, 304, 26, 0, 0, 117, 27, 0,
	0, 0, 144, 0, 0, 0, 0, 566, 563, 567,
	573, 561, 571, 558, 569, 0, 341, 274, 1702, 1687,
	370, 143, 190, 177, 219, 261, 378, 0, 0, 251,
	427, 186, 276, 0, 165, 310, 0, 402, 273, 0,
	385, 405, 0, 294, 171, 333, 392, 393, 555, 560,
	0, 576, 0, 175, 176, 299, 157, 307, 1710, 1711,
	1709, 320, 318, 0, 285, 342, 505, 0, 0, 205,
	0, 200, 298, 442, 163, 421, 336, 303, 255, 366,
	397, 202, 187, 188, 231, 335, 221, 173, 432, 472,
	476, 474, 470, 467, 471, 468, 469, 473, 222, 466,
	0, 440, 450, 484, 464, 492, 449, 489, 459, 197,
	488, 453, 452, 499, 479, 480, 433, 495, 465, 463,
	456, 455, 451, 0, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 132, 0, 133, 134, 135, 137,
	138, 139, 554, 140, 141, 142, 145, 146, 147, 149,
	150, 151, 152, 153, 154, 155, 156, 454, 556, 158,
	159, 160, 161, 162, 164, 166, 167, 168, 169, 170,
	172, 174, 0, 0, 0, 559, 0, 0, 0, 178,
	179, 180, 181, 182, 183, 0, 184, 185, 189, 191,
	192, 193, 194, 195, 196, 199, 0, 201, 203, 0,
	204, 207, 0, 208, 209, 210, 211, 212, 213, 214,
	215, 458, 216, 0, 217, 218, 220, 0, 223, 224,
	225, 226, 227, 0, 228, 460, 461, 229, 230, 232,
	233, 234, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 248, 249, 250, 252, 0,
	253, 254, 257, 258, 259, 260, 0, 262, 477, 0,
	263, 264, 265, 0, 0, 267, 268, 269, 270, 271,
	272, 275, 478, 277, 278, 279, 280, 281, 282, 283,
	284, 286, 287, 288, 289, 290, 291, 292, 481, 482,
	293, 295, 296, 483, 485, 486, 572, 311, 312, 313,
	314, 315, 316, 317, 319, 0, 321, 322, 323, 487,
	324, 325, 326, 327, 0, 328, 329, 330, 331, 332,
	334, 337, 338, 339, 340, 0, 343, 344, 345, 346,
	347, 348, 349, 351, 352, 353, 355, 356, 357, 358,
	359, 360, 361, 362, 490, 364, 365, 367, 368, 369,
	371, 372, 373, 374, 375, 376, 377, 0, 379, 491,
	380, 381, 382, 383, 384, 0, 386, 387, 388, 389,
	390, 391, 394, 395, 396, 398, 399, 493, 400, 401,
	0, 403, 404, 575, 406, 407, 408, 409, 410, 0,
	411, 412, 496, 413, 497, 414, 415, 416, 417, 418,
	419, 420, 422, 0, 0, 424, 425, 426, 428, 429,
	430, 431, 434, 435, 436, 437, 438, 0, 439, 441,
	443, 444, 500, 501, 502, 503, 504, 506, 507, 508,
	509, 445, 446, 462, 308, 302, 256, 300, 301, 305,
	306, 309, 551, 0, 0, 0, 0, 0, 0, 0,
	0, 30, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 148, 557, 1704, 198, 235, 457, 0, 0,
	297, 0, 350, 354, 0, 448, 0, 0, 0, 0,
	206, 0, 562, 0, 568, 0, 574, 0, 423, 0,
	564, 565, 570, 136, 494, 447, 266, 0, 0, 0,
	304, 0, 0, 0, 117, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 566, 563, 567, 573, 561, 571,
	558, 569, 0, 341, 274, 1702, 498, 370, 143, 190,
	177, 219, 261, 378, 0, 0, 251, 427, 186, 276,
	0, 165, 310, 0, 402, 273, 0, 385, 405, 0,
	294, 171, 333, 392, 393, 555, 560, 0, 576, 0,
	175, 176, 299, 157, 307, 1710, 1711, 1709, 320, 318,
	0, 285, 342, 505, 0, 0, 205, 0, 200, 298,
	442, 163, 421, 336, 303, 255, 366, 397, 202, 187,
	188, 231, 335, 221, 173, 432, 472, 476, 474, 470,
	467, 471, 468, 469, 473, 222, 466, 0, 440, 450,
	484, 464, 492, 449, 489, 459, 197, 488, 453, 452,
	499, 479, 480, 433, 495, 465, 463, 456, 455, 451,
	0, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 132, 0, 133, 134, 135, 137, 138, 139, 554,
	140, 141, 142, 145, 146, 147, 149, 150, 151, 152,
	153, 154, 155, 156, 454, 556, 158, 159, 160, 161,
	162, 164, 166, 167, 168, 169, 170, 172, 174, 0,
	0, 0, 559, 0, 0, 0, 178, 179, 180, 181,
	182, 183, 0, 184, 185, 189, 191, 192, 193, 194,
	195, 196, 199, 0, 201, 203, 0, 204, 207, 0,
	208, 209, 210, 211, 212, 213, 214, 215, 458, 216,
	0, 217, 218, 220, 0, 223, 224, 225, 226, 227,
	0, 228, 460, 461, 229, 230, 232, 233, 234, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 248, 249, 250, 252, 0, 253, 254, 257,
	258, 259, 260, 0, 262, 477, 0, 263, 264, 265,
	0, 0, 267, 268, 269, 270, 271, 272, 275, 478,
	277, 278, 279, 280, 281, 282, 283, 284, 286, 287,
	288, 289, 290, 291, 292, 481, 482, 293, 295, 296,
	483, 485, 486, 572, 311, 312, 313, 314, 315, 316,
	317, 319, 0, 321, 322, 323, 487, 324, 325, 326,
	327, 0, 328, 329, 330, 331, 332, 334, 337, 338,
	339, 340, 0, 343, 344, 345, 346, 347, 348, 349,
	351, 352, 353, 355, 356, 357, 358, 359, 360, 361,
	362, 490, 364, 365, 367, 368, 369, 371, 372, 373,
	374, 375, 376, 377, 0, 379, 491, 380, 381, 382,
	383, 384, 0, 386, 387, 388, 389, 390, 391, 394,
	395, 396, 398, 399, 493, 400, 401, 0, 403, 404,
	575, 406, 407, 408, 409, 410, 0, 411, 412, 496,
	413, 497, 414, 415, 416, 417, 418, 419, 420, 422,
	0, 0, 424, 425, 426, 428, 429, 430, 431, 434,
	435, 436, 437, 438, 0, 439, 441, 443, 444, 500,
	501, 502, 503, 504, 506, 507, 508, 509, 445, 446,
	462, 308, 302, 256, 300, 301, 305, 306, 309, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 148,
	557, 1704, 198, 235, 457, 0, 0, 297, 0, 350,
	354, 0, 448, 0, 0, 0, 0, 206, 0, 562,
	0, 568, 0, 574, 0, 423, 0, 564, 565, 570,
	136, 494, 447, 266, 0, 0, 0, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 0, 0, 0,
	0, 566, 563, 567, 573, 561, 571, 558, 569, 0,
	341, 274, 0, 498, 370, 143, 190, 177, 219, 261,
	378, 0, 0, 251, 427, 186, 276, 0, 165, 310,
	0, 402, 273, 0, 385, 405, 0, 294, 171, 333,
	392, 393, 555, 560, 0, 576, 0, 175, 176, 299,
	157, 307, 510, 475, 363, 320, 318, 0, 285, 342,
	505, 0, 0, 205, 0, 200, 298, 442, 163, 421,
	336, 303, 255, 366, 397, 202, 187, 188, 231, 335,
	221, 173, 432, 472, 476, 474, 470, 467, 471, 468,
	469, 473, 222, 466, 0, 440, 450, 484, 464, 492,
	449, 489, 459, 197, 488, 453, 452, 499, 479, 480,
	433, 495, 465, 463, 456, 455, 451, 0, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 132, 0,
	133, 134, 135, 137, 138, 139, 554, 140, 141, 142,
	145, 146, 147, 149, 150, 151, 152, 153, 154, 155,
	156, 454, 556, 158, 159, 160, 161, 162, 164, 166,
	167, 168, 169, 170, 172, 174, 0, 0, 0, 559,
	0, 0, 0, 178, 179, 180, 181, 182, 183, 0,
	184, 185, 189, 191, 192, 193, 194, 195, 196, 199,
	0, 201, 203, 0, 204, 207, 0, 208, 209, 210,
	211, 212, 213, 214, 215, 458, 216, 0, 217, 218,
	220, 0, 223, 224, 225, 226, 227, 0, 228, 460,
	461, 229, 230, 232, 233, 234, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 248,
	249, 250, 252, 0, 253, 254, 257, 258, 259, 260,
	0, 262, 477, 0, 263, 264, 265, 0, 0, 267,
	268, 269, 270, 271, 272, 275, 478, 277, 278, 279,
	280, 281, 282, 283, 284, 286, 287, 288, 289, 290,
	291, 292, 481, 482, 293, 295, 296, 483, 485, 486,
	572, 311, 312, 313, 314, 315, 316, 317, 319, 0,
	321, 322, 323, 487, 324, 325, 326, 327, 0, 328,
	329, 330, 331, 332, 334, 337, 338, 339, 340, 0,
	343, 344, 345, 346, 347, 348, 349, 351, 352, 353,
	355, 356, 357, 358, 359, 360, 361, 362, 490, 364,
	365, 367, 368, 369, 371, 372, 373, 374, 375, 376,
	377, 0, 379, 491, 380, 381, 382, 383, 384, 0,
	386, 387, 388, 389, 390, 391, 394, 395, 396, 398,
	399, 493, 400, 401, 0, 403, 404, 575, 406, 407,
	408, 409, 410, 0, 411, 412, 496, 413, 497, 414,
	415, 416, 417, 418, 419, 420, 422, 0, 0, 424,
	425, 426, 428, 429, 430, 431, 434, 435, 436, 437,
	438, 0, 439, 441, 443, 444, 500, 501, 502, 503,
	504, 506, 507, 508, 509, 445, 446, 462, 308, 302,
	256, 300, 301, 305, 306, 309, 551, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 148, 557, 2200, 198,
	235, 457, 0, 0, 297, 0, 350, 354, 0, 448,
	0, 0, 0, 0, 206, 0, 562, 0, 568, 0,
	574, 0, 423, 0, 564, 565, 570, 136, 494, 447,
	266, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 0, 0, 0, 0, 566, 563,
	567, 573, 561, 571, 558, 569, 0, 341, 274, 0,
	498, 370, 143, 190, 177, 219, 261, 378, 0, 0,
	251, 427, 186, 276, 0, 165, 310, 0, 402, 273,
	0, 385, 405, 0, 294, 171, 333, 392, 393, 555,
	560, 0, 576, 0, 175, 176, 299, 157, 307, 510,
	475, 363, 320, 318, 0, 285, 342, 505, 0, 0,
	205, 0, 200, 298, 442, 163, 421, 336, 303, 255,
	366, 397, 202, 187, 188, 231, 335, 221, 173, 432,
	472, 476, 474, 470, 467, 471, 468, 469, 473, 222,
	466, 0, 440, 450, 484, 464, 492, 449, 489, 459,
	197, 488, 453, 452, 499, 479, 480, 433, 495, 465,
	463, 456, 455, 451, 0, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 132, 0, 133, 134, 135,
	137, 138, 139, 554, 140, 141, 142, 145, 146, 147,
	149, 150, 151, 152, 153, 154, 155, 156, 454, 556,
	158, 159, 160, 161, 162, 164, 166, 167, 168, 169,
	170, 172, 174, 0, 0, 0, 559, 0, 0, 0,
	178, 179, 180, 181, 182, 183, 0, 184, 185, 189,
	191, 192, 193, 194, 195, 196, 199, 0, 201, 203,
	0, 204, 207, 0, 208, 209, 210, 211, 212, 213,
	214, 215, 458, 216, 0, 217, 218, 220, 0, 223,
	224, 225, 226, 227, 0, 228, 460, 461, 229, 230,
	232, 233, 234, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 248, 249, 250, 252,
	0, 253, 254, 257, 258, 259, 260, 0, 262, 477,
	0, 263, 264, 265, 0, 0, 267, 268, 269, 270,
	271, 272, 275, 478, 277, 278, 279, 280, 281, 282,
	283, 284, 286, 287, 288, 289, 290, 291, 292, 481,
	482, 293, 295, 296, 483, 485, 486, 572, 311, 312,
	313, 314, 315, 316, 317, 319, 0, 321, 322, 323,
	487, 324, 325, 326, 327, 0, 328, 329, 330, 331,
	332, 334, 337, 338, 339, 340, 0, 343, 344, 345,
	346, 347, 348, 349, 351, 352, 353, 355, 356, 357,
	358, 359, 360, 361, 362, 490, 364, 365, 367, 368,
	369, 371, 372, 373, 374, 375, 376, 377, 0, 379,
	491, 380, 381, 382, 383, 384, 0, 386, 387, 388,
	389, 390, 391, 394, 395, 396, 398, 399, 493, 400,
	401, 0, 403, 404, 575, 406, 407, 408, 409, 410,
	0, 411, 412, 496, 413, 497, 414, 415, 416, 417,
	418, 419, 420, 422, 0, 0, 424, 425, 426, 428,
	429, 430, 431, 434, 435, 436, 437, 438, 0, 439,
	441, 443, 444, 500, 501, 502, 503, 504, 506, 507,
	508, 509, 445, 446, 462, 308, 302, 256, 300, 301,
	305, 306, 309, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 148, 557, 2770, 198, 235, 457, 0,
	0, 297, 0, 350, 354, 0, 448, 0, 0, 0,
	0, 206, 0, 562, 0, 568, 0, 574, 0, 423,
	0, 564, 565, 570, 136, 494, 447, 266, 0, 0,
	0, 304, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 566, 563, 567, 573, 561,
	571, 558, 569, 0, 341, 274, 0, 498, 370, 143,
	190, 177, 219, 261, 378, 0, 0, 251, 427, 186,
	276, 0, 165, 310, 0, 402, 273, 0, 385, 405,
	0, 294, 171, 333, 392, 393, 555, 560, 0, 576,
	0, 175, 176, 299, 157, 307, 1710, 1711, 1709, 320,
	318, 0, 285, 342, 505, 0, 0, 205, 0, 200,
	298, 442, 163, 421, 336, 303, 255, 366, 397, 202,
	187, 188, 231, 335, 221, 173, 432, 472, 476, 474,
	470, 467, 471, 468, 469, 473, 222, 466, 0, 440,
	450, 484, 464, 492, 449, 489, 459, 197, 488, 453,
	452, 499, 479, 480, 433, 495, 465, 463, 456, 455,
	451, 0, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 132, 0, 133, 134, 135, 137, 138, 139,
	554, 140, 141, 142, 145, 146, 147, 149, 150, 151,
	152, 153, 154, 155, 156, 454, 556, 158, 159, 160,
	161, 162, 164, 166, 167, 168, 169, 170, 172, 174,
	0, 0, 0, 559, 0, 0, 0, 178, 179, 180,
	181, 182, 183, 0, 184, 185, 189, 191, 192, 193,
	194, 195, 196, 199, 0, 201, 203, 0, 204, 207,
	0, 208, 209, 210, 211, 212, 213, 214, 215, 458,
	216, 0, 217, 218, 220, 0, 223, 224, 225, 226,
	227, 0, 228, 460, 461, 229, 230, 232, 233, 234,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 248, 249, 250, 252, 0, 253, 254,
	257, 258, 259, 260, 0, 262, 477, 0, 263, 264,
	265, 0, 0, 267, 268, 269, 270, 271, 272, 275,
	478, 277, 278, 279, 280, 281, 282, 283, 284, 286,
	287, 288, 289, 290, 291, 292, 481, 482, 293, 295,
	296, 483, 485, 486, 572, 311, 312, 313, 314, 315,
	316, 317, 319, 0, 321, 322, 323, 487, 324, 325,
	326, 327, 0, 328, 329, 330, 331, 332, 334, 337,
	338, 339, 340, 0, 343, 344, 345, 346, 347, 348,
	349, 351, 352, 353, 355, 356, 357, 358, 359, 360,
	361, 362, 490, 364, 365, 367, 368, 369, 371, 372,
	373, 374, 375, 376, 377, 0, 379, 491, 380, 381,
	382, 383, 384, 0, 386, 387, 388, 389, 390, 391,
	394, 395, 396, 398, 399, 493, 400, 401, 0, 403,
	404, 575, 406, 407, 408, 409, 410, 0, 411, 412,
	496, 413, 497, 414, 415, 416, 417, 418, 419, 420,
	422, 0, 0, 424, 425, 426, 428, 429, 430, 431,
	434, 435, 436, 437, 438, 0, 439, 441, 443, 444,
	500, 501, 502, 503, 504, 506, 507, 508, 509, 445,
	446, 462, 308, 302, 256, 300, 301, 305, 306, 309,
	118, 0, 0, 0, 0, 0, 0, 1644, 0, 0,
	0, 0, 0, 0, 1655, 1656, 1657, 0, 131, 0,
	148, 0, 25, 198, 235, 457, 0, 0, 297, 0,
	350, 354, 0, 448, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 136, 494, 447, 266, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 341, 274, 0, 498, 370, 143, 190, 177, 219,
	261, 378, 0, 0, 251, 427, 186, 276, 0, 165,
	310, 0, 402, 273, 0, 385, 405, 0, 294, 171,
	333, 392, 393, 0, 0, 0, 0, 0, 175, 176,
	299, 157, 307, 510, 475, 363, 320, 318, 0, 285,
	342, 505, 0, 0, 205, 0, 200, 298, 442, 163,
	421, 336, 303, 255, 366, 397, 202, 187, 188, 231,
	335, 221, 173, 432, 472, 476, 474, 470, 467, 471,
	468, 469, 473, 222, 466, 0, 440, 450, 484, 464,
	492, 449, 489, 459, 197, 488, 453, 452, 499, 479,
	480, 433, 495, 465, 463, 456, 455, 451, 0, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 132,
	0, 133, 134, 135, 137, 138, 139, 0, 140, 141,
	142, 145, 146, 147, 149, 150, 151, 152, 153, 154,
	155, 156, 454, 0, 158, 159, 160, 161, 162, 164,
	166, 167, 168, 169, 170, 172, 174, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 180, 181, 182, 183,
	0, 184, 185, 189, 191, 192, 193, 194, 195, 196,
	199, 0, 201, 203, 0, 204, 207, 0, 208, 209,
	210, 211, 212, 213, 214, 215, 458, 216, 0, 217,
	218, 220, 0, 223, 224, 225, 226, 227, 0, 228,
	460, 461, 229, 230, 232, 233, 234, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	248, 249, 250, 252, 0, 253, 254, 257, 258, 259,
	260, 0, 262, 477, 0, 263, 264, 265, 0, 0,
	267, 268, 269, 270, 271, 272, 275, 478, 277, 278,
	279, 280, 281, 282, 283, 284, 286, 287, 288, 289,
	290, 291, 292, 481, 482, 293, 295, 296, 483, 485,
	486, 0, 311, 312, 313, 314, 315, 316, 317, 319,
	0, 321, 322, 323, 487, 324, 325, 326, 327, 0,
	328, 329, 330, 331, 332, 334, 337, 338, 339, 340,
	0, 343, 344, 345, 346, 347, 348, 349, 351, 352,
	353, 355, 356, 357, 358, 359, 360, 361, 362, 490,
	364, 365, 367, 368, 369, 371, 372, 373, 374, 375,
	376, 377, 0, 379, 491, 380, 381, 382, 383, 384,
	0, 386, 387, 388, 389, 390, 391, 394, 395, 396,
	398, 399, 493, 400, 401, 0, 403, 404, 0, 406,
	407, 408, 409, 410, 0, 411, 412, 496, 413, 497,
	414, 415, 416, 417, 418, 419, 420, 422, 0, 0,
	424, 425, 426, 428, 429, 430, 431, 434, 435, 436,
	437, 438, 0, 439, 441, 443, 444, 500, 501, 502,
	503, 504, 506, 507, 508, 509, 445, 446, 462, 308,
	302, 256, 300, 301, 305, 306, 309, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1652, 1653, 1654, 0, 0, 0, 0,
	0, 118, 1646, 1647, 1648, 1649, 1650, 1651, 1644, 0,
	0, 0, 0, 0, 0, 1655, 1656, 1657, 0, 131,
	0, 148, 0, 0, 198, 235, 457, 0, 0, 297,
	0, 350, 354, 0, 448, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	0, 0, 136, 494, 447, 266, 0, 0, 0, 2570,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 274, 0, 498, 370, 143, 190, 177,
	219, 261, 378, 0, 0, 251, 427, 186, 276, 0,
	165, 310, 0, 402, 273, 0, 385, 405, 0, 294,
	171, 333, 392, 393, 0, 0, 0, 0, 0, 175,
	176, 299, 157, 307, 510, 475, 363, 320, 318, 0,
	285, 342, 505, 0, 0, 205, 0, 200, 298, 442,
	163, 421, 336, 303, 255, 366, 397, 202, 187, 188,
	231, 335, 221, 173, 432, 472, 476, 474, 470, 467,
	471, 468, 469, 473, 222, 466, 0, 440, 450, 484,
	464, 492, 449, 489, 459, 197, 488, 453, 452, 499,
	479, 480, 433, 495, 465, 463, 456, 455, 451, 0,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	132, 0, 133, 134, 135, 137, 138, 139, 0, 140,
	141, 142, 145, 146, 147, 149, 150, 151, 152, 153,
	154, 155, 156, 454, 0, 158, 159, 160, 161, 162,
	164, 166, 167, 168, 169, 170, 172, 174, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 180, 181, 182,
	183, 0, 184, 185, 189, 191, 192, 193, 194, 195,
	196, 199, 0, 201, 203, 0, 204, 207, 0, 208,
	209, 210, 211, 212, 213, 214, 215, 458, 216, 0,
	217, 218, 220, 0, 223, 224, 225, 226, 227, 0,
	228, 460, 461, 229, 230, 232, 233, 234, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 248, 249, 250, 252, 0, 253, 254, 257, 258,
	259, 260, 0, 262, 477, 0, 263, 264, 265, 0,
	0, 267, 268, 269, 270, 271, 272, 275, 478, 277,
	278, 279, 280, 281, 282, 283, 284, 286, 287, 288,
	289, 290, 291, 292, 481, 482, 293, 295, 296, 483,
	485, 486, 0, 311, 312, 313, 314, 315, 316, 317,
	319, 0, 321, 322, 323, 487, 324, 325, 326, 327,
	0, 328, 329, 330, 331, 332, 334, 337, 338, 339,
	340, 0, 343, 344, 345, 346, 347, 348, 349, 351,
	352, 353, 355, 356, 357, 358, 359, 360, 361, 362,
	490, 364, 365, 367, 368, 369, 371, 372, 373, 374,
	375, 376, 377, 0, 379, 491, 380, 381, 382, 383,
	384, 0, 386, 387, 388, 389, 390, 391, 394, 395,
	396, 398, 399, 493, 400, 401, 0, 403, 404, 0,
	406, 407, 408, 409, 410, 0, 411, 412, 496, 413,
	497, 414, 415, 416, 417, 418, 419, 420, 422, 0,
	0, 424, 425, 426, 428, 429, 430, 431, 434, 435,
	436, 437, 438, 0, 439, 441, 443, 444, 500, 501,
	502, 503, 504, 506, 507, 508, 509, 445, 446, 462,
	308, 302, 256, 300, 301, 305, 306, 309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 1652, 1653, 1654, 0, 0, 0,
	0, 0, 0, 1646, 1647, 1648, 1649, 1650, 1651, 131,
	0, 148, 0, 0, 198, 235, 457, 0, 0, 297,
	0, 350, 354, 0, 448, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	0, 0, 136, 494, 447, 266, 0, 0, 0, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 274, 0, 498, 370, 143, 190, 177,
	219, 261, 378, 0, 0, 251, 427, 186, 276, 0,
	165, 310, 0, 402, 273, 0, 385, 405, 0, 294,
	171, 333, 392, 393, 0, 0, 0, 0, 0, 175,
	176, 299, 157, 307, 510, 475, 363, 320, 318, 0,
	285, 342, 505, 0, 0, 205, 0, 200, 298, 442,
	163, 421, 336, 303, 255, 366, 397, 202, 187, 188,
	231, 335, 221, 173, 432, 472, 476, 474, 470, 467,
	471, 468, 469, 473, 222, 466, 0, 440, 450, 484,
	464, 492, 449, 489, 459, 197, 488, 453, 452, 499,
	479, 480, 433, 495, 465, 463, 456, 455, 451, 0,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	132, 0, 133, 134, 135, 137, 138, 139, 0, 140,
	141, 142, 145, 146, 147, 149, 150, 151, 152, 153,
	154, 155, 156, 454, 0, 158, 159, 160, 161, 162,
	164, 166, 167, 168, 169, 170, 172, 174, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 180, 181, 182,
	183, 0, 184, 185, 189, 191, 192, 193, 194, 195,
	196, 199, 0, 201, 203, 0, 204, 207, 0, 208,
	209, 210, 211, 212, 213, 214, 215, 458, 216, 0,
	217, 218, 220, 0, 223, 224, 225, 226, 227, 0,
	228, 460, 461, 229, 230, 232, 233, 234, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 248, 249, 250, 252, 0, 253, 254, 257, 258,
	259, 260, 0, 262, 477, 0, 263, 264, 265, 0,
	0, 267, 268, 269, 270, 271, 272, 275, 478, 277,
	278, 279, 280, 281, 282, 283, 284, 286, 287, 288,
	289, 290, 291, 292, 481, 482, 293, 295, 296, 483,
	485, 486, 0, 311, 312, 313, 314, 315, 316, 317,
	319, 0, 321, 322, 323, 487, 324, 325, 326, 327,
	0, 328, 329, 330, 331, 332, 334, 337, 338, 339,
	340, 0, 343, 344, 345, 346, 347, 348, 349, 351,
	352, 353, 355, 356, 357, 358, 359, 360, 361, 362,
	490, 364, 365, 367, 368, 369, 371, 372, 373, 374,
	375, 376, 377, 0, 379, 491, 380, 381, 382, 383,
	384, 0, 386, 387, 388, 389, 390, 391, 394, 395,
	396, 398, 399, 493, 400, 401, 0, 403, 404, 0,
	406, 407, 408, 409, 410, 0, 411, 412, 496, 413,
	497, 414, 415, 416, 417, 418, 419, 420, 422, 0,
	0, 424, 425, 426, 428, 429, 430, 431, 434, 435,
	436, 437, 438, 0, 439, 441, 443, 444, 500, 501,
	502, 503, 504, 506, 507, 508, 509, 445, 446, 462,
	308, 302, 256, 300, 301, 305, 306, 309, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 148, 0,
	0, 198, 235, 457, 0, 2845, 297, 0, 350, 354,
	0, 448, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 136,
	494, 447, 266, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 341,
	274, 0, 498, 370, 143, 190, 177, 219, 261, 378,
	0, 0, 251, 427, 186, 276, 0, 165, 310, 0,
	402, 273, 0, 385, 405, 0, 294, 171, 333, 392,
	393, 0, 0, 0, 0, 0, 175, 176, 299, 157,
	307, 510, 475, 363, 320, 318, 0, 285, 342, 505,
	0, 0, 205, 0, 200, 298, 442, 163, 421, 336,
	303, 255, 366, 397, 202, 187, 188, 231, 335, 221,
	173, 432, 472, 476, 474, 470, 467, 471, 468, 469,
	473, 222, 466, 0, 440, 450, 484, 464, 492, 449,
	489, 459, 197, 488, 453, 452, 499, 479, 480, 433,
	495, 465, 463, 456, 455, 451, 0, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 132, 0, 133,
	134, 135, 137, 138, 139, 0, 140, 141, 142, 145,
	146, 147, 149, 150, 151, 152, 153, 154, 155, 156,
	454, 0, 158, 159, 160, 161, 162, 164, 166, 167,
	168, 169, 170, 172, 174, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 182, 183, 0, 184,
	185, 189, 191, 192, 193, 194, 195, 196, 199, 0,
	201, 203, 0, 204, 207, 0, 208, 209, 210, 211,
	212, 213, 214, 215, 458, 216, 0, 217, 218, 220,
	0, 223, 224, 225, 226, 227, 0, 228, 460, 461,
	229, 230, 232, 233, 234, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 248, 249,
	250, 252, 0, 253, 254, 257, 258, 259, 260, 0,
	262, 477, 0, 263, 264, 265, 0, 0, 267, 268,
	269, 270, 271, 272, 275, 478, 277, 278, 279, 280,
	281, 282, 283, 284, 286, 287, 288, 289, 290, 291,
	292, 481, 482, 293, 295, 296, 483, 485, 486, 0,
	311, 312, 313, 314, 315, 316, 317, 319, 0, 321,
	322, 323, 487, 324, 325, 326, 327, 0, 328, 329,
	330, 331, 332, 334, 337, 338, 339, 340, 0, 343,
	344, 345, 346, 347, 348, 349, 351, 352, 353, 355,
	356, 357, 358, 359, 360, 361, 362, 490, 364, 365,
	367, 368, 369, 371, 372, 373, 374, 375, 376, 377,
	0, 379, 491, 380, 381, 382, 383, 384, 0, 386,
	387, 388, 389, 390, 391, 394, 395, 396, 398, 399,
	493, 400, 401, 0, 403, 404, 0, 406, 407, 408,
	409, 410, 0, 411, 412, 496, 413, 497, 414, 415,
	416, 417, 418, 419, 420, 422, 0, 0, 424, 425,
	426, 428, 429, 430, 431, 434, 435, 436, 437, 438,
	0, 439, 441, 443, 444, 500, 501, 502, 503, 504,
	506, 507, 508, 509, 445, 446, 462, 308, 302, 256,
	300, 301, 305, 306, 309, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 148, 0, 0, 198, 235,
	457, 0, 2756, 297, 0, 350, 354, 0, 448, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 0, 0, 136, 494, 447, 266,
	0, 0, 0, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 341, 274, 0, 498,
	370, 143, 190, 177, 219, 261, 378, 0, 0, 251,
	427, 186, 276, 0, 165, 310, 0, 402, 273, 0,
	385, 405, 0, 294, 171, 333, 392, 393, 0, 0,
	0, 0, 0, 175, 176, 299, 157, 307, 510, 475,
	363, 320, 318, 0, 285, 342, 505, 0, 0, 205,
	0, 200, 298, 442, 163, 421, 336, 303, 255, 366,
	397, 202, 187, 188, 231, 335, 221, 173, 432, 472,
	476, 474, 470, 467, 471, 468, 469, 473, 222, 466,
	0, 440, 450, 484, 464, 492, 449, 489, 459, 197,
	488, 453, 452, 499, 479, 480, 433, 495, 465, 463,
	456, 455, 451, 0, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 132, 0, 133, 134, 135, 137,
	138, 139, 0, 140, 141, 142, 145, 146, 147, 149,
	150, 151, 152, 153, 154, 155, 156, 454, 0, 158,
	159, 160, 161, 162, 164, 166, 167, 168, 169, 170,
	172, 174, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 180, 181, 182, 183, 0, 184, 185, 189, 191,
	192, 193, 194, 195, 196, 199, 0, 201, 203, 0,
	204, 207, 0, 208, 209, 210, 211, 212, 213, 214,
	215, 458, 216, 0, 217, 218, 220, 0, 223, 224,
	225, 226, 227, 0, 228, 460, 461, 229, 230, 232,
	233, 234, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 248, 249, 250, 252, 0,
	253, 254, 257, 258, 259, 260, 0, 262, 477, 0,
	263, 264, 265, 0, 0, 267, 268, 269, 270, 271,
	272, 275, 478, 277, 278, 279, 280, 281, 282, 283,
	284, 286, 287, 288, 289, 290, 291, 292, 481, 482,
	293, 295, 296, 483, 485, 486, 0, 311, 312, 313,
	314, 315, 316, 317, 319, 0, 321, 322, 323, 487,
	324, 325, 326, 327, 0, 328, 329, 330, 331, 332,
	334, 337, 338, 339, 340, 0, 343, 344, 345, 346,
	347, 348, 349, 351, 352, 353, 355, 356, 357, 358,
	359, 360, 361, 362, 490, 364, 365, 367, 368, 369,
	371, 372, 373, 374, 375, 376, 377, 0, 379, 491,
	380, 381, 382, 383, 384, 0, 386, 387, 388, 389,
	390, 391, 394, 395, 396, 398, 399, 493, 400, 401,
	0, 403, 404, 0, 406, 407, 408, 409, 410, 0,
	411, 412, 496, 413, 497, 414, 415, 416, 417, 418,
	419, 420, 422, 0, 0, 424, 425, 426, 428, 429,
	430, 431, 434, 435, 436, 437, 438, 0, 439, 441,
	443, 444, 500, 501, 502, 503, 504, 506, 507, 508,
	509, 445, 446, 462, 308, 302, 256, 300, 301, 305,
	306, 309, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 148, 0, 0, 198, 235, 457, 0, 2753,
	297, 0, 350, 354, 29, 448, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 136, 494, 447, 266, 0, 0, 0,
	304, 26, 0, 0, 0, 27, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 274, 0, 1687, 370, 143, 190,
	177, 219, 261, 378, 0, 0, 251, 427, 186, 276,
	0, 165, 310, 0, 402, 273, 0, 385, 405, 0,
	294, 171, 333, 392, 393, 0, 0, 0, 0, 0,
	175, 176, 299, 157, 307, 510, 475, 363, 320, 318,
	0, 285, 342, 505, 0, 0, 205, 0, 200, 298,
	442, 163, 421, 336, 303, 255, 366, 397, 202, 187,
	188, 231, 335, 221, 173, 432, 472, 476, 474, 470,
	467, 471, 468, 469, 473, 222, 466, 0, 440, 450,
	484, 464, 492, 449, 489, 459, 197, 488, 453, 452,
	499, 479, 480, 433, 495, 465, 463, 456, 455, 451,
	0, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 132, 0, 133, 134, 135, 137, 138, 139, 0,
	140, 141, 142, 145, 146, 147, 149, 150, 151, 152,
	153, 154, 155, 156, 454, 0, 158, 159, 160, 161,
	162, 164, 166, 167, 168, 169, 170, 172, 174, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 180, 181,
	182, 183, 0, 184, 185, 189, 191, 192, 193, 194,
	195, 196, 199, 0, 201, 203, 0, 204, 207, 0,
	208, 209, 210, 211, 212, 213, 214, 215, 458, 216,
	0, 217, 218, 220, 0, 223, 224, 225, 226, 227,
	0, 228, 460, 461, 229, 230, 232, 233, 234, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 248, 249, 250, 252, 0, 253, 254, 257,
	258, 259, 260, 0, 262, 477, 0, 263, 264, 265,
	0, 0, 267, 268, 269, 270, 271, 272, 275, 478,
	277, 278, 279, 280, 281, 282, 283, 284, 286, 287,
	288, 289, 290, 291, 292, 481, 482, 293, 295, 296,
	483, 485, 486, 0, 311, 312, 313, 314, 315, 316,
	317, 319, 0, 321, 322, 323, 487, 324, 325, 326,
	327, 0, 328, 329, 330, 331, 332, 334, 337, 338,
	339, 340, 0, 343, 344, 345, 346, 347, 348, 349,
	351, 352, 353, 355, 356, 357, 358, 359, 360, 361,
	362, 490, 364, 365, 367, 368, 369, 371, 372, 373,
	374, 375, 376, 377, 0, 379, 491, 380, 381, 382,
	383, 384, 0, 386, 387, 388, 389, 390, 391, 394,
	395, 396, 398, 399, 493, 400, 401, 0, 403, 404,
	0, 406, 407, 408, 409, 410, 0, 411, 412, 496,
	413, 497, 414, 415, 416, 417, 418, 419, 420, 422,
	0, 0, 424, 425, 426, 428, 429, 430, 431, 434,
	435, 436, 437, 438, 0, 439, 441, 443, 444, 500,
	501, 502, 503, 504, 506, 507, 508, 509, 445, 446,
	462, 308, 302, 256, 300, 301, 305, 306, 309, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 30, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 1933, 148,
	0, 25, 198, 235, 457, 0, 0, 297, 0, 350,
	354, 0, 448, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 0, 0,
	136, 494, 447, 266, 0, 0, 0, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 274, 0, 498, 370, 143, 190, 177, 219, 261,
	378, 0, 0, 251, 427, 186, 276, 0, 165, 310,
	0, 402, 273, 0, 385, 405, 0, 294, 171, 333,
	392, 393, 0, 0, 0, 0, 0, 175, 176, 299,
	157, 307, 510, 475, 363, 320, 318, 0, 285, 342,
	505, 0, 0, 205, 0, 200, 298, 442, 163, 421,
	336, 303, 255, 366, 397, 202, 187, 188, 231, 335,
	221, 173, 432, 472, 476, 474, 470, 467, 471, 468,
	469, 473, 222, 466, 0, 440, 450, 484, 464, 492,
	449, 489, 459, 197, 488, 453, 452, 499, 479, 480,
	433, 495, 465, 463, 456, 455, 451, 0, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 132, 0,
	133, 134, 135, 137, 138, 139, 0, 140, 141, 142,
	145, 146, 147, 149, 150, 151, 152, 153, 154, 155,
	156, 454, 0, 158, 159, 160, 161, 162, 164, 166,
	167, 168, 169, 170, 172, 174, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 180, 181, 182, 183, 0,
	184, 185, 189, 191, 192, 193, 194, 195, 196, 199,
	0, 201, 203, 0, 204, 207, 0, 208, 209, 210,
	211, 212, 213, 214, 215, 458, 216, 0, 217, 218,
	220, 0, 223, 224, 225, 226, 227, 0, 228, 460,
	461, 229, 230, 232, 233, 234, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 248,
	249, 250, 252, 0, 253, 254, 257, 258, 259, 260,
	0, 262, 477, 0, 263, 264, 265, 0, 0, 267,
	268, 269, 270, 271, 272, 275, 478, 277, 278, 279,
	280, 281, 282, 283, 284, 286, 287, 288, 289, 290,
	291, 292, 481, 482, 293, 295, 296, 483, 485, 486,
	0, 311, 312, 313, 314, 315, 316, 317, 319, 0,
	321, 322, 323, 487, 324, 325, 326, 327, 0, 328,
	329, 330, 331, 332, 334, 337, 338, 339, 340, 0,
	343, 344, 345, 346, 347, 348, 349, 351, 352, 353,
	355, 356, 357, 358, 359, 360, 361, 362, 490, 364,
	365, 367, 368, 369, 371, 372, 373, 374, 375, 376,
	377, 0, 379, 491, 380, 381, 382, 383, 384, 0,
	386, 387, 388, 389, 390, 391, 394, 395, 396, 398,
	399, 493, 400, 401, 0, 403, 404, 0, 406, 407,
	408, 409, 410, 0, 411, 412, 496, 413, 497, 414,
	415, 416, 417, 418, 419, 420, 422, 0, 0, 424,
	425, 426, 428, 429, 430, 431, 434, 435, 436, 437,
	438, 0, 439, 441, 443, 444, 500, 501, 502, 503,
	504, 506, 507, 508, 509, 445, 446, 462, 308, 302,
	256, 300, 301, 305, 306, 309, 131, 0, 148, 557,
	0, 198, 235, 457, 0, 0, 297, 0, 350, 354,
	0, 448, 0, 0, 0, 0, 206, 0, 562, 668,
	568, 0, 574, 0, 423, 0, 564, 565, 570, 136,
	494, 447, 266, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 0,
	566, 563, 567, 573, 561, 571, 558, 569, 0, 341,
	274, 0, 498, 370, 143, 190, 177, 219, 261, 378,
	0, 0, 251, 427, 186, 276, 0, 165, 310, 0,
	402, 273, 0, 385, 405, 0, 294, 171, 333, 392,
	393, 555, 560, 0, 576, 0, 175, 176, 299, 157,
	307, 510, 475, 363, 320, 318, 0, 285, 342, 505,
	0, 0, 205, 0, 200, 298, 442, 163, 421, 336,
	303, 255, 366, 397, 202, 187, 188, 231, 335, 221,
	173, 432, 472, 476, 474, 470, 467, 471, 468, 469,
	473, 222, 466, 0, 440, 450, 484, 464, 492, 449,
	489, 459, 197, 488, 453, 452, 499, 479, 480, 433,
	495, 465, 463, 456, 455, 451, 0, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 132, 0, 133,
	134, 135, 137, 138, 139, 554, 140, 141, 142, 145,
	146, 147, 149, 150, 151, 152, 153, 154, 155, 156,
	454, 556, 158, 159, 160, 161, 162, 164, 166, 167,
	168, 169, 170, 172, 174, 0, 0, 586, 559, 0,
	0, 587, 178, 179, 180, 181, 182, 183, 0, 184,
	185, 189, 191, 192, 193, 194, 195, 196, 199, 0,
	201, 203, 0, 204, 207, 0, 208, 209, 210, 211,
	212, 213, 214, 215, 458, 216, 0, 217, 218, 220,
	0, 223, 224, 225, 226, 227, 0, 228, 460, 461,
	229, 230, 232, 233, 234, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 248, 249,
	250, 252, 0, 253, 254, 257, 258, 259, 260, 0,
	262, 477, 0, 263, 264, 265, 0, 0, 267, 268,
	269, 270, 271, 272, 275, 478, 277, 278, 279, 280,
	281, 282, 283, 284, 286, 287, 288, 289, 290, 291,
	292, 481, 482, 293, 295, 296, 483, 485, 486, 572,
	311, 312, 313, 314, 315, 316, 317, 319, 0, 321,
	322, 323, 487, 324, 325, 326, 327, 0, 328, 329,
	330, 331, 332, 334, 337, 338, 339, 340, 0, 343,
	344, 345, 346, 347, 348, 349, 351, 352, 353, 355,
	356, 357, 358, 359, 360, 361, 362, 490, 364, 365,
	367, 368, 369, 371, 372, 373, 374, 375, 376, 377,
	588, 379, 491, 380, 381, 382, 383, 384, 0, 386,
	387, 388, 389, 390, 391, 394, 395, 396, 398, 399,
	493, 400, 401, 0, 403, 404, 575, 406, 407, 408,
	409, 410, 0, 411, 412, 496, 413, 497, 414, 415,
	416, 417, 418, 419, 420, 422, 0, 0, 424, 425,
	426, 428, 429, 430, 431, 434, 435, 436, 437, 438,
	0, 439, 441, 443, 444, 500, 501, 502, 503, 504,
	506, 507, 508, 509, 445, 446, 462, 308, 302, 256,
	300, 301, 305, 306, 309, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 148, 0, 0, 198, 235,
	457, 0, 0, 297, 0, 350, 354, 0, 448, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 0, 0, 136, 494, 447, 266,
	0, 0, 0, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 341, 274, 0, 498,
	370, 143, 190, 177, 219, 261, 378, 0, 0, 251,
	427, 186, 276, 0, 165, 310, 0, 402, 273, 0,
	385, 405, 0, 294, 171, 333, 392, 393, 0, 0,
	0, 0, 0, 175, 176, 299, 157, 307, 510, 475,
	363, 320, 318, 0, 285, 342, 505, 0, 0, 205,
	0, 200, 298, 442, 163, 421, 336, 303, 255, 366,
	397, 202, 187, 188, 231, 335, 221, 173, 432, 472,
	476, 474, 470, 467, 471, 468, 469, 473, 222, 466,
	0, 440, 450, 484, 464, 492, 449, 489, 459, 197,
	488, 453, 452, 499, 479, 480, 433, 495, 465, 463,
	456, 455, 451, 0, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 132, 0, 133, 134, 135, 137,
	138, 139, 0, 140, 141, 142, 145, 146, 147, 149,
	150, 151, 152, 153, 154, 155, 156, 454, 0, 158,
	159, 160, 161, 162, 164, 166, 167, 168, 169, 170,
	172, 174, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 180, 181, 182, 183, 0, 184, 185, 189, 191,
	192, 193, 194, 195, 196, 199, 0, 201, 203, 0,
	204, 207, 0, 208, 209, 210, 211, 212, 213, 214,
	215, 458, 216, 0, 217, 218, 220, 0, 223, 224,
	225, 226, 227, 0, 228, 460, 461, 229, 230, 232,
	233, 234, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 248, 249, 250, 252, 0,
	253, 254, 257, 258, 259, 260, 0, 262, 477, 0,
	263, 264, 265, 0, 0, 267, 268, 269, 270, 271,
	272, 275, 478, 277, 278, 279, 280, 281, 282, 283,
	284, 286, 287, 288, 289, 290, 291, 292, 481, 482,
	293, 295, 296, 483, 485, 486, 0, 311, 312, 313,
	314, 315, 316, 317, 319, 0, 321, 322, 323, 487,
	324, 325, 326, 327, 0, 328, 329, 330, 331, 332,
	334, 337, 338, 339, 340, 0, 343, 344, 345, 346,
	347, 348, 349, 351, 352, 353, 355, 356, 357, 358,
	359, 360, 361, 362, 490, 364, 365, 367, 368, 369,
	371, 372, 373, 374, 375, 376, 377, 0, 379, 491,
	380, 381, 382, 383, 384, 0, 386, 387, 388, 389,
	390, 391, 394, 395, 396, 398, 399, 493, 400, 401,
	0, 403, 404, 0, 406, 407, 408, 409, 410, 0,
	411, 412, 496, 413, 497, 414, 415, 416, 417, 418,
	419, 420, 422, 0, 0, 424, 425, 426, 428, 429,
	430, 431, 434, 435, 436, 437, 438, 0, 439, 441,
	443, 444, 500, 501, 502, 503, 504, 506, 507, 508,
	509, 445, 446, 462, 308, 302, 256, 300, 301, 305,
	306, 309, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 148, 0, 1456, 198, 235, 457, 0, 0,
	297, 0, 350, 354, 0, 448, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 136, 494, 447, 266, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 274, 0, 498, 370, 143, 190,
	177, 219, 261, 378, 0, 0, 251, 427, 186, 276,
	0, 165, 310, 0, 402, 273, 0, 385, 405, 0,
	294, 171, 333, 392, 393, 0, 0, 0, 0, 0,
	175, 176, 299, 157, 307, 510, 475, 363, 320, 318,
	0, 285, 342, 505, 0, 0, 205, 0, 200, 298,
	442, 163, 421, 336, 303, 255, 366, 397, 202, 187,
	188, 231, 335, 221, 173, 432, 472, 476, 474, 470,
	467, 471, 468, 469, 473, 222, 466, 0, 440, 450,
	484, 464, 492, 449, 489, 459, 197, 488, 453, 452,
	499, 479, 480, 433, 495, 465, 463, 456, 455, 451,
	0, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 132, 0, 133, 134, 135, 137, 138, 139, 0,
	140, 141, 142, 145, 146, 147, 149, 150, 151, 152,
	153, 154, 155, 156, 454, 0, 158, 159, 160, 161,
	162, 164, 166, 167, 168, 169, 170, 172, 174, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 180, 181,
	182, 183, 0, 184, 185, 189, 191, 192, 193, 194,
	195, 196, 199, 0, 201, 203, 0, 204, 207, 0,
	208, 209, 210, 211, 212, 213, 214, 215, 458, 216,
	0, 217, 218, 220, 0, 223, 224, 225, 226, 227,
	0, 228, 460, 461, 229, 230, 232, 233, 234, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 248, 249, 250, 252, 0, 253, 254, 257,
	258, 259, 260, 0, 262, 477, 0, 263, 264, 265,
	0, 0, 267, 268, 269, 270, 271, 272, 275, 478,
	277, 278, 279, 280, 281, 282, 283, 284, 286, 287,
	288, 289, 290, 291, 292, 481, 482, 293, 295, 296,
	483, 485, 486, 0, 311, 312, 313, 314, 315, 316,
	317, 319, 0, 321, 322, 323, 487, 324, 325, 326,
	327, 0, 328, 329, 330, 331, 332, 334, 337, 338,
	339, 340, 0, 343, 344, 345, 346, 347, 348, 349,
	351, 352, 353, 355, 356, 357, 358, 359, 360, 361,
	362, 490, 364, 365, 367, 368, 369, 371, 372, 373,
	374, 375, 376, 377, 0, 379, 491, 380, 381, 382,
	383, 384, 0, 386, 387, 388, 389, 390, 391, 394,
	395, 396, 398, 399, 493, 400, 401, 0, 403, 404,
	0, 406, 407, 408, 409, 410, 0, 411, 412, 496,
	413, 497, 414, 415, 416, 417, 418, 419, 420, 422,
	0, 0, 424, 425, 426, 428, 429, 430, 431, 434,
	435, 436, 437, 438, 0, 439, 441, 443, 444, 500,
	501, 502, 503, 504, 506, 507, 508, 509, 445, 446,
	462, 308, 302, 256, 300, 301, 305, 306, 309, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 148,
	557, 705, 198, 235, 457, 0, 0, 297, 0, 350,
	354, 0, 448, 0, 0, 0, 0, 206, 0, 562,
	0, 568, 0, 574, 0, 423, 0, 564, 565, 570,
	136, 494, 447, 266, 0, 0, 0, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 0, 0, 0,
	0, 566, 563, 567, 573, 561, 571, 558, 569, 0,
	341, 274, 0, 498, 370, 143, 190, 177, 219, 261,
	378, 0, 0, 251, 427, 186, 276, 0, 165, 310,
	0, 402, 273, 0, 385, 405, 0, 294, 171, 333,
	392, 393, 555, 560, 0, 576, 0, 175, 176, 299,
	157, 307, 510, 475, 363, 320, 318, 0, 285, 342,
	505, 0, 0, 205, 0, 200, 298, 442, 163, 421,
	336, 303, 255, 366, 397, 202, 187, 188, 231, 335,
	221, 173, 432, 472, 476, 474, 470, 467, 471, 468,
	469, 473, 222, 466, 0, 440, 450, 484, 464, 492,
	449, 489, 459, 197, 488, 453, 452, 499, 479, 480,
	433, 495, 465, 463, 456, 455, 451, 0, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 132, 0,
	133, 134, 135, 137, 138, 139, 554, 140, 141, 142,
	145, 146, 147, 149, 150, 151, 152, 153, 154, 155,
	156, 454, 556, 158, 159, 160, 161, 162, 164, 166,
	167, 168, 169, 170, 172, 174, 0, 0, 0, 559,
	0, 0, 0, 178, 179, 180, 181, 182, 183, 0,
	184, 185, 189, 191, 192, 193, 194, 195, 196, 199,
	0, 201, 203, 0, 204, 207, 0, 208, 209, 210,
	211, 212, 213, 214, 215, 458, 216, 0, 217, 218,
	220, 0, 223, 224, 225, 226, 227, 0, 228, 460,
	461, 229, 230, 232, 233, 234, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 248,
	249, 250, 252, 0, 253, 254, 257, 258, 259, 260,
	0, 262, 477, 0, 263, 264, 265, 0, 0, 267,
	268, 269, 270, 271, 272, 275, 478, 277, 278, 279,
	280, 281, 282, 283, 284, 286, 287, 288, 289, 290,
	291, 292, 481, 482, 293, 295, 296, 483, 485, 486,
	572, 311, 312, 313, 314, 315, 316, 317, 319, 0,
	321, 322, 323, 487, 324, 325, 326, 327, 0, 328,
	329, 330, 331, 332, 334, 337, 338, 339, 340, 0,
	343, 344, 345, 346, 347, 348, 349, 351, 352, 353,
	355, 356, 357, 358, 359, 360, 361, 362, 490, 364,
	365, 367, 368, 369, 371, 372, 373, 374, 375, 376,
	377, 0, 379, 491, 380, 381, 382, 383, 384, 0,
	386, 387, 388, 389, 390, 391, 394, 395, 396, 398,
	399, 493, 400, 401, 0, 403, 404, 575, 406, 407,
	408, 409, 410, 0, 411, 412, 496, 413, 497, 414,
	415, 416, 417, 418, 419, 420, 422, 0, 0, 424,
	425, 426, 428, 429, 430, 431, 434, 435, 436, 437,
	438, 0, 439, 441, 443, 444, 500, 501, 502, 503,
	504, 506, 507, 508, 509, 445, 446, 462, 308, 302,
	256, 300, 301, 305, 306, 309, 131, 0, 148, 557,
	0, 198, 235, 457, 0, 0, 297, 0, 350, 354,
	0, 448, 0, 0, 0, 0, 206, 0, 562, 0,
	568, 0, 574, 0, 423, 0, 564, 565, 570, 136,
	494, 447, 266, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 0,
	566, 563, 567, 573, 561, 571, 558, 569, 0, 341,
	274, 0, 498, 370, 143, 190, 177, 219, 261, 378,
	0, 0, 251, 427, 186, 276, 0, 165, 310, 0,
	402, 273, 0, 385, 405, 0, 294, 171, 333, 392,
	393, 555, 560, 0, 576, 0, 175, 176, 299, 157,
	307, 510, 475, 363, 320, 318, 0, 285, 342, 505,
	0, 0, 205, 0, 200, 298, 442, 163, 421, 336,
	303, 255, 366, 397, 202, 187, 188, 231, 335, 221,
	173, 432, 472, 476, 474, 470, 467, 471, 468, 469,
	473, 222, 466, 0, 440, 450, 484, 464, 492, 449,
	489, 459, 197, 488, 453, 452, 499, 479, 480, 433,
	495, 465, 463, 456, 455, 451, 0, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 132, 0, 133,
	134, 135, 137, 138, 139, 554, 140, 141, 142, 145,
	146, 147, 149, 150, 151, 152, 153, 154, 155, 156,
	454, 556, 158, 159, 160, 161, 162, 164, 166, 167,
	168, 169, 170, 172, 174, 0, 0, 0, 559, 0,
	0, 0, 178, 179, 180, 181, 182, 183, 0, 184,
	185, 189, 191, 192, 193, 194, 195, 196, 199, 0,
	201, 203, 0, 204, 207, 0, 208, 209, 210, 211,
	212, 213, 214, 215, 458, 216, 0, 217, 218, 220,
	0, 223, 224, 225, 226, 227, 0, 228, 460, 461,
	229, 230, 232, 233, 234, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 248, 249,
	250, 252, 0, 253, 254, 257, 258, 259, 260, 0,
	262, 477, 0, 263, 264, 265, 0, 0, 267, 268,
	269, 270, 271, 272, 275, 478, 277, 278, 279, 280,
	281, 282, 283, 284, 286, 287, 288, 289, 290, 291,
	292, 481, 482, 293, 295, 296, 483, 485, 486, 572,
	311, 312, 313, 314, 315, 316, 317, 319, 0, 321,
	322, 323, 487, 324, 325, 326, 327, 0, 328, 329,
	330, 331, 332, 334, 337, 338, 339, 340, 0, 343,
	344, 345, 346, 347, 348, 349, 351, 352, 353, 355,
	356, 357, 358, 359, 360, 361, 362, 490, 364, 365,
	367, 368, 369, 371, 372, 373, 374, 375, 376, 377,
	0, 379, 491, 380, 381, 382, 383, 384, 0, 386,
	387, 388, 389, 390, 391, 394, 395, 396, 398, 399,
	493, 400, 401, 0, 403, 404, 575, 406, 407, 408,
	409, 410, 0, 411, 412, 496, 413, 497, 414, 415,
	416, 417, 418, 419, 420, 422, 0, 0, 424, 425,
	426, 428, 429, 430, 431, 434, 435, 436, 437, 438,
	0, 439, 441, 443, 444, 500, 501, 502, 503, 504,
	506, 507, 508, 509, 445, 446, 462, 308, 302, 256,
	300, 301, 305, 306, 309, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 148, 0, 0, 198, 1482,
	457, 0, 0, 297, 0, 350, 354, 0, 448, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 0, 0, 136, 494, 447, 266,
	0, 0, 0, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 341, 274, 0, 498,
	370, 143, 190, 177, 219, 261, 378, 0, 0, 251,
	427, 186, 276, 0, 165, 310, 0, 402, 273, 0,
	385, 405, 0, 294, 171, 333, 392, 393, 0, 0,
	1486, 0, 0, 175, 176, 299, 157, 307, 510, 475,
	363, 320, 318, 0, 285, 342, 505, 0, 0, 205,
	0, 200, 298, 442, 163, 421, 336, 303, 255, 366,
	397, 202, 187, 188, 231, 335, 221, 173, 432, 472,
	476, 474, 470, 467, 471, 468, 469, 473, 222, 466,
	0, 440, 450, 484, 464, 492, 449, 489, 459, 197,
	488, 453, 452, 499, 479, 480, 433, 495, 465, 463,
	456, 455, 451, 0, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 132, 0, 133, 134, 135, 137,
	138, 139, 0, 140, 141, 142, 145, 146, 147, 149,
	150, 151, 152, 153, 154, 155, 156, 454, 0, 158,
	159, 160, 161, 162, 164, 166, 167, 168, 169, 170,
	172, 174, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 180, 181, 182, 183, 0, 184, 185, 189, 191,
	192, 193, 194, 195, 196, 199, 0, 201, 203, 0,
	204, 207, 0, 1492, 209, 210, 211, 212, 213, 214,
	215, 458, 216, 0, 217, 218, 220, 1491, 223, 224,
	225, 226, 227, 0, 228, 460, 461, 229, 230, 232,
	233, 234, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 248, 249, 250, 252, 0,
	253, 254, 257, 258, 259, 260, 0, 262, 477, 0,
	263, 264, 265, 0, 0, 267, 268, 269, 270, 271,
	272, 275, 478, 277, 278, 279, 280, 281, 282, 283,
	284, 286, 287, 288, 289, 290, 291, 292, 481, 482,
	293, 295, 296, 483, 485, 486, 0, 311, 312, 313,
	314, 315, 316, 317, 319, 0, 321, 322, 323, 487,
	324, 325, 326, 327, 1490, 328, 329, 330, 331, 332,
	334, 337, 338, 339, 340, 0, 343, 344, 345, 346,
	347, 348, 349, 351, 352, 353, 355, 356, 357, 358,
	359, 360, 361, 362, 490, 364, 365, 367, 368, 369,
	371, 372, 373, 374, 375, 376, 377, 0, 379, 491,
	380, 381, 382, 383, 384, 0, 386, 387, 388, 389,
	390, 391, 394, 395, 396, 398, 399, 493, 400, 401,
	0, 403, 404, 0, 406, 407, 408, 409, 410, 0,
	411, 412, 496, 413, 497, 414, 415, 416, 417, 418,
	419, 420, 422, 0, 1489, 424, 425, 426, 428, 429,
	430, 431, 434, 435, 436, 437, 438, 0, 439, 441,
	443, 444, 500, 501, 502, 503, 504, 506, 507, 508,
	509, 445, 446, 462, 308, 302, 256, 300, 301, 305,
	306, 309, 118, 0, 0, 0, 1488, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 148, 0, 0, 198, 235, 457, 0, 0,
	297, 0, 350, 354, 0, 448, 0, 0, 0, 0,
	206, 0, 0, 0, 1725, 0, 0, 0, 423, 0,
	0, 0, 0, 136, 494, 447, 266, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 274, 0, 498, 370, 143, 190,
	177, 219, 261, 378, 0, 0, 251, 427, 186, 276,
	0, 165, 310, 0, 402, 273, 0, 385, 405, 0,
	294, 171, 333, 392, 393, 0, 0, 1486, 0, 0,
	175, 176, 299, 157, 307, 510, 475, 363, 320, 318,
	0, 285, 342, 505, 0, 0, 205, 0, 200, 298,
	442, 163, 421, 336, 303, 255, 366, 397, 202, 187,
	188, 231, 335, 221, 173, 432, 472, 476, 474, 470,
	467, 471, 468, 469, 473, 222, 466, 0, 440, 450,
	484, 464, 492, 449, 489, 459, 197, 488, 453, 452,
	499, 479, 480, 433, 495, 465, 463, 456, 455, 451,
	0, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 132, 0, 133, 134, 135, 137, 138, 139, 0,
	140, 141, 142, 145, 146, 147, 149, 150, 151, 152,
	153, 154, 155, 156, 454, 0, 158, 159, 160, 161,
	162, 164, 166, 167, 168, 169, 170, 172, 174, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 180, 181,
	182, 183, 0, 184, 185, 189, 191, 192, 193, 194,
	195, 196, 199, 0, 201, 203, 0, 204, 207, 0,
	1492, 209, 210, 211, 212, 213, 214, 215, 458, 216,
	0, 217, 218, 220, 1491, 223, 224, 225, 226, 227,
	0, 228, 460, 461, 229, 230, 232, 233, 234, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 248, 249, 250, 252, 0, 253, 254, 257,
	258, 259, 260, 0, 262, 477, 0, 263, 264, 265,
	0, 0, 267, 268, 269, 270, 271, 272, 275, 478,
	277, 278, 279, 280, 281, 282, 283, 284, 286, 287,
	288, 289, 290, 291, 292, 481, 482, 293, 295, 296,
	483, 485, 486, 0, 311, 312, 313, 314, 315, 316,
	317, 319, 0, 321, 322, 323, 487, 324, 325, 326,
	327, 1490, 328, 329, 330, 331, 332, 334, 337, 338,
	339, 340, 0, 343, 344, 345, 346, 347, 348, 349,
	351, 352, 353, 355, 356, 357, 358, 359, 360, 361,
	362, 490, 364, 365, 367, 368, 369, 371, 372, 373,
	374, 375, 376, 377, 0, 379, 491, 380, 381, 382,
	383, 384, 0, 386, 387, 388, 389, 390, 391, 394,
	395, 396, 398, 399, 493, 400, 401, 0, 403, 404,
	0, 406, 407, 408, 409, 410, 0, 411, 412, 496,
	413, 497, 414, 415, 416, 417, 418, 419, 420, 422,
	0, 1489, 424, 425, 426, 428, 429, 430, 431, 434,
	435, 436, 437, 438, 0, 439, 441, 443, 444, 500,
	501, 502, 503, 504, 506, 507, 508, 509, 445, 446,
	462, 308, 302, 256, 300, 301, 305, 306, 309, 118,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 148,
	0, 0, 198, 235, 457, 0, 0, 297, 0, 350,
	354, 0, 448, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 0, 0,
	136, 494, 447, 266, 0, 0, 0, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 274, 0, 498, 370, 143, 190, 177, 219, 261,
	378, 0, 0, 251, 427, 186, 276, 0, 165, 310,
	0, 402, 273, 0, 385, 405, 0, 294, 171, 333,
	392, 393, 0, 0, 1486, 0, 0, 175, 176, 299,
	157, 307, 510, 475, 363, 320, 318, 0, 285, 342,
	505, 0, 0, 205, 0, 200, 298, 442, 163, 421,
	336, 303, 255, 366, 397, 202, 187, 188, 231, 335,
	221, 173, 432, 472, 476, 474, 470, 467, 471, 468,
	469, 473, 222, 466, 0, 440, 450, 484, 464, 492,
	449, 489, 459, 197, 488, 453, 452, 499, 479, 480,
	433, 495, 465, 463, 456, 455, 451, 0, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 132, 0,
	133, 134, 135, 137, 138, 139, 0, 140, 141, 142,
	145, 146, 147, 149, 150, 151, 152, 153, 154, 155,
	156, 454, 0, 158, 159, 160, 161, 162, 164, 166,
	167, 168, 169, 170, 172, 174, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 180, 181, 182, 183, 0,
	184, 185, 189, 191, 192, 193, 194, 195, 196, 199,
	0, 201, 203, 0, 204, 207, 0, 1492, 209, 210,
	211, 212, 213, 214, 215, 458, 216, 0, 217, 218,
	220, 1491, 223, 224, 225, 226, 227, 0, 228, 460,
	461, 229, 230, 232, 233, 234, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 248,
	249, 250, 252, 0, 253, 254, 257, 258, 259, 260,
	0, 262, 477, 0, 263, 264, 265, 0, 0, 267,
	268, 269, 270, 271, 272, 275, 478, 277, 278, 279,
	280, 281, 282, 283, 284, 286, 287, 288, 289, 290,
	291, 292, 481, 482, 293, 295, 296, 483, 485, 486,
	0, 311, 312, 313, 314, 315, 316, 317, 319, 0,
	321, 322, 323, 487, 324, 325, 326, 327, 1490, 328,
	329, 330, 331, 332, 334, 337, 338, 339, 340, 0,
	343, 344, 345, 346, 347, 348, 349, 351, 352, 353,
	355, 356, 357, 358, 359, 360, 361, 362, 490, 364,
	365, 367, 368, 369, 371, 372, 373, 374, 375, 376,
	377, 0, 379, 491, 380, 381, 382, 383, 384, 0,
	386, 387, 388, 389, 390, 391, 394, 395, 396, 398,
	399, 493, 400, 401, 0, 403, 404, 0, 406, 407,
	408, 409, 410, 0, 411, 412, 496, 413, 497, 414,
	415, 416, 417, 418, 419, 420, 422, 0, 1489, 424,
	425, 426, 428, 429, 430, 431, 434, 435, 436, 437,
	438, 0, 439, 441, 443, 444, 500, 501, 502, 503,
	504, 506, 507, 508, 509, 445, 446, 462, 308, 302,
	256, 300, 301, 305, 306, 309, 118, 0, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1777, 131, 0, 148, 0, 0, 198,
	235, 457, 0, 0, 297, 0, 350, 354, 0, 448,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 136, 494, 447,
	266, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 341, 274, 0,
	498, 370, 143, 190, 177, 219, 261, 378, 0, 0,
	251, 427, 186, 276, 0, 165, 310, 1778, 402, 273,
	0, 385, 405, 0, 294, 171, 333, 392, 393, 0,
	0, 0, 0, 0, 175, 176, 299, 157, 307, 510,
	475, 363, 320, 318, 0, 285, 342, 505, 0, 0,
	205, 0, 200, 298, 442, 163, 421, 336, 303, 255,
	366, 397, 202, 187, 188, 231, 335, 221, 173, 432,
	472, 476, 474, 470, 467, 471, 468, 469, 473, 222,
	466, 0, 440, 450, 484, 464, 492, 449, 489, 459,
	197, 488, 453, 452, 499, 479, 480, 433, 495, 465,
	463, 456, 455, 451, 0, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 132, 0, 133, 134, 135,
	137, 138, 139, 0, 140, 141, 142, 145, 146, 147,
	149, 150, 151, 152, 153, 154, 155, 156, 454, 0,
	158, 159, 160, 161, 162, 164, 166, 167, 168, 169,
	170, 172, 174, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 182, 183, 0, 184, 185, 189,
	191, 192, 193, 194, 195, 196, 199, 0, 201, 203,
	0, 204, 207, 0, 208, 209, 210, 211, 212, 213,
	214, 215, 458, 216, 0, 217, 218, 220, 0, 223,
	224, 225, 226, 227, 0, 228, 460, 461, 229, 230,
	232, 233, 234, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 248, 249, 250, 252,
	0, 253, 254, 257, 258, 259, 260, 0, 262, 477,
	0, 263, 264, 265, 0, 0, 267, 268, 269, 270,
	271, 272, 275, 478, 277, 278, 279, 280, 281, 282,
	283, 284, 286, 287, 288, 289, 290, 291, 292, 481,
	482, 293, 295, 296, 483, 485, 486, 0, 311, 312,
	313, 314, 315, 316, 317, 319, 0, 321, 322, 323,
	487, 324, 325, 326, 327, 0, 328, 329, 330, 331,
	332, 334, 337, 338, 339, 340, 0, 343, 344, 345,
	346, 347, 348, 349, 351, 352, 353, 355, 356, 357,
	358, 359, 360, 361, 362, 490, 364, 365, 367, 368,
	369, 371, 372, 373, 374, 375, 376, 377, 0, 379,
	491, 380, 381, 382, 383, 384, 0, 386, 387, 388,
	389, 390, 391, 394, 395, 396, 398, 399, 493, 400,
	401, 0, 403, 404, 0, 406, 407, 408, 409, 410,
	0, 411, 412, 496, 413, 497, 414, 415, 416, 417,
	418, 419, 420, 422, 0, 0, 424, 425, 426, 428,
	429, 430, 431, 434, 435, 436, 437, 438, 0, 439,
	441, 443, 444, 500, 501, 502, 503, 504, 506, 507,
	508, 509, 445, 446, 462, 308, 302, 256, 300, 301,
	305, 306, 309, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1768, 131, 0, 148, 0, 0, 198, 235, 457, 0,
	0, 297, 0, 350, 354, 0, 448, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 423,
	0, 0, 0, 0, 136, 494, 447, 266, 0, 0,
	0, 304, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 274, 0, 498, 370, 143,
	190, 177, 219, 261, 378, 0, 0, 251, 427, 186,
	276, 0, 165, 310, 1769, 402, 273, 0, 385, 405,
	0, 294, 171, 333, 392, 393, 0, 0, 0, 0,
	0, 175, 176, 299, 157, 307, 510, 475, 363, 320,
	318, 0, 285, 342, 505, 0, 0, 205, 0, 200,
	298, 442, 163, 421, 336, 303, 255, 366, 397, 202,
	187, 188, 231, 335, 221, 173, 432, 472, 476, 474,
	470, 467, 471, 468, 469, 473, 222, 466, 0, 440,
	450, 484, 464, 492, 449, 489, 459, 197, 488, 453,
	452, 499, 479, 480, 433, 495, 465, 463, 456, 455,
	451, 0, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 132, 0, 133, 134, 135, 137, 138, 139,
	0, 140, 141, 142, 145, 146, 147, 149, 150, 151,
	152, 153, 154, 155, 156, 454, 0, 158, 159, 160,
	161, 162, 164, 166, 167, 168, 169, 170, 172, 174,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 180,
	181, 182, 183, 0, 184, 185, 189, 191, 192, 193,
	194, 195, 196, 199, 0, 201, 203, 0, 204, 207,
	0, 208, 209, 210, 211, 212, 213, 214, 215, 458,
	216, 0, 217, 218, 220, 0, 223, 224, 225, 226,
	227, 0, 228, 460, 461, 229, 230, 232, 233, 234,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 248, 249, 250, 252, 0, 253, 254,
	257, 258, 259, 260, 0, 262, 477, 0, 263, 264,
	265, 0, 0, 267, 268, 269, 270, 271, 272, 275,
	478, 277, 278, 279, 280, 281, 282, 283, 284, 286,
	287, 288, 289, 290, 291, 292, 481, 482, 293, 295,
	296, 483, 485, 486, 0, 311, 312, 313, 314, 315,
	316, 317, 319, 0, 321, 322, 323, 487, 324, 325,
	326, 327, 0, 328, 329, 330, 331, 332, 334, 337,
	338, 339, 340, 0, 343, 344, 345, 346, 347, 348,
	349, 351, 352, 353, 355, 356, 357, 358, 359, 360,
	361, 362, 490, 364, 365, 367, 368, 369, 371, 372,
	373, 374, 375, 376, 377, 0, 379, 491, 380, 381,
	382, 383, 384, 0, 386, 387, 388, 389, 390, 391,
	394, 395, 396, 398, 399, 493, 400, 401, 0, 403,
	404, 0, 406, 407, 408, 409, 410, 0, 411, 412,
	496, 413, 497, 414, 415, 416, 417, 418, 419, 420,
	422, 0, 0, 424, 425, 426, 428, 429, 430, 431,
	434, 435, 436, 437, 438, 0, 439, 441, 443, 444,
	500, 501, 502, 503, 504, 506, 507, 508, 509, 445,
	446, 462, 308, 302, 256, 300, 301, 305, 306, 309,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 536, 131, 0,
	148, 0, 0, 198, 535, 457, 0, 0, 297, 0,
	350, 354, 0, 448, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 136, 494, 447, 266, 0, 0, 0, 304, 0,
	0, 0, 117, 0, 0, 0, 0, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 341, 274, 0, 498, 370, 143, 190, 177, 219,
	261, 378, 0, 0, 251, 427, 186, 276, 0, 165,
	310, 0, 402, 273, 0, 385, 405, 0, 294, 171,
	333, 392, 393, 0, 0, 0, 0, 0, 175, 176,
	299, 157, 307, 510, 475, 363, 320, 318, 0, 285,
	342, 505, 0, 0, 205, 0, 200, 298, 442, 163,
	421, 336, 303, 255, 366, 397, 202, 187, 188, 231,
	335, 221, 173, 432, 472, 476, 474, 470, 467, 471,
	468, 469, 473, 222, 466, 0, 440, 450, 484, 464,
	492, 449, 489, 459, 197, 488, 453, 452, 499, 479,
	480, 433, 495, 465, 463, 456, 455, 451, 0, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 132,
	0, 133, 134, 135, 137, 138, 139, 0, 140, 141,
	142, 145, 146, 147, 149, 150, 151, 152, 153, 154,
	155, 156, 454, 0, 158, 159, 160, 161, 162, 164,
	166, 167, 168, 169, 170, 172, 174, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 180, 181, 182, 183,
	0, 184, 185, 189, 191, 192, 193, 194, 195, 196,
	199, 0, 201, 203, 0, 204, 207, 0, 208, 209,
	210, 211, 212, 213, 214, 215, 458, 216, 0, 217,
	218, 220, 0, 223, 224, 225, 226, 227, 0, 228,
	460, 461, 229, 230, 232, 233, 234, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	248, 249, 250, 252, 0, 253, 254, 257, 258, 259,
	260, 0, 262, 477, 0, 263, 264, 265, 0, 0,
	267, 268, 269, 270, 271, 272, 275, 478, 277, 278,
	279, 280, 281, 282, 283, 284, 286, 287, 288, 289,
	290, 291, 292, 481, 482, 293, 295, 296, 483, 485,
	486, 0, 311, 312, 313, 314, 315, 316, 317, 319,
	0, 321, 322, 323, 487, 324, 325, 326, 327, 0,
	328, 329, 330, 331, 332, 334, 337, 338, 339, 340,
	0, 343, 344, 345, 346, 347, 348, 349, 351, 352,
	353, 355, 356, 357, 358, 359, 360, 361, 362, 490,
	364, 365, 367, 368, 369, 371, 372, 373, 374, 375,
	376, 377, 0, 379, 491, 380, 381, 382, 383, 384,
	0, 386, 387, 388, 389, 390, 391, 394, 395, 396,
	398, 399, 493, 400, 401, 0, 403, 404, 0, 406,
	407, 408, 409, 410, 0, 411, 412, 496, 413, 497,
	414, 415, 416, 417, 418, 419, 420, 422, 0, 0,
	424, 425, 426, 428, 429, 430, 431, 434, 435, 436,
	437, 438, 0, 439, 441, 443, 444, 500, 501, 502,
	503, 504, 506, 507, 508, 509, 445, 446, 462, 308,
	302, 256, 300, 301, 305, 306, 309, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 148, 0, 0,
	198, 235, 457, 0, 0, 297, 0, 350, 354, 0,
	448, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 0, 0, 136, 494,
	447, 266, 0, 0, 0, 304, 0, 0, 0, 117,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 341, 274,
	0, 498, 370, 143, 190, 177, 219, 261, 378, 0,
	0, 251, 427, 186, 276, 0, 165, 310, 0, 402,
	273, 0, 385, 405, 0, 294, 171, 333, 392, 393,
	0, 0, 0, 0, 0, 175, 176, 299, 157, 307,
	510, 475, 363, 320, 318, 0, 285, 342, 505, 0,
	0, 205, 0, 200, 298, 442, 163, 421, 336, 303,
	255, 366, 397, 202, 187, 188, 231, 335, 221, 173,
	432, 472, 476, 474, 470, 467, 471, 468, 469, 473,
	222, 466, 0, 440, 450, 484, 464, 492, 449, 489,
	459, 197, 488, 453, 452, 499, 479, 480, 433, 495,
	465, 463, 456, 455, 451, 0, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 132, 0, 133, 134,
	135, 137, 138, 139, 0, 140, 141, 142, 145, 146,
	147, 149, 150, 151, 152, 153, 154, 155, 156, 454,
	0, 158, 159, 160, 161, 162, 164, 166, 167, 168,
	169, 170, 172, 174, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 180, 181, 182, 183, 0, 184, 185,
	189, 191, 192, 193, 194, 195, 196, 199, 0, 201,
	203, 0, 204, 207, 0, 208, 209, 210, 211, 212,
	213, 214, 215, 458, 216, 0, 217, 218, 220, 0,
	223, 224, 225, 226, 227, 0, 228, 460, 461, 229,
	230, 232, 233, 234, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 248, 249, 250,
	252, 0, 253, 254, 257, 258, 259, 260, 0, 262,
	477, 0, 263, 264, 265, 0, 0, 267, 268, 269,
	270, 271, 272, 275, 478, 277, 278, 279, 280, 281,
	282, 283, 284, 286, 287, 288, 289, 290, 291, 292,
	481, 482, 293, 295, 296, 483, 485, 486, 0, 311,
	312, 313, 314, 315, 316, 317, 319, 0, 321, 322,
	323, 487, 324, 325, 326, 327, 0, 328, 329, 330,
	331, 332, 334, 337, 338, 339, 340, 0, 343, 344,
	345, 346, 347, 348, 349, 351, 352, 353, 355, 356,
	357, 358, 359, 360, 361, 362, 490, 364, 365, 367,
	368, 369, 371, 372, 373, 374, 375, 376, 377, 0,
	379, 491, 380, 381, 382, 383, 384, 0, 386, 387,
	388, 389, 390, 391, 394, 395, 396, 398, 399, 493,
	400, 401, 0, 403, 404, 0, 406, 407, 408, 409,
	410, 0, 411, 412, 496, 413, 497, 414, 415, 416,
	417, 418, 419, 420, 422, 0, 0, 424, 425, 426,
	428, 429, 430, 431, 434, 435, 436, 437, 438, 0,
	439, 441, 443, 444, 500, 501, 502, 503, 504, 506,
	507, 508, 509, 445, 446, 462, 308, 302, 256, 300,
	301, 305, 306, 309, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 148, 0, 0, 198, 235, 457,
	0, 0, 297, 0, 350, 354, 0, 448, 0, 0,
	2379, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 136, 494, 447, 266, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 341, 274, 0, 498, 370,
	143, 190, 177, 219, 261, 378, 0, 0, 251, 427,
	186, 276, 0, 165, 310, 0, 402, 273, 0, 385,
	405, 0, 294, 171, 333, 392, 393, 0, 0, 0,
	0, 0, 175, 176, 299, 157, 307, 510, 475, 363,
	320, 318, 0, 285, 342, 505, 0, 0, 205, 0,
	200, 298, 442, 163, 421, 336, 303, 255, 366, 397,
	202, 187, 188, 231, 335, 221, 173, 432, 472, 476,
	474, 470, 467, 471, 468, 469, 473, 222, 466, 0,
	440, 450, 484, 464, 492, 449, 489, 459, 197, 488,
	453, 452, 499, 479, 480, 433, 495, 465, 463, 456,
	455, 451, 0, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 132, 0, 133, 134, 135, 137, 138,
	139, 0, 140, 141, 142, 145, 146, 147, 149, 150,
	151, 152, 153, 154, 155, 156, 454, 0, 158, 159,
	160, 161, 162, 164, 166, 167, 168, 169, 170, 172,
	174, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	180, 181, 182, 183, 0, 184, 185, 189, 191, 192,
	193, 194, 195, 196, 199, 0, 201, 203, 0, 204,
	207, 0, 208, 209, 210, 211, 212, 213, 214, 215,
	458, 216, 0, 217, 218, 220, 0, 223, 224, 225,
	226, 227, 0, 228, 460, 461, 229, 230, 232, 233,
	234, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 248, 249, 250, 252, 0, 253,
	254, 257, 258, 259, 260, 0, 262, 477, 0, 263,
	264, 265, 0, 0, 267, 268, 269, 270, 271, 272,
	275, 478, 277, 278, 279, 280, 281, 282, 283, 284,
	286, 287, 288, 289, 290, 291, 292, 481, 482, 293,
	295, 296, 483, 485, 486, 0, 311, 312, 313, 314,
	315, 316, 317, 319, 0, 321, 322, 323, 487, 324,
	325, 326, 327, 0, 328, 329, 330, 331, 332, 334,
	337, 338, 339, 340, 0, 343, 344, 345, 346, 347,
	348, 349, 351, 352, 353, 355, 356, 357, 358, 359,
	360, 361, 362, 490, 364, 365, 367, 368, 369, 371,
	372, 373, 374, 375, 376, 377, 0, 379, 491, 380,
	381, 382, 383, 384, 0, 386, 387, 388, 389, 390,
	391, 394, 395, 396, 398, 399, 493, 400, 401, 0,
	403, 404, 0, 406, 407, 408, 409, 410, 0, 411,
	412, 496, 413, 497, 414, 415, 416, 417, 418, 419,
	420, 422, 0, 0, 424, 425, 426, 428, 429, 430,
	431, 434, 435, 436, 437, 438, 0, 439, 441, 443,
	444, 500, 501, 502, 503, 504, 506, 507, 508, 509,
	445, 446, 462, 308, 302, 256, 300, 301, 305, 306,
	309, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	1933, 148, 0, 0, 198, 235, 457, 0, 0, 297,
	0, 350, 354, 0, 448, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	0, 0, 136, 494, 447, 266, 0, 0, 0, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 274, 0, 498, 370, 143, 190, 177,
	219, 261, 378, 0, 0, 251, 427, 186, 276, 0,
	165, 310, 0, 402, 273, 0, 385, 405, 0, 294,
	171, 333, 392, 393, 0, 0, 0, 0, 0, 175,
	176, 299, 157, 307, 510, 475, 363, 320, 318, 0,
	285, 342, 505, 0, 0, 205, 0, 200, 298, 442,
	163, 421, 336, 303, 255, 366, 397, 202, 187, 188,
	231, 335, 221, 173, 432, 472, 476, 474, 470, 467,
	471, 468, 469, 473, 222, 466, 0, 440, 450, 484,
	464, 492, 449, 489, 459, 197, 488, 453, 452, 499,
	479, 480, 433, 495, 465, 463, 456, 455, 451, 0,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	132, 0, 133, 134, 135, 137, 138, 139, 0, 140,
	141, 142, 145, 146, 147, 149, 150, 151, 152, 153,
	154, 155, 156, 454, 0, 158, 159, 160, 161, 162,
	164, 166, 167, 168, 169, 170, 172, 174, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 180, 181, 182,
	183, 0, 184, 185, 189, 191, 192, 193, 194, 195,
	196, 199, 0, 201, 203, 0, 204, 207, 0, 208,
	209, 210, 211, 212, 213, 214, 215, 458, 216, 0,
	217, 218, 220, 0, 223, 224, 225, 226, 227, 0,
	228, 460, 461, 229, 230, 232, 233, 234, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 248, 249, 250, 252, 0, 253, 254, 257, 258,
	259, 260, 0, 262, 477, 0, 263, 264, 265, 0,
	0, 267, 268, 269, 270, 271, 272, 275, 478, 277,
	278, 279, 280, 281, 282, 283, 284, 286, 287, 288,
	289, 290, 291, 292, 481, 482, 293, 295, 296, 483,
	485, 486, 0, 311, 312, 313, 314, 315, 316, 317,
	319, 0, 321, 322, 323, 487, 324, 325, 326, 327,
	0, 328, 329, 330, 331, 332, 334, 337, 338, 339,
	340, 0, 343, 344, 345, 346, 347, 348, 349, 351,
	352, 353, 355, 356, 357, 358, 359, 360, 361, 362,
	490, 364, 365, 367, 368, 369, 371, 372, 373, 374,
	375, 376, 377, 0, 379, 491, 380, 381, 382, 383,
	384, 0, 386, 387, 388, 389, 390, 391, 394, 395,
	396, 398, 399, 493, 400, 401, 0, 403, 404, 0,
	406, 407, 408, 409, 410, 0, 411, 412, 496, 413,
	497, 414, 415, 416, 417, 418, 419, 420, 422, 0,
	0, 424, 425, 426, 428, 429, 430, 431, 434, 435,
	436, 437, 438, 0, 439, 441, 443, 444, 500, 501,
	502, 503, 504, 506, 507, 508, 509, 445, 446, 462,
	308, 302, 256, 300, 301, 305, 306, 309, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 148, 0,
	0, 198, 235, 457, 0, 0, 297, 0, 350, 354,
	0, 448, 0, 0, 2181, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 136,
	494, 447, 266, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 341,
	274, 0, 498, 370, 143, 190, 177, 219, 261, 378,
	0, 0, 251, 427, 186, 276, 0, 165, 310, 0,
	402, 273, 0, 385, 405, 0, 294, 171, 333, 392,
	393, 0, 0, 0, 0, 0, 175, 176, 299, 157,
	307, 510, 475, 363, 320, 318, 0, 285, 342, 505,
	0, 0, 205, 0, 200, 298, 442, 163, 421, 336,
	303, 255, 366, 397, 202, 187, 188, 231, 335, 221,
	173, 432, 472, 476, 474, 470, 467, 471, 468, 469,
	473, 222, 466, 0, 440, 450, 484, 464, 492, 449,
	489, 459, 197, 488, 453, 452, 499, 479, 480, 433,
	495, 465, 463, 456, 455, 451, 0, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 132, 0, 133,
	134, 135, 137, 138, 139, 0, 140, 141, 142, 145,
	146, 147, 149, 150, 151, 152, 153, 154, 155, 156,
	454, 0, 158, 159, 160, 161, 162, 164, 166, 167,
	168, 169, 170, 172, 174, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 182, 183, 0, 184,
	185, 189, 191, 192, 193, 194, 195, 196, 199, 0,
	201, 203, 0, 204, 207, 0, 208, 209, 210, 211,
	212, 213, 214, 215, 458, 216, 0, 217, 218, 220,
	0, 223, 224, 225, 226, 227, 0, 228, 460, 461,
	229, 230, 232, 233, 234, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 248, 249,
	250, 252, 0, 253, 254, 257, 258, 259, 260, 0,
	262, 477, 0, 263, 264, 265, 0, 0, 267, 268,
	269, 270, 271, 272, 275, 478, 277, 278, 279, 280,
	281, 282, 283, 284, 286, 287, 288, 289, 290, 291,
	292, 481, 482, 293, 295, 296, 483, 485, 486, 0,
	311, 312, 313, 314, 315, 316, 317, 319, 0, 321,
	322, 323, 487, 324, 325, 326, 327, 0, 328, 329,
	330, 331, 332, 334, 337, 338, 339, 340, 0, 343,
	344, 345, 346, 347, 348, 349, 351, 352, 353, 355,
	356, 357, 358, 359, 360, 361, 362, 490, 364, 365,
	367, 368, 369, 371, 372, 373, 374, 375, 376, 377,
	0, 379, 491, 380, 381, 382, 383, 384, 0, 386,
	387, 388, 389, 390, 391, 394, 395, 396, 398, 399,
	493, 400, 401, 0, 403, 404, 0, 406, 407, 408,
	409, 410, 0, 411, 412, 496, 413, 497, 414, 415,
	416, 417, 418, 419, 420, 422, 0, 0, 424, 425,
	426, 428, 429, 430, 431, 434, 435, 436, 437, 438,
	0, 439, 441, 443, 444, 500, 501, 502, 503, 504,
	506, 507, 508, 509, 445, 446, 462, 308, 302, 256,
	300, 301, 305, 306, 309, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 148, 0, 0, 198, 235,
	457, 0, 0, 297, 0, 350, 354, 0, 448, 0,
	0, 2010, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 0, 0, 136, 494, 447, 266,
	0, 0, 0, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 341, 274, 0, 498,
	370, 143, 190, 177, 219, 261, 378, 0, 0, 251,
	427, 186, 276, 0, 165, 310, 0, 402, 273, 0,
	385, 405, 0, 294, 171, 333, 392, 393, 0, 0,
	0, 0, 0, 175, 176, 299, 157, 307, 510, 475,
	363, 320, 318, 0, 285, 342, 505, 0, 0, 205,
	0, 200, 298, 442, 163, 421, 336, 303, 255, 366,
	397, 202, 187, 188, 231, 335, 221, 173, 432, 472,
	476, 474, 470, 467, 471, 468, 469, 473, 222, 466,
	0, 440, 450, 484, 464, 492, 449, 489, 459, 197,
	488, 453, 452, 499, 479, 480, 433, 495, 465, 463,
	456, 455, 451, 0, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 132, 0, 133, 134, 135, 137,
	138, 139, 0, 140, 141, 142, 145, 146, 147, 149,
	150, 151, 152, 153, 154, 155, 156, 454, 0, 158,
	159, 160, 161, 162, 164, 166, 167, 168, 169, 170,
	172, 174, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 180, 181, 182, 183, 0, 184, 185, 189, 191,
	192, 193, 194, 195, 196, 199, 0, 201, 203, 0,
	204, 207, 0, 208, 209, 210, 211, 212, 213, 214,
	215, 458, 216, 0, 217, 218, 220, 0, 223, 224,
	225, 226, 227, 0, 228, 460, 461, 229, 230, 232,
	233, 234, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 248, 249, 250, 252, 0,
	253, 254, 257, 258, 259, 260, 0, 262, 477, 0,
	263, 264, 265, 0, 0, 267, 268, 269, 270, 271,
	272, 275, 478, 277, 278, 279, 280, 281, 282, 283,
	284, 286, 287, 288, 289, 290, 291, 292, 481, 482,
	293, 295, 296, 483, 485, 486, 0, 311, 312, 313,
	314, 315, 316, 317, 319, 0, 321, 322, 323, 487,
	324, 325, 326, 327, 0, 328, 329, 330, 331, 332,
	334, 337, 338, 339, 340, 0, 343, 344, 345, 346,
	347, 348, 349, 351, 352, 353, 355, 356, 357, 358,
	359, 360, 361, 362, 490, 364, 365, 367, 368, 369,
	371, 372, 373, 374, 375, 376, 377, 0, 379, 491,
	380, 381, 382, 383, 384, 0, 386, 387, 388, 389,
	390, 391, 394, 395, 396, 398, 399, 493, 400, 401,
	0, 403, 404, 0, 406, 407, 408, 409, 410, 0,
	411, 412, 496, 413, 497, 414, 415, 416, 417, 418,
	419, 420, 422, 0, 0, 424, 425, 426, 428, 429,
	430, 431, 434, 435, 436, 437, 438, 0, 439, 441,
	443, 444, 500, 501, 502, 503, 504, 506, 507, 508,
	509, 445, 446, 462, 308, 302, 256, 300, 301, 305,
	306, 309, 118, 0, 0, 0, 0, 0, 0, 0,
	694, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 148, 0, 0, 198, 235, 457, 0, 0,
	297, 0, 350, 354, 0, 448, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 136, 494, 447, 266, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 274, 0, 498, 370, 143, 190,
	177, 219, 261, 378, 0, 0, 251, 427, 186, 276,
	0, 165, 310, 0, 402, 273, 0, 385, 405, 0,
	294, 171, 333, 392, 393, 0, 0, 0, 0, 0,
	175, 176, 299, 157, 307, 510, 475, 363, 320, 318,
	0, 285, 342, 505, 0, 0, 205, 0, 200, 298,
	442, 163, 421, 336, 303, 255, 366, 397, 202, 187,
	188, 231, 335, 221, 173, 432, 472, 476, 474, 470,
	467, 471, 468, 469, 473, 222, 466, 0, 440, 450,
	484, 464, 492, 449, 489, 459, 197, 488, 453, 452,
	499, 479, 480, 433, 495, 465, 463, 456, 455, 451,
	0, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 132, 0, 133, 134, 135, 137, 138, 139, 0,
	140, 141, 142, 145, 146, 147, 149, 150, 151, 152,
	153, 154, 155, 156, 454, 0, 158, 159, 160, 161,
	162, 164, 166, 167, 168, 169, 170, 172, 174, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 180, 181,
	182, 183, 0, 184, 185, 189, 191, 192, 193, 194,
	195, 196, 199, 0, 201, 203, 0, 204, 207, 0,
	208, 209, 210, 211, 212, 213, 214, 215, 458, 216,
	0, 217, 218, 220, 0, 223, 224, 225, 226, 227,
	0, 228, 460, 461, 229, 230, 232, 233, 234, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 248, 249, 250, 252, 0, 253, 254, 257,
	258, 259, 260, 0, 262, 477, 0, 263, 264, 265,
	0, 0, 267, 268, 269, 270, 271, 272, 275, 478,
	277, 278, 279, 280, 281, 282, 283, 284, 286, 287,
	288, 289, 290, 291, 292, 481, 482, 293, 295, 296,
	483, 485, 486, 0, 311, 312, 313, 314, 315, 316,
	317, 319, 0, 321, 322, 323, 487, 324, 325, 326,
	327, 0, 328, 329, 330, 331, 332, 334, 337, 338,
	339, 340, 0, 343, 344, 345, 346, 347, 348, 349,
	351, 352, 353, 355, 356, 357, 358, 359, 360, 361,
	362, 490, 364, 365, 367, 368, 369, 371, 372, 373,
	374, 375, 376, 377, 0, 379, 491, 380, 381, 382,
	383, 384, 0, 386, 387, 388, 389, 390, 391, 394,
	395, 396, 398, 399, 493, 400, 401, 0, 403, 404,
	0, 406, 407, 408, 409, 410, 0, 411, 412, 496,
	413, 497, 414, 415, 416, 417, 418, 419, 420, 422,
	0, 0, 424, 425, 426, 428, 429, 430, 431, 434,
	435, 436, 437, 438, 0, 439, 441, 443, 444, 500,
	501, 502, 503, 504, 506, 507, 508, 509, 445, 446,
	462, 308, 302, 256, 300, 301, 305, 306, 309, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 148,
	0, 0, 198, 769, 457, 0, 0, 297, 0, 350,
	354, 0, 448, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 0, 0,
	136, 494, 447, 266, 0, 0, 0, 304, 0, 0,
	0, 117, 0, 0, 0, 0, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 274, 0, 498, 370, 143, 190, 177, 219, 261,
	378, 0, 0, 251, 427, 186, 276, 0, 165, 310,
	0, 402, 273, 0, 385, 405, 0, 294, 171, 333,
	392, 393, 0, 0, 0, 0, 0, 175, 176, 299,
	157, 307, 510, 475, 363, 320, 318, 0, 285, 342,
	505, 0, 0, 205, 0, 200, 298, 442, 163, 421,
	336, 303, 255, 366, 397, 202, 187, 188, 231, 335,
	221, 173, 432, 472, 476, 474, 470, 467, 471, 468,
	469, 473, 222, 466, 0, 440, 450, 484, 464, 492,
	449, 489, 459, 197, 488, 453, 452, 499, 479, 480,
	433, 495, 465, 463, 456, 455, 451, 0, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 132, 0,
	133, 134, 135, 137, 138, 139, 0, 140, 141, 142,
	145, 146, 147, 149, 150, 151, 152, 153, 154, 155,
	156, 454, 0, 158, 159, 160, 161, 162, 164, 166,
	167, 168, 169, 170, 172, 174, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 180, 181, 182, 183, 0,
	184, 185, 189, 191, 192, 193, 194, 195, 196, 199,
	0, 201, 203, 0, 204, 207, 0, 208, 209, 210,
	211, 212, 213, 214, 215, 458, 216, 0, 217, 218,
	220, 0, 223, 224, 225, 226, 227, 0, 228, 460,
	461, 229, 230, 232, 233, 234, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 248,
	249, 250, 252, 0, 253, 254, 257, 258, 259, 260,
	0, 262, 477, 0, 263, 264, 265, 0, 0, 267,
	268, 269, 270, 271, 272, 275, 478, 277, 278, 279,
	280, 281, 282, 283, 284, 286, 287, 288, 289, 290,
	291, 292, 481, 482, 293, 295, 296, 483, 485, 486,
	0, 311, 312, 313, 314, 315, 316, 317, 319, 0,
	321, 322, 323, 487, 324, 325, 326, 327, 0, 328,
	329, 330, 331, 332, 334, 337, 338, 339, 340, 0,
	343, 344, 345, 346, 347, 348, 349, 351, 352, 353,
	355, 356, 357, 358, 359, 360, 361, 362, 490, 364,
	365, 367, 368, 369, 371, 372, 373, 374, 375, 376,
	377, 0, 379, 491, 380, 381, 382, 383, 384, 0,
	386, 387, 388, 389, 390, 391, 394, 395, 396, 398,
	399, 493, 400, 401, 0, 403, 404, 0, 406, 407,
	408, 409, 410, 0, 411, 412, 496, 413, 497, 414,
	415, 416, 417, 418, 419, 420, 422, 0, 0, 424,
	425, 426, 428, 429, 430, 431, 434, 435, 436, 437,
	438, 0, 439, 441, 443, 444, 500, 501, 502, 503,
	504, 506, 507, 508, 509, 445, 446, 462, 308, 302,
	256, 300, 301, 305, 306, 309, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 767, 131, 0, 148, 0, 0, 198,
	766, 457, 0, 0, 297, 0, 350, 354, 0, 448,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 136, 494, 447,
	266, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 341, 274, 0,
	498, 370, 143, 190, 177, 219, 261, 378, 0, 0,
	251, 427, 186, 276, 0, 165, 310, 0, 402, 273,
	0, 385, 405, 0, 294, 171, 333, 392, 393, 0,
	0, 0, 0, 0, 175, 176, 299, 157, 307, 510,
	475, 363, 320, 318, 0, 285, 342, 505, 0, 0,
	205, 0, 200, 298, 442, 163, 421, 336, 303, 255,
	366, 397, 202, 187, 188, 231, 335, 221, 173, 432,
	472, 476, 474, 470, 467, 471, 468, 469, 473, 222,
	466, 0, 440, 450, 484, 464, 492, 449, 489, 459,
	197, 488, 453, 452, 499, 479, 480, 433, 495, 465,
	463, 456, 455, 451, 0, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 132, 0, 133, 134, 135,
	137, 138, 139, 0, 140, 141, 142, 145, 146, 147,
	149, 150, 151, 152, 153, 154, 155, 156, 454, 0,
	158, 159, 160, 161, 162, 164, 166, 167, 168, 169,
	170, 172, 174, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 182, 183, 0, 184, 185, 189,
	191, 192, 193, 194, 195, 196, 199, 0, 201, 203,
	0, 204, 207, 0, 208, 209, 210, 211, 212, 213,
	214, 215, 458, 216, 0, 217, 218, 220, 0, 223,
	224, 225, 226, 227, 0, 228, 460, 461, 229, 230,
	232, 233, 234, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 248, 249, 250, 252,
	0, 253, 254, 257, 258, 259, 260, 0, 262, 477,
	0, 263, 264, 265, 0, 0, 267, 268, 269, 270,
	271, 272, 275, 478, 277, 278, 279, 280, 281, 282,
	283, 284, 286, 287, 288, 289, 290, 291, 292, 481,
	482, 293, 295, 296, 483, 485, 486, 0, 311, 312,
	313, 314, 315, 316, 317, 319, 0, 321, 322, 323,
	487, 324, 325, 326, 327, 0, 328, 329, 330, 331,
	332, 334, 337, 338, 339, 340, 0, 343, 344, 345,
	346, 347, 348, 349, 351, 352, 353, 355, 356, 357,
	358, 359, 360, 361, 362, 490, 364, 365, 367, 368,
	369, 371, 372, 373, 374, 375, 376, 377, 0, 379,
	491, 380, 381, 382, 383, 384, 0, 386, 387, 388,
	389, 390, 391, 394, 395, 396, 398, 399, 493, 400,
	401, 0, 403, 404, 0, 406, 407, 408, 409, 410,
	0, 411, 412, 496, 413, 497, 414, 415, 416, 417,
	418, 419, 420, 422, 0, 0, 424, 425, 426, 428,
	429, 430, 431, 434, 435, 436, 437, 438, 0, 439,
	441, 443, 444, 500, 501, 502, 503, 504, 506, 507,
	508, 509, 445, 446, 462, 308, 302, 256, 300, 301,
	305, 306, 309, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 131, 0, 148, 0, 0, 198, 538, 457, 0,
	0, 297, 0, 350, 354, 0, 448, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 423,
	0, 0, 0, 0, 136, 494, 447, 266, 0, 0,
	0, 304, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 274, 0, 498, 370, 143,
	190, 177, 219, 261, 378, 0, 0, 251, 427, 186,
	276, 0, 165, 310, 0, 402, 273, 0, 385, 405,
	0, 294, 171, 333, 392, 393, 0, 0, 0, 0,
	0, 175, 176, 299, 157, 307, 510, 475, 363, 320,
	318, 0, 285, 342, 505, 0, 0, 205, 0, 200,
	298, 442, 163, 421, 336, 303, 255, 366, 397, 202,
	187, 188, 231, 335, 221, 173, 432, 472, 476, 474,
	470, 467, 471, 468, 469, 473, 222, 466, 0, 440,
	450, 484, 464, 492, 449, 489, 459, 197, 488, 453,
	452, 499, 479, 480, 433, 495, 465, 463, 456, 455,
	451, 0, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 132, 0, 133, 134, 135, 137, 138, 139,
	0, 140, 141, 142, 145, 146, 147, 149, 150, 151,
	152, 153, 154, 155, 156, 454, 0, 158, 159, 160,
	161, 162, 164, 166, 167, 168, 169, 170, 172, 174,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 180,
	181, 182, 183, 0, 184, 185, 189, 191, 192, 193,
	194, 195, 196, 199, 0, 201, 203, 0, 204, 207,
	0, 208, 209, 210, 211, 212, 213, 214, 215, 458,
	216, 0, 217, 218, 220, 0, 223, 224, 225, 226,
	227, 0, 228, 460, 461, 229, 230, 232, 233, 234,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 248, 249, 250, 252, 0, 253, 254,
	257, 258, 259, 260, 0, 262, 477, 0, 263, 264,
	265, 0, 0, 267, 268, 269, 270, 271, 272, 275,
	478, 277, 278, 279, 280, 281, 282, 283, 284, 286,
	287, 288, 289, 290, 291, 292, 481, 482, 293, 295,
	296, 483, 485, 486, 0, 311, 312, 313, 314, 315,
	316, 317, 319, 0, 321, 322, 323, 487, 324, 325,
	326, 327, 0, 328, 329, 330, 331, 332, 334, 337,
	338, 339, 340, 0, 343, 344, 345, 346, 347, 348,
	349, 351, 352, 353, 355, 356, 357, 358, 359, 360,
	361, 362, 490, 364, 365, 367, 368, 369, 371, 372,
	373, 374, 375, 376, 377, 0, 379, 491, 380, 381,
	382, 383, 384, 0, 386, 387, 388, 389, 390, 391,
	394, 395, 396, 398, 399, 493, 400, 401, 0, 403,
	404, 0, 406, 407, 408, 409, 410, 0, 411, 412,
	496, 413, 497, 414, 415, 416, 417, 418, 419, 420,
	422, 0, 0, 424, 425, 426, 428, 429, 430, 431,
	434, 435, 436, 437, 438, 0, 439, 441, 443, 444,
	500, 501, 502, 503, 504, 506, 507, 508, 509, 445,
	446, 462, 308, 302, 256, 300, 301, 305, 306, 309,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	148, 0, 0, 198, 235, 457, 0, 0, 297, 0,
	350, 354, 0, 448, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 136, 494, 447, 266, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 341, 274, 0, 498, 370, 143, 190, 177, 219,
	261, 378, 0, 0, 251, 427, 186, 276, 0, 165,
	310, 0, 402, 273, 0, 385, 405, 0, 294, 171,
	333, 392, 393, 0, 0, 0, 0, 0, 175, 176,
	299, 157, 307, 510, 475, 363, 320, 318, 0, 2959,
	342, 505, 0, 0, 205, 0, 200, 298, 442, 163,
	421, 336, 303, 255, 366, 397, 202, 187, 188, 231,
	335, 221, 173, 432, 472, 476, 474, 470, 467, 471,
	468, 469, 473, 222, 466, 0, 440, 450, 484, 464,
	492, 449, 489, 459, 197, 488, 453, 452, 499, 479,
	480, 433, 495, 465, 463, 456, 455, 451, 0, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 132,
	0, 133, 134, 135, 137, 138, 139, 0, 140, 141,
	142, 145, 146, 147, 149, 150, 151, 152, 153, 154,
	155, 156, 454, 0, 158, 159, 160, 161, 162, 164,
	166, 167, 168, 169, 170, 172, 174, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 180, 181, 182, 183,
	0, 184, 185, 189, 191, 192, 193, 194, 195, 196,
	199, 0, 201, 203, 0, 204, 207, 0, 208, 209,
	210, 211, 212, 213, 214, 215, 458, 216, 0, 217,
	218, 220, 0, 223, 224, 225, 226, 227, 0, 228,
	460, 461, 229, 230, 232, 233, 234, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	248, 249, 250, 252, 0, 253, 254, 257, 258, 259,
	260, 0, 262, 477, 0, 263, 264, 265, 0, 0,
	267, 268, 269, 270, 271, 272, 275, 478, 277, 278,
	279, 280, 281, 282, 283, 284, 286, 287, 288, 289,
	290, 291, 292, 481, 482, 293, 295, 296, 483, 485,
	486, 0, 311, 312, 313, 314, 315, 316, 317, 319,
	0, 321, 322, 323, 487, 324, 325, 326, 327, 0,
	328, 329, 330, 331, 332, 334, 337, 338, 339, 340,
	0, 343, 344, 345, 346, 347, 348, 349, 351, 352,
	353, 355, 356, 357, 358, 359, 360, 361, 362, 490,
	364, 365, 367, 368, 369, 371, 372, 373, 374, 375,
	376, 377, 0, 379, 491, 380, 381, 382, 383, 384,
	0, 386, 387, 388, 389, 390, 391, 394, 395, 396,
	398, 399, 493, 400, 401, 0, 403, 404, 0, 406,
	407, 408, 409, 410, 0, 411, 412, 496, 413, 497,
	414, 415, 416, 417, 418, 419, 420, 422, 0, 0,
	424, 425, 426, 428, 429, 430, 431, 434, 435, 436,
	437, 438, 0, 439, 441, 443, 444, 500, 501, 502,
	503, 504, 506, 507, 508, 509, 445, 446, 462, 308,
	302, 256, 300, 301, 305, 306, 309, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 148, 0, 0,
	198, 235, 457, 0, 0, 297, 0, 350, 354, 0,
	448, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 0, 0, 136, 494,
	447, 266, 0, 0, 0, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 341, 274,
	0, 498, 370, 143, 190, 177, 219, 261, 378, 0,
	0, 251, 427, 186, 276, 0, 165, 310, 0, 402,
	273, 0, 385, 405, 0, 294, 171, 333, 392, 393,
	0, 0, 0, 0, 0, 175, 176, 299, 157, 307,
	510, 475, 363, 320, 318, 0, 285, 342, 505, 0,
	0, 205, 0, 200, 298, 442, 163, 421, 336, 303,
	255, 366, 397, 202, 187, 188, 231, 335, 221, 173,
	432, 472, 476, 474, 470, 467, 471, 468, 469, 473,
	222, 466, 0, 440, 450, 484, 464, 492, 449, 489,
	459, 197, 488, 453, 452, 499, 479, 480, 433, 495,
	465, 463, 456, 455, 451, 0, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 132, 0, 133, 134,
	135, 137, 138, 139, 0, 140, 141, 142, 145, 146,
	147, 149, 150, 151, 152, 153, 154, 155, 156, 454,
	0, 158, 159, 160, 161, 162, 164, 166, 167, 168,
	169, 170, 172, 174, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 180, 181, 182, 183, 0, 184, 185,
	189, 191, 192, 193, 194, 195, 196, 199, 0, 201,
	203, 0, 204, 207, 0, 208, 209, 210, 211, 212,
	213, 214, 215, 458, 216, 0, 217, 218, 220, 0,
	223, 224, 225, 226, 227, 0, 228, 460, 461, 229,
	230, 232, 233, 234, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 248, 249, 250,
	252, 0, 253, 254, 257, 258, 259, 260, 0, 262,
	477, 0, 263, 264, 265, 0, 0, 267, 268, 269,
	270, 271, 272, 275, 478, 277, 278, 279, 280, 281,
	282, 283, 284, 286, 287, 288, 289, 290, 291, 292,
	481, 482, 293, 295, 296, 483, 485, 486, 0, 311,
	312, 313, 314, 315, 316, 317, 319, 0, 321, 322,
	323, 487, 324, 325, 326, 327, 0, 328, 329, 330,
	331, 332, 334, 337, 338, 339, 340, 0, 343, 344,
	345, 346, 347, 348, 349, 351, 352, 353, 355, 356,
	357, 358, 359, 360, 361, 362, 490, 364, 365, 367,
	368, 369, 371, 372, 373, 374, 375, 376, 377, 0,
	379, 491, 380, 381, 382, 383, 384, 0, 386, 387,
	388, 389, 390, 391, 394, 395, 396, 398, 399, 493,
	400, 401, 0, 403, 404, 0, 406, 407, 408, 409,
	410, 0, 411, 412, 496, 413, 497, 414, 415, 416,
	417, 418, 419, 420, 422, 0, 0, 424, 425, 426,
	428, 429, 430, 431, 434, 435, 436, 437, 438, 0,
	439, 441, 443, 444, 500, 501, 502, 503, 504, 506,
	507, 508, 509, 445, 446, 462, 308, 302, 256, 300,
	301, 305, 306, 309, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 148, 0, 0, 198, 1756, 457,
	0, 0, 297, 0, 350, 354, 0, 448, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 136, 494, 447, 266, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 341, 274, 0, 498, 370,
	143, 190, 177, 219, 261, 378, 0, 0, 251, 427,
	186, 276, 0, 165, 310, 0, 402, 273, 0, 385,
	405, 0, 294, 171, 333, 392, 393, 0, 0, 0,
	0, 0, 175, 176, 299, 157, 307, 510, 475, 363,
	320, 318, 0, 285, 342, 505, 0, 0, 205, 0,
	200, 298, 442, 163, 421, 336, 303, 255, 366, 397,
	202, 187, 188, 231, 335, 221, 173, 432, 472, 476,
	474, 470, 467, 471, 468, 469, 473, 222, 466, 0,
	440, 450, 484, 464, 492, 449, 489, 459, 197, 488,
	453, 452, 499, 479, 480, 433, 495, 465, 463, 456,
	455, 451, 0, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 132, 0, 133, 134, 135, 137, 138,
	139, 0, 140, 141, 142, 145, 146, 147, 149, 150,
	151, 152, 153, 154, 155, 156, 454, 0, 158, 159,
	160, 161, 162, 164, 166, 167, 168, 169, 170, 172,
	174, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	180, 181, 182, 183, 0, 184, 185, 189, 191, 192,
	193, 194, 195, 196, 199, 0, 201, 203, 0, 204,
	207, 0, 208, 209, 210, 211, 212, 213, 214, 215,
	458, 216, 0, 217, 218, 220, 0, 223, 224, 225,
	226, 227, 0, 228, 460, 461, 229, 230, 232, 233,
	234, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 248, 249, 250, 252, 0, 253,
	254, 257, 258, 259, 260, 0, 262, 477, 0, 263,
	264, 265, 0, 0, 267, 268, 269, 270, 271, 272,
	275, 478, 277, 278, 279, 280, 281, 282, 283, 284,
	286, 287, 288, 289, 290, 291, 292, 481, 482, 293,
	295, 296, 483, 485, 486, 0, 311, 312, 313, 314,
	315, 316, 317, 319, 0, 321, 322, 323, 487, 324,
	325, 326, 327, 0, 328, 329, 330, 331, 332, 334,
	337, 338, 339, 340, 0, 343, 344, 345, 346, 347,
	348, 349, 351, 352, 353, 355, 356, 357, 358, 359,
	360, 361, 362, 490, 364, 365, 367, 368, 369, 371,
	372, 373, 374, 375, 376, 377, 0, 379, 491, 380,
	381, 382, 383, 384, 0, 386, 387, 388, 389, 390,
	391, 394, 395, 396, 398, 399, 493, 400, 401, 0,
	403, 404, 0, 406, 407, 408, 409, 410, 0, 411,
	412, 496, 413, 497, 414, 415, 416, 417, 418, 419,
	420, 422, 0, 0, 424, 425, 426, 428, 429, 430,
	431, 434, 435, 436, 437, 438, 0, 439, 441, 443,
	444, 500, 501, 502, 503, 504, 506, 507, 508, 509,
	445, 446, 462, 308, 302, 256, 300, 301, 305, 306,
	309, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 148, 0, 0, 198, 1754, 457, 0, 0, 297,
	0, 350, 354, 0, 448, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	0, 0, 136, 494, 447, 266, 0, 0, 0, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 274, 0, 498, 370, 143, 190, 177,
	219, 261, 378, 0, 0, 251, 427, 186, 276, 0,
	165, 310, 0, 402, 273, 0, 385, 405, 0, 294,
	171, 333, 392, 393, 0, 0, 0, 0, 0, 175,
	176, 299, 157, 307, 510, 475, 363, 320, 318, 0,
	285, 342, 505, 0, 0, 205, 0, 200, 298, 442,
	163, 421, 336, 303, 255, 366, 397, 202, 187, 188,
	231, 335, 221, 173, 432, 472, 476, 474, 470, 467,
	471, 468, 469, 473, 222, 466, 0, 440, 450, 484,
	464, 492, 449, 489, 459, 197, 488, 453, 452, 499,
	479, 480, 433, 495, 465, 463, 456, 455, 451, 0,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	132, 0, 133, 134, 135, 137, 138, 139, 0, 140,
	141, 142, 145, 146, 147, 149, 150, 151, 152, 153,
	154, 155, 156, 454, 0, 158, 159, 160, 161, 162,
	164, 166, 167, 168, 169, 170, 172, 174, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 180, 181, 182,
	183, 0, 184, 185, 189, 191, 192, 193, 194, 195,
	196, 199, 0, 201, 203, 0, 204, 207, 0, 208,
	209, 210, 211, 212, 213, 214, 215, 458, 216, 0,
	217, 218, 220, 0, 223, 224, 225, 226, 227, 0,
	228, 460, 461, 229, 230, 232, 233, 234, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 248, 249, 250, 252, 0, 253, 254, 257, 258,
	259, 260, 0, 262, 477, 0, 263, 264, 265, 0,
	0, 267, 268, 269, 270, 271, 272, 275, 478, 277,
	278, 279, 280, 281, 282, 283, 284, 286, 287, 288,
	289, 290, 291, 292, 481, 482, 293, 295, 296, 483,
	485, 486, 0, 311, 312, 313, 314, 315, 316, 317,
	319, 0, 321, 322, 323, 487, 324, 325, 326, 327,
	0, 328, 329, 330, 331, 332, 334, 337, 338, 339,
	340, 0, 343, 344, 345, 346, 347, 348, 349, 351,
	352, 353, 355, 356, 357, 358, 359, 360, 361, 362,
	490, 364, 365, 367, 368, 369, 371, 372, 373, 374,
	375, 376, 377, 0, 379, 491, 380, 381, 382, 383,
	384, 0, 386, 387, 388, 389, 390, 391, 394, 395,
	396, 398, 399, 493, 400, 401, 0, 403, 404, 0,
	406, 407, 408, 409, 410, 0, 411, 412, 496, 413,
	497, 414, 415, 416, 417, 418, 419, 420, 422, 0,
	0, 424, 425, 426, 428, 429, 430, 431, 434, 435,
	436, 437, 438, 0, 439, 441, 443, 444, 500, 501,
	502, 503, 504, 506, 507, 508, 509, 445, 446, 462,
	308, 302, 256, 300, 301, 305, 306, 309, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 148, 0,
	0, 198, 1739, 457, 0, 0, 297, 0, 350, 354,
	0, 448, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 136,
	494, 447, 266, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 341,
	274, 0, 498, 370, 143, 190, 177, 219, 261, 378,
	0, 0, 251, 427, 186, 276, 0, 165, 310, 0,
	402, 273, 0, 385, 405, 0, 294, 171, 333, 392,
	393, 0, 0, 0, 0, 0, 175, 176, 299, 157,
	307, 510, 475, 363, 320, 318, 0, 285, 342, 505,
	0, 0, 205, 0, 200, 298, 442, 163, 421, 336,
	303, 255, 366, 397, 202, 187, 188, 231, 335, 221,
	173, 432, 472, 476, 474, 470, 467, 471, 468, 469,
	473, 222, 466, 0, 440, 450, 484, 464, 492, 449,
	489, 459, 197, 488, 453, 452, 499, 479, 480, 433,
	495, 465, 463, 456, 455, 451, 0, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 132, 0, 133,
	134, 135, 137, 138, 139, 0, 140, 141, 142, 145,
	146, 147, 149, 150, 151, 152, 153, 154, 155, 156,
	454, 0, 158, 159, 160, 161, 162, 164, 166, 167,
	168, 169, 170, 172, 174, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 182, 183, 0, 184,
	185, 189, 191, 192, 193, 194, 195, 196, 199, 0,
	201, 203, 0, 204, 207, 0, 208, 209, 210, 211,
	212, 213, 214, 215, 458, 216, 0, 217, 218, 220,
	0, 223, 224, 225, 226, 227, 0, 228, 460, 461,
	229, 230, 232, 233, 234, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 248, 249,
	250, 252, 0, 253, 254, 257, 258, 259, 260, 0,
	262, 477, 0, 263, 264, 265, 0, 0, 267, 268,
	269, 270, 271, 272, 275, 478, 277, 278, 279, 280,
	281, 282, 283, 284, 286, 287, 288, 289, 290, 291,
	292, 481, 482, 293, 295, 296, 483, 485, 486, 0,
	311, 312, 313, 314, 315, 316, 317, 319, 0, 321,
	322, 323, 487, 324, 325, 326, 327, 0, 328, 329,
	330, 331, 332, 334, 337, 338, 339, 340, 0, 343,
	344, 345, 346, 347, 348, 349, 351, 352, 353, 355,
	356, 357, 358, 359, 360, 361, 362, 490, 364, 365,
	367, 368, 369, 371, 372, 373, 374, 375, 376, 377,
	0, 379, 491, 380, 381, 382, 383, 384, 0, 386,
	387, 388, 389, 390, 391, 394, 395, 396, 398, 399,
	493, 400, 401, 0, 403, 404, 0, 406, 407, 408,
	409, 410, 0, 411, 412, 496, 413, 497, 414, 415,
	416, 417, 418, 419, 420, 422, 0, 0, 424, 425,
	426, 428, 429, 430, 431, 434, 435, 436, 437, 438,
	0, 439, 441, 443, 444, 500, 501, 502, 503, 504,
	506, 507, 508, 509, 445, 446, 462, 308, 302, 256,
	300, 301, 305, 306, 309, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 148, 0, 0, 198, 1472,
	457, 0, 0, 297, 0, 350, 354, 0, 448, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 0, 0, 136, 494, 447, 266,
	0, 0, 0, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 341, 274, 0, 498,
	370, 143, 190, 177, 219, 261, 378, 0, 0, 251,
	427, 186, 276, 0, 165, 310, 0, 402, 273, 0,
	385, 405, 0, 294, 171, 333, 392, 393, 0, 0,
	0, 0, 0, 175, 176, 299, 157, 307, 510, 475,
	363, 320, 318, 0, 285, 342, 505, 0, 0, 205,
	0, 200, 298, 442, 163, 421, 336, 303, 255, 366,
	397, 202, 187, 188, 231, 335, 221, 173, 432, 472,
	476, 474, 470, 467, 471, 468, 469, 473, 222, 466,
	0, 440, 450, 484, 464, 492, 449, 489, 459, 197,
	488, 453, 452, 499, 479, 480, 433, 495, 465, 463,
	456, 455, 451, 0, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 132, 0, 133, 134, 135, 137,
	138, 139, 0, 140, 141, 142, 145, 146, 147, 149,
	150, 151, 152, 153, 154, 155, 156, 454, 0, 158,
	159, 160, 161, 162, 164, 166, 167, 168, 169, 170,
	172, 174, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 180, 181, 182, 183, 0, 184, 185, 189, 191,
	192, 193, 194, 195, 196, 199, 0, 201, 203, 0,
	204, 207, 0, 208, 209, 210, 211, 212, 213, 214,
	215, 458, 216, 0, 217, 218, 220, 0, 223, 224,
	225, 226, 227, 0, 228, 460, 461, 229, 230, 232,
	233, 234, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 248, 249, 250, 252, 0,
	253, 254, 257, 258, 259, 260, 0, 262, 477, 0,
	263, 264, 265, 0, 0, 267, 268, 269, 270, 271,
	272, 275, 478, 277, 278, 279, 280, 281, 282, 283,
	284, 286, 287, 288, 289, 290, 291, 292, 481, 482,
	293, 295, 296, 483, 485, 486, 0, 311, 312, 313,
	314, 315, 316, 317, 319, 0, 321, 322, 323, 487,
	324, 325, 326, 327, 0, 328, 329, 330, 331, 332,
	334, 337, 338, 339, 340, 0, 343, 344, 345, 346,
	347, 348, 349, 351, 352, 353, 355, 356, 357, 358,
	359, 360, 361, 362, 490, 364, 365, 367, 368, 369,
	371, 372, 373, 374, 375, 376, 377, 0, 379, 491,
	380, 381, 382, 383, 384, 0, 386, 387, 388, 389,
	390, 391, 394, 395, 396, 398, 399, 493, 400, 401,
	0, 403, 404, 0, 406, 407, 408, 409, 410, 0,
	411, 412, 496, 413, 497, 414, 415, 416, 417, 418,
	419, 420, 422, 0, 0, 424, 425, 426, 428, 429,
	430, 431, 434, 435, 436, 437, 438, 0, 439, 441,
	443, 444, 500, 501, 502, 503, 504, 506, 507, 508,
	509, 445, 446, 462, 308, 302, 256, 300, 301, 305,
	306, 309, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 148, 0, 0, 198, 846, 457, 0, 0,
	297, 0, 350, 354, 0, 448, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 136, 494, 447, 266, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 274, 0, 498, 370, 143, 190,
	177, 219, 261, 378, 0, 0, 251, 427, 186, 276,
	0, 165, 310, 0, 402, 273, 0, 385, 405, 0,
	294, 171, 333, 392, 393, 0, 0, 0, 0, 0,
	175, 176, 299, 157, 307, 510, 475, 363, 320, 318,
	0, 285, 342, 505, 0, 0, 205, 0, 200, 298,
	442, 163, 421, 336, 303, 255, 366, 397, 202, 187,
	188, 231, 335, 221, 173, 432, 472, 476, 474, 470,
	467, 471, 468, 469, 473, 222, 466, 0, 440, 450,
	484, 464, 492, 449, 489, 459, 197, 488, 453, 452,
	499, 479, 480, 433, 495, 465, 463, 456, 455, 451,
	0, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 132, 0, 133, 134, 135, 137, 138, 139, 0,
	140, 141, 142, 145, 146, 147, 149, 150, 151, 152,
	153, 154, 155, 156, 454, 0, 158, 159, 160, 161,
	162, 164, 166, 167, 168, 169, 170, 172, 174, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 180, 181,
	182, 183, 0, 184, 185, 189, 191, 192, 193, 194,
	195, 196, 199, 0, 201, 203, 0, 204, 207, 0,
	208, 209, 210, 211, 212, 213, 214, 215, 458, 216,
	0, 217, 218, 220, 0, 223, 224, 225, 226, 227,
	0, 228, 460, 461, 229, 230, 232, 233, 234, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 248, 249, 250, 252, 0, 253, 254, 257,
	258, 259, 260, 0, 262, 477, 0, 263, 264, 265,
	0, 0, 267, 268, 269, 270, 271, 272, 275, 478,
	277, 278, 279, 280, 281, 282, 283, 284, 286, 287,
	288, 289, 290, 291, 292, 481, 482, 293, 295, 296,
	483, 485, 486, 0, 311, 312, 313, 314, 315, 316,
	317, 319, 0, 321, 322, 323, 487, 324, 325, 326,
	327, 0, 328, 329, 330, 331, 332, 334, 337, 338,
	339, 340, 0, 343, 344, 345, 346, 347, 348, 349,
	351, 352, 353, 355, 356, 357, 358, 359, 360, 361,
	362, 490, 364, 365, 367, 368, 369, 371, 372, 373,
	374, 375, 376, 377, 0, 379, 491, 380, 381, 382,
	383, 384, 0, 386, 387, 388, 389, 390, 391, 394,
	395, 396, 398, 399, 493, 400, 401, 0, 403, 404,
	0, 406, 407, 408, 409, 410, 0, 411, 412, 496,
	413, 497, 414, 415, 416, 417, 418, 419, 420, 422,
	0, 0, 424, 425, 426, 428, 429, 430, 431, 434,
	435, 436, 437, 438, 0, 439, 441, 443, 444, 500,
	501, 502, 503, 504, 506, 507, 508, 509, 445, 446,
	462, 308, 302, 256, 300, 301, 305, 306, 309, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 148,
	0, 0, 198, 724, 457, 0, 0, 297, 0, 350,
	354, 0, 448, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 0, 0,
	136, 494, 447, 266, 0, 0, 0, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 274, 0, 498, 370, 143, 190, 177, 219, 261,
	378, 0, 0, 251, 427, 186, 276, 0, 165, 310,
	0, 402, 273, 0, 385, 405, 0, 294, 171, 333,
	392, 393, 0, 0, 0, 0, 0, 175, 176, 299,
	157, 307, 510, 475, 363, 320, 318, 0, 285, 342,
	505, 0, 0, 205, 0, 200, 298, 442, 163, 421,
	336, 303, 255, 366, 397, 202, 187, 188, 231, 335,
	221, 173, 432, 472, 476, 474, 470, 467, 471, 468,
	469, 473, 222, 466, 0, 440, 450, 484, 464, 492,
	449, 489, 459, 197, 488, 453, 452, 499, 479, 480,
	433, 495, 465, 463, 456, 455, 451, 0, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 132, 0,
	133, 134, 135, 137, 138, 139, 0, 140, 141, 142,
	145, 146, 147, 149, 150, 151, 152, 153, 154, 155,
	156, 454, 0, 158, 159, 160, 161, 162, 164, 166,
	167, 168, 169, 170, 172, 174, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 180, 181, 182, 183, 0,
	184, 185, 189, 191, 192, 193, 194, 195, 196, 199,
	0, 201, 203, 0, 204, 207, 0, 208, 209, 210,
	211, 212, 213, 214, 215, 458, 216, 0, 217, 218,
	220, 0, 223, 224, 225, 226, 227, 0, 228, 460,
	461, 229, 230, 232, 233, 234, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 248,
	249, 250, 252, 0, 253, 254, 257, 258, 259, 260,
	0, 262, 477, 0, 263, 264, 265, 0, 0, 267,
	268, 269, 270, 271, 272, 275, 478, 277, 278, 279,
	280, 281, 282, 283, 284, 286, 287, 288, 289, 290,
	291, 292, 481, 482, 293, 295, 296, 483, 485, 486,
	0, 311, 312, 313, 314, 315, 316, 317, 319, 0,
	321, 322, 323, 487, 324, 325, 326, 327, 0, 328,
	329, 330, 331, 332, 334, 337, 338, 339, 340, 0,
	343, 344, 345, 346, 347, 348, 349, 351, 352, 353,
	355, 356, 357, 358, 359, 360, 361, 362, 490, 364,
	365, 367, 368, 369, 371, 372, 373, 374, 375, 376,
	377, 0, 379, 491, 380, 381, 382, 383, 384, 0,
	386, 387, 388, 389, 390, 391, 394, 395, 396, 398,
	399, 493, 400, 401, 0, 403, 404, 0, 406, 407,
	408, 409, 410, 0, 411, 412, 496, 413, 497, 414,
	415, 416, 417, 418, 419, 420, 422, 0, 0, 424,
	425, 426, 428, 429, 430, 431, 434, 435, 436, 437,
	438, 0, 439, 441, 443, 444, 500, 501, 502, 503,
	504, 506, 507, 508, 509, 445, 446, 462, 308, 302,
	256, 300, 301, 305, 306, 309, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 717, 148, 0, 0, 198,
	235, 457, 0, 0, 297, 0, 350, 354, 0, 448,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 136, 494, 447,
	266, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 341, 274, 0,
	498, 370, 143, 190, 177, 219, 261, 0, 0, 0,
	251, 427, 186, 276, 0, 165, 310, 0, 402, 273,
	0, 385, 405, 0, 294, 171, 333, 392, 393, 0,
	0, 0, 0, 0, 175, 176, 299, 157, 307, 510,
	475, 363, 320, 318, 0, 285, 342, 505, 0, 0,
	205, 0, 200, 298, 442, 163, 421, 336, 303, 255,
	366, 397, 202, 187, 188, 231, 335, 221, 173, 432,
	472, 476, 474, 470, 467, 471, 468, 469, 473, 222,
	466, 0, 440, 450, 484, 464, 492, 449, 489, 459,
	197, 488, 453, 452, 499, 479, 480, 433, 495, 465,
	463, 456, 455, 451, 0, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 132, 0, 133, 134, 135,
	137, 138, 139, 0, 140, 141, 142, 145, 146, 147,
	149, 150, 151, 152, 153, 154, 155, 156, 454, 0,
	158, 159, 160, 161, 162, 164, 166, 167, 168, 169,
	170, 172, 174, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 180, 181, 182, 183, 0, 184, 185, 189,
	191, 192, 193, 194, 195, 196, 199, 0, 201, 203,
	0, 204, 207, 0, 208, 209, 210, 211, 212, 213,
	214, 215, 458, 216, 0, 217, 218, 220, 0, 223,
	224, 225, 226, 227, 0, 228, 460, 461, 229, 230,
	232, 233, 234, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 248, 249, 250, 252,
	0, 253, 254, 257, 258, 259, 260, 0, 262, 477,
	0, 263, 264, 265, 0, 0, 267, 268, 269, 270,
	271, 272, 275, 478, 277, 278, 279, 280, 281, 282,
	283, 284, 286, 287, 288, 289, 290, 291, 292, 481,
	482, 293, 295, 296, 483, 485, 486, 0, 311, 312,
	313, 314, 315, 316, 317, 319, 0, 321, 322, 323,
	487, 324, 325, 326, 327, 0, 328, 329, 330, 331,
	332, 334, 337, 338, 339, 340, 0, 343, 344, 345,
	346, 347, 348, 349, 351, 352, 353, 355, 356, 357,
	358, 359, 360, 361, 362, 490, 364, 365, 367, 368,
	369, 371, 372, 373, 374, 375, 376, 377, 0, 379,
	491, 380, 381, 382, 383, 384, 0, 386, 387, 388,
	389, 390, 391, 394, 395, 396, 398, 399, 493, 400,
	401, 0, 403, 404, 0, 406, 407, 408, 409, 410,
	0, 411, 412, 496, 413, 497, 414, 415, 416, 417,
	418, 419, 420, 422, 0, 0, 424, 425, 426, 428,
	429, 430, 431, 434, 435, 436, 437, 438, 0, 439,
	441, 443, 444, 500, 501, 502, 503, 504, 506, 507,
	508, 509, 445, 446, 462, 308, 302, 256, 300, 301,
	305, 306, 309, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 148, 0, 0, 198, 620, 457, 0,
	0, 297, 0, 350, 354, 0, 448, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 423,
	0, 0, 0, 0, 136, 494, 447, 266, 0, 0,
	0, 304, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 274, 0, 498, 370, 143,
	190, 177, 219, 261, 378, 0, 0, 251, 427, 186,
	276, 0, 165, 310, 0, 402, 273, 0, 385, 405,
	0, 294, 171, 333, 392, 393, 0, 0, 0, 0,
	0, 175, 176, 299, 157, 307, 510, 475, 363, 320,
	318, 0, 285, 342, 505, 0, 0, 205, 0, 200,
	298, 442, 163, 421, 336, 303, 255, 366, 397, 202,
	187, 188, 231, 335, 221, 173, 432, 472, 476, 474,
	470, 467, 471, 468, 469, 473, 222, 466, 0, 440,
	450, 484, 464, 492, 449, 489, 459, 197, 488, 453,
	452, 499, 479, 480, 433, 495, 465, 463, 456, 455,
	451, 0, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 132, 0, 133, 134, 135, 137, 138, 139,
	0, 140, 141, 142, 145, 146, 147, 149, 150, 151,
	152, 153, 154, 155, 156, 454, 0, 158, 159, 160,
	161, 162, 164, 166, 167, 168, 169, 170, 172, 174,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 180,
	181, 182, 183, 0, 184, 185, 189, 191, 192, 193,
	194, 195, 196, 199, 0, 201, 203, 0, 204, 207,
	0, 208, 209, 210, 211, 212, 213, 214, 215, 458,
	216, 0, 217, 218, 220, 0, 223, 224, 225, 226,
	227, 0, 228, 460, 461, 229, 230, 232, 233, 234,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 248, 249, 250, 252, 0, 253, 254,
	257, 258, 259, 260, 0, 262, 477, 0, 263, 264,
	265, 0, 0, 267, 268, 269, 270, 271, 272, 275,
	478, 277, 278, 279, 280, 281, 282, 283, 284, 286,
	287, 288, 289, 290, 291, 292, 481, 482, 293, 295,
	296, 483, 485, 486, 0, 311, 312, 313, 314, 315,
	316, 317, 319, 0, 321, 322, 323, 487, 324, 325,
	326, 327, 0, 328, 329, 330, 331, 332, 334, 337,
	338, 339, 340, 0, 343, 344, 345, 346, 347, 348,
	349, 351, 352, 353, 355, 356, 357, 358, 359, 360,
	361, 362, 490, 364, 365, 367, 368, 369, 371, 372,
	373, 374, 375, 376, 377, 0, 379, 491, 380, 381,
	382, 383, 384, 0, 386, 387, 388, 389, 390, 391,
	394, 395, 396, 398, 399, 493, 400, 401, 0, 403,
	404, 0, 406, 407, 408, 409, 410, 0, 411, 412,
	496, 413, 497, 414, 415, 416, 417, 418, 419, 420,
	422, 0, 0, 424, 425, 426, 428, 429, 430, 431,
	434, 435, 436, 437, 438, 0, 439, 441, 443, 444,
	500, 501, 502, 503, 504, 506, 507, 508, 509, 445,
	446, 462, 308, 302, 256, 300, 301, 305, 306, 309,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	148, 0, 0, 198, 616, 457, 0, 0, 297, 0,
	350, 354, 0, 448, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 136, 494, 447, 266, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 341, 274, 0, 498, 370, 143, 190, 177, 219,
	261, 378, 0, 0, 251, 427, 186, 276, 0, 165,
	310, 0, 402, 273, 0, 385, 405, 0, 294, 171,
	333, 392, 393, 0, 0, 0, 0, 0, 175, 176,
	299, 157, 307, 510, 475, 363, 320, 318, 0, 285,
	342, 505, 0, 0, 205, 0, 200, 298, 442, 163,
	421, 336, 303, 255, 366, 397, 202, 187, 188, 231,
	335, 221, 173, 432, 472, 476, 474, 470, 467, 471,
	468, 469, 473, 222, 466, 0, 440, 450, 484, 464,
	492, 449, 489, 459, 197, 488, 453, 452, 499, 479,
	480, 433, 495, 465, 463, 456, 455, 451, 0, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 132,
	0, 133, 134, 135, 137, 138, 139, 0, 140, 141,
	142, 145, 146, 147, 149, 150, 151, 152, 153, 154,
	155, 156, 454, 0, 158, 159, 160, 161, 162, 164,
	166, 167, 168, 169, 170, 172, 174, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 180, 181, 182, 183,
	0, 184, 185, 189, 191, 192, 193, 194, 195, 196,
	199, 0, 201, 203, 0, 204, 207, 0, 208, 209,
	210, 211, 212, 213, 214, 215, 458, 216, 0, 217,
	218, 220, 0, 223, 224, 225, 226, 227, 0, 228,
	460, 461, 229, 230, 232, 233, 234, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	248, 249, 250, 252, 0, 253, 254, 257, 258, 259,
	260, 0, 262, 477, 0, 263, 264, 265, 0, 0,
	267, 268, 269, 270, 271, 272, 275, 478, 277, 278,
	279, 280, 281, 282, 283, 284, 286, 287, 288, 289,
	290, 291, 292, 481, 482, 293, 295, 296, 483, 485,
	486, 0, 311, 312, 313, 314, 315, 316, 317, 319,
	0, 321, 322, 323, 487, 324, 325, 326, 327, 0,
	328, 329, 330, 331, 332, 334, 337, 338, 339, 340,
	0, 343, 344, 345, 346, 347, 348, 349, 351, 352,
	353, 355, 356, 357, 358, 359, 360, 361, 362, 490,
	364, 365, 367, 368, 369, 371, 372, 373, 374, 375,
	376, 377, 0, 379, 491, 380, 381, 382, 383, 384,
	0, 386, 387, 388, 389, 390, 391, 394, 395, 396,
	398, 399, 493, 400, 401, 0, 403, 404, 0, 406,
	407, 408, 409, 410, 0, 411, 412, 496, 413, 497,
	414, 415, 416, 417, 418, 419, 420, 422, 0, 0,
	424, 425, 426, 428, 429, 430, 431, 434, 435, 436,
	437, 438, 0, 439, 441, 443, 444, 500, 501, 502,
	503, 504, 506, 507, 508, 509, 445, 446, 462, 308,
	302, 256, 300, 301, 305, 306, 309, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 148, 0, 0,
	198, 612, 457, 0, 0, 297, 0, 350, 354, 0,
	448, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 0, 0, 136, 494,
	447, 266, 0, 0, 0, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 341, 274,
	0, 498, 370, 143, 190, 177, 219, 261, 378, 0,
	0, 251, 427, 186, 276, 0, 165, 310, 0, 402,
	273, 0, 385, 405, 0, 294, 171, 333, 392, 393,
	0, 0, 0, 0, 0, 175, 176, 299, 157, 307,
	510, 475, 363, 320, 318, 0, 285, 342, 505, 0,
	0, 205, 0, 200, 298, 442, 163, 421, 336, 303,
	255, 366, 397, 202, 187, 188, 231, 335, 221, 173,
	432, 472, 476, 474, 470, 467, 471, 468, 469, 473,
	222, 466, 0, 440, 450, 484, 464, 492, 449, 489,
	459, 197, 488, 453, 452, 499, 479, 480, 433, 495,
	465, 463, 456, 455, 451, 0, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 132, 0, 133, 134,
	135, 137, 138, 139, 0, 140, 141, 142, 145, 146,
	147, 149, 150, 151, 152, 153, 154, 155, 156, 454,
	0, 158, 159, 160, 161, 162, 164, 166, 167, 168,
	169, 170, 172, 174, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 180, 181, 182, 183, 0, 184, 185,
	189, 191, 192, 193, 194, 195, 196, 199, 0, 201,
	203, 0, 204, 207, 0, 208, 209, 210, 211, 212,
	213, 214, 215, 458, 216, 0, 217, 218, 220, 0,
	223, 224, 225, 226, 227, 0, 228, 460, 461, 229,
	230, 232, 233, 234, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 248, 249, 250,
	252, 0, 253, 254, 257, 258, 259, 260, 0, 262,
	477, 0, 263, 264, 265, 0, 0, 267, 268, 269,
	270, 271, 272, 275, 478, 277, 278, 279, 280, 281,
	282, 283, 284, 286, 287, 288, 289, 290, 291, 292,
	481, 482, 293, 295, 296, 483, 485, 486, 0, 311,
	312, 313, 314, 315, 316, 317, 319, 0, 321, 322,
	323, 487, 324, 325, 326, 327, 0, 328, 329, 330,
	331, 332, 334, 337, 338, 339, 340, 0, 343, 344,
	345, 346, 347, 348, 349, 351, 352, 353, 355, 356,
	357, 358, 359, 360, 361, 362, 490, 364, 365, 367,
	368, 369, 371, 372, 373, 374, 375, 376, 377, 0,
	379, 491, 380, 381, 382, 383, 384, 0, 386, 387,
	388, 389, 390, 391, 394, 395, 396, 398, 399, 493,
	400, 401, 0, 403, 404, 0, 406, 407, 408, 409,
	410, 0, 411, 412, 496, 413, 497, 414, 415, 416,
	417, 418, 419, 420, 422, 0, 0, 424, 425, 426,
	428, 429, 430, 431, 434, 435, 436, 437, 438, 0,
	439, 441, 443, 444, 500, 501, 502, 503, 504, 506,
	507, 508, 509, 445, 446, 462, 308, 302, 256, 300,
	301, 305, 306, 309, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 148, 0, 0, 198, 596, 457,
	0, 0, 297, 0, 350, 354, 0, 448, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 136, 494, 447, 266, 0,
	0, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 341, 274, 0, 498, 370,
	143, 190, 177, 219, 261, 378, 0, 0, 251, 427,
	186, 276, 0, 165, 310, 0, 402, 273, 0, 385,
	405, 0, 294, 171, 333, 392, 393, 0, 0, 0,
	0, 0, 175, 176, 299, 157, 307, 510, 475, 363,
	320, 318, 0, 285, 342, 505, 0, 0, 205, 0,
	200, 298, 442, 163, 421, 336, 303, 255, 366, 397,
	202, 187, 188, 231, 335, 221, 173, 432, 472, 476,
	474, 470, 467, 471, 468, 469, 473, 222, 466, 0,
	440, 450, 484, 464, 492, 449, 489, 459, 197, 488,
	453, 452, 499, 479, 480, 433, 495, 465, 463, 456,
	455, 451, 0, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 132, 0, 133, 134, 135, 137, 138,
	139, 0, 140, 141, 142, 145, 146, 147, 149, 150,
	151, 152, 153, 154, 155, 156, 454, 0, 158, 159,
	160, 161, 162, 164, 166, 167, 168, 169, 170, 172,
	174, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	180, 181, 182, 183, 0, 184, 185, 189, 191, 192,
	193, 194, 195, 196, 199, 0, 201, 203, 0, 204,
	207, 0, 208, 209, 210, 211, 212, 213, 214, 215,
	458, 216, 0, 217, 218, 220, 0, 223, 224, 225,
	226, 227, 0, 228, 460, 461, 229, 230, 232, 233,
	234, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 248, 249, 250, 252, 0, 253,
	254, 257, 258, 259, 260, 0, 262, 477, 0, 263,
	264, 265, 0, 0, 267, 268, 269, 270, 271, 272,
	275, 478, 277, 278, 279, 280, 281, 282, 283, 284,
	286, 287, 288, 289, 290, 291, 292, 481, 482, 293,
	295, 296, 483, 485, 486, 0, 311, 312, 313, 314,
	315, 316, 317, 319, 0, 321, 322, 323, 487, 324,
	325, 326, 327, 0, 328, 329, 330, 331, 332, 334,
	337, 338, 339, 340, 0, 343, 344, 345, 346, 347,
	348, 349, 351, 352, 353, 355, 356, 357, 358, 359,
	360, 361, 362, 490, 364, 365, 367, 368, 369, 371,
	372, 373, 374, 375, 376, 377, 0, 379, 491, 380,
	381, 382, 383, 384, 0, 386, 387, 388, 389, 390,
	391, 394, 395, 396, 398, 399, 493, 400, 401, 0,
	403, 404, 0, 406, 407, 408, 409, 410, 0, 411,
	412, 496, 413, 497, 414, 415, 416, 417, 418, 419,
	420, 422, 0, 0, 424, 425, 426, 428, 429, 430,
	431, 434, 435, 436, 437, 438, 0, 439, 441, 443,
	444, 500, 501, 502, 503, 504, 506, 507, 508, 509,
	445, 446, 462, 308, 302, 256, 300, 301, 305, 306,
	309, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 148, 0, 0, 198, 543, 457, 0, 0, 297,
	0, 350, 354, 0, 448, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	0, 0, 136, 494, 447, 266, 0, 0, 0, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 274, 0, 498, 370, 143, 190, 177,
	219, 261, 378, 0, 0, 251, 427, 186, 276, 0,
	165, 310, 0, 402, 273, 0, 385, 405, 0, 294,
	171, 333, 392, 393, 0, 0, 0, 0, 0, 175,
	176, 299, 157, 307, 510, 475, 363, 320, 318, 0,
	285, 342, 505, 0, 0, 205, 0, 200, 298, 442,
	163, 421, 336, 303, 255, 366, 397, 202, 187, 188,
	231, 335, 221, 173, 432, 472, 476, 474, 470, 467,
	471, 468, 469, 473, 222, 466, 0, 440, 450, 484,
	464, 492, 449, 489, 459, 197, 488, 453, 452, 499,
	479, 480, 433, 495, 465, 463, 456, 455, 451, 0,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	132, 0, 133, 134, 135, 137, 138, 139, 0, 140,
	141, 142, 145, 146, 147, 149, 150, 151, 152, 153,
	154, 155, 156, 454, 0, 158, 159, 160, 161, 162,
	164, 166, 167, 168, 169, 170, 172, 174, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 180, 181, 182,
	183, 0, 184, 185, 189, 191, 192, 193, 194, 195,
	196, 199, 0, 201, 203, 0, 204, 207, 0, 208,
	209, 210, 211, 212, 213, 214, 215, 458, 216, 0,
	217, 218, 220, 0, 223, 224, 225, 226, 227, 0,
	228, 460, 461, 229, 230, 232, 233, 234, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 248, 249, 250, 252, 0, 253, 254, 257, 258,
	259, 260, 0, 262, 477, 0, 263, 264, 265, 0,
	0, 267, 268, 269, 270, 271, 272, 275, 478, 277,
	278, 279, 280, 281, 282, 283, 284, 286, 287, 288,
	289, 290, 291, 292, 481, 482, 293, 295, 296, 483,
	485, 486, 0, 311, 312, 313, 314, 315, 316, 317,
	319, 0, 321, 322, 323, 487, 324, 325, 326, 327,
	0, 328, 329, 330, 331, 332, 334, 337, 338, 339,
	340, 0, 343, 344, 345, 346, 347, 348, 349, 351,
	352, 353, 355, 356, 357, 358, 359, 360, 361, 362,
	490, 364, 365, 367, 368, 369, 371, 372, 373, 374,
	375, 376, 377, 0, 379, 491, 380, 381, 382, 383,
	384, 0, 386, 387, 388, 389, 390, 391, 394, 395,
	396, 398, 399, 493, 400, 401, 0, 403, 404, 0,
	406, 407, 408, 409, 410, 0, 411, 412, 496, 413,
	497, 414, 415, 416, 417, 418, 419, 420, 422, 0,
	0, 424, 425, 426, 428, 429, 430, 431, 434, 435,
	436, 437, 438, 0, 439, 441, 443, 444, 500, 501,
	502, 503, 504, 506, 507, 508, 509, 445, 446, 462,
	308, 302, 256, 300, 301, 305, 306, 309, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 148, 0,
	0, 198, 541, 457, 0, 0, 297, 0, 350, 354,
	0, 448, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 136,
	494, 447, 266, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 341,
	274, 0, 498, 370, 143, 190, 177, 219, 261, 378,
	0, 0, 251, 427, 186, 276, 0, 165, 310, 0,
	402, 273, 0, 385, 405, 0, 294, 171, 333, 392,
	393, 0, 0, 0, 0, 0, 175, 176, 299, 157,
	307, 510, 475, 363, 320, 318, 0, 285, 342, 505,
	0, 0, 205, 0, 200, 298, 442, 163, 421, 336,
	303, 255, 366, 397, 202, 187, 188, 231, 335, 221,
	173, 432, 472, 476, 474, 470, 467, 471, 468, 469,
	473, 222, 466, 0, 440, 450, 484, 464, 492, 449,
	489, 459, 197, 488, 453, 452, 499, 479, 480, 433,
	495, 465, 463, 456, 455, 451, 0, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 132, 0, 133,
	134, 135, 137, 138, 139, 0, 140, 141, 142, 145,
	146, 147, 149, 150, 151, 152, 153, 154, 155, 156,
	454, 0, 158, 159, 160, 161, 162, 164, 166, 167,
	168, 169, 170, 172, 174, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 182, 183, 0, 184,
	185, 189, 191, 192, 193, 194, 195, 196, 199, 0,
	201, 203, 0, 204, 207, 0, 208, 209, 210, 211,
	212, 213, 214, 215, 458, 216, 0, 217, 218, 220,
	0, 223, 224, 225, 226, 227, 0, 228, 460, 461,
	229, 230, 232, 233, 234, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 248, 249,
	250, 252, 0, 253, 254, 257, 258, 259, 260, 0,
	262, 477, 0, 263, 264, 265, 0, 0, 267, 268,
	269, 270, 271, 272, 275, 478, 277, 278, 279, 280,
	281, 282, 283, 284, 286, 287, 288, 289, 290, 291,
	292, 481, 482, 293, 295, 296, 483, 485, 486, 0,
	311, 312, 313, 314, 315, 316, 317, 319, 0, 321,
	322, 323, 487, 324, 325, 326, 327, 0, 328, 329,
	330, 331, 332, 334, 337, 338, 339, 340, 0, 343,
	344, 345, 346, 347, 348, 349, 351, 352, 353, 355,
	356, 357, 358, 359, 360, 361, 362, 490, 364, 365,
	367, 368, 369, 371, 372, 373, 374, 375, 376, 377,
	0, 379, 491, 380, 381, 382, 383, 384, 0, 386,
	387, 388, 389, 390, 391, 394, 395, 396, 398, 399,
	493, 400, 401, 0, 403, 404, 0, 406, 407, 408,
	409, 410, 0, 411, 412, 496, 413, 497, 414, 415,
	416, 417, 418, 419, 420, 422, 0, 0, 424, 425,
	426, 428, 429, 430, 431, 434, 435, 436, 437, 438,
	0, 439, 441, 443, 444, 500, 501, 502, 503, 504,
	506, 507, 508, 509, 445, 446, 462, 308, 302, 256,
	300, 301, 305, 306, 309, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 148, 0, 0, 198, 235,
	457, 0, 0, 297, 0, 350, 354, 0, 448, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 0, 0, 136, 494, 447, 266,
	0, 0, 0, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 513, 274, 0, 498,
	370, 143, 190, 177, 219, 261, 378, 0, 0, 251,
	427, 186, 276, 0, 165, 310, 0, 402, 273, 0,
	385, 405, 0, 294, 171, 333, 392, 393, 0, 0,
	0, 0, 0, 175, 176, 299, 157, 307, 510, 475,
	363, 320, 318, 0, 285, 342, 505, 0, 0, 205,
	0, 200, 298, 442, 163, 421, 336, 303, 255, 366,
	397, 202, 187, 188, 231, 335, 221, 173, 432, 472,
	476, 474, 470, 467, 471, 468, 469, 473, 222, 466,
	0, 440, 450, 484, 464, 492, 449, 489, 459, 197,
	488, 453, 452, 499, 479, 480, 433, 495, 465, 463,
	456, 455, 451, 0, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 132, 0, 133, 134, 135, 137,
	138, 139, 0, 140, 141, 142, 145, 146, 147, 149,
	150, 151, 152, 153, 154, 155, 156, 454, 0, 158,
	159, 160, 161, 162, 164, 166, 167, 168, 169, 170,
	172, 174, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 180, 181, 182, 183, 0, 184, 185, 189, 191,
	192, 193, 194, 195, 196, 199, 0, 201, 203, 0,
	204, 207, 0, 208, 209, 210, 211, 212, 213, 214,
	215, 458, 216, 0, 217, 218, 220, 0, 223, 224,
	225, 226, 227, 0, 228, 460, 461, 229, 230, 232,
	233, 234, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 248, 249, 250, 252, 0,
	253, 254, 257, 258, 259, 260, 0, 262, 477, 0,
	263, 264, 265, 0, 0, 267, 268, 269, 270, 271,
	272, 275, 478, 277, 278, 279, 280, 281, 282, 283,
	284, 286, 287, 288, 289, 290, 291, 292, 481, 482,
	293, 295, 296, 483, 485, 486, 0, 311, 312, 313,
	314, 315, 316, 317, 319, 0, 321, 322, 323, 487,
	324, 325, 326, 327, 0, 328, 329, 330, 331, 332,
	334, 337, 338, 339, 340, 0, 343, 344, 345, 346,
	347, 348, 349, 351, 352, 353, 355, 356, 357, 358,
	359, 360, 361, 362, 490, 364, 365, 367, 368, 369,
	371, 372, 373, 374, 375, 376, 377, 0, 379, 491,
	380, 381, 382, 383, 384, 0, 386, 387, 388, 389,
	390, 391, 394, 395, 396, 398, 399, 493, 400, 401,
	0, 403, 404, 0, 406, 407, 408, 409, 410, 0,
	411, 412, 496, 413, 497, 414, 415, 416, 417, 418,
	419, 420, 422, 0, 0, 424, 425, 426, 428, 429,
	430, 431, 434, 435, 436, 437, 438, 0, 439, 441,
	443, 444, 500, 501, 502, 503, 504, 506, 507, 508,
	509, 445, 446, 462, 308, 302, 256, 300, 301, 305,
	306, 309, 648, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 148, 557, 0, 198, 235, 0, 0, 0,
	297, 0, 350, 354, 0, 0, 0, 0, 0, 0,
	206, 0, 562, 0, 568, 0, 574, 0, 423, 0,
	564, 565, 570, 136, 647, 447, 266, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 566, 563, 567, 573, 561, 571,
	558, 569, 0, 341, 274, 0, 0, 370, 143, 190,
	177, 219, 261, 378, 0, 0, 251, 427, 186, 276,
	0, 165, 310, 0, 402, 273, 0, 385, 405, 0,
	294, 171, 333, 392, 393, 555, 560, 0, 576, 0,
	175, 176, 299, 157, 307, 0, 0, 363, 320, 318,
	2994, 285, 342, 0, 0, 0, 205, 0, 200, 298,
	442, 163, 421, 336, 303, 255, 366, 397, 202, 187,
	188, 231, 335, 221, 173, 432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 440, 650,
	640, 632, 633, 634, 635, 636, 637, 0, 652, 653,
	654, 655, 656, 433, 646, 0, 631, 638, 639, 641,
	0, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 132, 0, 133, 134, 135, 137, 138, 139, 554,
	140, 141, 142, 145, 146, 147, 149, 150, 151, 152,
	153, 154, 155, 156, 0, 556, 158, 159, 160, 161,
	162, 164, 166, 167, 168, 169, 170, 172, 174, 0,
	0, 0, 559, 0, 0, 0, 178, 179, 180, 181,
	182, 183, 0, 184, 185, 189, 191, 192, 193, 194,
	195, 196, 199, 0, 201, 203, 0, 204, 207, 0,
	208, 209, 210, 211, 212, 213, 214, 215, 0, 216,
	0, 217, 218, 220, 0, 223, 224, 225, 226, 227,
	0, 228, 0, 0, 229, 230, 232, 233, 234, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 248, 249, 250, 252, 0, 253, 254, 257,
	258, 259, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 0, 267, 268, 269, 270, 271, 272, 275, 0,
	277, 278, 279, 280, 281, 282, 283, 284, 286, 287,
	288, 289, 290, 291, 292, 0, 0, 293, 295, 296,
	0, 0, 0, 572, 311, 312, 313, 314, 315, 316,
	317, 319, 0, 321, 322, 323, 0, 324, 325, 326,
	327, 0, 328, 329, 330, 331, 332, 334, 337, 338,
	339, 340, 0, 343, 344, 345, 346, 347, 348, 349,
	351, 352, 353, 355, 356, 357, 358, 359, 360, 361,
	362, 0, 364, 365, 367, 368, 369, 371, 372, 373,
	374, 375, 376, 377, 0, 379, 0, 380, 381, 382,
	383, 384, 0, 386, 387, 388, 389, 390, 391, 394,
	395, 396, 398, 399, 0, 400, 401, 0, 403, 404,
	575, 406, 407, 408, 409, 410, 0, 411, 412, 0,
	413, 0, 414, 415, 416, 417, 418, 419, 420, 422,
	0, 0, 424, 425, 426, 428, 429, 430, 431, 434,
	435, 436, 437, 438, 0, 439, 441, 443, 444, 0,
	0, 648, 0, 0, 0, 0, 0, 0, 445, 446,
	0, 308, 302, 256, 300, 301, 305, 306, 309, 131,
	0, 148, 557, 0, 198, 235, 0, 0, 0, 297,
	0, 350, 354, 0, 0, 0, 0, 0, 0, 206,
	0, 562, 0, 568, 0, 574, 0, 423, 0, 564,
	565, 570, 136, 647, 447, 266, 0, 0, 0, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 566, 563, 567, 573, 561, 571, 558,
	569, 0, 341, 274, 0, 0, 370, 143, 190, 177,
	219, 261, 378, 0, 0, 251, 427, 186, 276, 0,
	165, 310, 0, 402, 273, 0, 385, 405, 0, 294,
	171, 333, 392, 393, 555, 560, 0, 576, 0, 175,
	176, 299, 157, 307, 0, 0, 363, 320, 318, 2730,
	285, 342, 0, 0, 0, 205, 0, 200, 298, 442,
	163, 421, 336, 303, 255, 366, 397, 202, 187, 188,
	231, 335, 221, 173, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 440, 650, 640,
	632, 633, 634, 635, 636, 637, 0, 652, 653, 654,
	655, 656, 433, 646, 0, 631, 638, 639, 641, 0,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	132, 0, 133, 134, 135, 137, 138, 139, 554, 140,
	141, 142, 145, 146, 147, 149, 150, 151, 152, 153,
	154, 155, 156, 0, 556, 158, 159, 160, 161, 162,
	164, 166, 167, 168, 169, 170, 172, 174, 0, 0,
	0, 559, 0, 0, 0, 178, 179, 180, 181, 182,
	183, 0, 184, 185, 189, 191, 192, 193, 194, 195,
	196, 199, 0, 201, 203, 0, 204, 207, 0, 208,
	209, 210, 211, 212, 213, 214, 215, 0, 216, 0,
	217, 218, 220, 0, 223, 224, 225, 226, 227, 0,
	228, 0, 0, 229, 230, 232, 233, 234, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 248, 249, 250, 252, 0, 253, 254, 257, 258,
	259, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	0, 267, 268, 269, 270, 271, 272, 275, 0, 277,
	278, 279, 280, 281, 282, 283, 284, 286, 287, 288,
	289, 290, 291, 292, 0, 0, 293, 295, 296, 0,
	0, 0, 572, 311, 312, 313, 314, 315, 316, 317,
	319, 0, 321, 322, 323, 0, 324, 325, 326, 327,
	0, 328, 329, 330, 331, 332, 334, 337, 338, 339,
	340, 0, 343, 344, 345, 346, 347, 348, 349, 351,
	352, 353, 355, 356, 357, 358, 359, 360, 361, 362,
	0, 364, 365, 367, 368, 369, 371, 372, 373, 374,
	375, 376, 377, 0, 379, 0, 380, 381, 382, 383,
	384, 0, 386, 387, 388, 389, 390, 391, 394, 395,
	396, 398, 399, 0, 400, 401, 0, 403, 404, 575,
	406, 407, 408, 409, 410, 0, 411, 412, 0, 413,
	0, 414, 415, 416, 417, 418, 419, 420, 422, 0,
	0, 424, 425, 426, 428, 429, 430, 431, 434, 435,
	436, 437, 438, 0, 439, 441, 443, 444, 0, 0,
	648, 0, 0, 0, 0, 0, 0, 445, 446, 0,
	308, 302, 256, 300, 301, 305, 306, 309, 131, 0,
	148, 557, 0, 198, 235, 0, 0, 0, 297, 0,
	350, 354, 0, 0, 0, 0, 0, 0, 206, 0,
	562, 0, 568, 0, 574, 0, 423, 0, 564, 565,
	570, 136, 647, 447, 266, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 0, 0,
	0, 0, 566, 563, 567, 573, 561, 571, 558, 569,
	0, 341, 274, 0, 0, 370, 143, 190, 177, 219,
	261, 378, 0, 0, 251, 427, 186, 276, 0, 165,
	310, 0, 402, 273, 0, 385, 405, 0, 294, 171,
	333, 392, 393, 555, 560, 0, 576, 0, 175, 176,
	299, 157, 307, 0, 0, 363, 320, 318, 0, 285,
	342, 0, 0, 0, 205, 0, 200, 298, 442, 163,
	421, 336, 303, 255, 366, 397, 202, 187, 188, 231,
	335, 221, 173, 432, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 440, 650, 640, 632,
	633, 634, 635, 636, 637, 0, 652, 653, 654, 655,
	656, 433, 646, 0, 631, 638, 639, 641, 0, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 132,
	0, 133, 134, 135, 137, 138, 139, 554, 140, 141,
	142, 145, 146, 147, 149, 150, 151, 152, 153, 154,
	155, 156, 0, 556, 158, 159, 160, 161, 162, 164,
	166, 167, 168, 169, 170, 172, 174, 0, 0, 0,
	559, 0, 0, 0, 178, 179, 180, 181, 182, 183,
	0, 184, 185, 189, 191, 192, 193, 194, 195, 196,
	199, 0, 201, 203, 0, 204, 207, 0, 208, 209,
	210, 211, 212, 213, 214, 215, 0, 216, 0, 217,
	218, 220, 0, 223, 224, 225, 226, 227, 0, 228,
	0, 0, 229, 230, 232, 233, 234, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	248, 249, 250, 252, 0, 253, 254, 257, 258, 259,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 0,
	267, 268, 269, 270, 271, 272, 275, 0, 277, 278,
	279, 280, 281, 282, 283, 284, 286, 287, 288, 289,
	290, 291, 292, 0, 0, 293, 295, 296, 0, 0,
	0, 572, 311, 312, 313, 314, 315, 316, 317, 319,
	0, 321, 322, 323, 0, 324, 325, 326, 327, 0,
	328, 329, 330, 331, 332, 334, 337, 338, 339, 340,
	0, 343, 344, 345, 346, 347, 348, 349, 351, 352,
	353, 355, 356, 357, 358, 359, 360, 361, 362, 0,
	364, 365, 367, 368, 369, 371, 372, 373, 374, 375,
	376, 377, 0, 379, 0, 380, 381, 382, 383, 384,
	0, 386, 387, 388, 389, 390, 391, 394, 395, 396,
	398, 399, 0, 400, 401, 0, 403, 404, 575, 406,
	407, 408, 409, 410, 0, 411, 412, 0, 413, 0,
	414, 415, 416, 417, 418, 419, 420, 422, 0, 0,
	424, 425, 426, 428, 429, 430, 431, 434, 435, 436,
	437, 438, 0, 439, 441, 443, 444, 0, 0, 648,
	0, 0, 0, 0, 0, 0, 445, 446, 0, 308,
	302, 256, 300, 301, 305, 306, 309, 131, 0, 148,
	557, 0, 198, 658, 0, 0, 0, 297, 0, 350,
	354, 0, 0, 0, 0, 0, 0, 206, 0, 562,
	0, 568, 0, 574, 0, 423, 0, 564, 565, 570,
	136, 647, 447, 266, 0, 0, 0, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 0, 0, 0,
	0, 566, 563, 567, 573, 561, 571, 558, 569, 0,
	341, 274, 0, 0, 370, 143, 190, 177, 219, 261,
	378, 0, 0, 251, 427, 186, 276, 0, 165, 310,
	0, 402, 273, 0, 385, 405, 0, 294, 171, 333,
	392, 393, 555, 560, 0, 576, 0, 175, 176, 299,
	157, 307, 0, 0, 363, 320, 318, 0, 285, 342,
	0, 0, 0, 205, 0, 200, 298, 442, 163, 421,
	336, 303, 255, 366, 397, 202, 187, 188, 231, 335,
	221, 173, 432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 440, 650, 640, 632, 633,
	634, 635, 636, 637, 0, 652, 653, 654, 655, 656,
	433, 646, 0, 631, 638, 639, 641, 0, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 132, 0,
	133, 134, 135, 137, 138, 139, 554, 140, 141, 142,
	145, 146, 147, 149, 150, 151, 152, 153, 154, 155,
	156, 0, 556, 158, 159, 160, 161, 162, 164, 166,
	167, 168, 169, 170, 172, 174, 0, 0, 0, 559,
	0, 0, 0, 178, 179, 180, 181, 182, 183, 0,
	184, 185, 189, 191, 192, 193, 194, 195, 196, 199,
	0, 201, 203, 0, 204, 207, 0, 208, 209, 210,
	211, 212, 213, 214, 215, 0, 216, 0, 217, 218,
	220, 0, 223, 224, 225, 226, 227, 0, 228, 0,
	0, 229, 230, 232, 233, 234, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 248,
	249, 250, 252, 0, 253, 254, 257, 258, 259, 260,
	0, 262, 0, 0, 263, 264, 265, 0, 0, 267,
	268, 269, 270, 271, 272, 275, 0, 277, 278, 279,
	280, 281, 282, 283, 284, 286, 287, 288, 289, 290,
	291, 292, 0, 0, 293, 295, 296, 0, 0, 0,
	572, 311, 312, 313, 314, 315, 316, 317, 319, 0,
	321, 322, 323, 0, 324, 325, 326, 327, 0, 328,
	329, 330, 331, 332, 334, 337, 338, 339, 340, 0,
	343, 344, 345, 346, 347, 348, 349, 351, 352, 353,
	355, 356, 357, 358, 359, 360, 361, 362, 0, 364,
	365, 367, 368, 369, 371, 372, 373, 374, 375, 376,
	377, 0, 379, 0, 380, 381, 382, 383, 384, 0,
	386, 387, 388, 389, 390, 391, 394, 395, 396, 398,
	399, 0, 400, 401, 0, 403, 404, 575, 406, 407,
	408, 409, 410, 0, 411, 412, 0, 413, 0, 414,
	415, 416, 417, 418, 419, 420, 422, 0, 0, 424,
	425, 426, 428, 429, 430, 431, 434, 435, 436, 437,
	438, 0, 439, 441, 443, 444, 0, 0, 648, 0,
	0, 0, 0, 0, 0, 445, 446, 0, 308, 302,
	256, 300, 301, 305, 306, 309, 131, 0, 148, 557,
	0, 198, 622, 0, 0, 0, 297, 0, 350, 354,
	0, 0, 0, 0, 0, 0, 206, 0, 562, 0,
	568, 0, 574, 0, 423, 0, 564, 565, 570, 136,
	647, 447, 266, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 0,
	566, 563, 567, 573, 561, 571, 558, 569, 0, 341,
	274, 0, 0, 370, 143, 190, 177, 219, 261, 378,
	0, 0, 251, 427, 186, 276, 0, 165, 310, 0,
	402, 273, 0, 385, 405, 0, 294, 171, 333, 392,
	393, 555, 560, 0, 576, 0, 175, 176, 299, 157,
	307, 0, 0, 363, 320, 318, 0, 285, 342, 0,
	0, 0, 205, 0, 200, 298, 442, 163, 421, 336,
	303, 255, 366, 397, 202, 187, 188, 231, 335, 221,
	173, 432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 440, 650, 640, 632, 633, 634,
	635, 636, 637, 0, 652, 653, 654, 655, 656, 433,
	646, 0, 631, 638, 639, 641, 0, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 132, 0, 133,
	134, 135, 137, 138, 139, 554, 140, 141, 142, 145,
	146, 147, 149, 150, 151, 152, 153, 154, 155, 156,
	0, 556, 158, 159, 160, 161, 162, 164, 166, 167,
	168, 169, 170, 172, 174, 0, 0, 0, 559, 0,
	0, 0, 178, 179, 180, 181, 182, 183, 0, 184,
	185, 189, 191, 192, 193, 194, 195, 196, 199, 0,
	201, 203, 0, 204, 207, 0, 208, 209, 210, 211,
	212, 213, 214, 215, 0, 216, 0, 217, 218, 220,
	0, 223, 224, 225, 226, 227, 0, 228, 0, 0,
	229, 230, 232, 233, 234, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 248, 249,
	250, 252, 0, 253, 254, 257, 258, 259, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 0, 267, 268,
	269, 270, 271, 272, 275, 0, 277, 278, 279, 280,
	281, 282, 283, 284, 286, 287, 288, 289, 290, 291,
	292, 0, 0, 293, 295, 296, 0, 0, 0, 572,
	311, 312, 313, 314, 315, 316, 317, 319, 0, 321,
	322, 323, 0, 324, 325, 326, 327, 0, 328, 329,
	330, 331, 332, 334, 337, 338, 339, 340, 0, 343,
	344, 345, 346, 347, 348, 349, 351, 352, 353, 355,
	356, 357, 358, 359, 360, 361, 362, 0, 364, 365,
	367, 368, 369, 371, 372, 373, 374, 375, 376, 377,
	0, 379, 0, 380, 381, 382, 383, 384, 0, 386,
	387, 388, 389, 390, 391, 394, 395, 396, 398, 399,
	0, 400, 401, 0, 403, 404, 575, 406, 407, 408,
	409, 410, 0, 411, 412, 0, 413, 0, 414, 415,
	416, 417, 418, 419, 420, 422, 0, 0, 424, 425,
	426, 428, 429, 430, 431, 434, 435, 436, 437, 438,
	0, 439, 441, 443, 444, 0, 0, 0, 0, 0,
	2248, 695, 0, 0, 445, 446, 694, 308, 302, 256,
	300, 301, 305, 306, 309, 0, 131, 0, 148, 0,
	0, 198, 235, 0, 0, 0, 297, 0, 350, 354,
	0, 0, 0, 0, 2651, 0, 206, 2654, 0, 0,
	0, 0, 0, 2653, 423, 0, 0, 0, 0, 136,
	0, 447, 266, 0, 0, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 2655,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 341,
	274, 0, 0, 370, 143, 190, 177, 219, 261, 378,
	0, 0, 251, 427, 186, 276, 0, 165, 310, 0,
	402, 273, 0, 385, 405, 0, 294, 171, 333, 392,
	393, 0, 0, 0, 0, 0, 175, 176, 299, 157,
	307, 0, 0, 363, 320, 318, 0, 285, 342, 0,
	0, 0, 205, 0, 200, 298, 442, 163, 421, 336,
	303, 255, 366, 397, 202, 187, 188, 231, 335, 221,
	173, 432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 440, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 0, 0, 0, 0, 0, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 132, 0, 133,
	134, 135, 137, 138, 139, 0, 140, 141, 142, 145,
	146, 147, 149, 150, 151, 152, 153, 154, 155, 156,
	0, 0, 158, 159, 160, 161, 162, 164, 166, 167,
	168, 169, 170, 172, 174, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 180, 181, 182, 183, 0, 184,
	185, 189, 191, 192, 193, 194, 195, 196, 199, 0,
	201, 203, 0, 204, 207, 0, 208, 209, 210, 211,
	212, 213, 214, 215, 0, 216, 0, 217, 218, 220,
	0, 223, 224, 225, 226, 227, 0, 228, 0, 0,
	229, 230, 232, 233, 234, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 248, 249,
	250, 252, 0, 253, 254, 257, 258, 259, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 0, 267, 268,
	269, 270, 271, 272, 275, 0, 277, 278, 279, 280,
	281, 282, 283, 284, 286, 287, 288, 289, 290, 291,
	292, 0, 0, 293, 295, 296, 0, 0, 0, 0,
	311, 312, 313, 314, 315, 316, 317, 319, 0, 321,
	322, 323, 0, 324, 325, 326, 327, 0, 328, 329,
	330, 331, 332, 334, 337, 338, 339, 340, 0, 343,
	344, 345, 346, 347, 348, 349, 351, 352, 353, 355,
	356, 357, 358, 359, 360, 361, 362, 0, 364, 365,
	367, 368, 369, 371, 372, 373, 374, 375, 376, 377,
	0, 379, 0, 380, 381, 382, 383, 384, 0, 386,
	387, 388, 389, 390, 391, 394, 395, 396, 398, 399,
	0, 400, 401, 0, 403, 404, 0, 406, 407, 408,
	409, 410, 0, 411, 412, 0, 413, 0, 414, 415,
	416, 417, 418, 419, 420, 422, 0, 0, 424, 425,
	426, 428, 429, 430, 431, 434, 435, 436, 437, 438,
	0, 439, 441, 443, 444, 0, 0, 0, 0, 0,
	0, 0, 0, 695, 445, 446, 0, 308, 302, 256,
	300, 301, 305, 306, 309, 0, 0, 0, 131, 0,
	148, 0, 0, 198, 235, 0, 0, 0, 297, 0,
	350, 354, 0, 0, 0, 0, 0, 2652, 206, 2654,
	2414, 2415, 2650, 0, 0, 2653, 423, 0, 0, 0,
	0, 136, 0, 447, 266, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 0, 0,
	0, 2655, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 341, 274, 0, 0, 370, 143, 190, 177, 219,
	261, 378, 0, 0, 251, 427, 186, 276, 0, 165,
	310, 0, 402, 273, 0, 385, 405, 0, 294, 171,
	333, 392, 393, 0, 0, 0, 0, 0, 175, 176,
	299, 157, 307, 0, 0, 363, 320, 318, 0, 285,
	342, 0, 0, 0, 205, 0, 200, 298, 442, 163,
	421, 336, 303, 255, 366, 397, 202, 187, 188, 231,
	335, 221, 173, 432, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 440, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 0, 0, 0, 0, 0, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 132,
	0, 133, 134, 135, 137, 138, 139, 0, 140, 141,
	142, 145, 146, 147, 149, 150, 151, 152, 153, 154,
	155, 156, 0, 0, 158, 159, 160, 161, 162, 164,
	166, 167, 168, 169, 170, 172, 174, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 180, 181, 182, 183,
	0, 184, 185, 189, 191, 192, 193, 194, 195, 196,
	199, 0, 201, 203, 0, 204, 207, 0, 208, 209,
	210, 211, 212, 213, 214, 215, 0, 216, 0, 217,
	218, 220, 0, 223, 224, 225, 226, 227, 0, 228,
	0, 0, 229, 230, 232, 233, 234, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	248, 249, 250, 252, 0, 253, 254, 257, 258, 259,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 0,
	267, 268, 269, 270, 271, 272, 275, 0, 277, 278,
	279, 280, 281, 282, 283, 284, 286, 287, 288, 289,
	290, 291, 292, 0, 0, 293, 295, 296, 0, 0,
	0, 0, 311, 312, 313, 314, 315, 316, 317, 319,
	0, 321, 322, 323, 0, 324, 325, 326, 327, 0,
	328, 329, 330, 331, 332, 334, 337, 338, 339, 340,
	0, 343, 344, 345, 346, 347, 348, 349, 351, 352,
	353, 355, 356, 357, 358, 359, 360, 361, 362, 0,
	364, 365, 367, 368, 369, 371, 372, 373, 374, 375,
	376, 377, 0, 379, 0, 380, 381, 382, 383, 384,
	0, 386, 387, 388, 389, 390, 391, 394, 395, 396,
	398, 399, 0, 400, 401, 0, 403, 404, 0, 406,
	407, 408, 409, 410, 0, 411, 412, 0, 413, 0,
	414, 415, 416, 417, 418, 419, 420, 422, 0, 0,
	424, 425, 426, 428, 429, 430, 431, 434, 435, 436,
	437, 438, 734, 439, 441, 443, 444, 735, 0, 734,
	0, 744, 0, 0, 735, 0, 445, 446, 744, 308,
	302, 256, 300, 301, 305, 306, 309, 734, 0, 0,
	0, 0, 735, 0, 734, 0, 744, 0, 0, 735,
	0, 734, 0, 744, 0, 0, 735, 0, 0, 0,
	744, 734, 0, 0, 0, 0, 735, 0, 0, 734,
	744, 0, 0, 0, 735, 0, 0, 0, 744, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	0, 0, 737, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 743, 0, 0, 737, 0, 0,
	0, 743, 0, 0, 737, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 0, 743,
	0, 0, 737, 0, 0, 748, 743, 0, 0, 0,
	0, 0, 748, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 0, 0,
	748, 743, 0, 0, 0, 0, 0, 748, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 733, 0,
	0, 0, 0, 0, 748, 733, 0, 0, 0, 0,
	0, 0, 748, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 738, 0, 0, 0, 0,
	733, 0, 738, 0, 0, 0, 0, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 733, 0, 0,
	738, 48, 0, 0, 0, 733, 60, 738, 0, 0,
	740, 0, 0, 0, 738, 0, 739, 740, 0, 0,
	52, 0, 0, 739, 738, 0, 0, 0, 0, 0,
	0, 0, 738, 0, 0, 740, 0, 0, 0, 74,
	0, 739, 740, 0, 0, 0, 0, 0, 739, 740,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 740,
	0, 741, 0, 0, 0, 739, 0, 740, 741, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	741, 0, 0, 742, 0, 0, 0, 745, 741, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 0, 0,
	0, 742, 0, 0, 0, 54, 0, 0, 742, 0,
	0, 0, 745, 0, 0, 742, 0, 0, 0, 745,
	1809, 0, 747, 746, 0, 742, 745, 1805, 0, 747,
	746, 55, 0, 742, 0, 0, 745, 0, 0, 0,
	0, 0, 56, 0, 745, 1540, 0, 747, 746, 0,
	0, 0, 1536, 57, 747, 746, 0, 0, 0, 763,
	0, 747, 746, 0, 0, 0, 0, 58, 0, 760,
	0, 747, 746, 0, 72, 0, 0, 0, 0, 747,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 59, 0, 0, 0, 0, 0, 0, 736,
	0, 0, 0, 0, 0, 0, 736, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 0, 0, 0, 0, 750,
	0, 736, 0, 0, 0, 0, 750, 0, 736, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 736, 0,
	0, 0, 0, 0, 750, 0, 736, 0, 0, 0,
	0, 750, 0, 0, 0, 0, 0, 0, 750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 750, 0,
	0, 63, 0, 0, 0, 0, 750, 0, 0, 0,
	79, 64, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 0, 0, 66, 0, 0, 70, 0,
	67, 0, 0, 0, 0, 50, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51,
}

var yyPact = [...]int32{
	1258, -1000, -196, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1295, 307,
	775, 41464, 3762, -1000, 1334, 459, 1719, 25203, -200, 37371,
	30273, -55, 1258, 1443, 25203, 1486, 1433, 459, 30273, -1000,
	1388, 617, -1000, -1000, 132, 131, -1000, -1000, 24696, 29259,
	36864, 36357, 75, 979, 21165, 30273, 30273, 30273, 30273, 21165,
	19644, 519, 806, 35850, 21165, 30273, 21165, 30273, 30273, 30273,
	30273, 30273, 116, 19644, 19644, 30273, 30273, 1309, 30273, -1000,
	35343, 34836, 34329, 39834, 39345, 1813, -1000, -1000, -1000, 74,
	967, -1000, -1000, -1000, 1301, 475, 108, -1000, 516, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -116, -121, 1334, 8923,
	8923, -1000, 1416, -1000, -191, -1000, -176, 20658, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -25, -202, 30273, -1000, -28, -1000, -202, 9956, -1000,
	30273, 1274, 33822, 25203, 25203, -122, -1000, -104, 33315, 1781,
	-1000, -1000, -1000, -1000, 3501, 1805, 1672, 5094, 1803, 1664,
	41329, 1802, 41319, 1798, 28752, 28245, 1035, 370, -29, -1000,
	-176, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 368, 366, 360,
	359, 355, -29, 353, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 30273, 30273, 30273, 1408, 1794, 341, 330, 324,
	323, 317, 308, 1407, 1404, 30273, 305, 300, 299, 296,
	738, 295, 1789, 166, -1000, -164, 1787, 168, -1000, 1403,
	1786, 167, 1778, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-165, -1000, -1000, -1000, -1000, -1000, -32, 873, -33, -33,
	-33, -1000, -1000, -1000, -1000, -1000, -129, -140, -1000, -1000,
	863, -34, 863, 863, -1000, 892, 863, 167, 1776, 32808,
	-1000, 1015, -1000, 685, -1000, -1000, -1000, -1000, -1000, 1421,
	-253, -1000, 6322, -1000, -1000, 9956, 9956, 9956, 9956, -1000,
	-1000, -1000, 9956, -1000, -1000, -45, -176, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -35, 190, -36, -1000,
	-176, -1000, 5801, 9956, -1000, 30273, 9956, 30273, -202, 1826,
	30273, -192, 4988, 439, 1823, 20151, -1000, 30273, 1350, 1349,
	1594, 1479, 30273, 265, 1739, 32301, -1000, -248, -1000, 479,
	-1000, 415, 407, 22161, 433, 418, 1150, 199, 1402, 411,
	159, 30273, 758, 30273, 1142, 1593, -103, 651, 234, -1000,
	-37, 25203, 183, -248, -1000, 1592, 406, 30273, 181, -248,
	1590, 30273, -248, 506, 30273, 41312, 1775, 1652, 41305, 1774,
	30273, 1588, -1000, -123, -176, 1582, 1578, 1575, 1185, 1574,
	-1000, 1571, 292, 1346, 1344, 30273, 30273, 1570, 1569, 1568,
	1566, 1565, 1561, 30273, 30273, 290, 1559, 1558, 1557, 1552,
	30273, 30273, 30273, 30273, 992, 30273, 30273, -1000, -1000, -1000,
	-173, 6843, 30273, 30273, -1000, 30273, 30273, 38856, -1000, 38856,
	-1000, -168, 9956, -1000, 1843, -1000, -1000, -1000, -1000, 1843,
	-1000, 1610, 1605, 1843, -1000, -44, -1000, 1843, -1000, -1000,
	863, 863, -1000, -1000, 38856, 166, 1769, -1000, -1000, -1000,
	-1000, -1000, 1484, 30273, 8923, 38856, 9956, 9956, 9956, 9956,
	9956, 9956, 9956, 9956, 9956, 9956, 9956, 9956, 9956, 9956,
	1643, -1000, -1000, 9956, 1641, 9956, 30273, 1609, 9956, 1556,
	-48, 1549, 6843, -1000, -45, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 592, 592,
	3206, 244, -176, 4919, 16076, -176, -1000, 8407, 1484, 9956,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4857, -344, -124,
	-194, -1000, 1377, -195, 9956, -1000, 9956, 9956, 1643, 9956,
	9956, 30273, 1609, 1556, -48, 1549, -45, 1401, -1000, 1239,
	18648, 1319, 30273, 182, -1000, -15, 30273, -1000, -1000, 1474,
	14048, 14048, 1157, 1157, -1000, -1000, -198, 22668, 30273, 1141,
	1768, 1392, 1737, -1000, 41337, 30273, 30273, 30273, -1000, 30273,
	30273, -1000, 1736, 31794, -1000, 38856, 30273, -1000, -47, 1380,
	50, 48, 1342, 27738, 30273, 31287, 30780, 30273, 329, -1000,
	-1000, 466, 30273, -1000, 6843, 30273, 24189, 162, 151, 30273,
	505, 23682, 30273, 500, -1000, 30273, 232, -1000, -1000, 19644,
	-1000, 1277, 493, 7356, 3393, 30273, 30273, 30273, 41287, 30273,
	30273, 41280, 30273, 30273, 5309, -248, 489, 30273, 180, -248,
	487, 25203, 287, 30273, -1000, 30273, 30273, 30273, 30273, 30273,
	30273, 19644, 1548, 30273, 30273, 285, 1391, 30273, 30273, 30273,
	30273, 30273, 30273, 282, 275, 1538, 19644, 19644, 30273, 30273,
	269, 268, 267, 266, 30273, 30273, 166, -1000, 6843, -1000,
	168, -1000, 1711, 1390, -1000, 167, -1000, -199, -125, -126,
	1601, 1600, -127, 9956, -132, -1000, -1000, 167, -1000, 30273,
	1438, 14048, -1000, -1000, -1000, -207, -207, -187, -187, -187,
	-1000, 236, 236, 236, 236, 236, 236, 3206, 683, -1000,
	1647, 1174, 9956, 9956, 1544, -48, 1537, 934, -1000, 1560,
	-1000, 244, 11504, 11504, -1000, -1000, 9956, 9956, -1000, -1000,
	-1000, -133, -1000, -174, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-227, 9956, 9956, 9956, -1000, 4988, 1836, -1000, 1438, -205,
	-1000, 9956, -1000, -1000, -49, -1000, 1279, -1000, 4988, 1237,
	1233, 952, -1000, -1000, -206, -1000, -1000, -55, -1000, -1000,
	1474, 20151, 9956, -213, -1000, -176, 1237, 10472, -246, 1432,
	26217, 26217, 15569, -1000, 13541, 26217, 26217, 26217, -2, 1480,
	-56, -62, -176, -1000, 1410, 1276, -1000, 1276, -1000, -134,
	-230, -1000, -1000, -1000, -1000, 30273, -92, 30273, 30273, 25203,
	1765, -1000, -1000, 1536, 1534, 1154, 949, 1761, -1000, 1727,
	160, 752, 9956, -63, -1000, 1690, 603, 310, -64, -65,
	30273, 1016, 1272, -1000, 1757, 1711, 1753, 1711, -1000, -1000,
	-1000, 27231, -1000, -216, -1000, -172, -1000, -1000, -1000, -1000,
	30273, 30273, 30273, 30273, -1000, 220, -1000, -1000, -1000, -1000,
	218, -1000, 490, -1000, -1000, -1000, -1000, -1000, 601, 216,
	-217, -1000, -1000, 6843, 6843, 6843, 1877, -1000, -248, -1000,
	478, 696, -1000, -1000, -248, 1531, 694, -1000, -248, 1530,
	-1000, 1529, -248, 483, 30273, 30273, 5226, 30273, 30273, 30273,
	5110, 1528, -1000, -1000, -1000, -1000, -1000, 1527, -1000, -1000,
	30273, 256, 252, 1526, 30273, -1000, -1000, -1000, -1000, -1000,
	-1000, 1525, 1523, 30273, -1000, -1000, -1000, -1000, 1522, 1521,
	1520, 1519, -1000, 1518, -1000, -1000, -1000, -1000, 30273, -1000,
	-1000, -1000, -4, -1000, -1000, -4, -219, -1000, -1000, 166,
	-1000, 9956, -246, -1000, 9956, 701, 364, 11504, 11504, -1000,
	9956, 9956, 9956, 1273, -1000, 11504, 11504, 877, -220, 311,
	-176, -1000, 16076, -1000, -135, 9440, -1000, -247, -247, 9956,
	9956, -1000, -1000, -23, 4988, 459, -1000, -1000, 8923, 342,
	459, 471, 30273, -176, 1237, -1000, 4988, -16, 30273, -1000,
	4988, 1140, 14048, 1368, 1367, 14048, 1453, 1355, 1355, 1355,
	-1000, -1000, -1000, 30273, -67, -1000, 26217, 26217, 26217, 26217,
	19155, -137, 1432, -1000, -1000, -1000, -1000, 1117, -69, 13034,
	9956, -176, 9956, 495, -1000, -1000, -1000, 1343, 541, 22668,
	-1000, 392, 23175, -92, 263, 1342, 30273, 30273, 30273, -1000,
	1315, -1000, -1000, -1000, 30273, 1751, 722, -1000, 26724, -1000,
	1342, 4685, 30273, 932, -1000, 1564, 30273, 30273, -1000, 30273,
	14555, -1000, -1000, 1034, 3282, -103, 662, 554, 92, -1000,
	-1000, 495, 140, 932, 30273, -1000, 30273, -1000, -1000, -1000,
	-1000, -1000, 6843, 7869, 6843, -1000, -1000, -1000, -1000, -1000,
	-1000, 213, 30273, -1000, -1000, 7356, -1000, -1000, -1000, -1000,
	-1000, 30273, 30273, 30273, 175, 1466, 30273, 171, 1465, 30273,
	30273, 30273, 30273, -1000, 1517, -248, 474, 693, -1000, 1515,
	-248, 472, 30273, 30273, -1000, 1514, 1512, 30273, 251, 30273,
	30273, -1000, 30273, 30273, 30273, 30273, 30273, 1711, -1000, -1000,
	-1000, -1000, 4988, 659, 9956, 9956, 791, 473, 210, 659,
	384, 9956, 38856, 11504, 11504, 11504, 11504, 11504, 11504, 11504,
	11504, 11504, 11504, 11504, 11504, 480, 480, 9956, -1000, 9956,
	-1000, -1000, 9956, -1000, -138, -144, 9956, -146, 4988, 4988,
	-1000, -149, -253, 1188, 14555, 1149, -1000, -1000, 1239, -1000,
	-1000, 9956, -1000, 30273, 1432, 14048, 14048, 1422, 1363, 14048,
	-1000, -1000, -1000, -1000, -70, 30273, -1000, -1000, -1000, -1000,
	26217, -1000, 21165, 1073, -71, -254, 4617, 4568, -78, -1000,
	-1000, 495, 937, -1000, 392, -73, -1000, 664, 1339, -1000,
	1464, -223, -1000, -1000, -1000, 1714, 1154, 22668, 30273, 1137,
	-74, 1385, -1000, -1000, 1510, -1000, 30273, 23, -1000, 25710,
	-1000, -1000, -1000, -224, -1000, -1000, 312, -1000, 731, 582,
	-1000, -1000, -231, 932, -234, -241, -1000, 1713, 347, 1684,
	9956, 1644, 1809, 1808, -1000, -1000, -1000, 1000, 1637, 1822,
	344, -1000, -1000, -1000, 9956, 38856, 352, -1000, 723, 1463,
	-1000, 352, 352, 1456, 452, 495, 495, -1000, -1000, 1000,
	-1000, 1429, 38856, 352, 344, 1711, 1711, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -76, -1000, 1865,
	1864, -1000, -1000, -18, -1000, -1000, -1000, -1000, 1505, 1503,
	30273, 19644, -1000, 30273, 19644, -1000, -1000, -1000, 1502, 30273,
	30273, 30273, 161, 1455, 30273, 30273, 30273, -1000, -1000, 30273,
	30273, -1000, 1496, -1000, -1000, -1000, -1000, -1000, -1000, 1711,
	-1000, 659, 659, 9956, 9956, 9956, 659, -1000, -233, -233,
	-189, -189, -189, -1000, 480, 480, 480, 480, 480, 480,
	659, 659, -1000, -1000, -1000, -1000, 1289, 1196, -242, -1000,
	30273, 939, 4988, -1000, -1000, -1000, 1422, -1000, -77, 9956,
	14048, -1000, 30273, -249, -1000, -255, -1000, 1821, 1134, 12527,
	10988, 9956, -1000, -1000, 912, 1271, -1000, 1745, 1745, 1281,
	-1000, 1231, 6843, -78, 1877, 1339, 30273, 1121, 1121, 1062,
	30273, 30273, -1000, 23175, 3190, 19, 392, -151, -92, 30273,
	14555, 25203, -79, -80, -81, -1000, -1000, -82, -1000, -1000,
	932, 30273, 630, -1000, -1000, -1000, -1000, -1000, 630, 271,
	630, 14555, 16607, -1000, 30273, 30273, -1000, 4306, -1000, 1748,
	1747, -1000, -1000, 1678, -1000, -83, -1000, -1000, -1000, 1843,
	1843, 4988, -1000, -1000, 1865, 1864, -1000, -1000, -1000, 352,
	-1000, -1000, -1000, 30273, 30273, 352, 352, 1820, 1685, -1000,
	-1000, -1000, -1000, 16076, -1000, -1000, -1000, -1000, 7869, 30273,
	30273, 432, 176, -1000, 432, 150, 30273, -1000, -1000, 1495,
	30273, 19644, -1000, -1000, 1492, -1000, -1000, 30273, -1000, 659,
	659, 659, -152, 1288, 1286, 1265, -1000, 1438, 14555, -1000,
	459, -1000, 30273, 4988, -1000, -256, -1000, -2, 21165, -1000,
	-84, 30273, 1452, 12020, 948, -257, -1000, 402, 11504, 1031,
	960, -1000, -1000, 1194, 9956, 1192, -1000, 1202, -1000, -1000,
	-1000, 1819, 1819, -1000, -1000, 1819, 1819, 1109, 1877, -267,
	-1000, 40324, 1438, -1000, 1062, -273, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1379,
	-103, 34, -1000, -88, -1000, -1000, 30273, -1000, -1000, 30273,
	981, -1000, 1724, 44, -89, 11504, 30273, 1000, -1000, 705,
	-1000, 1339, 541, 392, -92, -274, 1342, 21654, 9956, 9956,
	3190, 6843, -1000, 1697, -93, 1697, 30273, 1697, -1000, -1000,
	-95, 1262, -103, -1000, 1684, -1000, -1000, -1000, 9956, -1000,
	-1000, -1000, -1000, -1000, 650, 1341, 30273, -158, -1000, -1000,
	-1000, -1000, -1000, 141, 19644, -1000, 139, -1000, 30273, 432,
	145, 30273, -1000, -1000, -1000, 30273, 1282, 1275, 20151, -1000,
	-1000, -1000, -275, -1000, -1000, -1000, 30273, -286, -1000, 38367,
	-1000, 948, 1452, -1000, -1000, 10988, -269, 6843, 585, 1074,
	30273, 30273, 1190, 4988, 1199, 1451, 1877, -1000, 1877, 1877,
	1877, 18141, 1635, 17634, -1000, -1000, 6843, -1000, -1000, -1000,
	-1000, -1000, 40816, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1379, 30273, -1000, 109, 748, -1000, -1000, 15062, 868, -1000,
	-1000, -1000, 1697, 1697, 9956, 585, -104, 1818, -1000, -1000,
	3190, 1062, 392, 1339, 1154, 623, -96, -292, -1000, 1843,
	-299, -300, -302, -1000, 1340, -97, 30273, 1340, -104, 1340,
	16076, 1, -1000, -1000, 1262, -1000, 3930, -101, -1000, 9956,
	-1000, -1000, 30273, -1000, 30273, -1000, -1000, 137, -1000, 138,
	1449, 1448, 129, 1817, -304, -1000, 38856, -1000, 30273, 1213,
	1108, -1000, -1000, 12020, -1000, 1133, 9956, -1000, -1000, -1000,
	-1000, 1184, 1260, -1000, -1000, 1164, 339, 1214, -1000, -1000,
	-1000, -1000, -287, -1000, 17127, -287, -1000, -1000, -305, -1000,
	-1000, 109, -1000, -1000, 30273, 712, -306, -1000, 347, 1684,
	9956, -1000, 1634, 1340, 1340, 609, 488, 77, 1379, 1339,
	1062, 392, 1724, -98, 14555, -1000, 21654, -1000, -1000, 1491,
	-1000, 6843, -1000, 597, -1000, 6843, -307, -1000, 488, 1438,
	-160, -1000, 1270, 1, -1000, -1000, 3350, 4988, 432, 432,
	30273, 30273, 30273, 30273, -1000, -1000, 30273, -1000, 30273, 1685,
	-1000, 1213, -1000, 11504, 11504, 1632, -1000, 11504, -1000, 1073,
	-99, -277, -1000, 1816, -1000, 20151, -1000, -1000, 1239, 30273,
	1312, -100, -1000, -1000, -287, -1000, -1000, 40816, -1000, -1000,
	-1000, 1080, 1079, -1000, 15062, 30273, 30273, 563, -1000, -1000,
	443, 1384, 604, -101, 9956, 109, 1062, 1379, 1339, 1691,
	14555, -312, -1000, -102, -1000, 932, 128, -317, -1000, -19,
	-1000, 932, 1384, -1000, -1000, -1000, -1000, -1000, 3012, -1000,
	-1000, -1000, 432, 1348, 101, 98, -1000, -1000, -1000, -1000,
	585, 585, -1000, 585, 1127, 29766, 9956, 6843, -331, 938,
	-318, -1000, 9956, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1684, -1000, 573, -1000, 1383, 1381, 1252, -1000, -1000, -1000,
	-1000, 428, -1000, 1379, 109, 1062, 109, -103, -320, -1000,
	623, 9956, 30273, -1000, 6843, 7869, -1000, 932, -1000, -1000,
	-1000, 1777, 30273, 30273, 30273, 30273, -323, -1000, 37878, 1077,
	-1000, -1000, 1311, 1238, -324, 30273, -1000, -1000, 1247, -1000,
	1255, 1023, 1023, 177, 109, -1000, 1379, 1438, -1000, -1000,
	14555, 1724, -328, -1000, -1000, -1000, 932, 1648, -1000, -1000,
	-1000, -330, 1232, 29766, 1100, 513, 1866, -1000, -1000, -1000,
	1239, -1000, -1000, -1000, 840, -1000, -1000, 1628, -1000, -1000,
	-1000, 109, -1000, -1000, 1691, -1000, 1777, -1000, -162, 1375,
	9956, -1000, -1000, -1000, -1000, -1000, -1000, 1043, -1000, -1000,
	1020, 1076, 1076, 1850, 1208, 931, -1000, -104, -104, -1000,
	109, 1326, -1000, 1055, 4988, -1000, -1000, 1005, 1040, 1113,
	1020, 1232, -1000, -105, 30273, 1311, -1000, -1000, 1438, 30273,
	-1000, 1232, 996, 989, -1000, 1013, -1000, 1011, 1039, 1018,
	1005, -1000, 29766, 1122, -1000, -1000, -1000, -1000, 1374, 1373,
	1372, -1000, -1000, 1002, -1000, 974, -1000, 1232, -335, -128,
	1049, 972, 971, -1000, -1000, -1000, -1000, 29766, 1232, -1000,
	968, 966, -336, 1370, -1000, -1000, -1000, 1053, -1000,
}

var yyPgo = [...]int16{
	0, 2153, 2152, 1759, 2151, 0, 195, 2739, 2150, 71,
	149, 180, 103, 82, 512, 76, 2145, 171, 2144, 1585,
	2633, 2536, 27, 2142, 2140, 139, 2140, 2140, 2140, 154,
	127, 53, 2139, 146, 2138, 2137, 107, 2136, 2134, 188,
	1547, 2131, 304, 1031, 1305, 13, 2120, 2119, 1541, 165,
	126, 145, 167, 218, 158, 927, 109, 63, 38, 117,
	2118, 2117, 2116, 2114, 2113, 91, 2110, 172, 2106, 2102,
	2099, 2097, 2081, 187, 205, 144, 184, 2080, 62, 120,
	360, 2079, 2078, 2074, 2776, 80, 2073, 24, 2071, 161,
	168, 121, 143, 160, 114, 1337, 2069, 2068, 2067, 2066,
	2064, 2058, 2056, 2054, 2053, 2048, 2045, 2042, 41, 44,
	2039, 2037, 133, 136, 155, 2036, 157, 128, 119, 108,
	2035, 2031, 2030, 2029, 8, 22, 84, 31, 9, 2024,
	2023, 70, 58, 2021, 177, 2021, 2021, 2021, 2021, 2014,
	150, 2012, 2008, 2006, 113, 2004, 2003, 2001, 10, 2001,
	66, 83, 2000, 40, 100, 123, 1999, 178, 89, 1996,
	142, 1995, 181, 174, 170, 185, 134, 1994, 515, 2,
	1994, 124, 209, 1989, 1986, 1985, 1985, 189, 156, 135,
	131, 95, 1984, 1763, 1982, 530, 182, 1981, 1980, 1978,
	1977, 166, 105, 1974, 1974, 48, 1972, 92, 1971, 1971,
	1971, 1970, 99, 163, 21, 75, 1964, 46, 54, 47,
	90, 1961, 86, 153, 3, 18, 11, 1959, 132, 1958,
	30, 1957, 5, 1, 1956, 4, 7, 6, 15, 1955,
	1954, 106, 1952, 93, 1949, 141, 137, 96, 1948, 116,
	1947, 69, 1946, 72, 104, 1944, 1943, 97, 45, 1936,
	101, 1933, 74, 138, 1932, 1931, 1930, 23, 64, 94,
	25, 32, 17, 33, 85, 164, 1929, 1925, 36, 20,
	1924, 122, 16, 12, 98, 151, 78, 1922, 26, 19,
	14, 148, 102, 173, 179, 1921, 87, 43, 1920, 1918,
	1918, 1912, 1911, 42, 1908, 61, 130, 1907, 129, 1906,
	1905, 1903, 68, 1903, 88, 1902, 34, 1894, 37, 125,
	1894, 73, 1892, 1889, 29, 1889, 1888, 112, 1851, 1885,
	197,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 18, 18, 279,
	279, 25, 25, 25, 26, 26, 27, 27, 28, 28,
	29, 29, 31, 31, 31, 5, 5, 5, 6, 6,
	6, 6, 6, 8, 8, 7, 12, 12, 13, 13,
	14, 14, 24, 24, 16, 16, 315, 315, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 15, 15, 17,
	17, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 9, 9,
	9, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 43, 44,
	44, 44, 44, 44, 45, 45, 45, 45, 45, 45,
	55, 57, 56, 56, 56, 46, 46, 51, 51, 54,
	54, 53, 53, 53, 53, 52, 52, 47, 192, 48,
	48, 80, 80, 80, 80, 80, 80, 49, 49, 50,
	50, 50, 78, 78, 58, 59, 59, 59, 59, 59,
	65, 65, 65, 67, 68, 201, 73, 73, 74, 74,
	60, 60, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 62, 62, 63, 63, 66, 66, 66,
	66, 66, 66, 69, 70, 71, 72, 64, 64, 64,
	64, 75, 75, 75, 76, 76, 77, 77, 84, 84,
	86, 86, 87, 87, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 85, 85, 79, 81,
	82, 83, 90, 90, 89, 91, 91, 92, 94, 94,
	93, 93, 95, 95, 95, 95, 161, 161, 160, 160,
	162, 162, 162, 162, 163, 163, 164, 164, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 166,
	166, 167, 167, 167, 168, 168, 168, 178, 178, 178,
	178, 178, 178, 179, 179, 179, 179, 180, 180, 181,
	181, 183, 183, 183, 184, 184, 185, 185, 186, 187,
	187, 187, 188, 188, 188, 189, 189, 189, 190, 190,
	169, 169, 170, 116, 116, 116, 139, 172, 172, 171,
	171, 171, 171, 173, 173, 174, 174, 175, 175, 176,
	176, 177, 177, 191, 191, 202, 202, 196, 196, 197,
	198, 198, 199, 199, 200, 194, 194, 193, 193, 195,
	208, 208, 210, 210, 209, 209, 209, 209, 211, 211,
	212, 212, 203, 203, 204, 204, 205, 205, 205, 206,
	206, 207, 207, 207, 207, 207, 213, 218, 217, 217,
	221, 221, 219, 219, 220, 223, 223, 224, 224, 224,
	224, 224, 224, 224, 224, 225, 225, 225, 225, 222,
	222, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	227, 227, 227, 227, 227, 228, 228, 229, 229, 230,
	230, 214, 214, 215, 215, 215, 215, 215, 215, 216,
	216, 96, 106, 106, 107, 107, 107, 107, 107, 128,
	128, 108, 108, 112, 148, 148, 97, 109, 109, 114,
	114, 113, 110, 110, 98, 182, 182, 99, 111, 111,
	100, 100, 133, 133, 134, 134, 140, 140, 140, 141,
	141, 142, 142, 144, 144, 145, 145, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 146, 146, 151, 152, 152, 152, 152, 152,
	152, 147, 147, 153, 158, 158, 158, 158, 159, 159,
	154, 154, 154, 154, 155, 155, 292, 292, 292, 292,
	292, 292, 292, 292, 291, 291, 291, 290, 290, 290,
	290, 290, 157, 157, 318, 318, 156, 156, 316, 316,
	317, 317, 135, 135, 136, 136, 137, 137, 138, 138,
	118, 118, 118, 118, 118, 129, 129, 130, 130, 119,
	119, 121, 122, 123, 123, 123, 123, 123, 124, 115,
	115, 115, 120, 120, 120, 149, 149, 150, 150, 125,
	125, 125, 126, 126, 127, 127, 131, 131, 131, 132,
	132, 132, 117, 117, 101, 101, 101, 101, 101, 101,
	294, 294, 294, 294, 294, 294, 294, 294, 231, 231,
	232, 232, 235, 235, 235, 238, 246, 246, 246, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 296,
	296, 297, 297, 298, 298, 299, 299, 233, 233, 234,
	234, 239, 239, 240, 240, 241, 241, 241, 241, 243,
	242, 242, 300, 300, 301, 301, 302, 10, 35, 236,
	250, 250, 251, 251, 251, 251, 254, 254, 254, 254,
	257, 257, 257, 304, 304, 307, 307, 309, 309, 309,
	309, 305, 305, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 319,
	319, 30, 30, 30, 303, 303, 306, 306, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 237, 237, 253,
	253, 253, 253, 253, 253, 253, 255, 255, 245, 245,
	244, 244, 259, 259, 258, 258, 258, 258, 263, 263,
	263, 263, 263, 260, 261, 262, 262, 262, 262, 262,
	264, 264, 265, 265, 266, 267, 267, 268, 268, 268,
	295, 295, 272, 272, 272, 272, 273, 273, 274, 274,
	275, 102, 102, 256, 256, 276, 276, 278, 278, 277,
	277, 280, 280, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 281, 281, 287, 287, 282, 282,
	11, 286, 286, 286, 286, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 284, 284, 284, 285,
	288, 288, 320, 320, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 290,
	290, 290, 290, 290, 39, 40, 41, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 248, 248, 249, 249, 249, 249, 249, 249,
	269, 270, 270, 271, 271, 271, 271, 293, 293, 293,
	293, 293, 293, 311, 311, 32, 32, 33, 34, 34,
	36, 36, 36, 36, 37, 37, 38, 38, 38, 38,
	312, 313, 313, 314, 314,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 2, 0, 3, 0, 2, 0,
	1, 0, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 2, 3, 0, 1, 3, 1, 0, 3, 3,
	4, 4, 4, 4, 3, 2, 1, 1, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 2, 4, 2,
	3, 5, 4, 6, 3, 5, 4, 6, 3, 5,
	3, 3, 2, 6, 7, 6, 7, 3, 4, 4,
	6, 5, 7, 1, 3, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 2, 1, 2, 1,
	0, 2, 2, 3, 5, 0, 2, 4, 1, 1,
	2, 3, 5, 6, 8, 6, 6, 1, 3, 1,
	3, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 3, 0,
	2, 3, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 2, 2, 1,
	3, 3, 2, 4, 1, 5, 2, 5, 2, 5,
	2, 3, 3, 0, 1, 0, 3, 0, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 0,
	0, 0, 0, 1, 3, 1, 1, 1, 3, 3,
	1, 2, 6, 6, 2, 1, 1, 0, 1, 3,
	3, 2, 1, 1, 2, 0, 1, 3, 2, 2,
	3, 1, 4, 2, 3, 2, 3, 2, 3, 1,
	1, 2, 2, 4, 1, 2, 3, 3, 4, 5,
	4, 5, 4, 2, 2, 2, 1, 1, 0, 5,
	2, 2, 2, 3, 1, 0, 1, 3, 9, 1,
	2, 0, 7, 7, 0, 10, 6, 0, 4, 5,
	2, 0, 1, 2, 4, 0, 1, 1, 0, 5,
	2, 4, 1, 2, 0, 1, 0, 1, 5, 1,
	0, 2, 0, 2, 6, 2, 0, 1, 3, 2,
	4, 0, 1, 3, 2, 4, 0, 1, 3, 3,
	2, 0, 2, 2, 2, 3, 3, 4, 1, 3,
	3, 2, 7, 12, 1, 3, 2, 3, 3, 1,
	2, 2, 2, 2, 1, 2, 13, 2, 2, 0,
	2, 0, 1, 3, 3, 2, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 3, 3, 6, 0, 3,
	0, 2, 3, 2, 3, 4, 4, 3, 3, 0,
	5, 2, 5, 2, 0, 4, 2, 1, 0, 1,
	0, 1, 3, 3, 6, 7, 5, 7, 9, 2,
	0, 7, 1, 3, 1, 4, 4, 7, 2, 1,
	1, 1, 3, 2, 3, 0, 8, 1, 3, 3,
	5, 2, 1, 3, 7, 2, 0, 10, 1, 2,
	9, 11, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 3, 0, 1, 3, 2, 0, 1, 1, 3,
	3, 1, 1, 3, 3, 3, 3, 4, 4, 3,
	3, 2, 1, 3, 2, 1, 1, 1, 1, 3,
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 2, 2, 1, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 0, 2, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	4, 4, 4, 5, 5, 2, 5, 3, 5, 2,
	0, 3, 1, 2, 5, 5, 8, 3, 4, 8,
	5, 0, 4, 3, 0, 1, 3, 1, 3, 2,
	2, 4, 4, 5, 2, 0, 1, 1, 0, 2,
	2, 0, 2, 0, 13, 16, 12, 15, 14, 17,
	1, 1, 2, 2, 2, 2, 1, 0, 1, 0,
	1, 3, 1, 1, 1, 3, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 0, 2, 2, 1, 0, 3, 0, 1,
	3, 1, 1, 2, 4, 6, 6, 10, 1, 2,
	1, 3, 4, 0, 1, 3, 2, 1, 1, 6,
	2, 0, 3, 1, 1, 2, 1, 2, 2, 2,
	2, 3, 0, 1, 2, 1, 2, 1, 3, 2,
	3, 1, 2, 2, 2, 1, 2, 3, 1, 2,
	2, 2, 2, 3, 3, 3, 1, 3, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 0, 2, 1,
	4, 4, 5, 2, 5, 5, 7, 3, 1, 5,
	9, 3, 9, 4, 11, 10, 2, 0, 1, 3,
	3, 6, 4, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 3, 3,
	4, 0, 1, 0, 6, 1, 3, 3, 3, 5,
	2, 0, 3, 4, 4, 0, 2, 0, 4, 0,
	3, 16, 19, 1, 0, 2, 0, 4, 0, 1,
	3, 2, 0, 4, 6, 4, 6, 4, 4, 6,
	4, 6, 5, 7, 5, 7, 4, 6, 10, 13,
	10, 13, 11, 14, 1, 3, 1, 0, 1, 3,
	1, 1, 1, 1, 1, 2, 5, 3, 6, 4,
	6, 6, 9, 5, 7, 6, 6, 5, 5, 5,
	5, 9, 4, 5, 7, 6, 4, 8, 4, 2,
	4, 3, 6, 4, 3, 3, 3, 2, 2, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 4, 4,
	3, 2, 3, 2, 2, 3, 4, 3, 2, 2,
	3, 4, 4, 4, 5, 1, 4, 4, 4, 3,
	3, 2, 1, 0, 6, 4, 6, 4, 6, 8,
	4, 6, 4, 6, 5, 7, 1, 1, 1, 2,
	1, 2, 1, 1, 1, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 6, 6,
	6, 6, 8, 8, 6, 6, 7, 9, 9, 8,
	10, 6, 6, 6, 6, 6, 6, 6, 8, 6,
	8, 6, 8, 7, 9, 6, 8, 7, 9, 8,
	10, 8, 10, 9, 11, 8, 10, 9, 11, 8,
	8, 7, 6, 6, 6, 6, 8, 8, 8, 8,
	6, 9, 0, 2, 2, 1, 2, 2, 2, 2,
	3, 1, 3, 3, 1, 5, 3, 1, 1, 1,
	1, 1, 1, 2, 0, 2, 0, 4, 1, 3,
	1, 2, 2, 2, 1, 1, 1, 1, 1, 3,
	3, 1, 3, 1, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -91, -96, -97, -98, -99,
	-100, -101, -102, -103, -104, -105, -93, -94, -184, 113,
	26, 22, 27, -95, -183, 533, 63, 67, -190, 36,
	520, 88, 542, 98, 99, 100, 101, 533, -141, 117,
	-294, -256, 455, 453, 58, 291, 475, 473, 67, 309,
	421, 482, 86, 286, 201, 227, 238, 249, 263, 288,
	72, -318, 62, 377, 387, 389, 411, 416, 424, 445,
	414, 462, 270, 408, 105, 451, 440, 456, 466, 386,
	-289, -292, -291, 466, 263, 309, 67, 421, 482, 86,
	286, 227, 238, 440, 456, 196, 270, 278, -318, 389,
	416, 424, 377, 414, 462, -95, -93, -94, -183, -174,
	-175, 21, 41, -166, -14, -167, -5, 66, 4, -19,
	-20, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 22, 203, 205, 206, 207, 55, 208, 209, 210,
	212, 213, 214, 90, 71, 215, 216, 217, 24, 218,
	219, 220, 221, 222, 223, 224, 225, 125, 228, 229,
	230, 231, 232, 143, 233, 103, 234, 235, 236, 237,
	238, 113, 239, 156, 240, 122, 123, 92, 248, 249,
	250, 251, 252, 253, 255, 256, 100, 151, 152, 257,
	91, 258, 259, 260, 261, 262, 263, 178, 27, 264,
	140, 266, 150, 267, 269, 138, 42, 270, 272, 273,
	274, 275, 276, 277, 278, 279, 281, 283, 284, 93,
	285, 155, 167, 287, 288, 289, 290, 291, 293, 296,
	297, 153, 298, 299, 300, 28, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 314, 315,
	316, 98, 317, 319, 320, 147, 505, 321, 322, 323,
	324, 94, 326, 329, 330, 331, 58, 334, 335, 336,
	337, 338, 339, 107, 86, 340, 101, 342, 343, 344,
	345, 346, 347, 348, 349, 133, 350, 351, 352, 353,
	354, 355, 356, 359, 112, 360, 361, 32, 141, 124,
	506, 507, 504, 146, 62, 508, 509, 126, 503, 510,
	104, 366, 367, 368, 369, 370, 371, 372, 131, 373,
	130, 375, 376, 377, 379, 380, 381, 382, 384, 385,
	386, 387, 388, 114, 389, 154, 145, 390, 391, 392,
	393, 85, 134, 395, 396, 397, 398, 399, 400, 401,
	34, 402, 403, 404, 35, 405, 406, 407, 408, 409,
	410, 411, 412, 129, 414, 415, 148, 416, 417, 418,
	89, 419, 420, 421, 422, 423, 424, 425, 95, 427,
	429, 430, 431, 432, 433, 109, 435, 436, 437, 438,
	439, 440, 115, 116, 441, 442, 443, 149, 444, 445,
	447, 448, 106, 450, 451, 110, 453, 454, 455, 456,
	457, 459, 460, 462, 464, 465, 466, 467, 468, 469,
	470, 144, 471, 50, 474, 475, 476, 99, 477, 478,
	479, 480, 157, 185, 481, 482, 483, 484, 485, 487,
	170, 488, 142, 489, 490, 500, 501, 57, 37, 175,
	171, 191, 181, 180, 226, 190, 189, 29, 280, 177,
	294, 295, 502, 188, 173, 187, 168, 162, 164, 165,
	161, 163, 158, 166, 160, 128, 159, 327, 341, 183,
	184, 357, 358, 362, 172, 363, 364, 378, 179, 176,
	413, 428, 174, 446, 56, 186, 461, 463, 88, 182,
	491, 492, 493, 494, 495, 135, 496, 497, 498, 499,
	127, 543, -185, 85, -186, -7, -5, -185, 533, -3,
	74, -168, -166, 64, 74, -92, -91, -14, 67, 309,
	455, 453, 455, 453, -166, 28, 21, -14, 28, 21,
	-14, 28, -14, 28, 482, 67, 248, -41, -48, -65,
	-5, 4, -19, -21, 211, 117, 227, 25, 82, 244,
	118, 80, 44, 77, 52, 53, 76, 78, 46, 83,
	54, 81, 365, 79, 48, 452, 120, -14, -14, -7,
	-14, -40, -48, -11, -286, -9, 243, 247, 426, -19,
	-20, -21, 323, 223, 281, -7, 28, -40, -7, -40,
	-7, -7, -7, -7, -7, 462, -11, -11, -7, -14,
	89, -14, 28, -17, -15, -5, 28, -12, -7, -7,
	28, -157, 28, -58, -59, -60, -61, -62, -63, -64,
	-65, 188, 173, 174, 175, 176, 177, 178, 189, 190,
	172, 191, -71, -72, -69, -70, 186, 56, 4, -19,
	171, -66, 180, 181, 182, 183, 184, -157, 28, 25,
	482, 248, 67, 89, 342, 462, 323, 534, 534, -161,
	-160, -162, -42, 538, -44, 536, 537, 31, -84, -46,
	-45, 13, 533, -47, 11, 62, -5, -55, 6, -57,
	49, 43, 47, -80, 12, 7, -48, -160, 75, 538,
	-51, -53, 535, 531, -14, 533, 533, 543, -185, -24,
	533, -78, -42, -106, -14, 95, -5, 23, -168, -168,
	534, -148, 533, -14, 28, -29, 25, -281, -284, 400,
	-283, 209, 258, 198, 22, 27, 479, 95, 225, 266,
	260, 311, 356, 124, 31, 367, 403, 402, 155, -33,
	509, 29, 45, -281, -285, 400, 209, 29, 45, -281,
	400, 29, -281, 400, 29, -14, 28, 21, -166, 28,
	142, 400, -39, 533, -51, 400, 400, 400, 400, 400,
	-39, 400, -7, -14, -14, 75, 29, 400, 400, 400,
	400, 400, 400, 75, 75, -7, 400, 400, 400, 400,
	370, 259, 454, 233, 400, 29, 543, -25, 24, 35,
	-73, 535, 29, 543, -25, 75, 29, 543, -25, 29,
	-74, -73, 533, -77, 533, 179, -74, -74, -74, 533,
	-75, 520, 521, 533, -75, -76, 185, 533, -76, -76,
	180, 181, -76, -25, 29, -17, 28, 142, 370, 259,
	454, 233, -177, 74, 543, 14, 536, 537, 538, 539,
	540, 541, 527, 528, 529, 18, 19, 20, 30, 33,
	52, 53, 54, 46, 518, 44, 39, 55, -84, 37,
	45, 48, 23, -8, 62, 4, -23, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 21, 202, 22, 203,
	204, 121, 512, 96, 205, 206, 207, 60, 208, 209,
	210, 211, 212, 213, 214, 175, 117, 171, 191, 513,
	90, 71, 215, 216, 217, 24, 218, 38, 514, 219,
	220, 221, 515, 222, 223, 224, 225, 226, 227, 516,
	125, 228, 229, 230, 231, 232, 25, 143, 233, 103,
	234, 119, 235, 236, 237, 238, 113, 239, 82, 156,
	240, 122, 241, 242, 243, 244, 245, 246, 247, 123,
	92, 248, 249, 251, 190, 189, 252, 40, 253, 254,
	255, 256, 100, 151, 152, 257, 91, 97, 258, 259,
	260, 261, 41, 111, 262, 263, 178, 27, 264, 265,
	140, 266, 150, 267, 268, 269, 138, 42, 270, 272,
	273, 274, 275, 29, 276, 277, 278, 279, 280, 43,
	281, 284, 93, 177, 285, 155, 286, 167, 287, 118,
	80, 288, 289, 290, 291, 293, 294, 295, 296, 297,
	153, 298, 300, 28, 301, 302, 303, 304, 305, 306,
	307, 308, 309, 310, 311, 312, 313, 314, 77, 502,
	315, 316, 98, 317, 188, 173, 187, 319, 320, 76,
	168, 162, 164, 165, 161, 163, 158, 166, 160, 128,
	159, 147, 505, 321, 322, 323, 324, 94, 325, 328,
	326, 327, 78, 329, 330, 331, 58, 332, 333, 334,
	335, 336, 337, 338, 339, 107, 86, 340, 101, 341,
	342, 344, 345, 347, 348, 349, 183, 83, 184, 133,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	31, 112, 360, 361, 47, 362, 32, 172, 141, 124,
	506, 507, 504, 146, 66, 508, 509, 126, 503, 363,
	81, 364, 104, 366, 367, 368, 369, 370, 371, 372,
	131, 373, 130, 374, 375, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 114, 389,
	154, 145, 390, 391, 176, 392, 393, 85, 134, 394,
	395, 396, 397, 398, 399, 400, 401, 34, 402, 403,
	404, 35, 405, 406, 407, 79, 408, 409, 410, 411,
	412, 413, 129, 414, 415, 148, 416, 417, 418, 89,
	420, 63, 421, 422, 423, 424, 425, 426, 95, 428,
	427, 429, 430, 431, 432, 174, 433, 434, 109, 435,
	436, 437, 438, 439, 440, 115, 116, 441, 442, 443,
	149, 444, 445, 446, 447, 59, 448, 106, 449, 67,
	450, 452, 451, 110, 453, 454, 455, 456, 108, 457,
	56, 186, 458, 459, 460, 461, 462, 463, 49, 464,
	465, 466, 467, 468, 469, 470, 144, 471, 473, 50,
	474, 475, 476, 99, 105, 84, 477, 478, 479, 480,
	157, 88, 182, 192, 120, 481, 482, 483, 484, 51,
	485, 488, 142, 489, 490, 491, 492, 493, 494, 495,
	135, 496, 497, 498, 499, 127, 501, 57, -42, -42,
	-42, -42, -52, -42, 533, -51, -81, 533, -177, 533,
	-53, -67, 538, -6, 4, -19, -20, -21, -22, 21,
	204, 121, 30, 512, 136, 23, 96, 60, 513, 38,
	514, 515, 39, 516, 119, 26, 241, 242, 243, 245,
	246, 247, 40, 254, 97, 41, 111, 265, 268, 271,
	43, 282, 132, 286, 64, 292, 72, 73, 45, 313,
	318, 74, 325, 328, 68, 332, 333, 31, 47, 69,
	75, 66, 33, 511, 374, 383, 394, 102, 63, 426,
	434, 59, 449, 67, 108, 61, 458, 49, 472, 473,
	105, 84, 192, 51, 65, 486, 36, -42, -54, -14,
	-78, -186, 23, -12, 543, 534, 30, 33, 52, 46,
	44, 39, 55, 37, 45, 48, 62, -107, -91, 104,
	533, 40, 23, -109, -114, -113, 533, -5, -5, -182,
	84, 84, 61, -133, 64, 61, -12, 533, 124, 372,
	31, -18, 28, -5, 543, 61, -320, 119, 516, 372,
	372, -236, 28, 516, -237, -5, 119, -253, 515, 473,
	383, 286, 272, -320, 119, -320, 119, 119, 170, 337,
	475, 196, 451, -269, 533, 75, 462, 203, 402, 414,
	413, 462, 414, 413, -14, 311, 155, -15, 124, 61,
	-269, 300, 413, 533, -166, 451, 61, 372, -14, 451,
	61, -14, 61, -320, -14, -281, 400, 29, 45, -281,
	400, 29, -7, 61, 534, 61, 61, 61, 61, 119,
	61, 61, 400, 84, 84, -14, -7, 61, 61, 61,
	61, 61, 61, -14, -14, 400, 61, 61, 61, 61,
	-14, -14, -14, -14, 61, 210, -17, -15, 535, -67,
	-12, -7, -15, -7, -58, -157, -74, -78, -55, -55,
	56, 56, -55, 533, -55, -76, -76, -157, -25, 29,
	-163, 64, -14, -162, -58, -42, -42, -42, -42, -42,
	-42, -42, -42, -42, -42, -42, -42, -42, -42, 47,
	31, -42, 46, 44, 37, 45, 48, -42, -15, 56,
	58, -42, -90, 59, 60, -89, 533, 61, -6, -53,
	534, -85, -87, -5, 11, -88, 536, 537, 538, 539,
	540, 541, 527, 528, 529, 18, 19, 20, -82, 534,
	-49, 192, 21, 41, -50, -42, -68, -65, -163, -78,
	532, 544, 534, 534, -187, 86, 31, 534, -42, -115,
	75, -128, 105, 106, -108, -112, -5, 88, 88, -5,
	-163, 543, 529, -110, -113, -52, -116, 65, -164, -165,
	-166, -94, 87, -178, 533, -191, -203, -213, -192, 129,
	127, 128, -5, -80, -165, -134, 114, -134, 534, -231,
	-232, -235, -236, -238, -237, 46, -15, 124, 29, 75,
	31, -283, -7, -7, -7, -14, -14, 31, -236, 28,
	-58, -7, 533, -257, -275, 32, 84, 505, 505, -276,
	84, -5, -55, -7, 28, -5, 28, -7, -7, 507,
	225, 342, -7, -270, -271, -6, -7, -7, 21, 105,
	462, 414, 462, 414, -7, 329, -7, 21, 105, -7,
	329, -14, 413, -286, -38, 112, 80, 40, 84, 329,
	-34, -36, -302, 95, 198, 27, -10, -6, -281, -284,
	400, -7, -7, -14, -281, 400, -7, -7, -281, 400,
	-7, -7, -281, 400, 61, -320, -14, 451, 61, -320,
	-166, 400, -7, -7, -7, -7, -7, -7, -7, -11,
	61, -7, -7, 400, 75, -7, -7, -7, -7, -7,
	-7, 400, 400, 61, -11, -11, -7, -7, 400, 400,
	400, 400, -7, -7, -25, -67, -25, -25, 75, -25,
	534, 534, 534, 57, 57, 534, -78, 534, -25, -17,
	-169, 65, -164, 47, 42, -42, -42, -90, 59, -89,
	61, 42, 57, -43, -44, 536, 537, -43, -78, -42,
	-52, 534, 535, -83, -79, 543, -50, -49, -49, 16,
	17, -169, 534, -54, -42, 533, 86, -117, 102, 103,
	157, 534, 543, -52, -116, -114, -42, 534, 543, -117,
	-42, 122, 543, 82, -179, 76, 83, 80, 78, 79,
	77, -172, -171, 23, -5, -172, -94, -191, -203, -213,
	-94, -178, -165, -172, -172, -172, -202, 520, 64, 533,
	533, -51, 75, -140, -57, 115, 116, -140, 534, 543,
	-14, -233, 533, -14, -14, -166, 29, 61, 61, -241,
	132, 40, -29, 284, 29, 31, -299, -298, 441, -253,
	272, -42, 533, -248, 41, 31, 309, 533, -275, 533,
	533, -7, -288, 27, 95, 403, 198, -307, -156, -33,
	-309, 404, 95, -248, 29, -25, 29, -25, -37, -5,
	40, 534, 543, 529, 535, -7, -7, -7, -7, 420,
	420, 329, 309, 420, 534, 543, -302, -302, -10, -35,
	-57, 61, -320, 119, 95, 366, 61, 95, 366, 61,
	61, 61, -320, -7, -7, -281, 400, -7, -7, -7,
	-281, 400, 61, 61, -7, 400, 400, 61, -14, 61,
	61, -7, 61, 61, 61, 61, 61, -15, -75, -75,
	534, -25, -42, -42, 42, 42, -43, -43, -42, -42,
	-42, 30, 14, 536, 537, 538, 539, 540, 541, 527,
	528, 529, 18, 19, 20, -43, -43, 30, 534, 42,
	-85, 534, 192, -50, -79, -79, 543, -79, -42, -42,
	532, -92, -160, -120, 533, 75, -91, -91, 104, -112,
	-117, 529, -113, 124, -165, 76, 76, -165, -179, 76,
	-180, 81, -180, -180, -5, 533, -172, -172, -172, -172,
	534, 126, 533, -44, 135, -218, -42, -42, -30, 36,
	520, -142, -316, 84, -264, 312, -235, -246, -265, -266,
	372, -234, -239, -240, -237, -5, -233, 533, 124, 372,
	-276, -7, -7, -7, 88, -236, 29, -297, -296, 232,
	-5, 40, 534, -13, -5, -249, 31, 254, 313, 356,
	41, -7, -13, -248, -13, -245, -244, -125, -5, -192,
	533, 31, 277, 300, 40, 248, -308, 290, 31, 277,
	440, -269, -298, -296, 40, 23, 215, 92, 356, 307,
	337, 340, 344, 366, 421, 438, 404, 475, -269, 290,
	-309, 95, 466, -30, 440, -5, -7, -271, -293, -201,
	-22, -86, -154, -57, 357, -58, -87, 62, 6, 536,
	537, -56, -55, -6, 420, -7, -36, -7, -7, -7,
	451, 71, -7, 451, 71, -7, -7, -7, -7, 61,
	61, -320, 95, 366, 61, 61, -320, -7, -7, 61,
	61, -7, 400, -7, -7, -7, -7, -7, -7, -7,
	-25, -42, -42, 30, 30, 42, -42, -58, -43, -43,
	-43, -43, -43, -43, -43, -43, -43, -43, -43, -43,
	-42, -42, -50, 534, 534, 534, 534, 111, -150, -125,
	119, -128, -42, -139, -7, -165, -165, -181, 84, 75,
	76, -165, 533, -12, -171, -196, -197, -192, -209, 131,
	533, 543, -229, -228, 517, -111, -118, -129, -130, 51,
	-144, -145, 533, -30, 152, -265, 533, 306, 273, -295,
	84, 71, 534, 543, -250, 36, -241, -231, -15, 124,
	533, 75, 36, 45, 64, -236, -300, 509, -5, 40,
	-248, 543, 534, 254, 478, 301, 255, 311, 534, 534,
	534, 543, 36, -126, -127, 39, -126, -42, 47, 28,
	28, -304, 203, 71, 47, 23, -155, -56, 40, 536,
	537, -42, -59, -154, 536, 537, 92, 340, 344, -319,
	71, -154, -154, 71, 348, -30, -30, -304, -58, -154,
	-155, -25, -25, 533, -55, 6, -55, 6, 529, 61,
	61, -7, -282, -286, -7, -282, 61, -7, -7, -7,
	451, 71, -7, -7, -7, -7, -7, 61, -25, -42,
	-42, -42, -79, -188, 89, 99, 112, 534, 543, -7,
	157, -181, 533, -42, -165, -12, 534, 534, 543, -198,
	23, 125, -44, -210, 71, -211, -212, -43, 40, -42,
	168, -117, -118, -119, 30, -119, 107, 31, -143, 117,
	118, 151, 47, 156, 153, 154, 42, 155, 150, -146,
	-151, -6, -144, -57, -295, -16, -14, -247, 229, 232,
	235, 253, 300, 290, 310, 440, 441, 21, -247, -31,
	36, 170, -7, -5, -239, -251, 119, -252, -254, 39,
	31, 47, 473, 383, 515, 40, 394, 290, 254, 313,
	509, -265, 534, -233, -14, -150, -166, 533, 533, 533,
	-250, 533, -5, -259, 305, -259, 394, -259, -244, -85,
	62, -279, -15, -15, 534, 29, 29, 40, 533, -154,
	-15, -15, -154, -154, 23, -208, 39, -85, -293, -7,
	-7, -287, 361, 95, 543, -287, 95, -7, 61, -7,
	-282, 61, -7, 534, -189, 92, 91, 90, 95, -169,
	-125, -91, -12, 534, -202, -197, 533, -204, -205, -5,
	-210, 71, -44, 134, 157, 543, 534, 23, -43, -217,
	23, 150, 108, -42, 108, 107, -317, 23, -317, -317,
	-317, 154, 31, 47, -57, 534, 543, -152, -158, -154,
	538, 40, 533, 49, 43, 75, -159, -19, -57, -169,
	-31, 543, 534, -272, 75, -269, 507, 533, -7, -15,
	254, 47, -257, 505, 533, -43, -14, -304, 255, 301,
	-250, -295, -264, -265, -233, 534, -276, -242, -243, -9,
	-78, -78, -301, -302, -311, 36, 533, -311, -14, -311,
	533, -131, 96, 97, -269, -126, -42, 300, -32, 84,
	-15, 534, 451, -286, 451, -7, -287, 95, -7, -13,
	93, 93, -109, 534, -193, -195, -5, 534, 543, -58,
	132, -210, -212, 543, -6, -221, 131, -5, -7, -121,
	-122, 111, 99, 100, -123, 111, 98, 71, -57, -57,
	-57, -57, -13, 538, 47, -13, 538, -151, -147, -153,
	-158, -272, -14, -273, 451, 230, -267, -268, -5, -192,
	533, -252, 31, -311, -311, -42, -148, 23, -31, -265,
	-295, -241, -278, 305, 533, 534, 543, -55, 534, 534,
	534, 543, -274, 84, -312, 533, -13, -274, -148, -274,
	-85, -132, 519, -131, 534, -306, 533, -42, -7, -7,
	451, 95, 71, 71, -169, -173, 23, 534, 543, -58,
	-205, -206, -207, 4, 40, 31, 47, 130, 126, -44,
	125, -219, -220, -218, 112, 95, 112, -124, 104, 533,
	40, 88, 109, 110, -13, 538, 534, 543, -273, -7,
	27, 100, 382, 534, 543, -127, -127, -42, -274, -274,
	534, -258, 339, 300, 533, -272, -295, -31, -265, -257,
	533, -150, -243, 61, -302, -248, 309, -313, -314, -6,
	534, -248, -258, -169, 534, 93, 94, -132, -305, -308,
	-287, -287, -7, -5, -13, -13, -5, -195, -208, -207,
	-43, -43, 47, -43, -209, 533, 543, 23, -109, -128,
	-108, 88, 533, -153, 129, 129, -268, -279, -15, -279,
	534, -255, 356, -263, -260, -261, 75, 80, 371, 431,
	-306, -42, -273, -31, -272, -295, -280, 36, -277, -125,
	534, 533, 451, 534, 543, 529, -263, -248, -308, 534,
	-287, 61, 84, 95, 95, 125, -214, -215, -5, 133,
	-220, -6, 157, 534, -78, -127, 311, -261, 75, -260,
	75, 99, 100, 534, -272, -273, -31, -273, -269, 534,
	543, -278, -78, -7, -314, -293, -248, -45, -5, -5,
	-5, -204, 534, 543, 132, -58, -230, 130, -124, -124,
	104, 534, -279, -262, 356, 35, 24, 95, -262, 442,
	-273, -272, -169, -125, -257, 534, 40, 534, -222, -223,
	40, -224, 138, 47, 49, 43, 50, 140, -215, 126,
	-216, -228, 29, 130, 7, -128, 197, 47, 40, -273,
	-280, -45, 534, 75, -42, 136, 141, -226, 170, 36,
	-216, -216, 7, 125, 23, 157, -148, -148, -273, 84,
	138, -227, 147, 146, 142, 136, 142, 136, 143, 144,
	-226, -222, 533, -7, -124, -169, -5, -225, -223, 145,
	145, 142, 142, 136, 142, 136, 142, -227, -214, 125,
	75, 75, 75, 142, 142, -225, 534, 533, 140, 138,
	148, 148, -214, -223, 149, 149, 534, 75, 138,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 1205, 1206, 0, 1440,
	-2, 1505, 1505, 1210, 1264, 0, 1296, 0, 1215, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 1439,
	0, 0, 1570, 1571, 0, 0, 1576, 1743, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 1870, 1866, 1867, 1868, 0,
	0, 1872, 1873, 1874, 0, 0, 0, 1488, 0, 1491,
	1492, 1493, 1494, 1495, 1496, 1211, 0, 0, 0, 1217,
	0, 1295, 1297, 1214, 1239, 1240, 50, 0, 35, 36,
	37, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 392, 393, 394, 395, 396, 397, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 457, 458, 459, 460, 461, 462,
	463, 0, 1261, 291, 1266, 53, 45, 1262, 0, 2,
	0, 0, 1244, 0, 0, 0, 1207, 1415, 0, 31,
	1572, 1573, 1574, 1575, 0, 185, 0, 0, 185, 0,
	0, 185, 0, 185, 0, 0, 0, 0, 0, 1109,
	0, -2, -2, 1132, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 0, 0, 0,
	0, 0, 0, 0, 1780, 1781, 1782, 1783, 1784, 398,
	399, 400, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 23, 69, 67, 185, 23, 46, 0,
	185, 23, 185, 1502, 1124, 1125, 1126, 1127, 1128, 1129,
	1139, 1142, 1143, 1144, 1145, 1146, 1177, 147, 1139, 1139,
	1139, 1152, 1153, 1154, 1155, 1156, 1173, 1173, 1130, 1131,
	1175, 1164, 1175, 1175, 1159, 0, 1175, 23, 185, 0,
	1869, 0, 1871, 0, 1486, 1487, 1490, 1208, 1209, 1302,
	1216, 1218, 1222, 1223, 1017, 0, 0, 0, 0, 1079,
	1080, 1105, 0, 1083, 1178, 254, 1095, 1084, 1085, 1086,
	1087, 1088, 1089, 1199, 1090, 1091, 0, 1302, 0, 1241,
	51, 1097, 0, 1100, 1242, 0, 0, 0, 1263, 0,
	0, 0, 1122, 0, 1402, 0, 1245, 0, 1426, 0,
	0, 0, 0, 0, 185, 18, 30, 1753, 1766, 1853,
	1774, 0, 0, 0, 1853, 1853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1845,
	0, 0, 0, 1755, 1757, 0, 0, 0, 0, 1758,
	0, 0, 1760, 1853, 0, 0, 185, 0, 0, 185,
	0, 0, 1886, 0, 1110, 0, 0, 0, 0, 0,
	1885, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1855, 21, 22,
	68, 0, 0, 0, 1857, 0, 0, 0, 1860, 0,
	1140, 1139, 0, 1147, 0, 1148, 1149, 1150, 1151, 0,
	1168, 0, 0, 0, 1170, 1166, 1174, 0, 1157, 1158,
	1175, 1175, 1162, 1862, 0, 23, 185, 1489, 1875, 1876,
	1877, 1878, 1225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 834,
	752, 1037, 1039, 779, 0, 726, 619, 587, 0, -2,
	731, 921, 0, 1221, 831, 43, 44, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 581, 582, 583, 584, 585, 586, 588, 589,
	590, 591, 592, 593, 594, 596, 597, 598, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 727, 728, 729, 730, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 832, 833, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019,
	1035, 1052, 1081, 0, 0, -2, 1200, 0, 1225, 0,
	1098, 1101, 1102, 1133, 38, 39, 40, 41, 42, 487,
	488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 1099, 0, 0,
	0, 1267, 1271, 0, 0, 1278, 0, 0, 0, 0,
	0, 0, 0, 1202, 0, 0, 0, 1541, 1404, 0,
	0, 0, 0, 1225, 1417, 0, 0, 1105, 1246, 1285,
	0, 0, 1435, 1435, 1432, 1433, 0, 1579, 0, 0,
	0, 0, 185, 17, 0, 0, 0, 0, 1852, 0,
	0, 1785, 185, 0, 1809, 0, 0, 1688, 0, 1642,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 1817,
	1818, 0, 0, 1838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1831, 0, 0, 1833, 1834, 0,
	1839, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1762, 1853, 0, 0, 1764,
	1853, 0, 0, 0, 1884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 70, 0, 1136,
	23, 47, 23, 0, 1503, 23, 1141, 0, 0, 0,
	0, 0, 0, 0, 0, 1160, 1161, 23, 1864, 0,
	1281, 0, 1301, 1219, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, -2, -2, -2, -2, -2, -2, 1033, 1034, 1036,
	0, -2, 0, 0, 1202, 0, 0, -2, 1048, 0,
	1050, 1051, 0, 0, 1203, 1057, 0, 0, 1220, 1106,
	1105, 0, 1196, 0, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1201, 1111,
	1198, 0, 0, 0, 1117, 1119, 0, -2, 1281, 0,
	1103, 1100, 1243, 1279, 0, 1269, 0, 52, 1123, 1563,
	0, 0, 1409, 1410, 0, 1411, 1105, 451, 1408, 1403,
	1285, 0, 0, 0, 1422, 1421, 1563, 0, 1425, 1226,
	1288, 1288, 0, 1231, 0, 1288, 1288, 1288, 1306, 313,
	463, 428, 50, 1108, 0, 0, 1434, 0, 1414, 0,
	1578, 1580, 1582, 1583, 1584, 0, 1608, 0, 0, 0,
	0, 1775, 1907, 0, 0, 0, 31, 0, 1787, 185,
	1606, 0, 0, 0, 1942, 0, 0, 0, 0, 0,
	0, 1507, 0, 1942, 185, 23, 185, 23, 1811, 1814,
	1816, 0, 1837, 0, 1951, 1954, 1815, 1819, 1822, 1823,
	0, 0, 0, 0, 1827, 0, 1824, 1825, 1826, 1830,
	0, 1832, 0, 1835, 1840, 1976, 1977, 1978, 0, 0,
	0, 1968, 1970, 328, 76, 148, 0, 1627, 1754, 1767,
	1853, 0, 1915, 1849, 1756, 0, 0, 1909, 1759, 0,
	1911, 0, 1761, 1853, 0, 0, 0, 0, 0, 0,
	0, 0, 1887, 1888, 1889, 1890, 1891, 0, 1894, 1895,
	0, 0, 0, 0, 0, 1901, 1902, 1903, 1904, 1905,
	1906, 0, 0, 0, 1932, 1933, 1934, 1935, 0, 0,
	0, 0, 1940, 0, 1854, 1137, 1856, 1858, 0, 1861,
	1138, 1176, 1173, 1171, 1172, 1173, 0, 1163, 1863, 23,
	1212, 0, 1224, 1038, 0, -2, -2, 0, 0, 1058,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, -2,
	1082, 1179, 0, 1107, 0, 0, 1198, 1198, 1198, 0,
	0, 1213, 1298, 0, 1099, 0, 1270, 1401, 0, 1544,
	0, 0, 0, 1413, 1563, 1418, 1419, 0, 0, 1424,
	1283, 125, 0, 0, 0, 0, 0, 1258, 1258, 1258,
	1256, 1228, 1287, 0, 1292, 1229, 1288, 1288, 1288, 1288,
	1288, 1231, 0, 1233, 1235, 1237, 1303, 0, 0, 0,
	0, -2, 0, 1673, 1436, 1437, 1438, -2, 1721, 0,
	1588, 1723, 0, 1608, 0, 1746, 0, 0, 0, 1846,
	0, 1618, 1847, 1848, 0, 0, 1602, 1605, 0, 1687,
	1746, 0, 0, 1691, 1640, 0, 0, 0, 1942, 0,
	0, 1745, 1789, 0, 0, 0, 0, 1802, 0, 1808,
	1645, -2, 0, 1810, 0, 1806, 0, 1813, 1836, 1974,
	1975, 1950, 0, 0, 0, 1820, 1828, 1821, 1829, 1841,
	1842, 0, 0, 1843, 1967, 0, 1971, 1972, 1973, 1626,
	1628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1913, 0, 1763, 1853, 0, 1917, 0,
	1765, 1853, 0, 0, 1896, 0, 0, 0, 0, 0,
	0, 1931, 0, 0, 0, 0, 0, 23, 1167, 1169,
	1165, 1865, 1280, -2, 0, 0, 0, 0, -2, -2,
	1049, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 1066, 0, 1204, 0,
	1197, 1112, 0, 1118, 0, 0, 0, 0, 1120, 1121,
	1104, 0, 1562, 0, 0, 0, 1405, 1406, 0, 1412,
	1416, 0, 1423, 0, 1227, 0, 0, 0, 0, 0,
	1253, 1257, 1254, 1255, 1290, 0, 1230, 1234, 1236, 1238,
	1247, 1305, 0, 0, 458, 0, 1388, 0, 1446, 1671,
	1672, 1673, 0, 1508, 1723, 0, 1581, 1585, 1731, 1722,
	0, 0, 1609, 1611, 1612, 1631, 0, 1579, 0, 0,
	0, 0, 1919, 1925, 0, 1786, 0, 1623, 1601, 0,
	1603, 1604, 1942, 0, 48, 1943, 0, 1945, 0, 0,
	1641, 1740, 0, 1693, 0, 0, 1698, 0, 1555, 1555,
	0, 0, 1793, 1803, 1851, 1506, 1649, 0, 0, 0,
	0, 1797, 1799, 1800, 0, 0, 0, 1655, 0, 1670,
	1658, 0, 0, 0, 0, 1673, -2, 1668, 1798, 0,
	1646, 0, 0, 0, 0, 23, 23, 1952, 1953, 1957,
	1958, 1959, 1960, 1961, 1962, 1135, 1180, 254, 1480, 1184,
	1185, 1483, 1092, 1956, 1844, 1979, 1969, 1908, 0, 0,
	0, 0, 1916, 0, 0, 1910, 1921, 1912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1893, 1892, 0,
	0, 1899, 0, 1929, 1930, 1936, 1937, 1938, 1939, 23,
	1859, -2, -2, 0, 0, 0, -2, 1064, 1067, 1068,
	1069, 1070, 1071, 1072, -2, -2, -2, -2, -2, -2,
	-2, -2, 1198, 1113, 1115, 1116, 1274, 0, 0, 1547,
	0, 0, 1420, 1284, 1286, 1248, 0, 1250, 0, 0,
	0, 1252, 0, 0, 1232, 0, 1307, 1311, 0, 0,
	0, 0, 1347, 1387, 0, 1563, 1428, 1530, 1530, 0,
	1430, 1443, 0, 1446, 0, 1731, 0, 0, 0, 34,
	0, 0, 1607, 0, 1613, 0, 1723, 0, 1608, 0,
	0, 0, 0, 0, 0, 1788, 1631, 0, 1599, 1600,
	1689, 0, 1703, 1944, 1948, 1946, 1947, 1949, 1703, 0,
	1703, 0, 0, 1549, 20, 0, 1550, 0, 1790, 0,
	0, 1650, 1643, 0, 1791, 0, 1795, 1484, 1485, 0,
	0, 1850, 1653, 1654, 0, 0, 1656, 1661, 1662, 0,
	1669, 1659, 1660, 0, 0, 0, 0, 0, 1321, 1648,
	1796, 1805, 1812, 0, 1093, 1481, 1094, 1482, 0, 0,
	0, 1777, 0, 1778, 1777, 0, 0, 1923, 1914, 0,
	0, 0, 1927, 1918, 0, 1897, 1898, 0, 1941, -2,
	-2, -2, 0, 1277, 0, 0, 1540, 1281, 0, 1543,
	0, 1249, 0, 1260, 1251, 0, 1291, 1306, 0, 1309,
	0, 0, 1324, 0, 94, 0, 1328, 0, 0, 1349,
	1386, 1427, 1429, 0, 0, 0, 1525, 0, 1445, 1447,
	1448, 1511, 1511, 1451, 1452, 1511, 1511, 0, 0, 0,
	1462, 1470, 1281, 1441, 34, 0, 54, 1586, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1587, 1735,
	0, 0, 1730, 0, 1610, 1630, 0, 1633, 1634, 0,
	0, 1679, 1642, 0, 0, 0, 0, 0, 1636, 0,
	1631, 1731, 1721, 1723, 1608, 0, 1746, 0, 0, 0,
	1629, 0, 49, 1964, 0, 1964, 0, 1964, 1699, 1700,
	254, 1558, 19, 1554, 1555, 1794, 1804, 1644, 0, 1657,
	1663, 1664, 1665, 1667, 0, 1966, 0, 0, 1955, 1920,
	1926, 1768, 1776, 0, 0, 1770, 0, 1922, 0, 1777,
	0, 0, 1900, 1114, 1268, 0, 0, 0, 0, 1542,
	1548, 1407, 0, 1289, 1304, 1308, 0, 0, 1334, 0,
	1325, 0, 1326, 1322, 1323, 0, 0, 0, 1331, 1351,
	0, 0, 0, 1529, 0, 1527, 0, 1510, 0, 0,
	0, 0, 0, 0, 1461, 1444, 0, 1464, 1465, 1466,
	1467, 1468, 0, 1474, 1475, 1476, 1477, 1478, 1479, 1431,
	1735, 0, 1720, 1737, 0, 32, 33, 0, 0, 1635,
	1637, 1678, 1964, 1964, 0, 1683, 1415, 0, 1638, 1639,
	1614, 34, 1723, 1731, 0, 1748, 0, 0, 1620, 0,
	0, 0, 0, 1624, 1739, 0, 0, 1739, 1415, 1739,
	0, 1561, 1556, 1557, 1558, 1551, 0, 1677, 1807, 0,
	1320, 1181, 0, 1779, 0, 1924, 1772, 0, 1928, 0,
	0, 0, 1281, 1294, 0, 1317, 0, 1332, 0, 1336,
	0, 1327, 1329, 0, 1330, 0, 0, 1348, 1385, 1520,
	1521, 0, 0, 1532, 1522, 0, 0, 0, 1449, 1450,
	1453, 1454, 1455, 1456, 0, 1459, 1460, 1463, 0, 1471,
	1473, 1737, 55, 1566, 0, 0, 0, 1725, 1555, 1555,
	0, 1632, 0, 1739, 1739, 0, 1707, 0, 1735, 1731,
	34, 1723, 1642, 0, 0, 1615, 0, 1619, 1616, 0,
	1622, 0, 1942, 0, 1963, 0, 0, 1942, 1707, 1281,
	0, 1552, 0, 1561, 1792, 1801, 0, 1965, 1777, 1777,
	0, 0, 0, 0, 1539, 1259, 0, 1310, 0, 1321,
	1335, 1338, 1339, 0, 0, 0, 1344, 0, 1337, 0,
	0, 1350, 1352, 0, 1523, 0, 1524, 1533, 0, 0,
	0, 0, 1526, 1528, 1457, 1458, 1469, 0, 1564, 1736,
	1732, 0, 0, 1724, 0, 20, 20, 0, 1680, 1681,
	1697, 1712, 0, 1677, 0, 1737, 34, 1735, 1731, 1752,
	0, 0, 1621, 0, 1625, 1690, 0, 0, 1981, 1983,
	1702, 1692, 1712, 1942, 1701, 1559, 1560, 1553, 0, 1651,
	1769, 1771, 1777, 0, 0, 0, 1293, 1318, 1319, 1340,
	1341, 1342, 1343, 1345, 0, 0, 0, 0, 1531, 0,
	0, 1537, 0, 1472, 1733, 1734, 1726, 1727, 19, 1728,
	1555, 1682, 0, 1684, 1708, 1709, 0, 1704, 1705, 1706,
	1685, 0, 1568, 1735, 1737, 34, 1737, 0, 0, 1749,
	1748, 0, 0, 1980, 0, 0, 1942, 1695, 1652, 1676,
	1773, 0, 0, 0, 0, 0, 0, 1391, 0, -2,
	1353, 1354, 0, 0, 0, 20, 1696, 1710, 0, 1711,
	0, 0, 0, 0, 1737, 1567, 1735, 1281, 1751, 1747,
	0, 1642, 0, 1738, 1982, 1984, 1694, 0, 1276, 1272,
	1273, 0, 1370, 0, 0, 1400, 0, 1389, 1534, 1535,
	0, 1538, 1729, 1713, 0, 1716, 1717, 0, 1714, 1686,
	1565, 1737, 1741, 1750, 1752, 1617, 0, 1333, 0, 0,
	0, 1356, 1357, 1358, 1359, 1360, 1361, 1364, 1392, 1393,
	1379, 1400, 1400, 0, 0, 0, 1715, 1415, 1415, 1569,
	1737, 0, 1346, 0, 1355, 1362, 1363, 1384, 0, 0,
	1379, 1370, 1399, 0, 0, 0, 1718, 1719, 1281, 0,
	1369, 1368, 0, 0, 1371, 0, 1373, 0, 0, 0,
	1384, 1396, 0, 0, 1536, 1742, 1275, 1394, 0, 1381,
	1383, 1372, 1374, 0, 1377, 0, 1378, 1368, 0, 0,
	0, 0, 0, 1375, 1376, 1395, 1397, 0, 1365, 1366,
	0, 0, 0, 0, 1380, 1382, 1398, 0, 1367,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 540, 3, 3,
	533, 534, 538, 536, 543, 537, 535, 539, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 544, 542,
	527, 529, 528, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 531, 3, 532, 541,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 525, 57868, 526, 57869, 530,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:434
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:449
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:457
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:472
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:483
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:484
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:485
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:486
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:487
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:488
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:489
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:490
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:491
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:492
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:493
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:495
		{
			yyVAL.stmt = nil
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:506
		{
			yyVAL.str = yyDollar[1].str
		}
	case 18:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:507
		{
			yyVAL.str = ""
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:511
		{
			yyVAL.list = yyDollar[1].node.(*ast.NodeList)
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:512
		{
			yyVAL.list = nil
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:516
		{
			yyVAL.ival = int(ast.DropCascade)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:517
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:518
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:522
		{
			yyVAL.ival = 1
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:523
		{
			yyVAL.ival = 0
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:527
		{
			yyVAL.ival = 1
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:528
		{
			yyVAL.ival = 0
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:532
		{
			yyVAL.ival = 1
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:533
		{
			yyVAL.ival = 0
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:537
		{
			yyVAL.ival = 1
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:538
		{
			yyVAL.ival = 0
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:542
		{
			yyVAL.node = yyDollar[2].list
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:543
		{
			yyVAL.node = nil
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:544
		{
			yyVAL.node = nil
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:553
		{
			yyVAL.str = yyDollar[1].str
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:554
		{
			yyVAL.str = yyDollar[1].str
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:555
		{
			yyVAL.str = yyDollar[1].str
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:559
		{
			yyVAL.str = yyDollar[1].str
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:560
		{
			yyVAL.str = yyDollar[1].str
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:561
		{
			yyVAL.str = yyDollar[1].str
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:562
		{
			yyVAL.str = yyDollar[1].str
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:563
		{
			yyVAL.str = yyDollar[1].str
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:566
		{
			yyVAL.str = yyDollar[1].str
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:567
		{
			yyVAL.str = yyDollar[1].str
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:570
		{
			yyVAL.str = yyDollar[1].str
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:575
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:579
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:588
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:592
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:600
		{
			yyVAL.node = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:607
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.node = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.node = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.node = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:636
		{
			yyVAL.node = yyDollar[2].node
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:637
		{
			yyVAL.node = nil
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:642
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:646
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:659
		{
			rangeVar := yyDollar[3].node.(*ast.RangeVar)
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:665
		{
			rangeVar := yyDollar[3].node.(*ast.RangeVar)
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:671
		{
			rangeVar := yyDollar[4].node.(*ast.RangeVar)
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:677
		{
			rangeVar := yyDollar[4].node.(*ast.RangeVar)
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:683
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].node.(*ast.RangeVar)
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:690
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].node.(*ast.RangeVar)
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:697
		{
			rangeVar := yyDollar[3].node.(*ast.RangeVar)
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:703
		{
			rangeVar := yyDollar[2].node.(*ast.RangeVar)
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:718
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:722
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.node = nodes
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:734
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:738
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:748
		{
			yyVAL.str = "abort"
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:749
		{
			yyVAL.str = "absent"
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:750
		{
			yyVAL.str = "absolute"
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:751
		{
			yyVAL.str = "access"
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:752
		{
			yyVAL.str = "action"
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:753
		{
			yyVAL.str = "add"
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:754
		{
			yyVAL.str = "admin"
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:755
		{
			yyVAL.str = "after"
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:756
		{
			yyVAL.str = "aggregate"
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:757
		{
			yyVAL.str = "also"
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:758
		{
			yyVAL.str = "alter"
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:759
		{
			yyVAL.str = "always"
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:760
		{
			yyVAL.str = "asensitive"
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:761
		{
			yyVAL.str = "assertion"
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:762
		{
			yyVAL.str = "assignment"
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:763
		{
			yyVAL.str = "at"
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:764
		{
			yyVAL.str = "atomic"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:765
		{
			yyVAL.str = "attach"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:766
		{
			yyVAL.str = "attribute"
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:767
		{
			yyVAL.str = "backward"
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:768
		{
			yyVAL.str = "before"
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:769
		{
			yyVAL.str = "begin"
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:770
		{
			yyVAL.str = "breadth"
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:771
		{
			yyVAL.str = "by"
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:772
		{
			yyVAL.str = "cache"
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:773
		{
			yyVAL.str = "call"
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:774
		{
			yyVAL.str = "called"
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:775
		{
			yyVAL.str = "cascade"
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:776
		{
			yyVAL.str = "cascaded"
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:777
		{
			yyVAL.str = "catalog"
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:778
		{
			yyVAL.str = "chain"
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:779
		{
			yyVAL.str = "characteristics"
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:780
		{
			yyVAL.str = "checkpoint"
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:781
		{
			yyVAL.str = "class"
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:782
		{
			yyVAL.str = "close"
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:783
		{
			yyVAL.str = "cluster"
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:784
		{
			yyVAL.str = "columns"
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:785
		{
			yyVAL.str = "comment"
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:786
		{
			yyVAL.str = "comments"
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:787
		{
			yyVAL.str = "commit"
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:788
		{
			yyVAL.str = "committed"
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:789
		{
			yyVAL.str = "compression"
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:790
		{
			yyVAL.str = "conditional"
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:791
		{
			yyVAL.str = "configuration"
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:792
		{
			yyVAL.str = "conflict"
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:793
		{
			yyVAL.str = "connection"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:794
		{
			yyVAL.str = "constraints"
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:795
		{
			yyVAL.str = "content"
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:796
		{
			yyVAL.str = "continue"
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:797
		{
			yyVAL.str = "conversion"
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:798
		{
			yyVAL.str = "copy"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:799
		{
			yyVAL.str = "cost"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:800
		{
			yyVAL.str = "csv"
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:801
		{
			yyVAL.str = "cube"
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:802
		{
			yyVAL.str = "current"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:803
		{
			yyVAL.str = "cursor"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:804
		{
			yyVAL.str = "cycle"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:805
		{
			yyVAL.str = "data"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:806
		{
			yyVAL.str = "database"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:807
		{
			yyVAL.str = "day"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:808
		{
			yyVAL.str = "deallocate"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:809
		{
			yyVAL.str = "declare"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:810
		{
			yyVAL.str = "defaults"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:811
		{
			yyVAL.str = "deferred"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:812
		{
			yyVAL.str = "definer"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:813
		{
			yyVAL.str = "delete"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:814
		{
			yyVAL.str = "delimiter"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:815
		{
			yyVAL.str = "delimiters"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:816
		{
			yyVAL.str = "depends"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:817
		{
			yyVAL.str = "depth"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:818
		{
			yyVAL.str = "detach"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:819
		{
			yyVAL.str = "dictionary"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:820
		{
			yyVAL.str = "disable"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:821
		{
			yyVAL.str = "discard"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:822
		{
			yyVAL.str = "document"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:823
		{
			yyVAL.str = "domain"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:824
		{
			yyVAL.str = "double"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:825
		{
			yyVAL.str = "drop"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:826
		{
			yyVAL.str = "each"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:827
		{
			yyVAL.str = "empty"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:828
		{
			yyVAL.str = "enable"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:829
		{
			yyVAL.str = "encoding"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:830
		{
			yyVAL.str = "encrypted"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:831
		{
			yyVAL.str = "enum"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:832
		{
			yyVAL.str = "error"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:833
		{
			yyVAL.str = "escape"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:834
		{
			yyVAL.str = "event"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:835
		{
			yyVAL.str = "exclude"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:836
		{
			yyVAL.str = "excluding"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:837
		{
			yyVAL.str = "exclusive"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:838
		{
			yyVAL.str = "execute"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:839
		{
			yyVAL.str = "explain"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:840
		{
			yyVAL.str = "expression"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:841
		{
			yyVAL.str = "extension"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:842
		{
			yyVAL.str = "external"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:843
		{
			yyVAL.str = "family"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:844
		{
			yyVAL.str = "filter"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:845
		{
			yyVAL.str = "finalize"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:846
		{
			yyVAL.str = "first"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:847
		{
			yyVAL.str = "following"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:848
		{
			yyVAL.str = "force"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:849
		{
			yyVAL.str = "format"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:850
		{
			yyVAL.str = "forward"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:851
		{
			yyVAL.str = "function"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:852
		{
			yyVAL.str = "functions"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:853
		{
			yyVAL.str = "generated"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:854
		{
			yyVAL.str = "global"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.str = "granted"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:856
		{
			yyVAL.str = "groups"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:857
		{
			yyVAL.str = "handler"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:858
		{
			yyVAL.str = "header"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:859
		{
			yyVAL.str = "hold"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:860
		{
			yyVAL.str = "hour"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:861
		{
			yyVAL.str = "identity"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:862
		{
			yyVAL.str = "if"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:863
		{
			yyVAL.str = "immediate"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:864
		{
			yyVAL.str = "immutable"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:865
		{
			yyVAL.str = "implicit"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.str = "import"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:867
		{
			yyVAL.str = "include"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:868
		{
			yyVAL.str = "including"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:869
		{
			yyVAL.str = "increment"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:870
		{
			yyVAL.str = "indent"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:871
		{
			yyVAL.str = "index"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:872
		{
			yyVAL.str = "indexes"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:873
		{
			yyVAL.str = "inherit"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:874
		{
			yyVAL.str = "inherits"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:875
		{
			yyVAL.str = "inline"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:876
		{
			yyVAL.str = "input"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:877
		{
			yyVAL.str = "insensitive"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:878
		{
			yyVAL.str = "insert"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:879
		{
			yyVAL.str = "instead"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:880
		{
			yyVAL.str = "invoker"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:881
		{
			yyVAL.str = "isolation"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:882
		{
			yyVAL.str = "keep"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:883
		{
			yyVAL.str = "key"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:884
		{
			yyVAL.str = "keys"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:885
		{
			yyVAL.str = "label"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:886
		{
			yyVAL.str = "language"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:887
		{
			yyVAL.str = "large"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:888
		{
			yyVAL.str = "last"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:889
		{
			yyVAL.str = "leakproof"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.str = "level"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:891
		{
			yyVAL.str = "listen"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.str = "load"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:893
		{
			yyVAL.str = "local"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.str = "location"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:895
		{
			yyVAL.str = "lock"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:896
		{
			yyVAL.str = "locked"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.str = "logged"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:898
		{
			yyVAL.str = "mapping"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.str = "match"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:900
		{
			yyVAL.str = "matched"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:901
		{
			yyVAL.str = "materialized"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:902
		{
			yyVAL.str = "maxvalue"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:903
		{
			yyVAL.str = "merge"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:904
		{
			yyVAL.str = "method"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:905
		{
			yyVAL.str = "minute"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.str = "minvalue"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:907
		{
			yyVAL.str = "mode"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:908
		{
			yyVAL.str = "month"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:909
		{
			yyVAL.str = "move"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.str = "name"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "names"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "nested"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "new"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "next"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "nfc"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "nfd"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "nfkc"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "nfkd"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "no"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "normalized"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "nothing"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "notify"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "nowait"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "nulls"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "object"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "of"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "off"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "oids"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "old"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "omit"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "operator"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "option"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "options"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "ordinality"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "others"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "over"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "overriding"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "owned"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "owner"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "parallel"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "parameter"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "parser"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "partial"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "partition"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "passing"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "password"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "path"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "plan"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "plans"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "policy"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "preceding"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "prepare"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "prepared"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "preserve"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "prior"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "privileges"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "procedural"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "procedure"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "procedures"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "program"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "publication"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "quote"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "quotes"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "range"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "read"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "reassign"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "recheck"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "recursive"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "ref"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "referencing"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "refresh"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "reindex"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "relative"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "release"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "rename"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "repeatable"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "replace"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "replica"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "reset"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "restart"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "restrict"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "return"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "returns"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "revoke"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "role"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "rollback"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "rollup"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "routine"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "routines"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "rows"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "rule"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "savepoint"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "scalar"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "schema"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "schemas"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "scroll"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "search"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "second"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "security"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "sequence"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "sequences"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "serializable"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "server"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "session"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "set"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "sets"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "share"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "show"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "simple"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "skip"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "snapshot"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "source"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "sql"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "stable"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "standalone"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "start"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "statement"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "statistics"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "stdin"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "stdout"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "storage"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "stored"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "strict"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "string"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "strip"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "subscription"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "support"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "sysid"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "system"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "tables"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "tablespace"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "target"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "temp"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "template"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "temporary"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "text"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "ties"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "transaction"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "transform"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "trigger"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "truncate"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "trusted"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "type"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "types"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "uescape"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "unbounded"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "uncommitted"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "unconditional"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "unencrypted"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "unknown"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "unlisten"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "unlogged"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "until"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "update"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "vacuum"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "valid"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "validate"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "validator"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "value"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "varying"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "version"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "view"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "views"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "volatile"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "whitespace"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "within"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "without"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "work"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "wrapper"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "write"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "xml"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "year"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "yes"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "zone"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = yyDollar[1].str
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = yyDollar[1].str
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = yyDollar[1].str
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "between"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "bigint"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "bit"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "boolean"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "char"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "character"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "coalesce"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "dec"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "decimal"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "exists"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "extract"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "float"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "greatest"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "grouping"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "inout"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "int"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "integer"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "interval"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "json"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "json_array"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "json_arrayagg"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "json_exists"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "json_object"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "json_objectagg"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "json_query"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "json_scalar"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "json_serialize"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "json_table"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "json_value"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "least"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "merge_action"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "national"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "nchar"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "none"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "normalize"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "nullif"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "numeric"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "out"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "overlay"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "position"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "precision"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "real"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "row"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "setof"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "smallint"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "substring"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "time"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "timestamp"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "treat"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "trim"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "values"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "varchar"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "xmlattributes"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "xmlconcat"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "xmlelement"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "xmlexists"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "xmlforest"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "xmlparse"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "xmlpi"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "xmlroot"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "xmlserialize"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "xmltable"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "authorization"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "binary"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "collation"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "concurrently"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "cross"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "current_schema"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "freeze"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "full"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "ilike"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "inner"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "is"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "isnull"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "join"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "left"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "like"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "natural"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "notnull"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "outer"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "overlaps"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "right"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "similar"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "tablesample"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "verbose"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "all"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "analyse"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "analyze"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "and"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "any"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "array"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "as"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "asc"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "asymmetric"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "both"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "case"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "cast"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "check"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "collate"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "column"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "constraint"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "create"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "current_catalog"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "current_date"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "current_role"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "current_time"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "current_timestamp"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "current_user"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "default"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "deferrable"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "desc"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "distinct"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "do"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "else"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "end"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "except"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "false"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "fetch"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "for"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "foreign"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "from"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "grant"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "group"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "having"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "in"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "initially"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "intersect"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "into"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "lateral"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "leading"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "limit"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "localtime"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "localtimestamp"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "not"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "null"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "offset"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "on"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "only"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "or"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "order"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "placing"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "primary"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "references"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "returning"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "select"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "session_user"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "some"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "symmetric"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "system_user"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "table"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "then"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "to"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "trailing"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "true"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "union"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "unique"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "user"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "using"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "variadic"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "when"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "where"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "window"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "with"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "abort"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "absent"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "absolute"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "access"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "action"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "add"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "admin"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "after"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "aggregate"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "all"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "also"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "alter"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "always"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "analyse"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "analyze"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "and"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "any"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "asc"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "asensitive"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "assertion"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "assignment"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "asymmetric"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "at"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "atomic"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "attach"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "attribute"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "authorization"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "backward"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "before"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "begin"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "between"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "bigint"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "binary"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "bit"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "boolean"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "both"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "breadth"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "by"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "cache"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "call"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "called"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "cascade"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "cascaded"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "case"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "cast"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "catalog"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "chain"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "characteristics"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "check"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "checkpoint"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "class"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "close"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "cluster"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "coalesce"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "collate"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "collation"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "column"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "columns"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "comment"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "comments"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "commit"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "committed"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "compression"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "concurrently"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "conditional"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "configuration"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "conflict"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "connection"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "constraint"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "constraints"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "content"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "continue"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "conversion"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "copy"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "cost"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "cross"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "csv"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "cube"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "current"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "current_catalog"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "current_date"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "current_role"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "current_schema"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "current_time"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "current_timestamp"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "current_user"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "cursor"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "cycle"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "data"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "database"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "deallocate"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "dec"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "decimal"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "declare"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "default"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "defaults"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "deferrable"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "deferred"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "definer"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "delete"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "delimiter"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "delimiters"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "depends"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "depth"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "desc"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "detach"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "dictionary"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "disable"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "discard"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "distinct"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "do"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "document"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "domain"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "double"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "drop"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "each"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "else"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "empty"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "enable"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "encoding"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "encrypted"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "end"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "enum"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "error"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "escape"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "event"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "exclude"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "excluding"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "exclusive"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "execute"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "exists"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "explain"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "expression"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "extension"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "external"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "extract"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "false"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "family"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "finalize"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "first"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "float"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "following"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "force"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "foreign"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "format"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "forward"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "freeze"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "full"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "function"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "functions"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "generated"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "global"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "granted"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "greatest"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "grouping"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "groups"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "handler"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "header"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "hold"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "identity"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "if"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "ilike"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "immediate"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "immutable"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "implicit"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "import"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "in"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "include"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "including"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "increment"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "indent"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "index"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "indexes"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "inherit"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "inherits"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "initially"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "inline"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "inner"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "inout"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "input"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "insensitive"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "insert"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "instead"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "int"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "integer"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "interval"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "invoker"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "is"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "isolation"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "join"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "json"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "json_array"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "json_arrayagg"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "json_exists"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "json_object"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "json_objectagg"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "json_query"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "json_scalar"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "json_serialize"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "json_table"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "json_value"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "keep"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "key"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "keys"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "label"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "language"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "large"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "last"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "lateral"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "leading"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "leakproof"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "least"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "left"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "level"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "like"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "listen"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "load"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "local"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "localtime"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "localtimestamp"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "location"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "lock"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "locked"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "logged"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "mapping"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "match"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "matched"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "materialized"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "maxvalue"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "merge"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "merge_action"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "method"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "minvalue"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "mode"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "move"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "name"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "names"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "national"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "natural"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "nchar"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "nested"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "new"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "next"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "nfc"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "nfd"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "nfkc"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "nfkd"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "no"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "none"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "normalize"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "normalized"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "not"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "nothing"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "notify"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "nowait"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "null"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "nullif"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "nulls"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "numeric"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "object"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "of"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "off"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "oids"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "old"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "omit"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "only"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "operator"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "option"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "options"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "or"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "ordinality"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "others"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "out"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "outer"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "overlay"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "overriding"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "owned"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "owner"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "parallel"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "parameter"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "parser"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "partial"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "partition"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "passing"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "password"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "path"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "placing"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "plan"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "plans"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "policy"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "position"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "preceding"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "prepare"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "prepared"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "preserve"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "primary"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "prior"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "privileges"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "procedural"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "procedure"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "procedures"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "program"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "publication"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "quote"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "quotes"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "range"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "read"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "real"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "reassign"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "recheck"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "recursive"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "ref"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "references"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "referencing"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "refresh"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "reindex"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "relative"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "release"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "rename"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "repeatable"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "replace"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "replica"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "reset"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "restart"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "restrict"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "return"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "returns"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "revoke"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "right"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "role"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "rollback"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "rollup"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "routine"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "routines"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "row"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "rows"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "rule"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "savepoint"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "scalar"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "schema"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "schemas"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "scroll"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "search"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "security"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "select"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "sequence"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "sequences"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "serializable"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "server"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "session"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "session_user"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "set"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "setof"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "sets"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "share"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "show"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "similar"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "simple"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "skip"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "smallint"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "snapshot"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "some"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "source"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "sql"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "stable"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "standalone"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "start"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "statement"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "statistics"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "stdin"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "stdout"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "storage"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "stored"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "strict"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "string"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "strip"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "subscription"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "substring"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "support"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "symmetric"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "sysid"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "system"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "system_user"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "table"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "tables"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "tablesample"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "tablespace"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "target"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "temp"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "template"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "temporary"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "text"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "then"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "ties"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "time"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "timestamp"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "trailing"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "transaction"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "transform"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "treat"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "trigger"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "trim"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "true"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "truncate"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "trusted"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "type"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "types"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "uescape"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "unbounded"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "uncommitted"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "unconditional"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "unencrypted"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "unique"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "unknown"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "unlisten"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "unlogged"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "until"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "update"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "user"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "using"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "vacuum"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "valid"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "validate"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "validator"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "value"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "values"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "varchar"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "variadic"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "verbose"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "version"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "view"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "views"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "volatile"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "when"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "whitespace"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "work"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "wrapper"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "write"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "xml"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "xmlattributes"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "xmlconcat"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "xmlelement"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "xmlexists"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "xmlforest"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "xmlparse"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "xmlpi"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "xmlroot"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "xmlserialize"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "xmltable"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "yes"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "zone"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1761
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1019:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1766
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1775
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1780
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1785
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1790
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1795
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1800
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1027:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1805
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1810
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1815
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1820
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1825
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1830
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1033:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1037:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1038:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1863
		{
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1041:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1868
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1876
		{
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1043:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1881
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1044:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1889
		{
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1045:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1894
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1046:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1902
		{
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1047:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1907
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1915
		{
			// Pass the NodeList directly to NewCollateClause
			nodeList := yyDollar[3].node.(*ast.NodeList)
			collateClause := ast.NewCollateClause(nodeList)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1049:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1923
		{
			// Create timezone function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1929
		{
			// Create timezone function call with no argument
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].astStrList, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].astStrList, nil, yyDollar[2].node, 0)
		}
	case 1053:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1943
		{
			name := []*ast.String{ast.NewString("BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1054:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1948
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1055:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1953
		{
			name := []*ast.String{ast.NewString("BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1056:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1958
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1963
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1058:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1968
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1059:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1973
		{
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1060:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1978
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1061:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1986
		{
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1062:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1991
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2000
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2002
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2006
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2011
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2016
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2021
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2026
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2031
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2036
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2041
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2046
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2051
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2056
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2061
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2066
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2071
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2077
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2078
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2080
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1082:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2089
		{
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(parenExpr, yyDollar[4].list, 0)
			} else {
				yyVAL.node = parenExpr
			}
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2097
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2102
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2106
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2110
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2114
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2118
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2122
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2127
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2130
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2133
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1093:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2134
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2135
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2140
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2144
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2154
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2158
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2164
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2165
		{
			yyVAL.node = nil
		}
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2169
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2173
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2177
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2181
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2186
		{
			yyVAL.list = nil
		}
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2188
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2200
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2209
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2213
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2217
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			result := []*ast.String{ast.NewString(yyDollar[1].str)}

			// Extract strings from indirection (which is a NodeList)
			for _, node := range yyDollar[2].list.Items {
				if str, ok := node.(*ast.String); ok {
					result = append(result, str)
				}
			}
			yyVAL.astStrList = result
		}
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2233
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].astStrList, nil, 0)
		}
	case 1112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2237
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1113:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2243
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1114:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2249
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2257
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2263
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2271
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2275
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2282
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2286
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2290
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2297
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2301
		{
			nodeList := yyDollar[1].node.(*ast.NodeList)
			nodeList.Append(yyDollar[3].node)
			yyVAL.node = nodeList
		}
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2310
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2315
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2316
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2317
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2318
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2319
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2322
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2323
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2324
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2327
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2330
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2333
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2337
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2341
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2348
		{
			yyVAL.list = yyDollar[2].node.(*ast.NodeList)
		}
	case 1139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2352
		{
			yyVAL.list = nil
		}
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2358
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2364
		{
			// Create qualified type name from name + attrs
			names := []string{yyDollar[1].str}
			for _, attr := range yyDollar[2].list.Items {
				names = append(names, attr.(*ast.String).SVal)
			}
			typeName := ast.NewTypeName(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2377
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2381
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2385
		{
			yyVAL.node = ast.NewTypeName([]string{"int2"})
		}
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2389
		{
			yyVAL.node = ast.NewTypeName([]string{"int8"})
		}
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2393
		{
			yyVAL.node = ast.NewTypeName([]string{"float4"})
		}
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2397
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2401
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2405
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2409
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2413
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2417
		{
			yyVAL.node = ast.NewTypeName([]string{"bool"})
		}
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2423
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2427
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2433
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2437
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2443
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2451
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2459
		{
			yyVAL.str = "varchar"
		}
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2463
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2471
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2479
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2489
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.node = typeName
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2500
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.node = typeName
		}
	case 1165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2514
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2526
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 1167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2538
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2548
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 1169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2558
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2568
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2579
		{
			yyVAL.ival = 1
		}
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2580
		{
			yyVAL.ival = 0
		}
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2581
		{
			yyVAL.ival = 0
		}
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2584
		{
			yyVAL.ival = 1
		}
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2585
		{
			yyVAL.ival = 0
		}
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2589
		{
			if yyDollar[2].ival < 1 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else if yyDollar[2].ival <= 7 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else {
				yyVAL.node = ast.NewTypeName([]string{"float8"})
			}
		}
	case 1177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2599
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2606
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 1179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2610
		{
			yyVAL.astStrList = yyDollar[3].astStrList
		}
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2617
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 1181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2621
		{
			yyVAL.astStrList = yyDollar[3].astStrList
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2626
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2627
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2630
		{
			yyVAL.str = "+"
		}
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2631
		{
			yyVAL.str = "-"
		}
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2632
		{
			yyVAL.str = "*"
		}
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2633
		{
			yyVAL.str = "/"
		}
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2634
		{
			yyVAL.str = "%"
		}
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2635
		{
			yyVAL.str = "^"
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2636
		{
			yyVAL.str = "<"
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2637
		{
			yyVAL.str = ">"
		}
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2638
		{
			yyVAL.str = "="
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2639
		{
			yyVAL.str = "<="
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2640
		{
			yyVAL.str = ">="
		}
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2641
		{
			yyVAL.str = "<>"
		}
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2645
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2649
		{
			yyVAL.astStrList = append([]*ast.String{ast.NewString(yyDollar[1].str)}, yyDollar[3].astStrList...)
		}
	case 1198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2655
		{
			yyVAL.list = nil
		}
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2658
		{
			yyVAL.node = nil
		}
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2661
		{
			yyVAL.node = nil
		}
	case 1201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2664
		{
			yyVAL.node = nil
		}
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2667
		{
			yyVAL.ival = 0
		}
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2668
		{
			yyVAL.ival = 0
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2672
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2688
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2697
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2698
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2706
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2708
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			yyVAL.stmt = selectStmt
		}
	case 1212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2722
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = convertToResTargetList(yyDollar[3].list.Items)
			}
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2734
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = convertToResTargetList(yyDollar[3].list.Items)
			}
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2746
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = []*ast.ResTarget{starTarget}
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].node)
			yyVAL.stmt = selectStmt
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2756
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2767
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2768
		{
			yyVAL.list = nil
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2772
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2773
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2778
		{
			yyVAL.node = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2782
		{
			// Implicit alias (no AS keyword)
			yyVAL.node = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2787
		{
			// No alias - use default naming
			yyVAL.node = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2792
		{
			// SELECT * - all columns
			yyVAL.node = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2803
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2804
		{
			yyVAL.list = nil
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2808
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2809
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2818
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			if yyDollar[2].node != nil {
				rangeVar.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeVar
		}
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2826
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].node != nil {
				alias = yyDollar[2].node.(*ast.Alias)
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2837
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].node != nil {
				alias = yyDollar[3].node.(*ast.Alias)
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2848
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2852
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].node.(*ast.Alias)
			yyVAL.node = joinExpr
		}
	case 1233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2858
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].node != nil {
				rangeFunc.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeFunc
		}
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2866
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].node != nil {
				rangeFunc.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = rangeFunc
		}
	case 1235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2875
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].node != nil {
				rangeTableFunc.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeTableFunc
		}
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2883
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].node != nil {
				rangeTableFunc.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = rangeTableFunc
		}
	case 1237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2892
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].node != nil {
				jsonTable.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = jsonTable
		}
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2900
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].node != nil {
				jsonTable.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = jsonTable
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2912
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.node = rangeVar
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2918
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2925
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.node = rangeVar
		}
	case 1242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2931
		{
			rangeVar := yyDollar[2].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 1243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2937
		{
			rangeVar := yyDollar[3].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2947
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2951
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.node = rangeVar
		}
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2957
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.node = rangeVar
		}
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2974
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2978
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2987
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3013
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3039
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3047
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3057
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3058
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3059
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3060
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3065
		{
			yyVAL.ival = 1
		}
	case 1258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3066
		{
			yyVAL.ival = 0
		}
	case 1259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3076
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].node
			var aliasNode ast.Node = nil
			if yyDollar[5].node != nil {
				aliasNode = yyDollar[5].node
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3087
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3098
		{
			yyVAL.node = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3102
		{
			yyVAL.node = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3106
		{
			yyVAL.node = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3112
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3113
		{
			yyVAL.node = nil
		}
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3118
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3122
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1268:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3130
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].node != nil {
				cte.Aliascolnames = yyDollar[2].node.(*ast.NodeList)
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3158
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3159
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3160
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1272:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3165
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3171
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3177
		{
			yyVAL.node = nil
		}
	case 1275:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3184
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3193
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3201
		{
			yyVAL.node = nil
		}
	case 1278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3212
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].node.(*ast.NodeList)
			selectStmt.ValuesLists = []*ast.NodeList{exprList}
			yyVAL.stmt = selectStmt
		}
	case 1279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3220
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].node.(*ast.NodeList)
			selectStmt.ValuesLists = append(selectStmt.ValuesLists, exprList)
			yyVAL.stmt = selectStmt
		}
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3234
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3235
		{
			yyVAL.node = nil
		}
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3239
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3247
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3249
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3253
		{
			yyVAL.node = nil
		}
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3257
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3265
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3266
		{
			yyVAL.node = nil
		}
	case 1289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3271
		{
			nameList := yyDollar[4].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3276
		{
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3280
		{
			nameList := yyDollar[3].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3285
		{
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3293
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.node = alias
		}
	case 1294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3297
		{
			yyVAL.node = nil
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3305
		{
			yyVAL.ival = 1
		}
	case 1296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3306
		{
			yyVAL.ival = 0
		}
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3310
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3311
		{
			yyVAL.list = yyDollar[4].node.(*ast.NodeList)
		}
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3315
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3316
		{
			yyVAL.list = nil
		}
	case 1301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3326
		{
			yyVAL.node = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3329
		{
			yyVAL.node = nil
		}
	case 1303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3340
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1304:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3349
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3359
		{
			yyVAL.ival = 1
		}
	case 1306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3360
		{
			yyVAL.ival = 0
		}
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3366
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3370
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3377
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].node != nil {
				funcList.Append(yyDollar[2].node)
			}
			yyVAL.list = funcList
		}
	case 1310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3386
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3387
		{
			yyVAL.node = nil
		}
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3397
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3401
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3413
		{
			name := yyDollar[1].str
			fp := &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     &name,
				ArgType:  yyDollar[2].node.(*ast.TypeName),
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
			yyVAL.node = fp
		}
	case 1315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3428
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3429
		{
			yyVAL.list = nil
		}
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3435
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3439
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3448
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3459
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].node.(*ast.NodeList)
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3464
		{
			yyVAL.node = nil
		}
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3469
		{
			yyVAL.str = "BY REF"
		}
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3470
		{
			yyVAL.str = "BY VALUE"
		}
	case 1324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3476
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3480
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3484
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3488
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3496
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3500
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3508
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3513
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1332:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3522
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, nil, nil, 0)
			// Convert column list to RangeTableFuncCol
			if yyDollar[6].list != nil {
				columns := make([]*ast.RangeTableFuncCol, 0)
				for _, col := range yyDollar[6].list.Items {
					columns = append(columns, col.(*ast.RangeTableFuncCol))
				}
				rangeTableFunc.Columns = columns
			}
			yyVAL.node = rangeTableFunc
		}
	case 1333:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:3538
		{
			// Convert namespace list to []*ResTarget
			var namespaces []*ast.ResTarget
			if yyDollar[5].list != nil {
				namespaces = make([]*ast.ResTarget, len(yyDollar[5].list.Items))
				for i, item := range yyDollar[5].list.Items {
					namespaces[i] = item.(*ast.ResTarget)
				}
			}
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), namespaces, nil, nil, 0)
			// Convert column list to RangeTableFuncCol
			if yyDollar[11].list != nil {
				columns := make([]*ast.RangeTableFuncCol, 0)
				for _, col := range yyDollar[11].list.Items {
					columns = append(columns, col.(*ast.RangeTableFuncCol))
				}
				rangeTableFunc.Columns = columns
			}
			yyVAL.node = rangeTableFunc
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3565
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3569
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3578
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3583
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3588
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3598
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3602
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3611
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3615
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3619
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3623
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3627
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1346:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:3640
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3664
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3675
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3676
		{
			yyVAL.node = nil
		}
	case 1350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3681
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3682
		{
			yyVAL.node = nil
		}
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3686
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3687
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3692
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3700
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3708
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3719
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3720
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3721
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3722
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3723
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3724
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3725
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3726
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3731
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3735
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1367:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3739
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3743
		{
			yyVAL.node = nil
		}
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3748
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3749
		{
			yyVAL.node = nil
		}
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3754
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3755
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3756
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3757
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3758
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3759
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3760
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3761
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3762
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3767
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3768
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3769
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3770
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3771
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3777
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3797
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3807
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3808
		{
			yyVAL.node = nil
		}
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3813
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3814
		{
			yyVAL.node = nil
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3820
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3824
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3833
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1394:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3842
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3856
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3870
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1397:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3881
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1398:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3890
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3901
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3902
		{
			yyVAL.node = nil
		}
	case 1401:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3918
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].node.(*ast.RangeVar)
			if yyDollar[1].node != nil {
				insertStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			if yyDollar[6].onconflict != nil {
				insertStmt.OnConflictClause = yyDollar[6].onconflict
			}
			if yyDollar[7].list != nil {
				insertStmt.ReturningList = convertToResTargetList(convertToNodeList(yyDollar[7].list))
			}
			yyVAL.stmt = insertStmt
		}
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3936
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3940
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.node = rangeVar
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3949
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3955
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3962
		{
			insertStmt := ast.NewInsertStmt(nil)
			if yyDollar[2].list != nil {
				insertStmt.Cols = convertToResTargetList(yyDollar[2].list.Items)
			}
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1407:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3971
		{
			insertStmt := ast.NewInsertStmt(nil)
			if yyDollar[2].list != nil {
				insertStmt.Cols = convertToResTargetList(yyDollar[2].list.Items)
			}
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3981
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3990
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3991
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3996
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4000
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4008
		{
			yyVAL.node = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4017
		{
			yyVAL.list = yyDollar[2].node.(*ast.NodeList)
		}
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4018
		{
			yyVAL.list = nil
		}
	case 1416:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4028
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].node.(*ast.RangeVar))
			if yyDollar[1].node != nil {
				updateStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			updateStmt.TargetList = convertToResTargetList(yyDollar[5].list.Items)
			if yyDollar[6].list != nil {
				updateStmt.FromClause = yyDollar[6].list
			}
			updateStmt.WhereClause = yyDollar[7].node
			if yyDollar[8].list != nil {
				updateStmt.ReturningList = convertToResTargetList(convertToNodeList(yyDollar[8].list))
			}
			yyVAL.stmt = updateStmt
		}
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4047
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4051
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4062
		{
			target := yyDollar[1].node.(*ast.ResTarget)
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1420:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4068
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4088
		{
			yyVAL.node = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4094
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4095
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1424:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4105
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].node.(*ast.RangeVar))
			if yyDollar[1].node != nil {
				deleteStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			if yyDollar[5].node != nil {
				deleteStmt.UsingClause = yyDollar[5].node.(*ast.NodeList)
			}
			deleteStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].list != nil {
				deleteStmt.ReturningList = convertToResTargetList(convertToNodeList(yyDollar[7].list))
			}
			yyVAL.stmt = deleteStmt
		}
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4123
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4127
		{
			yyVAL.node = nil
		}
	case 1427:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4142
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			if yyDollar[1].node != nil {
				mergeStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			mergeStmt.Relation = yyDollar[4].node.(*ast.RangeVar)
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			if yyDollar[9].list != nil {
				// Convert NodeList to slice of MergeWhenClause
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					mergeStmt.MergeWhenClauses = append(mergeStmt.MergeWhenClauses, node.(*ast.MergeWhenClause))
				}
			}
			if yyDollar[10].list != nil {
				mergeStmt.ReturningList = yyDollar[10].list
			}
			yyVAL.stmt = mergeStmt
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4169
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4173
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1430:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4184
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			if yyDollar[8].node != nil {
				if defElem, ok := yyDollar[8].node.(*ast.DefElem); ok {
					copyStmt.Options = append(copyStmt.Options, defElem)
				}
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options = append(copyStmt.Options, node.(*ast.DefElem))
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1431:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:4208
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].node.(*ast.RangeVar),
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Convert column list NodeList to []string
			if yyDollar[4].list != nil {
				nodeList := yyDollar[4].list
				for _, node := range nodeList.Items {
					copyStmt.Attlist = append(copyStmt.Attlist, node.(*ast.String).SVal)
				}
			}
			// Handle legacy options - convert to []*DefElem
			if yyDollar[2].node != nil {
				copyStmt.Options = append(copyStmt.Options, yyDollar[2].node.(*ast.DefElem))
			}
			if yyDollar[8].node != nil {
				copyStmt.Options = append(copyStmt.Options, yyDollar[8].node.(*ast.DefElem))
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options = append(copyStmt.Options, node.(*ast.DefElem))
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4247
		{
			yyVAL.ival = 1
		}
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4248
		{
			yyVAL.ival = 0
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4252
		{
			yyVAL.ival = 1
		}
	case 1435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4253
		{
			yyVAL.ival = 0
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4257
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4258
		{
			yyVAL.str = ""
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4259
		{
			yyVAL.str = ""
		}
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4264
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "format",
				Arg:      ast.NewString("binary"),
			}
		}
	case 1440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4271
		{
			yyVAL.node = nil
		}
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4276
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "delimiter",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 1442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4283
		{
			yyVAL.node = nil
		}
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4287
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4288
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4293
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4301
		{
			yyVAL.list = nil
		}
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4308
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "format",
				Arg:      ast.NewString("binary"),
			}
		}
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4316
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "freeze",
				Arg:      ast.NewString("true"),
			}
		}
	case 1449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4324
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "delimiter",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 1450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4332
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "null",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4340
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "format",
				Arg:      ast.NewString("csv"),
			}
		}
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4348
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "header",
				Arg:      ast.NewString("true"),
			}
		}
	case 1453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4356
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "quote",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 1454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4364
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "escape",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4372
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_quote",
				Arg:      yyDollar[3].list,
			}
		}
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4380
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_quote",
				Arg:      &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}},
			}
		}
	case 1457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4388
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_not_null",
				Arg:      yyDollar[4].list,
			}
		}
	case 1458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4396
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_not_null",
				Arg:      &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}},
			}
		}
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4404
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_null",
				Arg:      yyDollar[3].list,
			}
		}
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4412
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_null",
				Arg:      &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}},
			}
		}
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4420
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "encoding",
				Arg:      ast.NewString(yyDollar[2].str),
			}
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4432
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4436
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4443
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  yyDollar[1].str,
				Arg:      yyDollar[2].node,
			}
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4453
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4454
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4455
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4456
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4457
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4458
		{
			yyVAL.node = nil
		}
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4463
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4467
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4473
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4477
		{
			yyVAL.str = "true"
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4478
		{
			yyVAL.str = "false"
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4479
		{
			yyVAL.str = "on"
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4480
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4484
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4485
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4489
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4490
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4492
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4497
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4501
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4502
		{
			yyVAL.node = nil
		}
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4506
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4507
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4508
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4509
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4510
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4511
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4512
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4513
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4517
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4518
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4519
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4523
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4524
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4525
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4526
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4527
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4532
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4537
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4549
		{
			yyVAL.ival = 1
		}
	case 1507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4550
		{
			yyVAL.ival = 0
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4574
		{
			yyVAL.ival = 1
		}
	case 1513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4575
		{
			yyVAL.ival = 0
		}
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4579
		{
			yyVAL.ival = 1
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4580
		{
			yyVAL.ival = 0
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4584
		{
			yyVAL.ival = 1
		}
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4585
		{
			yyVAL.ival = 0
		}
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4589
		{
			yyVAL.ival = 1
		}
	case 1519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4590
		{
			yyVAL.ival = 0
		}
	case 1520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4599
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4605
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4611
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4617
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1524:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4623
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4631
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1526:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4632
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4636
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4637
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4641
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4642
		{
			yyVAL.node = nil
		}
	case 1531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4647
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4662
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4671
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].node.(*ast.NodeList)
			yyVAL.node = mergeWhen
		}
	case 1534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4678
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].node.(*ast.NodeList)
			yyVAL.node = mergeWhen
		}
	case 1535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4685
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].node.(*ast.NodeList)
			yyVAL.node = mergeWhen
		}
	case 1536:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4698
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].node.(*ast.NodeList)
			yyVAL.node = mergeWhen
		}
	case 1537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4711
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4720
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1539:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4735
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			// Convert NodeList to []*ResTarget for SET clause
			if yyDollar[7].list != nil {
				nodeList := yyDollar[7].list
				for _, node := range nodeList.Items {
					onConflict.TargetList = append(onConflict.TargetList, node.(*ast.ResTarget))
				}
			}
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4751
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4759
		{
			yyVAL.onconflict = nil
		}
	case 1542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4770
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Convert NodeList to []*IndexElem
			if yyDollar[2].list != nil {
				nodeList := yyDollar[2].list
				for _, node := range nodeList.Items {
					indexElem := node.(*ast.IndexElem)
					infer.IndexElems = append(infer.IndexElems, indexElem)
				}
			}
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4785
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4792
		{
			yyVAL.node = nil
		}
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4803
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4807
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4814
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4818
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4825
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4830
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4835
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4843
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			if yyDollar[1].node != nil {
				indexElem.Collation = convertNodeToStringList(yyDollar[1].node)
			}
			if yyDollar[2].list != nil {
				indexElem.Opclass = convertNodeToStringList(yyDollar[2].list)
			}
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1553:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4858
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			if yyDollar[1].node != nil {
				indexElem.Collation = convertNodeToStringList(yyDollar[1].node)
			}
			if yyDollar[2].node != nil {
				indexElem.Opclass = convertNodeToStringList(yyDollar[2].node)
			}
			if yyDollar[3].list != nil {
				var relopts ast.Node = yyDollar[3].list
				indexElem.Opclassopts = convertToDefElemList(relopts)
			}
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4879
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4880
		{
			yyVAL.node = nil
		}
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4884
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4885
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4886
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4890
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4891
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4892
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4897
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4901
		{
			yyVAL.list = nil
		}
	case 1564:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:4922
		{
			rangeVar := yyDollar[4].node.(*ast.RangeVar)
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = convertToRangeVarList(yyDollar[8].node)
			createStmt.PartSpec = convertToPartitionSpec(yyDollar[9].node)
			createStmt.AccessMethod = convertToString(yyDollar[10].str)
			createStmt.Options = convertToNodeListPtr(yyDollar[11].node)
			createStmt.OnCommit = convertToOnCommitAction(yyDollar[12].ival)
			createStmt.TableSpaceName = convertToString(yyDollar[13].str)
			yyVAL.stmt = createStmt
		}
	case 1565:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:4938
		{
			rangeVar := yyDollar[7].node.(*ast.RangeVar)
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = convertToRangeVarList(yyDollar[11].node)
			createStmt.PartSpec = convertToPartitionSpec(yyDollar[12].node)
			createStmt.AccessMethod = convertToString(yyDollar[13].str)
			createStmt.Options = convertToNodeListPtr(yyDollar[14].node)
			createStmt.OnCommit = convertToOnCommitAction(yyDollar[15].ival)
			createStmt.TableSpaceName = convertToString(yyDollar[16].str)
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1566:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:4955
		{
			rangeVar := yyDollar[4].node.(*ast.RangeVar)
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = convertToTypeName(yyDollar[6].node)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = convertToPartitionSpec(yyDollar[8].node)
			createStmt.AccessMethod = convertToString(yyDollar[9].str)
			createStmt.Options = convertToNodeListPtr(yyDollar[10].node)
			createStmt.OnCommit = convertToOnCommitAction(yyDollar[11].ival)
			createStmt.TableSpaceName = convertToString(yyDollar[12].str)
			yyVAL.stmt = createStmt
		}
	case 1567:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:4971
		{
			rangeVar := yyDollar[7].node.(*ast.RangeVar)
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = convertToTypeName(yyDollar[9].node)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = convertToPartitionSpec(yyDollar[11].node)
			createStmt.AccessMethod = convertToString(yyDollar[12].str)
			createStmt.Options = convertToNodeListPtr(yyDollar[13].node)
			createStmt.OnCommit = convertToOnCommitAction(yyDollar[14].ival)
			createStmt.TableSpaceName = convertToString(yyDollar[15].str)
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1568:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:4988
		{
			rangeVar := yyDollar[4].node.(*ast.RangeVar)
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = []*ast.RangeVar{yyDollar[7].node.(*ast.RangeVar)}
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = convertToPartitionSpec(yyDollar[10].node)
			createStmt.AccessMethod = convertToString(yyDollar[11].str)
			createStmt.Options = convertToNodeListPtr(yyDollar[12].node)
			createStmt.OnCommit = convertToOnCommitAction(yyDollar[13].ival)
			createStmt.TableSpaceName = convertToString(yyDollar[14].str)
			yyVAL.stmt = createStmt
		}
	case 1569:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:5005
		{
			rangeVar := yyDollar[7].node.(*ast.RangeVar)
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = []*ast.RangeVar{yyDollar[10].node.(*ast.RangeVar)}
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = convertToPartitionSpec(yyDollar[13].node)
			createStmt.AccessMethod = convertToString(yyDollar[14].str)
			createStmt.Options = convertToNodeListPtr(yyDollar[15].node)
			createStmt.OnCommit = convertToOnCommitAction(yyDollar[16].ival)
			createStmt.TableSpaceName = convertToString(yyDollar[17].str)
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5023
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5024
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5025
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5026
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5027
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5028
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5029
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5030
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5034
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5035
		{
			yyVAL.list = nil
		}
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5040
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5045
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5052
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5053
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5054
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5059
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].node.(*ast.RangeVar), convertToTableLikeOption(yyDollar[3].ival))
		}
	case 1586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5066
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5070
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5074
		{
			yyVAL.ival = 0
		}
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5080
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5081
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5082
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5083
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5084
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5085
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5086
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5087
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5088
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5089
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5094
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5095
		{
			yyVAL.str = "default"
		}
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5099
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5100
		{
			yyVAL.str = ""
		}
	case 1603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5104
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5105
		{
			yyVAL.str = "default"
		}
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5109
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5110
		{
			yyVAL.str = ""
		}
	case 1607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5115
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5116
		{
			yyVAL.list = nil
		}
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5121
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5127
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5134
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5135
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5140
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = convertToConstraintList(yyDollar[2].list)
			yyVAL.node = colDef
		}
	case 1614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5146
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = convertToConstraintList(yyDollar[4].list)
			yyVAL.node = colDef
		}
	case 1615:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5157
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			if hashOptions := convertToNodeListPtr(yyDollar[5].node); hashOptions != nil {
				for _, optNode := range hashOptions.Items {
					if defElem, ok := optNode.(*ast.DefElem); ok {
						if defElem.Defname == "modulus" {
							if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
								if integerVal, ok := intVal.Val.(*ast.Integer); ok {
									hashSpec.Modulus = integerVal.IVal
								}
							}
						} else if defElem.Defname == "remainder" {
							if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
								if integerVal, ok := intVal.Val.(*ast.Integer); ok {
									hashSpec.Remainder = integerVal.IVal
								}
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1616:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5187
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			if exprList := convertToNodeListPtr(yyDollar[5].node); exprList != nil {
				listSpec.ListDatums = []*ast.NodeList{exprList}
			}
			yyVAL.partboundspec = listSpec
		}
	case 1617:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5198
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = convertToNodeListPtr(yyDollar[5].node)
			rangeSpec.HighDatums = convertToNodeListPtr(yyDollar[9].node)
			yyVAL.partboundspec = rangeSpec
		}
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5208
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5217
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5224
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 1621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5228
		{
			if nodeList := convertToNodeListPtr(yyDollar[1].node); nodeList != nil {
				nodeList.Append(yyDollar[3].node)
				yyVAL.node = nodeList
			}
		}
	case 1622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5237
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5238
		{
			yyVAL.list = nil
		}
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5243
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5247
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5255
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5261
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5266
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1629:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5271
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), 0)
			colDef.StorageName = convertToString(yyDollar[3].str)
			colDef.Compression = convertToString(yyDollar[4].str)
			colDef.Fdwoptions = convertToNodeListPtr(yyDollar[5].list)
			colDef.Constraints = convertToConstraintList(yyDollar[6].list)
			yyVAL.node = colDef
		}
	case 1630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5283
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5288
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5295
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5300
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5301
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5303
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(convertToNodeListPtr(yyDollar[2].node))
			yyVAL.node = collateClause
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5316
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5321
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5326
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5331
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5339
		{
			yyVAL.bval = true
		}
	case 1641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5340
		{
			yyVAL.bval = false
		}
	case 1642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5341
		{
			yyVAL.bval = true
		}
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5345
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5346
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5351
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5353
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5358
		{
			yyVAL.node = ast.NewDefElem("restart", nil)
		}
	case 1648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5362
		{
			yyVAL.node = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5366
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			if defElem, ok := yyDollar[2].node.(*ast.DefElem); ok {
				if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
					// For now, we'll just skip the error as we don't have AddError method
					// In PostgreSQL, this would raise an error
				}
			}
			yyVAL.node = yyDollar[2].node
		}
	case 1650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5378
		{
			yyVAL.node = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5384
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5385
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5390
		{
			yyVAL.node = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5394
		{
			yyVAL.node = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5398
		{
			yyVAL.node = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5402
		{
			yyVAL.node = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5406
		{
			yyVAL.node = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5410
		{
			yyVAL.node = ast.NewDefElem("logged", nil)
		}
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5414
		{
			yyVAL.node = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5418
		{
			yyVAL.node = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5422
		{
			yyVAL.node = ast.NewDefElem("maxvalue", nil)
		}
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5426
		{
			yyVAL.node = ast.NewDefElem("minvalue", nil)
		}
	case 1663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5430
		{
			yyVAL.node = ast.NewDefElem("owned_by", yyDollar[3].node)
		}
	case 1664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5434
		{
			yyVAL.node = ast.NewDefElem("sequence_name", yyDollar[3].node)
		}
	case 1665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5438
		{
			yyVAL.node = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5442
		{
			yyVAL.node = ast.NewDefElem("restart", nil)
		}
	case 1667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5446
		{
			yyVAL.node = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5450
		{
			yyVAL.node = ast.NewDefElem("unlogged", nil)
		}
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5456
		{
		}
	case 1670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5457
		{
		}
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5461
		{
		}
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5462
		{
		}
	case 1673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5463
		{
		}
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5468
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5475
		{
			yyVAL.bval = false
		}
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5479
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5480
		{
			yyVAL.list = nil
		}
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5485
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5489
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5493
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = []string{} // Will be filled by the parser
			constraint.NullsNotDistinct = !convertToBool(yyDollar[2].bval)
			constraint.Options = convertDefElemListToNodeList(convertToDefElemList(yyDollar[3].list))
			constraint.Indexspace = convertToString(yyDollar[4].str)
			yyVAL.node = constraint
		}
	case 1681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5502
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = []string{} // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1682:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5508
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5514
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 1684:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5520
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].node.(*ast.RangeVar)
			constraint.PkAttrs = convertNodeToStringList(yyDollar[3].list)
			constraint.FkMatchtype = convertToMatchType(yyDollar[4].byt)
			if actions, ok := yyDollar[5].node.(*ast.KeyActions); ok && actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
			}
			yyVAL.node = constraint
		}
	case 1685:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5532
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = convertDefElemListToNodeList(convertToDefElemList(yyDollar[5].list))
			yyVAL.node = constraint
		}
	case 1686:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5539
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5549
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5554
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1689:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5559
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(convertToInt(yyDollar[5].ival), constraint)
			yyVAL.node = constraint
		}
	case 1690:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5567
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !convertToBool(yyDollar[2].bval)
			constraint.Keys = convertNodeToStringList(yyDollar[4].list)
			constraint.Including = convertAstStrListToStringSlice(yyDollar[6].astStrList)
			constraint.Options = convertDefElemListToNodeList(convertToDefElemList(yyDollar[7].list))
			constraint.Indexspace = convertToString(yyDollar[8].str)
			processConstraintAttributeSpec(convertToInt(yyDollar[9].ival), constraint)
			yyVAL.node = constraint
		}
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5578
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = convertToString(yyDollar[2].str)
			// Clear lists for existing index
			constraint.Keys = []string{}
			constraint.Including = []string{}
			processConstraintAttributeSpec(convertToInt(yyDollar[3].ival), constraint)
			yyVAL.node = constraint
		}
	case 1692:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5589
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = convertNodeToStringList(yyDollar[4].list)
			constraint.Including = convertAstStrListToStringSlice(yyDollar[6].astStrList)
			constraint.Options = convertDefElemListToNodeList(convertToDefElemList(yyDollar[7].list))
			constraint.Indexspace = convertToString(yyDollar[8].str)
			processConstraintAttributeSpec(convertToInt(yyDollar[9].ival), constraint)
			yyVAL.node = constraint
		}
	case 1693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5599
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = convertToString(yyDollar[3].str)
			// Clear lists for existing index
			constraint.Keys = []string{}
			constraint.Including = []string{}
			processConstraintAttributeSpec(convertToInt(yyDollar[4].ival), constraint)
			yyVAL.node = constraint
		}
	case 1694:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5610
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = convertNodeToStringList(yyDollar[4].list)
			constraint.Pktable = yyDollar[7].node.(*ast.RangeVar)
			constraint.PkAttrs = convertNodeToStringList(yyDollar[8].list)
			constraint.FkMatchtype = convertToMatchType(yyDollar[9].byt)
			if actions, ok := yyDollar[10].node.(*ast.KeyActions); ok && actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
			}
			processConstraintAttributeSpec(convertToInt(yyDollar[11].ival), constraint)
			yyVAL.node = constraint
		}
	case 1695:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5626
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = convertToString(yyDollar[2].str)
			constraint.Exclusions = convertToNodeListPtr(yyDollar[4].list)
			constraint.Including = convertAstStrListToStringSlice(yyDollar[6].astStrList)
			constraint.Options = convertDefElemListToNodeList(convertToDefElemList(yyDollar[7].list))
			constraint.Indexspace = convertToString(yyDollar[8].str)
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(convertToInt(yyDollar[10].ival), constraint)
			yyVAL.node = constraint
		}
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5640
		{
			yyVAL.bval = true
		}
	case 1697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5641
		{
			yyVAL.bval = false
		}
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5647
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5653
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5661
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, ast.NewString(convertStringSliceToString(yyDollar[3].astStrList)))
		}
	case 1701:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5666
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, ast.NewString(convertStringSliceToString(yyDollar[5].astStrList)))
		}
	case 1702:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5674
		{
			yyVAL.astStrList = convertToStringList(yyDollar[3].list)
		}
	case 1703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5678
		{
			yyVAL.astStrList = nil
		}
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5685
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 1705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5689
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5693
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5697
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5704
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].node.(*ast.KeyAction)
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.node = n
		}
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5714
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].node.(*ast.KeyAction)
			yyVAL.node = n
		}
	case 1710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5724
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].node.(*ast.KeyAction)
			n.DeleteAction = yyDollar[2].node.(*ast.KeyAction)
			yyVAL.node = n
		}
	case 1711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5731
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].node.(*ast.KeyAction)
			n.DeleteAction = yyDollar[1].node.(*ast.KeyAction)
			yyVAL.node = n
		}
	case 1712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5738
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.node = n
		}
	case 1713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5753
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].node.(*ast.KeyAction)
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.node = keyAction
		}
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5766
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5773
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.node = n
		}
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5780
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.node = n
		}
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5787
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.node = n
		}
	case 1718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5794
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.node = n
		}
	case 1719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5801
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.node = n
		}
	case 1720:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5810
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5811
		{
			yyVAL.node = nil
		}
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5815
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5816
		{
			yyVAL.node = nil
		}
	case 1724:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5821
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), convertToNodeListPtr(yyDollar[5].list))
			yyVAL.node = partitionSpec
		}
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5829
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5834
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5842
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = convertToStringList(yyDollar[2].node)
			partElem.Opclass = convertToStringList(yyDollar[3].list)
			yyVAL.node = partElem
		}
	case 1728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5849
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = convertToStringList(yyDollar[2].node)
			partElem.Opclass = convertToStringList(yyDollar[3].list)
			yyVAL.node = partElem
		}
	case 1729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5856
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = convertToStringList(yyDollar[4].node)
			partElem.Opclass = convertToStringList(yyDollar[5].list)
			yyVAL.node = partElem
		}
	case 1730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5865
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5866
		{
			yyVAL.str = ""
		}
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5870
		{
			yyVAL.ival = int(ast.ONCOMMIT_DROP)
		}
	case 1733:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5871
		{
			yyVAL.ival = int(ast.ONCOMMIT_DELETE_ROWS)
		}
	case 1734:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5872
		{
			yyVAL.ival = int(ast.ONCOMMIT_PRESERVE_ROWS)
		}
	case 1735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5873
		{
			yyVAL.ival = int(ast.ONCOMMIT_NOOP)
		}
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5877
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5878
		{
			yyVAL.str = ""
		}
	case 1738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5882
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5883
		{
			yyVAL.str = ""
		}
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5887
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1741:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:5900
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].node.(*ast.RangeVar), convertToIndexElemList(yyDollar[10].list))
			indexStmt.Unique = convertToBool(yyDollar[2].bval)
			indexStmt.Concurrent = convertToBool(yyDollar[4].ival)
			indexStmt.AccessMethod = convertToString(yyDollar[8].str)
			indexStmt.IndexIncludingParams = convertToIndexElemList(yyDollar[12].list)
			indexStmt.NullsNotDistinct = !convertToBool(yyDollar[13].bval)
			indexStmt.Options = convertToDefElemList(yyDollar[14].list)
			indexStmt.TableSpace = convertToString(yyDollar[15].str)
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 1742:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:5915
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].node.(*ast.RangeVar), convertToIndexElemList(yyDollar[13].list))
			indexStmt.Unique = convertToBool(yyDollar[2].bval)
			indexStmt.Concurrent = convertToBool(yyDollar[4].ival)
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = convertToString(yyDollar[11].str)
			indexStmt.IndexIncludingParams = convertToIndexElemList(yyDollar[15].list)
			indexStmt.NullsNotDistinct = !convertToBool(yyDollar[16].bval)
			indexStmt.Options = convertToDefElemList(yyDollar[17].list)
			indexStmt.TableSpace = convertToString(yyDollar[18].str)
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5931
		{
			yyVAL.bval = true
		}
	case 1744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5932
		{
			yyVAL.bval = false
		}
	case 1745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5936
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5937
		{
			yyVAL.str = "btree"
		}
	case 1747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5941
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5942
		{
			yyVAL.list = nil
		}
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5947
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5952
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5960
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5961
		{
			yyVAL.list = nil
		}
	case 1753:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5973
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].node.(*ast.RangeVar), convertToAlterTableCmdList(yyDollar[4].list))
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1754:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5979
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].node.(*ast.RangeVar), convertToAlterTableCmdList(yyDollar[6].list))
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1755:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5986
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].node.(*ast.RangeVar), convertToAlterTableCmdList(yyDollar[4].list))
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1756:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5992
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].node.(*ast.RangeVar), convertToAlterTableCmdList(yyDollar[6].list))
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1757:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5999
		{
			// Index partition attachment - dedicated rule
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].node.(*ast.RangeVar), []*ast.AlterTableCmd{yyDollar[4].node.(*ast.AlterTableCmd)})
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1758:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6006
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].node.(*ast.RangeVar), convertToAlterTableCmdList(yyDollar[4].list))
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 1759:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6012
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].node.(*ast.RangeVar), convertToAlterTableCmdList(yyDollar[6].list))
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1760:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6019
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].node.(*ast.RangeVar), convertToAlterTableCmdList(yyDollar[4].list))
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 1761:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6025
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].node.(*ast.RangeVar), convertToAlterTableCmdList(yyDollar[6].list))
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1762:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6032
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].node.(*ast.RangeVar), convertToAlterTableCmdList(yyDollar[5].list))
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 1763:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6038
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].node.(*ast.RangeVar), convertToAlterTableCmdList(yyDollar[7].list))
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1764:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6045
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].node.(*ast.RangeVar), convertToAlterTableCmdList(yyDollar[5].list))
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1765:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6051
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].node.(*ast.RangeVar), convertToAlterTableCmdList(yyDollar[7].list))
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1766:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6058
		{
			// Partition commands - dedicated rule for partition-only operations
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].node.(*ast.RangeVar), []*ast.AlterTableCmd{yyDollar[4].node.(*ast.AlterTableCmd)})
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1767:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6065
		{
			// Partition commands with IF EXISTS
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].node.(*ast.RangeVar), []*ast.AlterTableCmd{yyDollar[6].node.(*ast.AlterTableCmd)})
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1768:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6073
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1769:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6080
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = convertToNodeListPtr(yyDollar[9].list)
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1770:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6088
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1771:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6095
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = convertToNodeListPtr(yyDollar[9].list)
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1772:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6103
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 1773:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6110
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = convertToNodeListPtr(yyDollar[10].list)
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6121
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6126
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6134
		{
			yyVAL.bval = true
		}
	case 1777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6135
		{
			yyVAL.bval = false
		}
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6140
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6145
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6153
		{
			roleSpec := yyDollar[1].node.(*ast.RoleSpec)

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6184
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.node = roleSpec
		}
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6207
		{
			yyVAL.node = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6214
		{
			yyVAL.node = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6221
		{
			yyVAL.node = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 1785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6232
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1786:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6239
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6246
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1788:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6253
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1789:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6260
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 1790:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6265
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 1791:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6270
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 1792:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6275
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 1793:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6280
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 1794:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6285
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1795:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6292
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 1796:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6297
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 1797:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6304
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1798:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6309
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1799:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6314
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1800:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6319
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1801:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6324
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1802:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6334
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 1803:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6339
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1804:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6346
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1805:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6353
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = convertToDropBehavior(yyDollar[6].ival)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1806:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6361
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = convertToDropBehavior(yyDollar[4].ival)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1807:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6372
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].node.(*ast.TypeName), 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 1808:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6382
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 1809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6387
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 1810:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6392
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6403
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 1812:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6408
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = convertToDropBehavior(yyDollar[6].ival)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1813:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6416
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = convertToDropBehavior(yyDollar[4].ival)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6424
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 1815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6429
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 1816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6434
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6439
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 1818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6444
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 1819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6449
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 1820:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6454
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 1821:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6459
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 1822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6464
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 1823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6469
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 1824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6474
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 1825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6479
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 1826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6484
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 1827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6489
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 1828:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6494
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 1829:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6499
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 1830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6504
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 1831:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6509
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].node)
		}
	case 1832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6514
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].node)
		}
	case 1833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6519
		{
			typeName := ast.NewTypeName(nodeListToStringSlice(yyDollar[2].node.(*ast.NodeList)))
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 1834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6525
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 1835:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6530
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].node.(*ast.RoleSpec)
			yyVAL.node = cmd
		}
	case 1836:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6537
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 1837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6542
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 1838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6547
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 1839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6552
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 1840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6557
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 1841:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6562
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 1842:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6567
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 1843:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6572
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 1844:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6577
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6581
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 1846:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6589
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].node.(*ast.RangeVar), yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1847:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6597
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].node.(*ast.RangeVar), nil, yyDollar[4].ival != 0, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1848:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6604
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].node.(*ast.RangeVar), nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6615
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].node.(*ast.RangeVar), nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6624
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6625
		{
			yyVAL.node = nil
		}
	case 1852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6629
		{
		}
	case 1853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6630
		{
		}
	case 1854:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6641
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = convertToObjectType(yyDollar[2].objType)
			n.MissingOk = true
			n.Objects = yyDollar[5].node.(*ast.NodeList)
			n.Behavior = convertToDropBehavior(yyDollar[6].ival)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1855:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6654
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = convertToObjectType(yyDollar[2].objType)
			n.MissingOk = false
			n.Objects = yyDollar[3].node.(*ast.NodeList)
			n.Behavior = convertToDropBehavior(yyDollar[4].ival)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1856:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6667
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = convertToObjectType(yyDollar[2].objType)
			n.MissingOk = true
			n.Objects = yyDollar[5].node.(*ast.NodeList)
			n.Behavior = convertToDropBehavior(yyDollar[6].ival)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1857:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6680
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = convertToObjectType(yyDollar[2].objType)
			n.MissingOk = false
			n.Objects = yyDollar[3].node.(*ast.NodeList)
			n.Behavior = convertToDropBehavior(yyDollar[4].ival)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1858:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6693
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = convertToObjectType(yyDollar[2].objType)
			objects := yyDollar[5].node.(*ast.NodeList)
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = convertToDropBehavior(yyDollar[6].ival)
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1859:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6708
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = convertToObjectType(yyDollar[2].objType)
			objects := yyDollar[7].node.(*ast.NodeList)
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = convertToDropBehavior(yyDollar[8].ival)
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1860:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6723
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = convertToDropBehavior(yyDollar[4].ival)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1861:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6736
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = convertToDropBehavior(yyDollar[6].ival)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1862:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6749
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = convertToDropBehavior(yyDollar[4].ival)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1863:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6762
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = convertToDropBehavior(yyDollar[6].ival)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1864:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6775
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].node.(*ast.NodeList)
			n.Behavior = convertToDropBehavior(yyDollar[5].ival)
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1865:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6788
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].node.(*ast.NodeList)
			n.Behavior = convertToDropBehavior(yyDollar[7].ival)
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6804
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 1867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6805
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6806
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 1869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6807
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 1870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6808
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 1871:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6809
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 1872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6810
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 1873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6811
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6812
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 1875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6813
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 1876:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6814
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 1877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6815
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 1878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6816
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 1879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6826
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6827
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6828
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6829
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6830
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6843
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1885:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6848
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].astStrList,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.node = objWithArgs
		}
	case 1886:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6862
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].astStrList,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.node = objWithArgs
		}
	case 1887:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6876
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1888:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6887
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1889:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6898
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1890:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6909
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1891:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6920
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1892:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6931
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].node,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1893:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6943
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1894:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6954
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1895:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6965
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1896:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6976
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1897:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6987
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			if qualNameList, ok := yyDollar[4].node.(*ast.NodeList); ok {
				for _, item := range qualNameList.Items {
					list.Append(item)
				}
			} else {
				list.Append(yyDollar[4].node)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1898:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7008
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			if qualNameList, ok := yyDollar[4].node.(*ast.NodeList); ok {
				for _, item := range qualNameList.Items {
					list.Append(item)
				}
			} else {
				list.Append(yyDollar[4].node)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1899:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7029
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].node.(*ast.RangeVar),
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1900:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7041
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].node.(*ast.RangeVar),
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1901:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7053
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1902:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7064
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1903:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7075
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1904:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7086
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1905:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7097
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1906:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7108
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1907:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7119
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].node.(*ast.RangeVar),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1908:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7130
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].node.(*ast.RangeVar),
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1909:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7141
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].node.(*ast.RangeVar),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1910:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7152
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].node.(*ast.RangeVar),
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1911:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7163
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].node.(*ast.RangeVar),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1912:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7174
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].node.(*ast.RangeVar),
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1913:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7185
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].node.(*ast.RangeVar),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1914:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7196
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].node.(*ast.RangeVar),
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1915:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7207
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].node.(*ast.RangeVar),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1916:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7218
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].node.(*ast.RangeVar),
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1917:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7229
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].node.(*ast.RangeVar),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1918:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7240
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].node.(*ast.RangeVar),
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1919:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7251
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].node.(*ast.RangeVar),
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1920:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7264
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].node.(*ast.RangeVar),
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1921:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7277
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].node.(*ast.RangeVar),
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1922:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7290
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].node.(*ast.RangeVar),
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1923:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7303
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].node.(*ast.RangeVar),
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1924:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7316
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].node.(*ast.RangeVar),
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1925:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7329
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].node.(*ast.RangeVar),
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1926:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7341
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].node.(*ast.RangeVar),
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1927:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7353
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].node.(*ast.RangeVar),
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1928:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7366
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].node.(*ast.RangeVar),
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1929:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7379
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].node.(*ast.RangeVar),
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1930:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7391
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].node.(*ast.RangeVar),
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1931:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7403
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1932:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7414
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1933:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7425
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1934:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7436
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1935:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7447
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1936:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7458
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].node,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1937:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7469
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].node,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1938:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7480
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].node,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1939:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7491
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].node,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1940:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7502
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1941:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7513
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     qualifiedNameToRangeVar(yyDollar[3].node),
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].ival),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1942:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7535
		{
			yyVAL.ival = 0
		}
	case 1943:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7537
		{
			// Combine constraint attribute bits
			newspec := convertToInt(yyDollar[1].ival) | convertToInt(yyDollar[2].ival)

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 1944:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7551
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 1945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7552
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 1946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7553
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 1947:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7554
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 1948:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7555
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 1949:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7556
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 1950:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7560
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7565
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7570
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7578
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 1954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7582
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 1955:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7586
		{
			yyVAL.node = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 1956:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7590
		{
			yyVAL.node = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 1957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7596
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7597
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7598
		{
			nodeList := ast.NewNodeList()
			for _, str := range yyDollar[1].astStrList {
				nodeList.Append(str)
			}
			yyVAL.node = nodeList
		}
	case 1960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7605
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7606
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7607
		{
			yyVAL.node = ast.NewString("none")
		}
	case 1963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7611
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1964:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7612
		{
			yyVAL.list = nil
		}
	case 1965:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7616
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1966:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7617
		{
			yyVAL.node = nil
		}
	case 1967:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7621
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7626
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1969:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7631
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7639
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1971:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7643
		{
			elem := yyDollar[2].node.(*ast.DefElem)
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.node = elem
		}
	case 1972:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7649
		{
			elem := yyDollar[2].node.(*ast.DefElem)
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.node = elem
		}
	case 1973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7655
		{
			yyVAL.node = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 1974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7661
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7662
		{
			yyVAL.str = ""
		}
	case 1976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7666
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 1977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7667
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 1978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7668
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 1979:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7669
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 1980:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7673
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7678
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1982:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7683
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7690
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 1984:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7691
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
