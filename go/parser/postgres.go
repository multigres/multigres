// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:35
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node     ast.Node
	stmt     ast.Stmt
	stmtList []ast.Stmt
	list     *ast.NodeList

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const LATERAL = 57428
const VALUES = 57429
const SEARCH = 57430
const BREADTH = 57431
const DEPTH = 57432
const CYCLE = 57433
const FIRST_P = 57434
const LAST_P = 57435
const SET = 57436
const ASC = 57437
const DESC = 57438
const INSERT = 57439
const UPDATE = 57440
const DELETE_P = 57441
const MERGE = 57442
const RETURNING = 57443
const CONFLICT = 57444
const OVERRIDING = 57445
const USER = 57446
const SYSTEM_P = 57447
const MATCHED = 57448
const THEN = 57449
const SOURCE = 57450
const TARGET = 57451
const DO = 57452
const NOTHING = 57453
const COPY = 57454
const PROGRAM = 57455
const STDIN = 57456
const STDOUT = 57457
const BINARY = 57458
const FREEZE = 57459
const CONSTRAINT = 57460
const VERBOSE = 57461
const ANALYZE = 57462
const CURRENT_P = 57463
const CURSOR = 57464
const OF = 57465
const COLUMNS = 57466
const ORDINALITY = 57467
const XMLTABLE = 57468
const JSON_TABLE = 57469
const ROWS = 57470
const PATH = 57471
const PASSING = 57472
const FOR = 57473
const NESTED = 57474
const REF_P = 57475
const XMLNAMESPACES = 57476
const ARRAY = 57477
const ERROR = 57478
const ERROR_P = 57479
const EMPTY = 57480
const EMPTY_P = 57481
const OBJECT_P = 57482
const WRAPPER = 57483
const CONDITIONAL = 57484
const UNCONDITIONAL = 57485
const QUOTES = 57486
const OMIT = 57487
const KEEP = 57488
const SCALAR = 57489
const STRING_P = 57490
const ENCODING = 57491
const DELIMITER = 57492
const DELIMITERS = 57493
const HEADER_P = 57494
const QUOTE = 57495
const FORCE = 57496
const CSV = 57497
const VALUE_P = 57498
const JSON_QUERY = 57499
const JSON_VALUE = 57500
const JSON_SERIALIZE = 57501
const JSON_OBJECT = 57502
const JSON_ARRAY = 57503
const JSON_OBJECTAGG = 57504
const JSON_ARRAYAGG = 57505
const JSON_EXISTS = 57506
const JSON_SCALAR = 57507
const FORMAT = 57508
const JSON = 57509
const UTF8 = 57510
const WITHOUT = 57511
const BIT = 57512
const NUMERIC = 57513
const INTEGER = 57514
const SMALLINT = 57515
const BIGINT = 57516
const REAL = 57517
const FLOAT_P = 57518
const DOUBLE_P = 57519
const PRECISION = 57520
const CHARACTER = 57521
const CHAR_P = 57522
const VARCHAR = 57523
const NATIONAL = 57524
const NCHAR = 57525
const VARYING = 57526
const TIMESTAMP = 57527
const INTERVAL = 57528
const INT_P = 57529
const DECIMAL_P = 57530
const DEC = 57531
const BOOLEAN_P = 57532
const VARIADIC = 57533
const ABORT_P = 57534
const ABSENT = 57535
const ABSOLUTE_P = 57536
const ACCESS = 57537
const ACTION = 57538
const ADD_P = 57539
const ADMIN = 57540
const AFTER = 57541
const AGGREGATE = 57542
const ALSO = 57543
const ALWAYS = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSERTION = 57547
const ASSIGNMENT = 57548
const ATOMIC = 57549
const ATTACH = 57550
const ATTRIBUTE = 57551
const AUTHORIZATION = 57552
const BACKWARD = 57553
const BEFORE = 57554
const BEGIN_P = 57555
const CACHE = 57556
const CALL = 57557
const CALLED = 57558
const CASCADED = 57559
const CATALOG_P = 57560
const CHAIN = 57561
const CHARACTERISTICS = 57562
const CHECKPOINT = 57563
const CLASS = 57564
const CLOSE = 57565
const CLUSTER = 57566
const COALESCE = 57567
const COLLATION = 57568
const COMMENT = 57569
const COMMENTS = 57570
const COMMIT = 57571
const COMMITTED = 57572
const COMPRESSION = 57573
const CONFIGURATION = 57574
const CONNECTION = 57575
const CONSTRAINTS = 57576
const CONTENT_P = 57577
const CONTINUE_P = 57578
const CONVERSION_P = 57579
const COST = 57580
const CUBE = 57581
const CURRENT_CATALOG = 57582
const CURRENT_DATE = 57583
const CURRENT_ROLE = 57584
const CURRENT_SCHEMA = 57585
const CURRENT_TIME = 57586
const CURRENT_TIMESTAMP = 57587
const CURRENT_USER = 57588
const DATA_P = 57589
const DATABASE = 57590
const DAY_P = 57591
const DEALLOCATE = 57592
const DECLARE = 57593
const DEFAULTS = 57594
const DEFERRABLE = 57595
const DEFERRED = 57596
const DEFINER = 57597
const DEPENDS = 57598
const DETACH = 57599
const DICTIONARY = 57600
const DISABLE_P = 57601
const DISCARD = 57602
const DOCUMENT_P = 57603
const DOMAIN_P = 57604
const EACH = 57605
const ELSE = 57606
const ENABLE_P = 57607
const ENCRYPTED = 57608
const END_P = 57609
const ENUM_P = 57610
const EVENT = 57611
const EXCEPT = 57612
const EXCLUDE = 57613
const EXCLUDING = 57614
const EXCLUSIVE = 57615
const EXECUTE = 57616
const EXPLAIN = 57617
const EXPRESSION = 57618
const EXTENSION = 57619
const EXTERNAL = 57620
const EXTRACT = 57621
const FAMILY = 57622
const FETCH = 57623
const FILTER = 57624
const FINALIZE = 57625
const FOLLOWING = 57626
const FOREIGN = 57627
const FORWARD = 57628
const FUNCTION = 57629
const FUNCTIONS = 57630
const GENERATED = 57631
const GLOBAL = 57632
const GRANT = 57633
const GRANTED = 57634
const GREATEST = 57635
const GROUPING = 57636
const GROUPS = 57637
const HANDLER = 57638
const HOLD = 57639
const HOUR_P = 57640
const IDENTITY_P = 57641
const IMMEDIATE = 57642
const IMMUTABLE = 57643
const IMPLICIT_P = 57644
const IMPORT_P = 57645
const INCLUDE = 57646
const INCLUDING = 57647
const INCREMENT = 57648
const INDENT = 57649
const INDEX = 57650
const INDEXES = 57651
const INHERIT = 57652
const INHERITS = 57653
const INITIALLY = 57654
const INLINE_P = 57655
const INPUT_P = 57656
const INSENSITIVE = 57657
const INSTEAD = 57658
const INTERSECT = 57659
const INVOKER = 57660
const ISOLATION = 57661
const KEYS = 57662
const LABEL = 57663
const LANGUAGE = 57664
const LARGE_P = 57665
const LATERAL_P = 57666
const LEAKPROOF = 57667
const LEAST = 57668
const LEADING = 57669
const LEVEL = 57670
const LISTEN = 57671
const LOAD = 57672
const LOCALTIME = 57673
const LOCALTIMESTAMP = 57674
const LOCATION = 57675
const LOCK_P = 57676
const LOCKED = 57677
const LOGGED = 57678
const MAPPING = 57679
const MATCH = 57680
const MAXVALUE = 57681
const MERGE_ACTION = 57682
const METHOD = 57683
const MINUTE_P = 57684
const MINVALUE = 57685
const MODE = 57686
const MONTH_P = 57687
const MOVE = 57688
const NAME_P = 57689
const NAMES = 57690
const NEW = 57691
const NEXT = 57692
const NFC = 57693
const NFD = 57694
const NFKC = 57695
const NFKD = 57696
const NO = 57697
const NONE = 57698
const NORMALIZE = 57699
const NORMALIZED = 57700
const NOTIFY = 57701
const NOWAIT = 57702
const NULLIF = 57703
const OUT_P = 57704
const OVERLAY = 57705
const OVERLAPS = 57706
const OWNED = 57707
const OWNER = 57708
const PARALLEL = 57709
const PARAMETER = 57710
const PARSER = 57711
const PARTIAL = 57712
const PARTITION = 57713
const PASSWORD = 57714
const PLACING = 57715
const PLAN = 57716
const PLANS = 57717
const POLICY = 57718
const POSITION = 57719
const PRECEDING = 57720
const PREPARE = 57721
const PREPARED = 57722
const PRESERVE = 57723
const PRIMARY = 57724
const PRIOR = 57725
const PRIVILEGES = 57726
const PROCEDURAL = 57727
const PROCEDURE = 57728
const PROCEDURES = 57729
const PUBLICATION = 57730
const RANGE = 57731
const READ = 57732
const REASSIGN = 57733
const RECHECK = 57734
const REFERENCES = 57735
const REFERENCING = 57736
const REFRESH = 57737
const REINDEX = 57738
const RELATIVE_P = 57739
const RELEASE = 57740
const RENAME = 57741
const REPEATABLE = 57742
const REPLICA = 57743
const RESET = 57744
const RESTART = 57745
const RETURN = 57746
const RETURNS = 57747
const REVOKE = 57748
const ROLE = 57749
const ROLLBACK = 57750
const ROLLUP = 57751
const ROUTINE = 57752
const ROUTINES = 57753
const ROW = 57754
const RULE = 57755
const SAVEPOINT = 57756
const SCHEMA = 57757
const SCHEMAS = 57758
const SCROLL = 57759
const SECOND_P = 57760
const SECURITY = 57761
const SEQUENCE = 57762
const SEQUENCES = 57763
const SERIALIZABLE = 57764
const SERVER = 57765
const SESSION = 57766
const SESSION_USER = 57767
const SETS = 57768
const SETOF = 57769
const SHARE = 57770
const SHOW = 57771
const SIMPLE = 57772
const SKIP = 57773
const SNAPSHOT = 57774
const SOME = 57775
const SQL_P = 57776
const STABLE = 57777
const STANDALONE_P = 57778
const START = 57779
const STATEMENT = 57780
const STATISTICS = 57781
const STORAGE = 57782
const STORED = 57783
const STRICT_P = 57784
const STRIP_P = 57785
const SUBSCRIPTION = 57786
const SUBSTRING = 57787
const SUPPORT = 57788
const SYSID = 57789
const SYSTEM_USER = 57790
const TABLES = 57791
const TABLESPACE = 57792
const TABLESAMPLE = 57793
const TEMP = 57794
const TEMPLATE = 57795
const TEMPORARY = 57796
const TEXT_P = 57797
const TIES = 57798
const TRAILING = 57799
const TRANSACTION = 57800
const TRANSFORM = 57801
const TREAT = 57802
const TRIGGER = 57803
const TRIM = 57804
const TRUNCATE = 57805
const TRUSTED = 57806
const TYPE_P = 57807
const TYPES_P = 57808
const UESCAPE = 57809
const UNBOUNDED = 57810
const UNCOMMITTED = 57811
const UNENCRYPTED = 57812
const UNION = 57813
const UNIQUE = 57814
const UNLISTEN = 57815
const UNLOGGED = 57816
const UNTIL = 57817
const VACUUM = 57818
const VALID = 57819
const VALIDATE = 57820
const VALIDATOR = 57821
const VERSION_P = 57822
const VIEW = 57823
const VIEWS = 57824
const VOLATILE = 57825
const WHITESPACE_P = 57826
const WINDOW = 57827
const WITHIN = 57828
const WORK = 57829
const WRITE = 57830
const XML_P = 57831
const XMLATTRIBUTES = 57832
const XMLCONCAT = 57833
const XMLELEMENT = 57834
const XMLEXISTS = 57835
const XMLFOREST = 57836
const XMLPARSE = 57837
const XMLPI = 57838
const XMLROOT = 57839
const XMLSERIALIZE = 57840
const YEAR_P = 57841
const YES_P = 57842
const INOUT = 57843
const OTHERS = 57844
const OLD = 57845
const KEY = 57846
const OFF = 57847
const OIDS = 57848
const OPTION = 57849
const OPTIONS = 57850
const OVER = 57851
const ORDER = 57852
const ANY = 57853
const BOTH = 57854
const CAST = 57855
const CHECK = 57856
const COLUMN = 57857
const FORMAT_LA = 57858
const NOT_LA = 57859
const NULLS_LA = 57860
const WITH_LA = 57861
const WITHOUT_LA = 57862
const MODE_TYPE_NAME = 57863
const MODE_PLPGSQL_EXPR = 57864
const MODE_PLPGSQL_ASSIGN1 = 57865
const MODE_PLPGSQL_ASSIGN2 = 57866
const MODE_PLPGSQL_ASSIGN3 = 57867
const UMINUS = 57868

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:10207

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 61,
	541, 61,
	-2, 1332,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 65,
	67, 1639,
	84, 1639,
	85, 2276,
	237, 2461,
	308, 1806,
	420, 1639,
	481, 1639,
	-2, 74,
	-1, 80,
	1, 61,
	541, 61,
	-2, 1332,
	-1, 116,
	85, 2275,
	-2, 1638,
	-1, 189,
	61, 279,
	64, 279,
	528, 279,
	534, 279,
	-2, 2319,
	-1, 636,
	84, 1639,
	481, 1639,
	-2, 73,
	-1, 638,
	210, 62,
	-2, 2282,
	-1, 705,
	16, 1197,
	17, 1197,
	532, 1197,
	-2, 80,
	-1, 706,
	16, 1198,
	17, 1198,
	532, 1198,
	-2, 81,
	-1, 1031,
	6, 1735,
	12, 1735,
	535, 1735,
	536, 1735,
	-2, 1728,
	-1, 1225,
	1, 637,
	26, 637,
	36, 637,
	64, 637,
	65, 637,
	73, 637,
	74, 637,
	101, 637,
	533, 637,
	541, 637,
	542, 637,
	-2, 1268,
	-1, 1690,
	532, 1161,
	-2, 1147,
	-1, 1860,
	118, 74,
	308, 1806,
	461, 74,
	-2, 1639,
	-1, 1909,
	537, 95,
	-2, 2145,
	-1, 1935,
	532, 1808,
	-2, 203,
	-1, 2134,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1069,
	-1, 2135,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1070,
	-1, 2136,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1071,
	-1, 2137,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1072,
	-1, 2138,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1073,
	-1, 2139,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1074,
	-1, 2144,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1082,
	-1, 2150,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1086,
	-1, 2186,
	532, 1160,
	-2, 1201,
	-1, 2290,
	40, 1205,
	510, 1205,
	528, 1205,
	533, 1205,
	542, 1205,
	-2, 1201,
	-1, 2320,
	210, 62,
	-2, 2282,
	-1, 2379,
	537, 96,
	-2, 2145,
	-1, 2483,
	508, 2222,
	-2, 2215,
	-1, 2589,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1084,
	-1, 2590,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1088,
	-1, 2603,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1101,
	-1, 2674,
	532, 1161,
	-2, 96,
	-1, 2680,
	151, 1571,
	-2, 1506,
	-1, 2867,
	6, 1735,
	12, 1735,
	535, 1735,
	536, 1735,
	-2, 1709,
	-1, 2970,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1083,
	-1, 2975,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1103,
	-1, 2976,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1087,
	-1, 3290,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1085,
	-1, 3291,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1089,
	-1, 3295,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1095,
	-1, 3303,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1115,
	-1, 3304,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1116,
	-1, 3305,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1117,
	-1, 3306,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1118,
	-1, 3307,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1119,
	-1, 3308,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1120,
	-1, 3309,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1097,
	-1, 3310,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1102,
	-1, 3380,
	541, 61,
	-2, 1332,
	-1, 3515,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1096,
	-1, 3516,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1098,
	-1, 3517,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1104,
	-1, 4137,
	7, 1456,
	-2, 280,
}

const yyPrivate = 57344

const yyLast = 66999

var yyAct = [...]int16{
	611, 4134, 2451, 4181, 4194, 4259, 4240, 4013, 2584, 4182,
	869, 735, 4193, 4205, 2200, 3343, 4135, 2397, 4224, 2248,
	3144, 677, 3786, 3926, 3727, 3456, 4008, 3319, 893, 3688,
	3805, 2792, 2226, 3585, 3766, 2809, 3908, 908, 2203, 3998,
	3369, 3970, 3635, 3915, 1811, 1019, 3253, 3834, 3728, 3422,
	918, 1170, 3338, 3318, 4049, 3057, 3979, 3844, 3812, 2849,
	3631, 1833, 3806, 2835, 3807, 2700, 3566, 2329, 3539, 3542,
	192, 192, 940, 3859, 1946, 3660, 601, 3614, 2403, 2216,
	2577, 2446, 3376, 601, 2669, 2685, 2795, 601, 3336, 3455,
	3259, 2255, 2552, 638, 641, 646, 641, 3254, 641, 3053,
	3124, 642, 3862, 3148, 3263, 3195, 2701, 4, 641, 2321,
	3668, 2218, 2934, 3573, 2243, 774, 645, 3061, 1706, 2285,
	601, 601, 601, 601, 2278, 60, 704, 641, 641, 2217,
	641, 704, 2768, 1859, 18, 3350, 704, 2528, 704, 1858,
	17, 2772, 593, 72, 3346, 2630, 739, 752, 641, 754,
	641, 3549, 738, 641, 702, 1857, 12, 3327, 1179, 736,
	5, 1856, 11, 2368, 736, 3116, 736, 2238, 2932, 2655,
	2305, 2445, 2241, 1006, 2418, 2866, 2843, 3178, 2731, 938,
	2827, 192, 192, 2754, 1894, 2617, 958, 598, 1880, 1886,
	2369, 2308, 2330, 2309, 617, 2296, 1120, 2310, 2183, 1890,
	2281, 4009, 707, 1919, 2204, 60, 1832, 2240, 3031, 2647,
	620, 1813, 859, 1686, 18, 2450, 2014, 833, 2398, 2347,
	17, 2185, 1130, 72, 978, 1175, 1930, 1051, 1906, 906,
	2295, 688, 965, 1866, 926, 2283, 12, 898, 183, 600,
	2676, 984, 11, 2225, 2257, 2221, 621, 61, 2224, 2214,
	2223, 1812, 1786, 2179, 1678, 2658, 2173, 2155, 2158, 1169,
	771, 701, 831, 2346, 2345, 737, 985, 860, 987, 2233,
	637, 2123, 90, 88, 778, 1046, 153, 1699, 152, 781,
	111, 609, 1198, 1167, 1905, 1044, 171, 1887, 607, 71,
	4290, 1110, 616, 3543, 1839, 837, 944, 2740, 4281, 4166,
	1135, 885, 1111, 4279, 4213, 4192, 4190, 4214, 1110, 4174,
	4132, 2190, 4166, 4214, 3877, 1792, 4165, 4131, 1792, 1111,
	2739, 591, 2979, 4148, 4141, 4166, 2989, 2990, 2991, 2741,
	4112, 3737, 4149, 2635, 746, 880, 4066, 850, 1201, 3524,
	1110, 4028, 1211, 1212, 1213, 2236, 4022, 746, 746, 3995,
	4029, 1111, 3989, 132, 1794, 4023, 2585, 1795, 2781, 3657,
	2818, 1801, 590, 1799, 1824, 3987, 3986, 612, 1798, 1802,
	1797, 3984, 1803, 3963, 3985, 3985, 1796, 1217, 1218, 1800,
	3985, 980, 1792, 3962, 1199, 3959, 1804, 1186, 3957, 1176,
	844, 3876, 1792, 746, 3960, 892, 3874, 3958, 2124, 3780,
	3877, 3857, 980, 3765, 3754, 1113, 3736, 883, 3524, 3723,
	761, 762, 3764, 3755, 2209, 3735, 849, 3493, 1113, 3641,
	3630, 3692, 3690, 1188, 3620, 3602, 1191, 3533, 3642, 2236,
	3532, 814, 1190, 2741, 3601, 3523, 3534, 4117, 4116, 1113,
	3510, 1189, 3452, 3451, 3524, 2982, 2983, 2984, 2985, 3511,
	3450, 3453, 2236, 3444, 3391, 3361, 3070, 1192, 2995, 2236,
	2963, 2890, 2236, 2741, 3362, 2236, 2877, 1792, 2743, 1792,
	2891, 2722, 2640, 2236, 2634, 2878, 2625, 2744, 2616, 880,
	2723, 2641, 1201, 2635, 2609, 1792, 2607, 1792, 2606, 843,
	845, 847, 851, 1792, 4091, 1201, 2645, 2608, 3882, 1792,
	1204, 1205, 1206, 1207, 3266, 1801, 2565, 1799, 3512, 2323,
	2237, 3497, 1798, 1802, 1797, 1792, 1803, 836, 2324, 2236,
	1799, 3341, 2196, 1800, 2192, 1793, 1200, 1917, 3127, 3080,
	1804, 1113, 3079, 1792, 1792, 3007, 1800, 2781, 2683, 2618,
	2376, 2165, 2118, 904, 606, 3784, 1122, 80, 1863, 2985,
	1863, 1207, 896, 3090, 4016, 3386, 3457, 839, 1176, 892,
	838, 900, 1863, 919, 892, 899, 900, 943, 900, 857,
	899, 1122, 899, 943, 2879, 1122, 948, 1863, 841, 3067,
	2880, 1131, 1132, 834, 1131, 1132, 4219, 2530, 4070, 4061,
	3869, 1872, 3868, 3867, 1133, 882, 882, 1129, 2787, 3825,
	3713, 4017, 3709, 601, 3645, 3639, 3621, 1109, 3592, 3860,
	3316, 77, 3315, 3314, 882, 1809, 601, 4014, 913, 601,
	601, 3637, 3313, 1827, 601, 601, 3135, 601, 3126, 704,
	704, 3041, 77, 704, 3016, 3002, 2831, 2800, 74, 2780,
	2400, 2738, 75, 2682, 641, 641, 2610, 2572, 2570, 2567,
	2566, 1941, 2191, 2001, 835, 917, 950, 928, 929, 74,
	2039, 932, 79, 75, 857, 1687, 2979, 73, 956, 601,
	2989, 2990, 2991, 856, 890, 4280, 77, 1944, 1807, 87,
	4255, 4251, 3293, 79, 641, 919, 4151, 4124, 4097, 4090,
	4038, 3813, 3956, 3931, 3928, 1947, 3843, 3839, 2686, 601,
	601, 3770, 3726, 74, 3706, 3705, 3704, 75, 880, 3682,
	3666, 1201, 1873, 1884, 3665, 3664, 3655, 3652, 3352, 3528,
	3372, 3356, 3340, 3332, 3265, 3167, 3130, 79, 3121, 3113,
	617, 617, 3105, 3102, 3075, 3043, 1799, 3036, 880, 3294,
	2958, 1201, 2856, 3019, 2855, 1211, 1212, 1213, 2979, 641,
	641, 2848, 1800, 907, 2673, 3011, 1018, 1794, 2236, 1804,
	1795, 2672, 2628, 2160, 1801, 2236, 1799, 2549, 2496, 2396,
	945, 1798, 1802, 1797, 2332, 1803, 2250, 1689, 613, 1796,
	1217, 1218, 1800, 2102, 1966, 1849, 1840, 3134, 880, 1804,
	2724, 1201, 1697, 1695, 1694, 1211, 1212, 1213, 1688, 1201,
	2236, 73, 1137, 1122, 945, 1201, 1159, 1794, 894, 1108,
	1795, 1040, 1124, 1045, 1801, 903, 1799, 641, 1942, 682,
	942, 1798, 1802, 1797, 1799, 1803, 1117, 3068, 1687, 1796,
	1217, 1218, 1800, 2209, 2986, 2987, 2988, 2819, 2819, 1804,
	3473, 1220, 1183, 2980, 2981, 2982, 2983, 2984, 2985, 3266,
	1208, 1209, 1210, 1200, 3638, 1871, 2670, 4114, 1113, 1202,
	1203, 1204, 1205, 1206, 1207, 882, 882, 882, 882, 3266,
	3266, 1828, 882, 959, 1883, 2979, 2209, 897, 2745, 2989,
	2990, 2991, 3022, 590, 2325, 2210, 3971, 1113, 1193, 3597,
	882, 3292, 1131, 1132, 2897, 3245, 1939, 905, 4207, 1937,
	3240, 882, 1701, 601, 882, 3778, 1918, 976, 2376, 1680,
	935, 915, 916, 1815, 3777, 1816, 2907, 2478, 1177, 1178,
	1825, 934, 2016, 3500, 601, 2016, 2793, 1838, 3590, 1007,
	1073, 3924, 1945, 1010, 3923, 3981, 1016, 2474, 1034, 3776,
	852, 1788, 3769, 3112, 2414, 1071, 1701, 2402, 1867, 646,
	2846, 2899, 641, 641, 641, 641, 1943, 641, 949, 3616,
	955, 1989, 2401, 1920, 1934, 2315, 1121, 3432, 970, 1853,
	1163, 601, 923, 1830, 825, 601, 818, 850, 698, 3627,
	1909, 1171, 1171, 1074, 1187, 1220, 850, 850, 3066, 3799,
	2797, 1928, 1126, 1127, 1128, 3610, 623, 3609, 4208, 601,
	3385, 641, 3216, 1202, 1203, 1204, 1205, 1206, 1207, 601,
	2958, 623, 2013, 625, 1947, 601, 1202, 1203, 1204, 1205,
	1206, 1207, 1057, 1791, 840, 2112, 1074, 1134, 625, 3081,
	841, 966, 1826, 746, 601, 3445, 2581, 601, 2297, 2299,
	2298, 2779, 746, 746, 1072, 1901, 4015, 900, 3596, 1160,
	1870, 899, 631, 2979, 1007, 931, 1157, 2989, 2990, 2991,
	1154, 1933, 823, 601, 1974, 2374, 945, 1909, 1909, 1909,
	2859, 1806, 760, 1956, 1955, 2979, 673, 1145, 1963, 2989,
	2990, 2991, 2531, 2532, 3423, 601, 601, 1177, 1178, 2853,
	1854, 2994, 3015, 2343, 78, 85, 641, 641, 641, 641,
	641, 880, 1705, 3626, 1201, 1927, 114, 1808, 641, 641,
	1138, 1139, 3978, 3617, 1142, 78, 641, 3940, 3854, 591,
	1967, 1891, 1954, 882, 1181, 687, 1899, 686, 73, 1799,
	3255, 3853, 851, 2342, 1161, 1698, 945, 2860, 3484, 3233,
	746, 851, 851, 3230, 1185, 1800, 1705, 685, 1705, 684,
	1683, 1932, 1804, 2477, 2427, 601, 1972, 1968, 1690, 78,
	2096, 2844, 1052, 1924, 1979, 945, 2055, 2056, 1982, 1983,
	4056, 746, 73, 2798, 3218, 631, 746, 1696, 2986, 2987,
	2988, 3433, 2425, 2944, 2348, 2058, 1789, 2980, 2981, 2982,
	2983, 2984, 2985, 1931, 4189, 1936, 1938, 1836, 4188, 3623,
	601, 882, 2426, 882, 882, 882, 882, 882, 882, 882,
	882, 882, 882, 882, 882, 882, 882, 1986, 1987, 1910,
	882, 1864, 882, 641, 1841, 882, 2413, 1868, 2089, 1053,
	2424, 2162, 1202, 1203, 1204, 1205, 1206, 1207, 2348, 1990,
	2862, 1021, 1891, 2349, 1220, 3622, 2034, 1180, 1180, 3206,
	1180, 1950, 832, 1208, 1209, 1210, 2825, 632, 2010, 3446,
	4104, 3809, 1202, 1203, 1204, 1205, 1206, 1207, 1888, 2980,
	2981, 2982, 2983, 2984, 2985, 2580, 4059, 1913, 2725, 1992,
	3953, 837, 1996, 1914, 1698, 3933, 3401, 2481, 3644, 2053,
	3420, 3414, 746, 1921, 1220, 2762, 1921, 2349, 3288, 3224,
	1891, 1978, 2758, 1208, 1209, 1210, 1910, 1910, 1910, 1023,
	3988, 3934, 1202, 1203, 1204, 1205, 1206, 1207, 2095, 2575,
	1202, 1203, 1204, 1205, 1206, 1207, 1202, 1203, 1204, 1205,
	1206, 1207, 1054, 2525, 2356, 1153, 2889, 2886, 115, 2291,
	2885, 2711, 3792, 1099, 628, 3595, 1091, 2109, 1921, 1921,
	746, 2028, 2029, 2030, 1921, 3256, 960, 3982, 4115, 1021,
	1921, 1151, 880, 2027, 626, 1201, 1852, 2350, 2087, 1097,
	1921, 1921, 2436, 2038, 1965, 1094, 2035, 2113, 2506, 2040,
	2044, 2081, 1114, 2071, 3215, 3344, 1118, 2986, 2987, 2988,
	1799, 1921, 1164, 2996, 2094, 630, 2980, 2981, 2982, 2983,
	2984, 2985, 2702, 954, 2300, 2015, 1800, 2115, 2015, 2522,
	624, 91, 1080, 1804, 2930, 1921, 3388, 2116, 2050, 2106,
	1068, 2350, 1143, 3267, 2049, 624, 2927, 1023, 2537, 952,
	1180, 1705, 1022, 1102, 1180, 1180, 114, 2536, 3980, 2117,
	2535, 2104, 2105, 629, 2534, 2861, 2867, 3145, 880, 3179,
	1951, 1201, 2519, 2518, 2020, 1211, 1212, 1213, 1088, 1087,
	151, 1953, 1952, 1070, 1069, 3203, 1064, 1794, 2126, 1058,
	1795, 1056, 1150, 1049, 1801, 1048, 1799, 1047, 1043, 1076,
	1096, 1798, 1802, 1797, 2340, 1803, 3671, 1066, 2582, 1796,
	1217, 1218, 1800, 2382, 3207, 780, 780, 2043, 2042, 1804,
	113, 837, 112, 836, 2041, 3059, 3242, 3205, 3257, 4025,
	1949, 1970, 1923, 1922, 2903, 973, 633, 2900, 630, 2730,
	1985, 635, 936, 2979, 1024, 3689, 2967, 2989, 2990, 2991,
	3804, 1975, 2097, 2415, 1050, 822, 676, 2098, 991, 2978,
	951, 2101, 3636, 992, 2764, 2103, 3146, 1001, 817, 2341,
	1022, 1007, 3810, 671, 1025, 1898, 1152, 1026, 2047, 2887,
	2443, 1027, 2434, 2429, 1098, 2986, 2987, 2988, 1197, 834,
	1162, 2714, 854, 1834, 2980, 2981, 2982, 2983, 2984, 2985,
	3286, 4026, 1079, 1028, 2929, 2119, 2121, 2986, 2987, 2988,
	1067, 2312, 880, 2703, 4052, 1201, 2980, 2981, 2982, 2983,
	2984, 2985, 3185, 1101, 1851, 4051, 824, 747, 2521, 3604,
	994, 3083, 3811, 1055, 2712, 3384, 1021, 3396, 1077, 3054,
	1799, 1031, 1959, 2972, 953, 1202, 1203, 1204, 1205, 1206,
	1207, 3941, 3185, 3449, 2968, 3802, 1800, 2760, 1029, 1000,
	835, 2888, 1024, 1804, 1082, 1975, 1844, 2852, 2763, 627,
	1081, 1090, 3358, 3927, 1092, 1030, 3669, 3208, 2844, 1843,
	3850, 2367, 3200, 3583, 4053, 3832, 1964, 2817, 115, 3448,
	1005, 2007, 1025, 3119, 3084, 1026, 4237, 2713, 2747, 1027,
	1093, 3213, 832, 4236, 1023, 3357, 3260, 3793, 882, 882,
	646, 1834, 1032, 2867, 3938, 882, 882, 3937, 882, 3419,
	3434, 1028, 3936, 2354, 927, 3816, 748, 4187, 1959, 3930,
	2999, 3426, 4044, 990, 880, 3447, 2504, 1201, 3789, 3120,
	2812, 2174, 1196, 836, 1013, 2166, 2170, 2759, 1165, 820,
	699, 683, 2176, 3648, 3110, 2188, 3289, 2803, 981, 1031,
	995, 3179, 1799, 880, 3913, 2971, 1201, 830, 1195, 830,
	1947, 2750, 937, 2107, 3279, 855, 1029, 1155, 1800, 3077,
	3118, 3831, 668, 1845, 749, 1804, 2064, 3278, 2302, 2761,
	4119, 1799, 1136, 1030, 2595, 997, 1125, 3243, 1958, 1976,
	1078, 996, 3546, 1977, 1075, 2904, 2928, 1800, 2901, 834,
	4232, 2171, 1065, 882, 1804, 882, 882, 1106, 882, 882,
	641, 179, 1140, 1141, 4140, 1100, 3733, 1022, 3526, 2205,
	1032, 2207, 4226, 3586, 880, 1815, 1083, 1201, 3354, 2230,
	2230, 1211, 1212, 1213, 3186, 3741, 998, 1928, 641, 3734,
	113, 2633, 112, 1794, 2068, 4285, 1795, 4289, 2067, 4288,
	1801, 4284, 1799, 4242, 4241, 3169, 4262, 1798, 1802, 1797,
	117, 1803, 936, 601, 3186, 1796, 1217, 1218, 1800, 3751,
	835, 2066, 2320, 4027, 1958, 1804, 1701, 4261, 1103, 4055,
	3574, 999, 2331, 3575, 4277, 3752, 3576, 4276, 4264, 1974,
	641, 4263, 1002, 3187, 1928, 3822, 1202, 1203, 1204, 1205,
	1206, 1207, 3117, 1976, 3577, 3136, 1149, 1977, 1042, 1024,
	2361, 2169, 2366, 2370, 641, 962, 4267, 3201, 601, 819,
	700, 3261, 4268, 3187, 2065, 1012, 2163, 1004, 1003, 4292,
	4283, 1698, 4282, 601, 601, 4050, 3188, 1928, 1698, 1025,
	3202, 3579, 1026, 2293, 2613, 2371, 1027, 2405, 4239, 2409,
	3109, 3578, 667, 2811, 980, 4225, 3587, 2360, 1834, 2232,
	2419, 3580, 2837, 3860, 1220, 3425, 3188, 1683, 1028, 601,
	2380, 2381, 2839, 1208, 1209, 1210, 1148, 1105, 2187, 3612,
	3973, 601, 1202, 1203, 1204, 1205, 1206, 1207, 3170, 3382,
	3339, 3750, 826, 828, 4246, 641, 641, 4265, 2815, 3999,
	4245, 4247, 4248, 4266, 993, 601, 1031, 4195, 4222, 601,
	4200, 2806, 4244, 4223, 4198, 969, 4199, 4201, 4243, 2709,
	2576, 882, 2558, 1029, 2326, 1916, 4001, 1089, 933, 2377,
	3885, 4208, 982, 4170, 1007, 4000, 2212, 4100, 4099, 4204,
	1030, 4004, 4002, 4271, 2316, 2986, 2987, 2988, 2282, 979,
	3042, 4231, 4133, 2836, 2980, 2981, 2982, 2983, 2984, 2985,
	2469, 2351, 4006, 3537, 3417, 3368, 591, 3024, 2736, 2352,
	2301, 3320, 2284, 2246, 1961, 1166, 1705, 1032, 2017, 1147,
	2213, 2284, 641, 704, 2005, 863, 704, 646, 704, 704,
	1940, 3581, 3582, 2208, 2234, 844, 4012, 2551, 3317, 2556,
	2557, 2235, 3521, 2008, 4197, 4010, 4202, 3744, 3895, 2392,
	1705, 702, 2007, 882, 736, 3522, 736, 736, 968, 641,
	2480, 3894, 4018, 4019, 4003, 2437, 1202, 1203, 1204, 1205,
	1206, 1207, 2462, 3742, 2441, 2230, 3891, 3892, 2465, 2466,
	2375, 2006, 2319, 2318, 2317, 2201, 2202, 3553, 3890, 3745,
	2571, 2322, 4230, 2632, 2303, 2631, 882, 882, 4017, 3349,
	1705, 81, 82, 83, 84, 2514, 882, 882, 2516, 2517,
	4011, 882, 882, 2440, 4173, 746, 882, 2442, 3947, 1705,
	2333, 2334, 2335, 2336, 2337, 882, 3718, 3946, 2555, 2868,
	2009, 882, 882, 882, 3562, 2379, 2385, 3946, 3947, 3558,
	2533, 882, 2678, 2679, 912, 2439, 2624, 2475, 2602, 2631,
	3872, 2479, 3845, 3846, 2586, 4071, 4072, 3871, 3715, 2452,
	1815, 882, 3552, 2458, 3717, 3716, 882, 2529, 2384, 2657,
	2657, 704, 746, 2230, 2657, 2657, 2657, 3520, 821, 767,
	2467, 662, 3153, 2472, 2453, 4017, 4096, 2681, 1202, 1203,
	1204, 1205, 1206, 1207, 3174, 601, 2206, 601, 601, 2629,
	2195, 1825, 601, 601, 746, 746, 672, 74, 3555, 3556,
	1171, 75, 178, 2483, 2482, 850, 2515, 1202, 1203, 1204,
	1205, 1206, 1207, 1850, 3154, 641, 4238, 2718, 192, 2810,
	1862, 79, 2399, 3632, 3852, 2500, 2404, 2933, 3409, 4129,
	3283, 3564, 3557, 3282, 3560, 3561, 3563, 3559, 3329, 2648,
	2653, 2651, 2652, 2650, 2194, 2646, 2649, 3328, 3155, 3156,
	3157, 4130, 3052, 2022, 2021, 1869, 601, 2523, 2524, 1819,
	1220, 746, 1818, 3032, 2690, 2735, 3330, 1867, 3, 1208,
	1209, 1210, 3027, 2400, 2548, 3026, 3949, 4291, 1202, 1203,
	1204, 1205, 1206, 1207, 2406, 3030, 2653, 2651, 2652, 2650,
	2735, 4275, 2665, 601, 601, 4274, 4273, 4220, 3767, 2733,
	2642, 3808, 3945, 3943, 2693, 2748, 3095, 3373, 2540, 2574,
	2543, 3162, 3076, 882, 2698, 2579, 2710, 1909, 2583, 2619,
	2563, 2507, 2813, 2648, 2653, 2651, 2652, 2650, 1180, 2646,
	2649, 2734, 2252, 2199, 1180, 1180, 1948, 882, 1902, 1897,
	1115, 1085, 1084, 2727, 2729, 2591, 850, 2593, 591, 614,
	1062, 974, 895, 1199, 2715, 2716, 2875, 619, 615, 2604,
	851, 185, 4077, 3991, 3990, 3896, 3731, 3485, 2824, 2612,
	2826, 3360, 3234, 3231, 3096, 2620, 2621, 2799, 2742, 1984,
	1981, 2585, 2775, 2626, 2770, 2769, 2828, 3436, 2215, 2597,
	2601, 2163, 3394, 4154, 3619, 3393, 3437, 2093, 2637, 780,
	2636, 2638, 746, 3435, 2662, 2671, 1180, 2869, 2664, 2661,
	591, 2660, 2124, 618, 2654, 3438, 2680, 4153, 4064, 2666,
	2667, 2668, 3697, 1823, 780, 2707, 1822, 3694, 850, 850,
	3503, 3480, 582, 2231, 2231, 3475, 3474, 882, 2830, 3252,
	2751, 2704, 3251, 3244, 3239, 2726, 2674, 3151, 601, 2950,
	2949, 2948, 2947, 2946, 2945, 1974, 2719, 2941, 2940, 2807,
	2728, 2931, 2920, 2918, 2906, 2905, 1180, 1705, 2902, 2892,
	2893, 2791, 2834, 2737, 2833, 2677, 2832, 2677, 2594, 2592,
	2157, 2127, 2545, 2520, 746, 746, 2501, 2161, 2156, 2157,
	2596, 2057, 2054, 2052, 641, 641, 2051, 2925, 2767, 2037,
	2706, 851, 2829, 2033, 641, 2032, 2794, 2789, 2790, 2031,
	2026, 2025, 2019, 2018, 2004, 194, 2003, 2231, 2002, 2865,
	2000, 1973, 1969, 1962, 1820, 2152, 882, 2153, 2804, 882,
	2569, 2568, 882, 882, 853, 882, 882, 882, 842, 2822,
	882, 882, 2100, 2821, 2099, 2823, 3787, 2174, 844, 4087,
	2143, 4121, 3903, 3110, 882, 2691, 1910, 1698, 4120, 882,
	2854, 3464, 2845, 882, 882, 2838, 2142, 2773, 3460, 3379,
	2147, 3082, 882, 2858, 2785, 2786, 2205, 2146, 2148, 2145,
	3427, 2149, 1815, 851, 851, 2697, 2230, 2587, 2036, 2230,
	1705, 1705, 1705, 2497, 2494, 2490, 2919, 3035, 2898, 2935,
	2657, 2657, 2657, 2657, 2657, 2894, 2378, 1995, 1015, 1009,
	596, 3189, 2851, 882, 882, 844, 882, 2908, 4191, 2011,
	1180, 1180, 2850, 3407, 1928, 118, 3457, 3064, 2010, 3125,
	597, 4217, 850, 4216, 2249, 2560, 3370, 2561, 980, 2562,
	2578, 706, 2564, 2794, 882, 3797, 706, 744, 848, 746,
	3796, 706, 2923, 706, 2573, 3264, 1110, 3454, 2911, 3364,
	744, 744, 2916, 636, 2952, 882, 882, 1111, 2399, 1891,
	2841, 806, 806, 1180, 2391, 601, 2359, 1825, 2253, 2937,
	1893, 2938, 2939, 884, 844, 1885, 1835, 1829, 746, 892,
	977, 967, 2896, 961, 957, 939, 3550, 641, 3681, 3680,
	3280, 3176, 2922, 882, 601, 2872, 744, 2870, 3104, 2840,
	2808, 2953, 3072, 3065, 2694, 3025, 2966, 3111, 3028, 746,
	887, 2357, 2331, 3021, 888, 2353, 886, 3074, 641, 621,
	2961, 2251, 2247, 2962, 3017, 3018, 2110, 1160, 2108, 2231,
	1998, 3063, 1994, 1903, 1889, 3005, 3006, 3008, 1881, 601,
	1879, 1861, 1144, 3149, 1119, 1116, 1112, 3004, 1107, 2230,
	2370, 1095, 2998, 1063, 1036, 1033, 3164, 1014, 1008, 3142,
	3462, 3461, 2542, 1860, 3103, 927, 816, 3138, 4092, 3012,
	3020, 1928, 2163, 2951, 3013, 3180, 3088, 851, 3089, 1825,
	3069, 3994, 2371, 3023, 1825, 3950, 1825, 3197, 3939, 3029,
	3033, 3034, 2775, 3049, 2770, 2769, 941, 3661, 3683, 3598,
	3536, 3219, 3465, 3421, 2163, 3046, 3406, 3397, 3101, 3281,
	2689, 2419, 2364, 3223, 3196, 2973, 2974, 3133, 3140, 3198,
	2358, 3055, 1156, 2992, 2993, 2231, 892, 2231, 3159, 3071,
	3132, 1915, 1810, 3106, 3158, 1790, 3204, 2622, 2623, 4229,
	4209, 3091, 1698, 3098, 3192, 3037, 3038, 3039, 3040, 2122,
	2120, 2282, 4062, 844, 3085, 892, 892, 3828, 2095, 2362,
	3100, 3093, 2816, 3097, 3788, 3209, 3212, 1980, 3099, 2119,
	2121, 3051, 1194, 2114, 846, 2284, 1184, 2675, 2648, 2653,
	2651, 2652, 2650, 746, 2646, 2649, 3380, 3618, 4042, 1891,
	3613, 3387, 3791, 2284, 2284, 3615, 3932, 3611, 1842, 3606,
	2705, 2262, 882, 882, 3123, 3131, 2708, 2256, 2695, 882,
	3129, 882, 882, 882, 882, 882, 882, 882, 882, 882,
	882, 882, 882, 3141, 3137, 882, 2775, 882, 2770, 2769,
	2279, 2275, 882, 577, 882, 3163, 3139, 3166, 882, 746,
	3160, 578, 3222, 3175, 184, 2012, 3197, 2871, 2307, 2873,
	1848, 1847, 3625, 882, 3624, 3395, 3815, 2230, 2230, 3392,
	3258, 2230, 2365, 2505, 3321, 3150, 3152, 3210, 3211, 3214,
	2814, 634, 2657, 2363, 704, 972, 1104, 2773, 3198, 2048,
	3827, 3147, 2544, 3221, 3217, 3168, 3114, 2339, 2069, 2784,
	2783, 38, 37, 3226, 36, 35, 34, 1928, 641, 33,
	32, 195, 31, 58, 57, 56, 3337, 55, 54, 53,
	52, 1705, 3271, 1705, 51, 50, 49, 48, 47, 46,
	3371, 45, 44, 3359, 1705, 43, 601, 42, 41, 2921,
	40, 3094, 39, 2529, 30, 29, 1825, 28, 27, 3355,
	26, 25, 24, 23, 882, 22, 3241, 3270, 21, 20,
	19, 3246, 646, 59, 16, 1855, 641, 102, 910, 3365,
	1865, 2863, 3412, 2842, 3171, 1928, 3177, 154, 2070, 1011,
	3374, 4110, 2417, 3914, 3058, 704, 89, 3803, 2755, 2752,
	3184, 3056, 3333, 1180, 3833, 3194, 3325, 3326, 3062, 2242,
	3331, 3060, 2239, 2370, 4169, 3342, 3405, 4196, 882, 3884,
	706, 706, 4007, 3424, 3363, 3739, 3541, 1928, 3997, 3375,
	3441, 2773, 2964, 3535, 3335, 2119, 2121, 2328, 76, 706,
	3714, 3519, 2193, 1817, 63, 2371, 595, 3415, 594, 3993,
	882, 858, 3312, 745, 706, 706, 3004, 2864, 706, 3440,
	3756, 3334, 3413, 3183, 3907, 3565, 745, 745, 3191, 3351,
	3193, 3554, 3050, 3408, 86, 3323, 1821, 3348, 3347, 3893,
	3889, 3888, 3014, 2198, 3366, 3345, 2211, 3353, 1805, 15,
	14, 13, 3443, 10, 9, 8, 7, 6, 648, 2771,
	2615, 2175, 3277, 1693, 800, 2383, 799, 784, 806, 786,
	802, 3204, 745, 801, 3429, 785, 882, 3390, 2394, 1123,
	783, 782, 808, 2957, 3297, 3298, 3299, 3300, 3301, 3302,
	3303, 3304, 3305, 3306, 3307, 3308, 3399, 1180, 3458, 2167,
	878, 3400, 877, 882, 882, 882, 2172, 3377, 2611, 1691,
	872, 873, 3416, 868, 2935, 2438, 2874, 2895, 2444, 3851,
	3490, 2541, 1232, 3571, 1229, 2, 1, 0, 2284, 3428,
	2231, 0, 0, 2231, 0, 0, 3430, 0, 0, 0,
	882, 2230, 0, 1705, 0, 0, 3402, 3403, 0, 0,
	882, 882, 882, 0, 3477, 0, 3466, 3479, 0, 3439,
	0, 0, 1180, 0, 746, 3567, 3470, 601, 0, 3469,
	0, 3588, 0, 3064, 0, 0, 0, 2529, 0, 601,
	0, 3463, 0, 3197, 601, 0, 0, 2529, 0, 3467,
	0, 3381, 0, 0, 2935, 0, 0, 2935, 0, 0,
	0, 3570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3198, 744, 0, 0, 0,
	0, 0, 0, 0, 2550, 744, 744, 0, 601, 3502,
	2559, 3591, 0, 0, 0, 0, 3599, 3149, 0, 3411,
	0, 0, 0, 704, 746, 0, 641, 746, 0, 0,
	706, 706, 706, 706, 3659, 0, 3653, 706, 3531, 0,
	3647, 0, 0, 3593, 3197, 646, 0, 641, 641, 0,
	3530, 736, 0, 0, 3633, 706, 0, 0, 0, 746,
	3398, 0, 3584, 0, 0, 1703, 706, 3063, 3676, 706,
	3589, 3196, 0, 3628, 3527, 3600, 3198, 3608, 3607, 3568,
	3548, 3547, 0, 2231, 2231, 646, 704, 3603, 3518, 0,
	3551, 0, 0, 0, 0, 60, 0, 3701, 3691, 806,
	3662, 0, 0, 744, 18, 0, 806, 0, 0, 1703,
	17, 1703, 0, 72, 736, 3197, 0, 0, 0, 0,
	3654, 2231, 3719, 3656, 0, 704, 12, 0, 3729, 0,
	882, 0, 11, 0, 744, 882, 0, 0, 0, 744,
	3667, 882, 3720, 0, 0, 1705, 3674, 3198, 3629, 3673,
	0, 3670, 0, 3672, 0, 0, 0, 3337, 3287, 3684,
	0, 0, 0, 0, 0, 0, 0, 3762, 0, 0,
	3505, 3506, 3650, 0, 0, 0, 0, 3700, 3703, 0,
	2775, 3698, 2770, 2769, 0, 0, 3699, 806, 3696, 0,
	0, 0, 0, 0, 3763, 0, 3685, 3730, 0, 0,
	0, 0, 0, 0, 0, 0, 1180, 0, 3724, 3757,
	601, 0, 0, 3725, 0, 1180, 1180, 3772, 0, 0,
	3746, 3747, 0, 0, 3748, 3749, 0, 0, 2935, 882,
	0, 0, 0, 0, 3722, 0, 0, 0, 0, 3774,
	3801, 0, 0, 0, 704, 0, 3569, 0, 2230, 0,
	0, 3768, 0, 3494, 3495, 744, 882, 882, 3498, 3499,
	3800, 2782, 601, 0, 0, 3818, 0, 0, 3794, 3781,
	3775, 3823, 3826, 882, 3782, 0, 0, 3721, 746, 0,
	2231, 3790, 3773, 806, 3783, 806, 0, 0, 706, 0,
	3771, 2231, 2231, 3836, 3837, 2231, 0, 882, 0, 3758,
	0, 0, 0, 3798, 850, 0, 1825, 0, 2231, 1815,
	806, 0, 0, 744, 3817, 3856, 0, 2331, 0, 0,
	0, 3824, 3821, 0, 0, 3830, 882, 3829, 0, 0,
	3883, 3886, 0, 0, 0, 3820, 0, 0, 0, 0,
	0, 1825, 3847, 1825, 0, 0, 0, 0, 3567, 3779,
	0, 0, 0, 3873, 0, 601, 0, 0, 0, 3848,
	746, 3916, 0, 0, 3861, 2773, 706, 806, 706, 706,
	706, 706, 706, 706, 706, 706, 706, 706, 706, 706,
	706, 706, 0, 0, 3875, 706, 0, 706, 3910, 0,
	706, 3880, 0, 3917, 1703, 3881, 3919, 3864, 3865, 0,
	3921, 3835, 0, 3909, 0, 0, 3912, 641, 0, 0,
	3925, 0, 3906, 3377, 0, 0, 0, 3471, 3472, 3920,
	0, 0, 0, 0, 0, 0, 0, 2231, 3738, 3922,
	1825, 0, 0, 0, 646, 1705, 0, 0, 0, 3929,
	0, 3952, 0, 882, 0, 0, 0, 3489, 0, 0,
	0, 0, 0, 0, 3935, 0, 3753, 746, 0, 851,
	3944, 3942, 0, 0, 0, 3948, 0, 0, 3729, 0,
	0, 1180, 3992, 882, 3504, 3954, 882, 0, 0, 2954,
	0, 0, 3967, 3838, 0, 3840, 0, 3842, 2959, 3964,
	0, 3966, 745, 3968, 1825, 3972, 0, 0, 850, 3974,
	0, 745, 745, 0, 0, 0, 0, 0, 3983, 882,
	0, 0, 0, 0, 0, 0, 3996, 0, 0, 3197,
	0, 0, 882, 0, 0, 0, 4043, 0, 704, 704,
	1705, 0, 4030, 4031, 4037, 3969, 0, 0, 0, 4045,
	4046, 4040, 0, 0, 4033, 4035, 4034, 0, 1705, 0,
	4024, 3198, 0, 0, 746, 0, 736, 736, 0, 0,
	0, 1704, 0, 0, 0, 1180, 0, 4069, 4036, 0,
	0, 0, 4039, 0, 0, 704, 0, 4060, 0, 0,
	4080, 1825, 1825, 0, 1974, 4083, 4078, 4057, 0, 0,
	882, 882, 4054, 0, 882, 2231, 4074, 4075, 4063, 745,
	4068, 0, 1815, 736, 4073, 1704, 2205, 1704, 0, 0,
	0, 0, 0, 0, 4065, 0, 4067, 0, 0, 4094,
	3916, 641, 641, 0, 0, 0, 0, 4084, 0, 3197,
	745, 704, 0, 0, 0, 745, 0, 2231, 3897, 3898,
	3899, 3900, 4102, 4103, 4095, 0, 4093, 4109, 4089, 0,
	4098, 0, 3917, 851, 0, 0, 4111, 0, 4106, 4113,
	4107, 3198, 4108, 4101, 0, 3909, 0, 0, 641, 0,
	3870, 0, 0, 4105, 0, 0, 0, 0, 4118, 0,
	4122, 4136, 882, 0, 0, 4139, 0, 0, 882, 4125,
	4047, 0, 0, 0, 991, 0, 4127, 3835, 0, 992,
	0, 0, 0, 1001, 0, 3901, 0, 3904, 4138, 3122,
	0, 0, 0, 0, 0, 882, 0, 0, 2231, 4126,
	4143, 4161, 4162, 4163, 3729, 4142, 4150, 0, 4152, 0,
	4160, 4144, 4146, 0, 641, 0, 0, 0, 4171, 4172,
	3197, 0, 0, 0, 4186, 4157, 4178, 4145, 4164, 4147,
	0, 745, 4158, 746, 0, 4175, 0, 4136, 4180, 0,
	850, 4155, 4156, 0, 0, 0, 994, 4179, 0, 0,
	0, 4177, 3198, 4203, 4206, 4159, 0, 0, 4210, 0,
	0, 0, 0, 0, 4176, 0, 882, 0, 0, 2231,
	4212, 0, 4218, 0, 3965, 1000, 0, 0, 4215, 2231,
	0, 0, 0, 0, 0, 0, 704, 4186, 0, 745,
	4227, 4228, 0, 0, 4234, 0, 746, 4211, 0, 0,
	0, 2598, 2598, 0, 0, 0, 1005, 704, 704, 4258,
	4253, 4250, 4254, 3961, 4235, 4260, 4249, 0, 4256, 4257,
	0, 0, 4136, 4270, 0, 0, 4269, 0, 4186, 4272,
	0, 0, 4233, 706, 706, 736, 736, 0, 4020, 0,
	706, 706, 0, 706, 4260, 4278, 0, 0, 0, 990,
	0, 4136, 4286, 0, 0, 0, 0, 4287, 0, 0,
	988, 0, 0, 4085, 4086, 1705, 0, 4088, 3284, 0,
	1704, 0, 0, 0, 1021, 0, 995, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 3296,
	0, 65, 67, 0, 0, 851, 0, 0, 0, 0,
	0, 77, 2231, 0, 0, 0, 0, 0, 0, 989,
	0, 997, 0, 0, 0, 0, 0, 996, 867, 0,
	0, 0, 0, 0, 1705, 4081, 4082, 880, 74, 0,
	1201, 0, 75, 0, 0, 0, 0, 0, 706, 0,
	706, 706, 1023, 706, 706, 0, 0, 0, 0, 66,
	874, 62, 79, 65, 67, 1799, 0, 0, 2588, 69,
	0, 679, 998, 77, 706, 706, 0, 0, 0, 0,
	0, 1800, 0, 0, 0, 0, 0, 64, 1804, 0,
	0, 0, 0, 0, 0, 0, 806, 1705, 0, 0,
	74, 3383, 2757, 0, 75, 806, 0, 0, 0, 0,
	2756, 2762, 0, 0, 0, 0, 0, 999, 2758, 1703,
	0, 0, 0, 0, 79, 2231, 0, 0, 1002, 0,
	0, 69, 0, 4185, 592, 0, 0, 0, 1705, 0,
	0, 62, 0, 0, 0, 0, 62, 0, 0, 64,
	0, 0, 0, 1703, 0, 0, 0, 0, 706, 0,
	0, 2454, 0, 1004, 1003, 640, 0, 661, 0, 663,
	0, 806, 0, 0, 0, 1022, 0, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 2753,
	0, 0, 0, 0, 0, 0, 4185, 991, 731, 732,
	0, 734, 992, 1703, 0, 0, 1001, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 765,
	0, 768, 1703, 0, 772, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3468, 4185, 0, 4183,
	993, 0, 3605, 0, 0, 0, 0, 0, 0, 0,
	3205, 0, 880, 0, 0, 1201, 0, 0, 0, 1211,
	1212, 1213, 0, 0, 3740, 0, 706, 1024, 0, 994,
	1007, 1794, 0, 0, 1795, 744, 0, 3496, 1801, 0,
	1799, 0, 0, 2231, 0, 1798, 1802, 1797, 0, 1803,
	0, 0, 0, 1796, 1217, 1218, 1800, 1025, 1000, 0,
	1026, 3507, 4183, 1804, 1027, 0, 0, 744, 744, 0,
	0, 0, 0, 0, 0, 0, 1834, 0, 0, 0,
	0, 0, 0, 0, 2765, 0, 1028, 0, 706, 1005,
	806, 706, 0, 706, 706, 0, 806, 0, 0, 0,
	0, 0, 0, 4183, 0, 0, 0, 2598, 2598, 0,
	0, 0, 0, 0, 0, 2598, 2598, 0, 706, 0,
	2764, 0, 0, 0, 1031, 0, 0, 0, 0, 0,
	68, 0, 990, 0, 744, 0, 0, 70, 0, 2703,
	706, 1029, 0, 2766, 2231, 0, 0, 0, 0, 0,
	0, 0, 0, 2231, 0, 0, 0, 0, 1030, 995,
	0, 706, 706, 0, 0, 0, 0, 0, 0, 0,
	0, 706, 706, 0, 0, 0, 706, 706, 0, 0,
	0, 706, 0, 0, 0, 0, 0, 0, 3044, 0,
	706, 0, 68, 0, 997, 1032, 706, 706, 706, 70,
	996, 0, 0, 0, 0, 0, 706, 0, 0, 880,
	0, 0, 1201, 2760, 0, 0, 1211, 1212, 1213, 0,
	0, 0, 0, 0, 2763, 0, 706, 0, 1794, 0,
	0, 706, 0, 0, 0, 1801, 706, 1799, 706, 0,
	0, 0, 1798, 1802, 1797, 998, 1803, 0, 0, 0,
	1796, 1217, 1218, 1800, 78, 0, 0, 0, 0, 0,
	1804, 0, 0, 0, 2231, 0, 0, 73, 0, 0,
	806, 0, 0, 0, 0, 744, 880, 0, 2598, 1201,
	0, 0, 0, 1211, 1212, 1213, 0, 0, 0, 0,
	999, 3710, 3712, 0, 0, 1794, 0, 0, 1795, 806,
	806, 1002, 1801, 2759, 1799, 775, 0, 0, 806, 1798,
	1802, 1797, 0, 1803, 0, 0, 78, 1796, 1217, 1218,
	1800, 1202, 1203, 1204, 1205, 1206, 1207, 1804, 0, 73,
	0, 0, 0, 0, 2917, 880, 1004, 1003, 1201, 0,
	1703, 806, 1211, 1212, 1213, 2761, 0, 806, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 744, 744, 0,
	0, 1801, 0, 1799, 0, 0, 0, 0, 1798, 1802,
	1797, 0, 1803, 0, 0, 1704, 1796, 1217, 1218, 1800,
	0, 0, 0, 610, 610, 0, 1804, 0, 706, 3785,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 665, 0, 669, 0, 0, 1704,
	674, 675, 706, 993, 680, 681, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 733, 0, 0, 0, 0, 0,
	750, 0, 753, 1007, 755, 756, 757, 758, 759, 0,
	0, 0, 764, 0, 0, 0, 769, 0, 0, 1704,
	776, 0, 0, 1703, 1703, 1703, 0, 0, 0, 0,
	0, 0, 0, 0, 745, 946, 947, 0, 1704, 0,
	0, 0, 3863, 0, 3863, 3863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2598, 2598, 2598, 2598,
	2598, 2598, 2598, 2598, 2598, 2598, 2598, 2598, 0, 3878,
	0, 0, 706, 0, 0, 983, 0, 0, 1220, 0,
	0, 0, 744, 0, 0, 991, 0, 1208, 1209, 1210,
	992, 745, 0, 0, 1001, 0, 1202, 1203, 1204, 1205,
	1206, 1207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 745, 745, 806, 0, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 991, 0, 0,
	1060, 1061, 992, 0, 0, 0, 1001, 0, 0, 0,
	0, 0, 744, 0, 0, 0, 0, 994, 0, 0,
	0, 706, 0, 0, 706, 0, 0, 706, 706, 0,
	706, 706, 706, 0, 0, 706, 706, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1000, 0, 0, 706,
	745, 0, 0, 0, 706, 0, 0, 0, 706, 706,
	0, 0, 0, 0, 0, 0, 0, 706, 772, 994,
	1224, 0, 0, 0, 0, 0, 0, 1005, 0, 0,
	0, 706, 0, 0, 706, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 706, 706,
	0, 706, 1681, 0, 0, 0, 1684, 1685, 1224, 0,
	990, 0, 0, 0, 0, 0, 0, 0, 0, 1005,
	0, 988, 0, 0, 0, 1220, 0, 0, 0, 706,
	0, 0, 0, 0, 1208, 1209, 1210, 995, 0, 0,
	0, 62, 0, 1202, 1203, 1204, 1205, 1206, 1207, 806,
	706, 706, 806, 0, 806, 0, 0, 0, 0, 0,
	0, 0, 990, 0, 0, 0, 0, 806, 806, 0,
	989, 806, 997, 0, 0, 4079, 744, 0, 996, 0,
	0, 745, 0, 0, 0, 0, 0, 0, 706, 995,
	0, 0, 1220, 1874, 1875, 1876, 1877, 0, 1878, 0,
	0, 1208, 1209, 1210, 0, 806, 0, 0, 3707, 0,
	1202, 1203, 1204, 1205, 1206, 1207, 0, 0, 0, 0,
	0, 0, 0, 998, 997, 0, 0, 0, 0, 0,
	996, 0, 744, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1960, 0, 706, 706, 1704, 0, 0, 0,
	0, 1220, 0, 0, 0, 0, 0, 0, 0, 0,
	1208, 1209, 1210, 745, 745, 3538, 2598, 0, 999, 1202,
	1203, 1204, 1205, 1206, 1207, 998, 0, 0, 0, 1002,
	0, 0, 706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1703, 806, 1703, 0, 0, 0,
	0, 0, 986, 0, 1004, 1003, 0, 1703, 0, 0,
	999, 0, 0, 0, 610, 0, 4168, 0, 0, 0,
	0, 1002, 0, 0, 0, 0, 0, 2059, 2060, 2061,
	2062, 2063, 0, 0, 0, 0, 930, 703, 0, 772,
	2088, 0, 0, 0, 0, 0, 0, 2091, 0, 0,
	0, 0, 0, 0, 2912, 0, 1004, 1003, 0, 1704,
	1704, 1704, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 971,
	0, 993, 975, 0, 0, 0, 0, 706, 706, 0,
	0, 0, 0, 0, 706, 806, 706, 706, 706, 706,
	706, 706, 706, 706, 706, 706, 706, 706, 0, 0,
	706, 1007, 706, 0, 0, 0, 0, 706, 745, 706,
	0, 0, 0, 706, 0, 0, 0, 0, 0, 0,
	0, 706, 0, 993, 0, 0, 0, 0, 706, 0,
	0, 0, 706, 706, 0, 0, 706, 2159, 0, 0,
	0, 0, 0, 1059, 2151, 3732, 0, 745, 0, 706,
	2598, 0, 0, 1007, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 1201, 0, 0, 0,
	1211, 1212, 1213, 0, 0, 0, 0, 0, 745, 0,
	0, 806, 1794, 787, 787, 1795, 0, 806, 0, 1801,
	0, 1799, 0, 0, 0, 0, 1798, 1802, 1797, 0,
	1803, 0, 806, 0, 1796, 1217, 1218, 1800, 0, 0,
	0, 0, 0, 0, 1804, 0, 0, 0, 0, 706,
	91, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 1703, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 0, 0, 94,
	706, 0, 880, 991, 0, 1201, 0, 744, 992, 1211,
	1212, 1213, 1001, 0, 0, 0, 0, 0, 706, 0,
	0, 1794, 0, 706, 1795, 0, 0, 0, 1801, 0,
	1799, 0, 0, 0, 0, 1798, 1802, 1797, 0, 1803,
	0, 101, 0, 1796, 1217, 1218, 1800, 0, 0, 0,
	610, 0, 0, 1804, 0, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 994, 0, 1846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	744, 2598, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 745, 0, 1000, 0, 0, 0, 1882, 0,
	909, 0, 0, 806, 0, 0, 0, 0, 0, 0,
	0, 706, 744, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 1005, 0, 806, 880, 0,
	0, 1201, 0, 0, 0, 1211, 1212, 1213, 706, 706,
	706, 0, 0, 0, 0, 0, 0, 1794, 745, 0,
	1795, 0, 0, 97, 1801, 0, 1799, 0, 0, 0,
	0, 1798, 1802, 1797, 0, 1803, 0, 0, 990, 1796,
	1217, 1218, 1800, 0, 0, 706, 706, 0, 1999, 1804,
	0, 0, 0, 0, 0, 706, 706, 706, 0, 93,
	0, 0, 0, 0, 0, 995, 103, 0, 1703, 2024,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 115, 706, 0,
	1704, 0, 1704, 806, 0, 0, 0, 0, 4005, 0,
	997, 0, 0, 1704, 0, 0, 996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2090,
	0, 0, 2092, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 706, 0,
	0, 998, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1224, 1224, 1224, 1224, 0, 1224, 706,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 1224, 0, 0, 0, 108, 0, 0, 0, 806,
	0, 0, 0, 0, 0, 0, 999, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 1002, 0, 0,
	0, 706, 92, 0, 0, 2598, 2598, 0, 0, 2598,
	100, 0, 0, 0, 0, 0, 0, 806, 806, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	706, 109, 1004, 1003, 0, 0, 0, 104, 0, 113,
	706, 112, 96, 0, 0, 706, 0, 0, 0, 0,
	706, 0, 95, 0, 0, 0, 706, 0, 0, 117,
	0, 116, 0, 0, 1224, 0, 0, 0, 0, 1220,
	0, 0, 0, 744, 0, 0, 0, 0, 1208, 1209,
	1210, 0, 0, 0, 0, 3679, 0, 1202, 1203, 1204,
	1205, 1206, 1207, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 806, 0, 993,
	787, 0, 0, 2159, 0, 806, 0, 0, 0, 592,
	0, 2151, 0, 0, 0, 0, 0, 0, 0, 2219,
	2219, 0, 1704, 0, 0, 0, 0, 0, 0, 1007,
	0, 0, 0, 0, 706, 0, 0, 0, 1703, 2245,
	0, 0, 0, 745, 0, 0, 0, 0, 1220, 706,
	0, 0, 0, 706, 0, 159, 0, 1208, 1209, 1210,
	744, 706, 706, 0, 3658, 0, 1202, 1203, 1204, 1205,
	1206, 1207, 0, 162, 0, 0, 0, 0, 706, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2338, 158, 0, 0, 0, 0, 0, 806, 0,
	806, 806, 706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2373, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 806, 745, 0, 0, 0,
	0, 706, 0, 1703, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1703, 0, 0, 0, 0, 0, 744, 745, 0,
	0, 0, 0, 0, 0, 0, 706, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 168, 1220, 0, 0, 0, 0, 0,
	0, 0, 0, 1208, 1209, 1210, 2463, 2464, 0, 0,
	3634, 0, 1202, 1203, 1204, 1205, 1206, 1207, 0, 0,
	0, 0, 0, 0, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1704, 861, 861, 0, 706, 0,
	156, 787, 0, 0, 0, 0, 0, 169, 787, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	0, 0, 0, 163, 0, 0, 0, 0, 706, 0,
	0, 706, 0, 2547, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 1224, 1224, 1224,
	1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
	1224, 0, 0, 1224, 706, 0, 0, 0, 0, 1224,
	772, 0, 0, 1224, 706, 2219, 0, 706, 0, 0,
	0, 0, 0, 706, 706, 0, 0, 0, 0, 787,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2159,
	0, 0, 0, 1224, 0, 0, 744, 0, 0, 0,
	0, 1681, 0, 0, 175, 0, 1224, 0, 0, 599,
	0, 0, 0, 151, 0, 0, 172, 745, 0, 0,
	706, 806, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 706, 706, 0, 0, 706,
	0, 176, 0, 173, 0, 0, 0, 0, 160, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 2659, 0, 2663, 0, 706, 0, 166, 0, 0,
	0, 0, 0, 0, 706, 787, 706, 787, 880, 0,
	0, 1201, 0, 167, 0, 1211, 1212, 1213, 0, 177,
	0, 0, 0, 155, 0, 0, 622, 1794, 0, 745,
	1795, 0, 787, 0, 1801, 0, 1799, 0, 0, 161,
	0, 1798, 1802, 1797, 0, 1803, 0, 0, 3349, 1796,
	1217, 1218, 1800, 0, 0, 0, 2717, 706, 1703, 1804,
	691, 694, 696, 706, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1674, 1675, 1676, 1677, 787,
	706, 0, 1679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 806, 0, 1704, 880, 0, 2313, 1201, 0,
	1692, 0, 1211, 1212, 1213, 706, 0, 1703, 0, 0,
	0, 1785, 0, 0, 1794, 2327, 745, 1795, 0, 62,
	0, 1801, 0, 1799, 0, 0, 0, 2344, 1798, 1802,
	1797, 0, 1803, 0, 0, 2355, 1796, 1217, 1218, 1800,
	0, 0, 0, 0, 0, 0, 1804, 0, 0, 0,
	0, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2386, 2387, 2388, 0, 0, 0,
	1703, 706, 0, 0, 0, 2395, 0, 0, 0, 0,
	0, 0, 0, 2407, 0, 2411, 2412, 0, 0, 1704,
	0, 2416, 706, 706, 2420, 2421, 0, 0, 2428, 0,
	2430, 2433, 0, 0, 0, 0, 0, 1704, 0, 0,
	0, 1703, 0, 745, 2455, 2456, 0, 0, 2460, 2461,
	0, 0, 1224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2470, 2471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2484, 0, 2485, 2486,
	2487, 2488, 2489, 0, 0, 2491, 0, 0, 0, 2495,
	0, 0, 0, 2498, 2499, 0, 0, 2502, 2503, 0,
	0, 2508, 2509, 0, 0, 0, 0, 2510, 2511, 2512,
	0, 0, 0, 2513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 991, 0, 0,
	2526, 0, 992, 2527, 0, 0, 1001, 0, 0, 0,
	2538, 2539, 0, 0, 0, 0, 2546, 0, 1224, 1224,
	880, 0, 0, 1201, 0, 2955, 2956, 1211, 1212, 1213,
	0, 0, 1224, 0, 1224, 2960, 0, 2258, 0, 1794,
	0, 0, 1795, 1224, 0, 2271, 1801, 0, 1799, 0,
	0, 0, 0, 1798, 1802, 1797, 1224, 1803, 0, 0,
	0, 1796, 1217, 1218, 1800, 0, 0, 0, 1224, 994,
	0, 1804, 1224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 62, 62, 0, 0, 1000, 0,
	0, 0, 0, 0, 0, 0, 2219, 0, 2277, 2219,
	0, 861, 745, 2128, 2129, 2130, 2131, 2132, 2133, 2134,
	2135, 2136, 2137, 2138, 2139, 2140, 2141, 0, 0, 1005,
	2144, 0, 2150, 0, 0, 2154, 0, 0, 0, 0,
	0, 0, 2273, 0, 0, 880, 0, 0, 1201, 0,
	62, 0, 1211, 1212, 1213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1794, 0, 0, 1795, 0, 0,
	0, 1801, 990, 1799, 0, 745, 2258, 0, 1798, 1802,
	1797, 0, 1803, 0, 2271, 0, 1796, 1217, 1218, 1800,
	0, 0, 0, 0, 0, 0, 1804, 0, 0, 995,
	0, 0, 0, 0, 1220, 0, 0, 0, 0, 0,
	0, 0, 0, 1208, 1209, 1210, 0, 0, 0, 0,
	0, 0, 1202, 1203, 1204, 1205, 1206, 1207, 3108, 0,
	2263, 0, 901, 0, 997, 0, 0, 0, 0, 0,
	996, 0, 0, 0, 1704, 911, 0, 2277, 0, 1224,
	0, 0, 2272, 920, 922, 0, 924, 0, 2746, 3128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2186, 0, 0, 1224, 0, 0, 2219,
	0, 2273, 0, 0, 0, 998, 2788, 0, 0, 0,
	0, 0, 2268, 0, 2796, 0, 2796, 0, 963, 0,
	3344, 1220, 2805, 1704, 0, 0, 0, 0, 0, 0,
	1208, 1209, 1210, 0, 0, 2265, 0, 0, 0, 1202,
	1203, 1204, 1205, 1206, 1207, 0, 0, 0, 1037, 0,
	999, 0, 0, 0, 0, 0, 2259, 0, 0, 2270,
	0, 1002, 0, 0, 0, 0, 0, 0, 0, 0,
	2857, 0, 0, 1224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1704, 0, 0, 2263,
	2881, 2882, 2883, 2884, 2473, 0, 1004, 1003, 0, 0,
	0, 2276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2272, 0, 0, 0, 0, 0, 0, 1224, 1224,
	0, 0, 0, 0, 1224, 1224, 1224, 1704, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 2290, 2294,
	2909, 2910, 0, 2913, 2914, 2915, 0, 2290, 0, 1224,
	0, 2268, 0, 2269, 0, 0, 0, 0, 1224, 1224,
	0, 0, 0, 0, 0, 0, 0, 2926, 0, 2266,
	0, 0, 0, 993, 2265, 0, 2264, 0, 0, 0,
	2274, 0, 0, 0, 0, 0, 2942, 0, 0, 0,
	0, 2943, 0, 2260, 0, 2259, 1224, 1224, 2270, 0,
	0, 0, 0, 1007, 0, 0, 0, 2219, 2219, 0,
	0, 2219, 0, 787, 0, 0, 0, 2267, 0, 2261,
	0, 0, 0, 0, 0, 0, 787, 1224, 0, 0,
	0, 0, 0, 0, 0, 1224, 1224, 0, 0, 0,
	2276, 2965, 0, 0, 0, 0, 1220, 0, 0, 0,
	0, 0, 1787, 0, 0, 1208, 1209, 1210, 0, 3367,
	0, 0, 3250, 0, 1202, 1203, 1204, 1205, 1206, 1207,
	0, 0, 0, 1831, 0, 70, 0, 0, 2254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2266, 0,
	0, 0, 0, 0, 0, 2264, 0, 3410, 0, 2274,
	1896, 0, 0, 0, 1900, 0, 2184, 0, 0, 1912,
	0, 0, 2260, 880, 0, 0, 1201, 0, 0, 0,
	1211, 1212, 1213, 0, 0, 0, 0, 0, 1957, 0,
	0, 0, 1794, 0, 0, 1795, 2267, 0, 2261, 1801,
	3073, 1799, 0, 0, 1971, 0, 1798, 1802, 1797, 0,
	1803, 1220, 787, 0, 1796, 1217, 1218, 1800, 787, 0,
	1208, 1209, 1210, 1988, 1804, 0, 1991, 3182, 0, 1202,
	1203, 1204, 1205, 1206, 1207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2023, 2796, 0, 0, 1912, 1912, 1912, 3107,
	0, 0, 0, 2197, 0, 2140, 2141, 0, 2144, 2150,
	0, 0, 0, 0, 2045, 2046, 0, 0, 0, 1224,
	1224, 0, 0, 0, 1224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1224, 1224,
	1224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1224, 0, 0, 0, 0, 3143, 0, 2186, 2186,
	2186, 0, 0, 2796, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3172,
	3173, 0, 0, 0, 2111, 0, 0, 0, 0, 0,
	0, 2219, 0, 0, 0, 0, 0, 0, 3190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2125,
	0, 0, 2699, 1224, 3225, 0, 0, 0, 0, 0,
	0, 62, 0, 3227, 3228, 3229, 0, 0, 3232, 0,
	0, 3235, 3236, 3237, 3238, 0, 0, 0, 62, 0,
	1224, 2290, 2699, 0, 3247, 0, 3248, 0, 3249, 0,
	2732, 0, 0, 0, 0, 0, 0, 3262, 0, 0,
	0, 0, 62, 0, 0, 0, 3268, 3269, 1224, 0,
	0, 3272, 3273, 3274, 3275, 3276, 0, 0, 0, 0,
	0, 0, 0, 2699, 0, 0, 0, 3663, 0, 787,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2493, 0, 0, 0, 0, 0, 0, 3677, 3678,
	1224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1224, 1224, 1224, 880, 0, 0,
	1201, 0, 0, 0, 1211, 1212, 1213, 0, 1224, 0,
	0, 0, 0, 0, 0, 0, 1794, 0, 0, 1795,
	3324, 0, 0, 1801, 1224, 1799, 0, 0, 0, 0,
	1798, 1802, 1797, 0, 1803, 0, 0, 62, 1796, 1217,
	1218, 1800, 0, 0, 880, 0, 0, 1201, 1804, 0,
	0, 1211, 1212, 1213, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1794, 0, 0, 1795, 0, 0, 0,
	1801, 0, 1799, 0, 0, 0, 0, 1798, 1802, 1797,
	0, 1803, 0, 0, 0, 1796, 1217, 1218, 1800, 0,
	0, 0, 0, 3001, 0, 1804, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2589, 2590, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2603, 0, 0, 0, 2605, 0, 0, 0,
	0, 0, 3418, 0, 0, 2614, 0, 0, 0, 0,
	0, 2184, 2184, 2184, 0, 0, 0, 0, 0, 0,
	0, 2627, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2219, 1220,
	0, 2639, 0, 0, 0, 0, 2643, 787, 1208, 1209,
	1210, 0, 0, 0, 0, 3161, 787, 1202, 1203, 1204,
	1205, 1206, 1207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1224, 0, 0, 0, 3476, 0, 0, 3478,
	0, 0, 0, 0, 0, 3481, 3482, 3483, 0, 0,
	3486, 3487, 3488, 0, 0, 0, 2186, 3491, 3492, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 1201, 0,
	0, 0, 1211, 1212, 1213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1794, 0, 0, 1795, 3508, 3509,
	0, 1801, 3513, 1799, 3514, 0, 0, 0, 1798, 1802,
	1797, 0, 1803, 1224, 0, 0, 1796, 1217, 1218, 1800,
	0, 0, 0, 0, 0, 0, 1804, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1224, 0,
	0, 0, 0, 2820, 0, 0, 0, 0, 3951, 0,
	0, 0, 0, 0, 0, 1224, 0, 0, 0, 0,
	0, 2290, 880, 0, 2699, 1201, 2699, 2847, 0, 1211,
	1212, 1213, 0, 0, 0, 0, 0, 0, 0, 2290,
	2290, 1794, 0, 2699, 1795, 0, 0, 0, 1801, 0,
	1799, 0, 0, 0, 0, 1798, 1802, 1797, 0, 1803,
	0, 0, 2796, 1796, 1217, 1218, 1800, 0, 0, 0,
	0, 0, 0, 1804, 0, 3640, 0, 787, 0, 0,
	3643, 0, 0, 0, 0, 0, 3649, 0, 0, 3651,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 992, 0, 0, 0, 1001,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 1224, 0, 0, 2924, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3686, 3687, 0, 0, 0, 0, 3693, 0, 0, 0,
	3695, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3708,
	0, 0, 994, 1220, 0, 0, 0, 2699, 0, 0,
	0, 1224, 1208, 1209, 1210, 0, 0, 0, 0, 0,
	1224, 1202, 1203, 1204, 1205, 1206, 1207, 0, 0, 0,
	0, 1000, 2314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2969, 0, 0, 2970,
	1220, 0, 0, 0, 0, 2975, 2976, 2977, 0, 1208,
	1209, 1210, 1005, 0, 0, 0, 2997, 0, 1202, 1203,
	1204, 1205, 1206, 1207, 3000, 0, 0, 0, 0, 2184,
	0, 0, 880, 3009, 3010, 1201, 787, 0, 0, 1211,
	1212, 1213, 861, 0, 0, 0, 0, 0, 0, 4128,
	0, 1794, 2389, 2390, 1795, 990, 0, 787, 1801, 0,
	1799, 0, 0, 0, 0, 1798, 1802, 1797, 0, 1803,
	0, 0, 2796, 1796, 1217, 1218, 1800, 0, 0, 0,
	0, 2186, 995, 1804, 3047, 2186, 3048, 0, 2435, 0,
	3819, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2457, 0, 0, 0, 0, 0, 0, 991, 0, 0,
	0, 0, 992, 0, 3078, 0, 1001, 997, 0, 0,
	0, 0, 0, 996, 2476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3086, 3087, 0, 0, 0,
	3855, 0, 0, 3858, 0, 0, 0, 0, 0, 0,
	1224, 0, 0, 3378, 0, 0, 0, 0, 0, 787,
	0, 0, 0, 0, 0, 0, 991, 0, 998, 0,
	0, 992, 0, 0, 2290, 1001, 0, 0, 0, 994,
	0, 0, 0, 0, 0, 0, 0, 3887, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 0,
	0, 1220, 0, 999, 0, 0, 0, 0, 0, 0,
	1208, 1209, 1210, 0, 1002, 2189, 0, 0, 0, 1202,
	1203, 1204, 1205, 1206, 1207, 0, 0, 0, 994, 1005,
	0, 0, 0, 0, 0, 0, 2076, 0, 0, 0,
	0, 159, 0, 0, 0, 0, 0, 2459, 0, 1004,
	1003, 0, 0, 0, 0, 0, 0, 1000, 3955, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 990, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 787, 0, 0, 0, 1005, 3976,
	3977, 0, 0, 0, 0, 0, 0, 0, 1220, 995,
	0, 0, 0, 0, 0, 0, 0, 1208, 1209, 1210,
	0, 0, 0, 0, 2164, 0, 1202, 1203, 1204, 1205,
	1206, 1207, 0, 0, 0, 787, 993, 0, 0, 0,
	0, 990, 0, 0, 997, 0, 0, 0, 0, 0,
	996, 0, 0, 0, 0, 0, 0, 0, 0, 787,
	0, 0, 0, 0, 0, 0, 1007, 0, 995, 0,
	0, 0, 0, 0, 2684, 0, 2687, 2688, 0, 168,
	0, 2692, 3290, 3291, 2072, 0, 4048, 0, 0, 3295,
	0, 0, 0, 0, 0, 998, 0, 0, 0, 4058,
	0, 0, 0, 997, 0, 3309, 0, 3310, 0, 996,
	164, 0, 3311, 0, 2184, 0, 0, 0, 2184, 0,
	0, 165, 0, 0, 4076, 0, 0, 0, 0, 0,
	0, 0, 2082, 3322, 0, 0, 0, 0, 0, 0,
	999, 0, 0, 991, 1021, 2749, 2074, 0, 992, 0,
	0, 1002, 1001, 169, 998, 2699, 0, 0, 0, 0,
	0, 170, 0, 0, 0, 991, 0, 0, 0, 163,
	992, 2075, 0, 0, 1001, 0, 0, 0, 0, 0,
	0, 0, 2801, 2802, 1997, 0, 1004, 1003, 0, 0,
	0, 0, 2086, 0, 0, 0, 0, 0, 0, 999,
	0, 0, 0, 0, 0, 4123, 1912, 0, 0, 0,
	1002, 0, 1023, 0, 0, 994, 0, 0, 0, 0,
	0, 0, 0, 0, 3404, 0, 991, 1021, 0, 0,
	0, 992, 0, 0, 0, 1001, 0, 994, 1220, 0,
	0, 0, 0, 1993, 1000, 1004, 1003, 1208, 1209, 1210,
	0, 2699, 0, 0, 0, 0, 1202, 1203, 1204, 1205,
	1206, 1207, 0, 993, 0, 0, 1000, 0, 0, 151,
	2077, 0, 172, 0, 0, 1005, 0, 0, 3431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 787,
	787, 2083, 0, 1007, 2078, 1023, 0, 1005, 994, 173,
	0, 0, 0, 0, 160, 0, 0, 174, 0, 0,
	3459, 0, 0, 0, 0, 0, 0, 0, 990, 0,
	0, 0, 993, 166, 0, 0, 0, 1000, 2084, 0,
	0, 0, 0, 0, 2085, 1022, 0, 2936, 0, 167,
	990, 0, 0, 2079, 0, 995, 0, 0, 0, 2080,
	0, 0, 1007, 0, 0, 0, 0, 0, 1005, 0,
	0, 0, 0, 0, 0, 161, 0, 995, 0, 0,
	0, 0, 0, 0, 0, 0, 3501, 4252, 0, 3378,
	997, 0, 0, 0, 0, 0, 996, 787, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2073, 0, 0,
	0, 990, 997, 3515, 3516, 3517, 0, 0, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1022, 0,
	0, 0, 0, 0, 0, 0, 0, 1024, 995, 0,
	0, 998, 0, 133, 0, 0, 0, 0, 119, 0,
	3529, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3545, 998, 0, 0, 123, 1025, 0, 0,
	1026, 0, 0, 997, 1027, 0, 0, 0, 0, 996,
	0, 0, 0, 0, 0, 145, 1020, 0, 0, 0,
	787, 0, 787, 787, 0, 0, 1028, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 999, 0,
	0, 0, 0, 0, 0, 0, 0, 787, 0, 1002,
	1024, 0, 0, 0, 998, 0, 0, 0, 0, 0,
	2468, 0, 1004, 1003, 1031, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1025, 1029, 1035, 1026, 1004, 1003, 0, 1027, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1030, 1020,
	0, 0, 0, 0, 3092, 0, 0, 0, 0, 1028,
	1002, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3115, 0, 1032, 0, 126, 0, 993,
	0, 0, 0, 1017, 0, 1004, 1003, 1031, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 993, 0, 0, 1029, 0, 0, 0, 0, 1007,
	0, 0, 0, 129, 0, 0, 0, 0, 1896, 0,
	143, 1030, 0, 0, 0, 0, 0, 0, 150, 0,
	0, 1007, 0, 0, 0, 0, 124, 0, 130, 0,
	0, 3743, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1032, 120,
	0, 0, 993, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1007, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 3814,
	0, 0, 0, 0, 0, 0, 151, 135, 0, 136,
	0, 0, 0, 787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 137, 0, 0, 141, 0, 138, 0, 0, 0,
	0, 121, 0, 3849, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 0, 140, 0, 3866, 0, 0,
	0, 146, 0, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 787, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3389, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4032,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4041, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3594, 0,
	0, 0, 3047, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3795,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3841, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1707,
	206, 1713, 223, 711, 1723, 272, 309, 524, 1710, 1755,
	369, 1760, 422, 426, 1784, 515, 1717, 1720, 1730, 1733,
	280, 1738, 716, 1746, 722, 1756, 728, 1775, 491, 1781,
	718, 719, 724, 211, 605, 514, 585, 1769, 1715, 1773,
	376, 1766, 1742, 1782, 1759, 1771, 1752, 1757, 219, 1744,
	1745, 1749, 1758, 720, 717, 721, 727, 715, 725, 712,
	723, 1779, 413, 347, 3911, 564, 440, 218, 264, 251,
	293, 335, 447, 1714, 1732, 325, 495, 260, 349, 1765,
	239, 382, 1778, 471, 346, 1772, 454, 474, 1734, 366,
	245, 405, 461, 462, 709, 714, 1722, 730, 1709, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 1740,
	357, 414, 571, 1712, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 1780,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 1708, 208, 209, 210, 212, 213, 214, 708, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 710, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 1724, 1725,
	1726, 713, 1727, 1728, 1729, 252, 253, 254, 255, 256,
	257, 1731, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 1735, 275, 277, 1736, 278, 281, 1737, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 1739,
	291, 292, 294, 1741, 297, 298, 299, 300, 301, 1743,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	1747, 322, 323, 324, 326, 1748, 327, 328, 331, 332,
	333, 334, 1750, 336, 544, 1751, 337, 338, 339, 1753,
	1754, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 726, 383, 384, 385, 386, 387, 388, 389,
	391, 1762, 393, 394, 395, 554, 396, 397, 398, 399,
	1763, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 1764, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 603, 1767, 448, 558, 449, 450, 451, 452,
	453, 1768, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 1770, 472, 473, 729,
	475, 476, 477, 478, 479, 1774, 604, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 1776,
	1777, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 1783, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 1761, 1711,
	1716, 1718, 1719, 1721, 0, 0, 0, 0, 0, 0,
	0, 0, 1231, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 1201, 0, 0, 1700, 1211, 1212, 1213, 1242,
	1244, 1228, 1271, 1292, 0, 1343, 1389, 1359, 1214, 1476,
	1482, 1215, 1543, 1547, 0, 1225, 1273, 1222, 1323, 1338,
	1353, 1365, 1221, 1226, 1219, 1480, 1227, 1624, 1635, 1655,
	1216, 1217, 1218, 1223, 1616, 1673, 1442, 1601, 1253, 0,
	1230, 1567, 0, 0, 1490, 1605, 0, 0, 1267, 0,
	0, 0, 0, 1415, 1404, 1438, 1551, 1376, 1496, 1304,
	1463, 1641, 1533, 1452, 0, 1647, 1565, 1266, 1332, 1316,
	1368, 1433, 1574, 1249, 1333, 1408, 1639, 1328, 1454, 0,
	1295, 1498, 1640, 1603, 1451, 1614, 1584, 1609, 1339, 1477,
	1302, 1524, 1591, 1592, 1262, 1375, 1297, 1650, 1247, 1307,
	1315, 1485, 1286, 1493, 1671, 1425, 1558, 1508, 1506, 0,
	1465, 1534, 1666, 0, 0, 1352, 0, 1346, 1484, 1658,
	1293, 1632, 1527, 1489, 1427, 1561, 1596, 1348, 1329, 1330,
	1386, 1526, 1371, 1305, 1646, 1422, 1426, 1424, 1420, 1417,
	1421, 1418, 1419, 1423, 1373, 1416, 0, 0, 1263, 1483,
	1411, 1581, 1261, 1530, 1369, 1342, 0, 0, 0, 1648,
	1462, 1464, 0, 1617, 1412, 1410, 1321, 1320, 1264, 1649,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243,
	1245, 1246, 1250, 1251, 1252, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1268, 1269, 1270, 1272, 1275, 1276, 1277, 1279,
	1280, 1281, 1282, 1283, 1284, 1287, 1288, 1289, 1290, 1291,
	1294, 1296, 1298, 1299, 1300, 1301, 1303, 1306, 1308, 1309,
	1310, 1311, 1312, 1313, 1314, 1317, 1318, 0, 1319, 1322,
	1324, 1325, 1326, 1327, 1331, 1334, 1335, 1336, 1337, 1340,
	1341, 1344, 1345, 1347, 1349, 1350, 1351, 1354, 0, 1355,
	1356, 1357, 1358, 1360, 1361, 1362, 1363, 1364, 1366, 0,
	0, 1367, 1370, 1372, 1374, 1377, 1378, 1379, 1380, 0,
	1381, 1382, 1383, 1384, 1385, 1387, 0, 1388, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1406, 1407, 1409, 0, 1413, 1414, 1429, 1430,
	1431, 1432, 1434, 1436, 1437, 1435, 1439, 1440, 1441, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1453, 1455, 1456,
	0, 1457, 1458, 0, 1459, 1460, 1461, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1478, 1479, 1481,
	1495, 1497, 0, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
	1507, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1525, 1528, 1529, 1531,
	1532, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1544,
	1545, 1546, 1548, 1549, 1550, 1552, 1553, 1554, 1555, 1556,
	1557, 1559, 1560, 1562, 1563, 1564, 0, 1566, 1568, 1569,
	1570, 1571, 1572, 1573, 1576, 1575, 1577, 1578, 1579, 1580,
	1582, 1583, 1585, 1586, 1587, 1588, 1589, 1590, 1593, 1594,
	1595, 1597, 1598, 1599, 1600, 1602, 1604, 1606, 1608, 1607,
	1610, 1611, 1612, 1613, 1615, 1618, 1619, 1620, 1621, 1622,
	1623, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1633, 0,
	1634, 1636, 1637, 1638, 1642, 1643, 1644, 1645, 1651, 1652,
	1653, 1654, 1656, 0, 0, 1657, 1659, 1660, 1661, 1662,
	1663, 1664, 1665, 1667, 1668, 1669, 1670, 0, 1672, 1405,
	1494, 1488, 1428, 1486, 1487, 1491, 1492, 0, 0, 1248,
	1265, 1274, 1278, 1285, 0, 1220, 0, 0, 0, 0,
	0, 0, 0, 0, 1208, 1209, 1210, 0, 0, 0,
	0, 0, 0, 1202, 1203, 1204, 1205, 1206, 1207, 1702,
	0, 4184, 844, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 1707, 206, 1713, 223,
	711, 1723, 272, 309, 524, 1710, 1755, 369, 1760, 422,
	426, 1784, 515, 1717, 1720, 1730, 1733, 280, 1738, 716,
	1746, 722, 1756, 728, 1775, 491, 1781, 718, 719, 724,
	211, 605, 514, 585, 1769, 1715, 1773, 376, 1766, 1742,
	1782, 1759, 1771, 1752, 1757, 219, 1744, 1745, 1749, 1758,
	720, 717, 721, 727, 715, 725, 712, 723, 1779, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	1714, 1732, 325, 495, 260, 349, 1765, 239, 382, 1778,
	471, 346, 1772, 454, 474, 1734, 366, 245, 405, 461,
	462, 709, 714, 1722, 730, 1709, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 1740, 357, 414, 571,
	1712, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 1780, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 1708, 208,
	209, 210, 212, 213, 214, 708, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 710, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 1724, 1725, 1726, 713, 1727,
	1728, 1729, 252, 253, 254, 255, 256, 257, 1731, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 1735,
	275, 277, 1736, 278, 281, 1737, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 1739, 291, 292, 294,
	1741, 297, 298, 299, 300, 301, 1743, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 1747, 322, 323,
	324, 326, 1748, 327, 328, 331, 332, 333, 334, 1750,
	336, 544, 1751, 337, 338, 339, 1753, 1754, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 726,
	383, 384, 385, 386, 387, 388, 389, 391, 1762, 393,
	394, 395, 554, 396, 397, 398, 399, 1763, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 1764, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	1767, 448, 558, 449, 450, 451, 452, 453, 1768, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 1770, 472, 473, 729, 475, 476, 477,
	478, 479, 1774, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 1776, 1777, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	1783, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 1761, 1711, 1716, 1718, 1719,
	1721, 1702, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1707, 206,
	1713, 223, 711, 1723, 272, 309, 524, 1710, 1755, 369,
	1760, 422, 426, 1784, 515, 1717, 1720, 1730, 1733, 280,
	1738, 716, 1746, 722, 1756, 728, 1775, 491, 1781, 718,
	719, 724, 211, 605, 514, 585, 1769, 1715, 1773, 376,
	1766, 1742, 1782, 1759, 1771, 1752, 1757, 219, 1744, 1745,
	1749, 1758, 720, 717, 721, 727, 715, 725, 712, 723,
	1779, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 1714, 1732, 325, 495, 260, 349, 1765, 239,
	382, 1778, 471, 346, 1772, 454, 474, 1734, 366, 245,
	405, 461, 462, 709, 714, 1722, 730, 1709, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 1740, 357,
	414, 571, 1712, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 1780, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	1708, 208, 209, 210, 212, 213, 214, 708, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 710, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 1724, 1725, 1726,
	713, 1727, 1728, 1729, 252, 253, 254, 255, 256, 257,
	1731, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 1735, 275, 277, 1736, 278, 281, 1737, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 1739, 291,
	292, 294, 1741, 297, 298, 299, 300, 301, 1743, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 1747,
	322, 323, 324, 326, 1748, 327, 328, 331, 332, 333,
	334, 1750, 336, 544, 1751, 337, 338, 339, 1753, 1754,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 726, 383, 384, 385, 386, 387, 388, 389, 391,
	1762, 393, 394, 395, 554, 396, 397, 398, 399, 1763,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	1764, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 557,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 1767, 448, 558, 449, 450, 451, 452, 453,
	1768, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 1770, 472, 473, 729, 475,
	476, 477, 478, 479, 1774, 604, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 1776, 1777,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 1783, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 1761, 1711, 1716,
	1718, 1719, 1721, 1702, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1707, 206, 1713, 223, 711, 1723, 2449, 309, 524, 1710,
	1755, 369, 1760, 422, 426, 1784, 515, 1717, 1720, 1730,
	1733, 280, 1738, 716, 1746, 722, 1756, 728, 1775, 491,
	1781, 718, 719, 724, 211, 605, 514, 585, 1769, 1715,
	1773, 376, 1766, 1742, 1782, 1759, 1771, 1752, 1757, 219,
	1744, 1745, 1749, 1758, 720, 717, 721, 727, 715, 725,
	712, 723, 1779, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 2447, 1714, 1732, 325, 495, 260, 349,
	1765, 239, 382, 1778, 471, 346, 1772, 454, 474, 1734,
	366, 245, 405, 461, 462, 709, 714, 1722, 730, 1709,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	1740, 357, 414, 571, 1712, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	1780, 196, 197, 198, 199, 200, 2448, 202, 203, 204,
	205, 207, 1708, 208, 209, 210, 212, 213, 214, 708,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 710, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 1724,
	1725, 1726, 713, 1727, 1728, 1729, 252, 253, 254, 255,
	256, 257, 1731, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 1735, 275, 277, 1736, 278, 281, 1737,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	1739, 291, 292, 294, 1741, 297, 298, 299, 300, 301,
	1743, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 1747, 322, 323, 324, 326, 1748, 327, 328, 331,
	332, 333, 334, 1750, 336, 544, 1751, 337, 338, 339,
	1753, 1754, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 726, 383, 384, 385, 386, 387, 388,
	389, 391, 1762, 393, 394, 395, 554, 396, 397, 398,
	399, 1763, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 1764, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 557, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 1767, 448, 558, 449, 450, 451,
	452, 453, 1768, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 1770, 472, 473,
	729, 475, 476, 477, 478, 479, 1774, 604, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	1776, 1777, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 1783, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 1761,
	1711, 1716, 1718, 1719, 1721, 805, 0, 1176, 844, 0,
	0, 0, 647, 892, 0, 0, 0, 0, 0, 658,
	659, 660, 1707, 206, 1713, 223, 711, 1723, 272, 309,
	0, 1710, 1755, 369, 1760, 422, 426, 1784, 0, 1717,
	1720, 1730, 1733, 280, 1738, 716, 1746, 722, 1756, 728,
	1775, 491, 1781, 718, 719, 724, 211, 804, 514, 585,
	1769, 1715, 1773, 2776, 1766, 1742, 1782, 1759, 1771, 1752,
	1757, 219, 1744, 1745, 1749, 1758, 720, 717, 721, 727,
	715, 725, 712, 723, 1779, 413, 347, 0, 0, 440,
	218, 264, 251, 293, 335, 447, 1714, 1732, 325, 495,
	260, 349, 1765, 239, 382, 1778, 471, 346, 1772, 454,
	474, 1734, 366, 245, 405, 461, 462, 709, 714, 1722,
	730, 1709, 249, 250, 371, 231, 379, 0, 0, 434,
	392, 390, 1740, 357, 414, 0, 1712, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 0, 0,
	508, 807, 797, 789, 790, 791, 792, 793, 794, 0,
	809, 810, 811, 812, 813, 501, 803, 0, 788, 795,
	796, 798, 1780, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 1708, 208, 209, 210, 212, 213,
	214, 708, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 0, 710, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 1724, 1725, 1726, 713, 1727, 1728, 1729, 252, 253,
	254, 255, 256, 257, 1731, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 1735, 275, 277, 1736, 278,
	281, 1737, 282, 283, 284, 285, 286, 287, 288, 289,
	0, 290, 1739, 291, 292, 294, 1741, 297, 298, 299,
	300, 301, 1743, 302, 0, 0, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 1747, 322, 323, 324, 326, 1748, 327,
	328, 331, 332, 333, 334, 1750, 336, 0, 1751, 337,
	338, 339, 1753, 1754, 340, 341, 342, 343, 344, 345,
	348, 0, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 2774, 0, 365,
	367, 368, 0, 0, 0, 726, 383, 384, 385, 386,
	387, 388, 389, 391, 1762, 393, 394, 395, 0, 396,
	397, 398, 399, 1763, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 1764, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 0, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 1767, 448, 2292, 449,
	450, 451, 452, 453, 1768, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 0, 469, 470, 1770,
	472, 473, 729, 475, 476, 477, 478, 479, 1774, 604,
	480, 0, 481, 0, 482, 483, 484, 485, 486, 487,
	488, 490, 1776, 1777, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 1783, 507, 509, 511,
	589, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 513, 0, 380, 374, 330, 372, 373, 377, 378,
	381, 1761, 1711, 1716, 1718, 1719, 1721, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 655, 656, 657,
	0, 0, 0, 0, 0, 0, 2777, 2778, 651, 652,
	653, 654, 705, 0, 884, 844, 0, 0, 0, 880,
	892, 870, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 223, 711, 0, 272, 309, 875, 0, 866,
	369, 0, 422, 426, 77, 515, 889, 0, 0, 0,
	280, 887, 716, 0, 722, 888, 728, 886, 491, 0,
	718, 719, 724, 211, 605, 514, 585, 0, 0, 0,
	881, 74, 0, 0, 0, 75, 0, 0, 219, 0,
	0, 0, 0, 720, 717, 721, 727, 715, 725, 712,
	723, 0, 413, 347, 0, 1682, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 709, 714, 0, 730, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 876, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 708, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 710, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 713, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 879, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 726, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	891, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 603, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 729,
	475, 476, 477, 478, 479, 0, 604, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 705, 0,
	884, 844, 0, 0, 0, 880, 892, 870, 0, 0,
	871, 0, 0, 864, 865, 2181, 206, 0, 223, 711,
	0, 272, 309, 875, 0, 866, 369, 0, 422, 426,
	0, 515, 889, 0, 0, 2182, 280, 887, 716, 0,
	722, 888, 728, 886, 491, 0, 718, 719, 724, 211,
	605, 514, 585, 0, 0, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 720,
	717, 721, 727, 715, 725, 712, 723, 0, 413, 347,
	0, 564, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	709, 714, 0, 730, 0, 249, 250, 371, 231, 379,
	576, 542, 434, 392, 390, 0, 357, 414, 571, 876,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 2180, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 708, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 521,
	710, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 713, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 879, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 726, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 891, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 603, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 472, 473, 729, 475, 476, 477, 478,
	479, 0, 604, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 0, 884, 844, 0, 0, 0,
	880, 892, 870, 0, 0, 0, 871, 2178, 0, 864,
	865, 206, 0, 223, 711, 0, 272, 309, 875, 0,
	866, 369, 0, 422, 426, 0, 515, 889, 0, 0,
	0, 280, 887, 716, 0, 722, 888, 728, 886, 491,
	0, 718, 719, 724, 211, 605, 514, 585, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 720, 717, 721, 727, 715, 725,
	712, 723, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 709, 714, 0, 730, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 876, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 708,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 710, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 713, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 879, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 726, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 891, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	729, 475, 476, 477, 478, 479, 0, 604, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 705,
	0, 884, 844, 0, 0, 0, 880, 892, 870, 0,
	0, 871, 0, 0, 864, 865, 862, 206, 0, 223,
	711, 0, 272, 309, 875, 0, 866, 369, 0, 422,
	426, 0, 515, 889, 0, 0, 0, 280, 887, 716,
	0, 722, 888, 728, 886, 491, 0, 718, 719, 724,
	211, 605, 514, 585, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	720, 717, 721, 727, 715, 725, 712, 723, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 709, 714, 0, 730, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	876, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 708, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 710, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 713, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 879,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 726,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 891, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 729, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 705, 0, 884, 844, 0, 0,
	0, 880, 892, 870, 0, 1687, 2168, 871, 0, 0,
	864, 865, 206, 0, 223, 711, 0, 272, 309, 875,
	0, 866, 369, 0, 422, 426, 0, 515, 889, 0,
	0, 0, 280, 887, 716, 0, 722, 888, 728, 886,
	491, 0, 718, 719, 724, 211, 605, 514, 585, 0,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 720, 717, 721, 727, 715,
	725, 712, 723, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 709, 714, 0, 730,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 876, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 3003, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	708, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 710, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 713, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 879, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 726, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 891, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 603, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 729, 475, 476, 477, 478, 479, 0, 604, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 705,
	0, 884, 844, 0, 0, 0, 880, 892, 870, 0,
	0, 0, 871, 0, 0, 864, 865, 206, 0, 223,
	711, 0, 272, 309, 875, 0, 866, 369, 0, 422,
	426, 0, 515, 889, 0, 0, 0, 280, 887, 716,
	0, 722, 888, 728, 886, 491, 0, 718, 719, 724,
	211, 605, 514, 585, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	720, 717, 721, 727, 715, 725, 712, 723, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 709, 714, 0, 730, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	876, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 708, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 710, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 713, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 879,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 726,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 891, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 729, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 705, 0, 884, 844, 0, 0,
	0, 880, 892, 870, 0, 0, 0, 871, 2177, 0,
	864, 865, 206, 0, 223, 711, 0, 272, 309, 875,
	0, 866, 369, 0, 422, 426, 0, 515, 889, 0,
	0, 0, 280, 887, 716, 0, 722, 888, 728, 886,
	491, 0, 718, 719, 724, 211, 605, 514, 585, 0,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 720, 717, 721, 727, 715,
	725, 712, 723, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 709, 714, 0, 730,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 876, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	708, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 710, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 713, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 879, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 726, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 891, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 603, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 729, 475, 476, 477, 478, 479, 0, 604, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 705,
	0, 884, 844, 0, 0, 0, 880, 892, 870, 0,
	0, 0, 871, 0, 0, 864, 865, 206, 0, 223,
	711, 0, 272, 309, 875, 0, 866, 369, 0, 422,
	426, 0, 515, 889, 0, 0, 0, 280, 887, 716,
	0, 722, 888, 728, 886, 491, 0, 718, 719, 724,
	211, 605, 514, 585, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	720, 717, 721, 727, 715, 725, 712, 723, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 709, 714, 0, 730, 0, 2644, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	876, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 708, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 710, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 713, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 879,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 726,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 891, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 729, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 705, 0, 884, 844, 0, 0,
	0, 0, 892, 870, 0, 0, 0, 871, 0, 0,
	864, 865, 206, 0, 223, 711, 0, 272, 309, 875,
	0, 0, 369, 0, 422, 426, 0, 515, 889, 0,
	3544, 0, 280, 887, 716, 0, 722, 888, 728, 886,
	491, 0, 718, 719, 724, 211, 605, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 720, 717, 721, 727, 715,
	725, 712, 723, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 709, 714, 0, 730,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 876, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	708, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 710, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 713, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 879, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 726, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 891, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 603, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 729, 475, 476, 477, 478, 479, 0, 604, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 705,
	0, 884, 844, 0, 0, 0, 0, 892, 870, 0,
	0, 0, 871, 0, 0, 2599, 2600, 206, 0, 223,
	711, 0, 272, 309, 875, 0, 0, 369, 0, 422,
	426, 0, 515, 889, 0, 0, 0, 280, 887, 716,
	0, 722, 888, 728, 886, 491, 0, 718, 719, 724,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	720, 717, 721, 727, 715, 725, 712, 723, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 709, 714, 0, 730, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	876, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 708, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 710, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 713, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 879,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 726,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 891, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 729, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 1176, 844, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 871, 0, 0,
	2599, 2600, 206, 0, 223, 711, 0, 272, 309, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	3760, 0, 280, 1173, 716, 0, 722, 0, 728, 1172,
	491, 0, 718, 719, 724, 211, 605, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 1174, 720, 717, 721, 727, 715,
	725, 712, 723, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 709, 714, 0, 730,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	708, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 710, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 713, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 726, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 603, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 729, 475, 476, 477, 478, 479, 0, 604, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 1176, 844, 0, 0, 0, 0, 892, 0,
	0, 0, 3761, 0, 0, 1177, 1178, 3759, 206, 0,
	223, 711, 0, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 1182, 0, 280, 1173,
	716, 0, 722, 0, 728, 1172, 491, 0, 718, 719,
	724, 211, 605, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	1174, 720, 717, 721, 727, 715, 725, 712, 723, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 709, 714, 0, 730, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 708, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 710, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 713,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	726, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	603, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 729, 475, 476,
	477, 478, 479, 0, 604, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 1176, 844, 0,
	0, 0, 0, 892, 0, 0, 0, 0, 0, 0,
	0, 1177, 1178, 206, 0, 223, 711, 0, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 1168, 0, 280, 1173, 716, 0, 722, 0, 728,
	1172, 491, 0, 718, 719, 724, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 1174, 720, 717, 721, 727,
	715, 725, 712, 723, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 709, 714, 0,
	730, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 708, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 710, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 713, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 726, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 729, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 1176, 844, 0, 0, 0, 0, 892, 0,
	0, 0, 0, 0, 0, 0, 1177, 1178, 206, 0,
	223, 711, 0, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 1173,
	716, 0, 722, 0, 728, 1172, 491, 0, 718, 719,
	724, 211, 605, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	1174, 720, 717, 721, 727, 715, 725, 712, 723, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 709, 714, 0, 730, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 708, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 710, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 713,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	726, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	603, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 729, 475, 476,
	477, 478, 479, 0, 604, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 705, 0, 884, 844, 0,
	0, 0, 0, 892, 870, 0, 0, 0, 0, 0,
	0, 1177, 1178, 206, 0, 223, 711, 0, 272, 309,
	875, 0, 0, 369, 0, 422, 426, 0, 515, 889,
	0, 0, 0, 280, 887, 716, 0, 722, 888, 728,
	886, 491, 0, 718, 719, 724, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 720, 717, 721, 727,
	715, 725, 712, 723, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 709, 714, 0,
	730, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 876, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 708, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 710, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 713, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 879, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 726, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 891, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 729, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 705, 0, 884, 844, 0, 0, 0, 0, 892,
	870, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 711, 871, 272, 309, 875, 0, 0, 369,
	0, 422, 426, 0, 515, 889, 0, 0, 0, 280,
	887, 716, 0, 722, 888, 728, 886, 491, 0, 718,
	719, 724, 211, 605, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 3540, 0, 0,
	0, 0, 720, 717, 721, 727, 715, 725, 712, 723,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 709, 714, 0, 730, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 876, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 708, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 710, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	713, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 879, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 726, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 891,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 729, 475,
	476, 477, 478, 479, 0, 604, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 705, 0, 884,
	844, 0, 0, 0, 0, 892, 870, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 223, 711, 871,
	272, 309, 875, 0, 0, 369, 0, 422, 426, 0,
	515, 889, 0, 0, 0, 280, 887, 716, 0, 722,
	888, 728, 886, 491, 0, 718, 719, 724, 211, 605,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 720, 717,
	721, 727, 715, 725, 712, 723, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 709,
	714, 0, 730, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 3045, 876, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 708, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 710,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 713, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 879, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 726, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 891, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 729, 475, 476, 477, 478, 479,
	0, 604, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 705, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 711, 871, 272, 309, 524, 0,
	0, 369, 0, 422, 426, 77, 515, 0, 0, 0,
	0, 280, 0, 716, 0, 722, 0, 728, 0, 491,
	0, 718, 719, 724, 211, 605, 514, 585, 0, 0,
	0, 376, 74, 0, 0, 602, 75, 0, 0, 219,
	0, 0, 0, 0, 720, 717, 721, 727, 715, 725,
	712, 723, 0, 413, 347, 2220, 1682, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 709, 714, 0, 730, 0,
	249, 250, 371, 231, 379, 2228, 2229, 2227, 392, 390,
	0, 357, 414, 571, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 708,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 710, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 713, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 726, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 557, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	729, 475, 476, 477, 478, 479, 0, 604, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 705,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 223,
	711, 2222, 272, 309, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 716,
	0, 722, 0, 728, 0, 491, 0, 718, 719, 724,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 602, 0, 0, 0, 219, 0, 0, 0, 0,
	720, 717, 721, 727, 715, 725, 712, 723, 0, 413,
	347, 2220, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 709, 714, 0, 730, 0, 249, 250, 371, 231,
	379, 2228, 2229, 2227, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 708, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 710, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 713, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 726,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 729, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 705, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 223, 711, 2222, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 716, 0, 722, 0, 728,
	0, 491, 0, 718, 719, 724, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 720, 717, 721, 727,
	715, 725, 712, 723, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 709, 714, 0,
	730, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 708, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 710, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 713, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 726, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 729, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 705, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 711, 3199, 272, 309, 524, 0, 0, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 716, 0, 722, 0, 728, 0, 491, 0, 718,
	719, 724, 211, 605, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 720, 717, 721, 727, 715, 725, 712, 723,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 709, 714, 0, 730, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 708, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 710, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	713, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 726, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 557,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 729, 475,
	476, 477, 478, 479, 0, 604, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 705, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 223, 711, 3918,
	272, 309, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 0, 0, 280, 0, 716, 0, 722,
	0, 728, 0, 491, 0, 718, 719, 724, 211, 605,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 720, 717,
	721, 727, 715, 725, 712, 723, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 709,
	714, 0, 730, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 708, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 710,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 713, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 726, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 729, 475, 476, 477, 478, 479,
	0, 604, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 705, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 711, 3702, 272, 309, 524, 0,
	0, 369, 0, 422, 426, 0, 515, 0, 0, 0,
	0, 280, 0, 716, 0, 722, 0, 728, 0, 491,
	0, 718, 719, 724, 211, 605, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 720, 717, 721, 727, 715, 725,
	712, 723, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 709, 714, 0, 730, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 708,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 710, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 713, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 726, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 557, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	729, 475, 476, 477, 478, 479, 0, 604, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 705,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 223,
	711, 2372, 272, 309, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 716,
	0, 722, 0, 728, 0, 491, 0, 718, 719, 724,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	720, 717, 721, 727, 715, 725, 712, 723, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 709, 714, 0, 730, 0, 249, 250, 371, 231,
	379, 2228, 2229, 2227, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 708, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 710, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 713, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 726,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 729, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 193, 0, 0, 0, 0,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 658,
	659, 660, 0, 206, 0, 223, 0, 73, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 655, 656, 657,
	0, 0, 0, 0, 0, 193, 649, 650, 651, 652,
	653, 654, 647, 0, 0, 0, 0, 0, 0, 658,
	659, 660, 0, 206, 0, 223, 0, 0, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 605, 514, 585,
	0, 0, 0, 3675, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 655, 656, 657,
	0, 0, 0, 0, 0, 193, 649, 650, 651, 652,
	653, 654, 647, 0, 0, 0, 0, 0, 0, 658,
	659, 660, 0, 206, 0, 223, 0, 0, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 2553, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 2554, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 655, 656, 657,
	0, 0, 0, 0, 0, 193, 649, 650, 651, 652,
	653, 654, 647, 0, 0, 0, 0, 0, 0, 658,
	659, 660, 0, 206, 0, 223, 0, 0, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 643, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 644, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 655, 656, 657,
	0, 0, 0, 0, 0, 0, 649, 650, 651, 652,
	653, 654, 206, 0, 223, 0, 0, 272, 309, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 211, 605, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 0, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 0, 0, 0, 0,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	0, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 0, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 0, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 603, 0, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 0, 475, 476, 477, 478, 479, 0, 604, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	223, 0, 0, 272, 309, 524, 0, 4021, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 605, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	603, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 604, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 0, 0, 272,
	309, 524, 0, 3905, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 211, 605, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 0, 0,
	0, 0, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 0, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 0, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 0, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 557, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 603, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 0, 475, 476, 477, 478, 479, 0,
	604, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 223, 0, 0, 272, 309, 524, 0, 3902,
	369, 0, 422, 426, 77, 515, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 211, 605, 514, 585, 0, 0, 0,
	376, 74, 0, 0, 0, 75, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 347, 0, 1682, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 0, 0, 0, 0, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 0, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 0, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 0, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 603, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 0,
	475, 476, 477, 478, 479, 0, 604, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 743, 0,
	0, 844, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 711,
	73, 272, 309, 524, 0, 0, 369, 0, 422, 426,
	0, 515, 0, 0, 0, 0, 280, 1173, 716, 0,
	722, 0, 728, 1172, 491, 0, 718, 719, 724, 211,
	605, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 1174, 720,
	717, 721, 727, 715, 725, 712, 723, 0, 413, 347,
	0, 564, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	709, 714, 0, 730, 0, 249, 250, 371, 231, 379,
	576, 542, 434, 392, 390, 0, 357, 414, 571, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 539, 543, 541, 537, 534, 538, 535, 536, 540,
	296, 533, 0, 508, 517, 551, 531, 559, 516, 556,
	526, 271, 555, 520, 519, 565, 546, 547, 501, 561,
	532, 530, 523, 522, 518, 0, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 708, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 521,
	710, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 713, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 525, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 527, 528, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	544, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 545, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	548, 549, 365, 367, 368, 550, 552, 553, 726, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 554, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 557, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 603, 0,
	448, 558, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 560,
	469, 470, 0, 472, 473, 729, 475, 476, 477, 478,
	479, 0, 604, 480, 562, 481, 563, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 512, 513, 529, 380, 374, 330, 372,
	373, 377, 378, 381, 743, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 223, 711, 0, 272, 309, 524,
	0, 0, 369, 0, 422, 426, 0, 515, 0, 0,
	0, 0, 280, 0, 716, 0, 722, 0, 728, 0,
	491, 0, 718, 719, 724, 211, 605, 514, 585, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 720, 717, 721, 727, 715,
	725, 712, 723, 0, 413, 347, 0, 564, 440, 218,
	264, 251, 293, 335, 447, 0, 0, 325, 495, 260,
	349, 0, 239, 382, 1892, 471, 346, 0, 454, 474,
	0, 366, 245, 405, 461, 462, 709, 714, 0, 730,
	0, 249, 250, 371, 231, 379, 576, 542, 434, 392,
	390, 0, 357, 414, 571, 0, 0, 279, 0, 274,
	370, 510, 237, 489, 408, 375, 329, 437, 466, 276,
	261, 262, 305, 407, 295, 247, 500, 539, 543, 541,
	537, 534, 538, 535, 536, 540, 296, 533, 0, 508,
	517, 551, 531, 559, 516, 556, 526, 271, 555, 520,
	519, 565, 546, 547, 501, 561, 532, 530, 523, 522,
	518, 0, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 207, 0, 208, 209, 210, 212, 213, 214,
	708, 215, 216, 217, 220, 221, 222, 224, 584, 225,
	226, 227, 228, 229, 230, 521, 710, 232, 233, 234,
	235, 236, 238, 240, 241, 242, 243, 244, 246, 248,
	0, 0, 740, 713, 0, 0, 741, 252, 253, 254,
	255, 256, 257, 0, 258, 259, 263, 265, 266, 267,
	268, 269, 270, 273, 0, 275, 277, 0, 278, 281,
	0, 282, 283, 284, 285, 286, 287, 288, 289, 525,
	290, 0, 291, 292, 294, 0, 297, 298, 299, 300,
	301, 0, 302, 527, 528, 303, 304, 306, 307, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 323, 324, 326, 0, 327, 328,
	331, 332, 333, 334, 0, 336, 544, 0, 337, 338,
	339, 0, 0, 340, 341, 342, 343, 344, 345, 348,
	545, 350, 351, 352, 353, 354, 355, 356, 586, 358,
	359, 360, 361, 362, 363, 364, 548, 549, 365, 367,
	368, 550, 552, 553, 726, 383, 384, 385, 386, 387,
	388, 389, 391, 0, 393, 394, 395, 554, 396, 397,
	398, 399, 0, 400, 401, 402, 403, 404, 406, 409,
	410, 411, 412, 0, 415, 416, 417, 418, 419, 420,
	421, 423, 424, 425, 427, 428, 429, 587, 430, 431,
	432, 433, 557, 435, 436, 588, 438, 439, 441, 442,
	443, 444, 445, 446, 603, 742, 448, 558, 449, 450,
	451, 452, 453, 0, 455, 456, 457, 458, 459, 460,
	463, 464, 465, 467, 468, 560, 469, 470, 0, 472,
	473, 729, 475, 476, 477, 478, 479, 0, 604, 480,
	562, 481, 563, 482, 483, 484, 485, 486, 487, 488,
	490, 0, 0, 492, 493, 494, 496, 497, 498, 499,
	502, 503, 504, 505, 506, 0, 507, 509, 511, 589,
	566, 567, 568, 569, 570, 572, 573, 574, 575, 512,
	513, 529, 380, 374, 330, 372, 373, 377, 378, 381,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	223, 0, 0, 272, 309, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 211, 605, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 602, 1907, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 0, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 1911,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 282, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 0, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 0, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	603, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 1908, 473, 0, 475, 476,
	477, 478, 479, 0, 604, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 0, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 743, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 711, 945, 272,
	309, 524, 0, 0, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 716, 0, 722, 0,
	728, 0, 491, 0, 718, 719, 724, 211, 605, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 720, 717, 721,
	727, 715, 725, 712, 723, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 709, 714,
	0, 730, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 708, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 710, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 740, 713, 0, 0, 741, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 282, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 0, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 726, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 0, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 557, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 603, 742, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 729, 475, 476, 477, 478, 479, 0,
	604, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 0, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 2656, 223, 0, 0, 272, 309, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 211, 605, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 0, 0, 0, 0, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 0, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 0, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 282,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 0, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 0, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	0, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 603, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 0,
	475, 476, 477, 478, 479, 0, 604, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	0, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 0, 743,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 223,
	711, 857, 272, 309, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 716,
	0, 722, 0, 728, 0, 491, 0, 718, 719, 724,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	720, 717, 721, 727, 715, 725, 712, 723, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 709, 714, 0, 730, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 708, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 710, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 740, 713, 0,
	0, 741, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 763, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 726,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	742, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 729, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 743, 0, 0, 844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 223, 711, 0, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 1158, 0, 280, 0, 716, 0, 722, 0, 728,
	0, 491, 0, 718, 719, 724, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 720, 717, 721, 727,
	715, 725, 712, 723, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 709, 714, 0,
	730, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 708, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 710, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 713, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 726, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 729, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 0, 0, 272, 309, 524, 0, 0, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 211, 605, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 0, 0, 0, 0, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 0, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 0, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 0, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 557,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 0, 475,
	476, 477, 478, 479, 0, 604, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 743, 0, 0,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 223, 711, 1814,
	272, 309, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 0, 0, 280, 0, 716, 0, 722,
	0, 728, 0, 491, 0, 718, 719, 724, 211, 605,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 720, 717,
	721, 727, 715, 725, 712, 723, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 709,
	714, 0, 730, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 708, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 710,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 713, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 726, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 729, 475, 476, 477, 478, 479,
	0, 604, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 0, 0, 272, 309, 524, 0,
	0, 369, 0, 422, 426, 0, 515, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 211, 605, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 0, 0, 0, 0, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 0,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 0, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 0, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 557, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	0, 475, 476, 477, 478, 479, 0, 604, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 705,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 223,
	711, 902, 272, 309, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 716,
	0, 722, 0, 728, 0, 491, 0, 718, 719, 724,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	720, 717, 721, 727, 715, 725, 712, 723, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 709, 714, 0, 730, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 708, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 710, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 713, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 726,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 729, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 743, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 223, 711, 0, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 716, 0, 722, 0, 728,
	0, 491, 0, 718, 719, 724, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 720, 717, 721, 727,
	715, 725, 712, 723, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 709, 714, 0,
	730, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 708, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 710, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 713, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 726, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 729, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 2311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 711, 0, 272, 309, 0, 0, 0, 369,
	0, 422, 426, 0, 0, 0, 0, 0, 0, 280,
	0, 716, 2286, 722, 0, 728, 0, 491, 0, 718,
	719, 724, 211, 804, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 720, 717, 721, 727, 715, 725, 712, 723,
	0, 413, 347, 0, 0, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 709, 714, 0, 730, 0, 249, 250,
	371, 231, 379, 0, 0, 434, 392, 390, 0, 357,
	414, 0, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 0, 0, 508, 807, 797, 789,
	790, 791, 792, 793, 794, 0, 809, 810, 811, 812,
	813, 501, 803, 0, 788, 795, 796, 798, 2289, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 708, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 0, 710, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	713, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 0, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	0, 0, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 0, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 0, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 0, 0, 365, 367, 368, 0, 2287,
	0, 726, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 0, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 0,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 0, 448, 2292, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 0, 469, 470, 0, 472, 473, 729, 475,
	476, 477, 478, 479, 0, 604, 480, 0, 481, 0,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 0, 0, 0,
	193, 0, 0, 0, 0, 0, 512, 513, 2288, 380,
	374, 330, 372, 373, 377, 378, 381, 2306, 206, 0,
	223, 0, 0, 272, 1925, 524, 0, 0, 369, 0,
	422, 426, 0, 515, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 2304, 0, 491, 0, 0, 0,
	0, 211, 605, 514, 585, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 347, 0, 564, 440, 218, 264, 251, 293, 335,
	447, 0, 0, 325, 495, 260, 349, 0, 239, 382,
	0, 471, 346, 0, 454, 474, 0, 366, 245, 405,
	461, 462, 0, 0, 1929, 0, 0, 249, 250, 371,
	231, 379, 576, 542, 434, 392, 390, 0, 357, 414,
	571, 0, 0, 279, 0, 274, 370, 510, 237, 489,
	408, 375, 329, 437, 466, 276, 261, 262, 305, 407,
	295, 247, 500, 539, 543, 541, 537, 534, 538, 535,
	536, 540, 296, 533, 0, 508, 517, 551, 531, 559,
	516, 556, 526, 271, 555, 520, 519, 565, 546, 547,
	501, 561, 532, 530, 523, 522, 518, 0, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 207, 0,
	208, 209, 210, 212, 213, 214, 0, 215, 216, 217,
	220, 221, 222, 224, 584, 225, 226, 227, 228, 229,
	230, 521, 0, 232, 233, 234, 235, 236, 238, 240,
	241, 242, 243, 244, 246, 248, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 0,
	258, 259, 263, 265, 266, 267, 268, 269, 270, 273,
	0, 275, 277, 0, 278, 281, 0, 1935, 283, 284,
	285, 286, 287, 288, 289, 525, 290, 0, 291, 292,
	294, 1934, 297, 298, 299, 300, 301, 0, 302, 527,
	528, 303, 304, 306, 307, 308, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	323, 324, 326, 0, 327, 328, 331, 332, 333, 334,
	0, 336, 544, 0, 337, 338, 339, 0, 0, 340,
	341, 342, 343, 344, 345, 348, 545, 350, 351, 352,
	353, 354, 355, 356, 586, 358, 359, 360, 361, 362,
	363, 364, 548, 549, 365, 367, 368, 550, 552, 553,
	0, 383, 384, 385, 386, 387, 388, 389, 391, 0,
	393, 394, 395, 554, 396, 397, 398, 399, 1933, 400,
	401, 402, 403, 404, 406, 409, 410, 411, 412, 0,
	415, 416, 417, 418, 419, 420, 421, 423, 424, 425,
	427, 428, 429, 587, 430, 431, 432, 433, 557, 435,
	436, 588, 438, 439, 441, 442, 443, 444, 445, 446,
	603, 0, 448, 558, 449, 450, 451, 452, 453, 0,
	455, 456, 457, 458, 459, 460, 463, 464, 465, 467,
	468, 560, 469, 470, 0, 472, 473, 0, 475, 476,
	477, 478, 479, 0, 604, 480, 562, 481, 563, 482,
	483, 484, 485, 486, 487, 488, 490, 0, 1932, 492,
	493, 494, 496, 497, 498, 499, 502, 503, 504, 505,
	506, 0, 507, 509, 511, 589, 566, 567, 568, 569,
	570, 572, 573, 574, 575, 512, 513, 529, 380, 374,
	330, 372, 373, 377, 378, 381, 193, 0, 0, 0,
	1931, 1926, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 223, 0, 0, 272,
	309, 524, 0, 0, 369, 0, 422, 426, 0, 515,
	0, 0, 0, 0, 280, 0, 0, 0, 2244, 0,
	0, 0, 491, 0, 0, 0, 0, 211, 605, 514,
	585, 0, 0, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 347, 0, 564,
	440, 218, 264, 251, 293, 335, 447, 0, 0, 325,
	495, 260, 349, 0, 239, 382, 0, 471, 346, 0,
	454, 474, 0, 366, 245, 405, 461, 462, 0, 0,
	1929, 0, 0, 249, 250, 371, 231, 379, 576, 542,
	434, 392, 390, 0, 357, 414, 571, 0, 0, 279,
	0, 274, 370, 510, 237, 489, 408, 375, 329, 437,
	466, 276, 261, 262, 305, 407, 295, 247, 500, 539,
	543, 541, 537, 534, 538, 535, 536, 540, 296, 533,
	0, 508, 517, 551, 531, 559, 516, 556, 526, 271,
	555, 520, 519, 565, 546, 547, 501, 561, 532, 530,
	523, 522, 518, 0, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 207, 0, 208, 209, 210, 212,
	213, 214, 0, 215, 216, 217, 220, 221, 222, 224,
	584, 225, 226, 227, 228, 229, 230, 521, 0, 232,
	233, 234, 235, 236, 238, 240, 241, 242, 243, 244,
	246, 248, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 0, 258, 259, 263, 265,
	266, 267, 268, 269, 270, 273, 0, 275, 277, 0,
	278, 281, 0, 1935, 283, 284, 285, 286, 287, 288,
	289, 525, 290, 0, 291, 292, 294, 1934, 297, 298,
	299, 300, 301, 0, 302, 527, 528, 303, 304, 306,
	307, 308, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 323, 324, 326, 0,
	327, 328, 331, 332, 333, 334, 0, 336, 544, 0,
	337, 338, 339, 0, 0, 340, 341, 342, 343, 344,
	345, 348, 545, 350, 351, 352, 353, 354, 355, 356,
	586, 358, 359, 360, 361, 362, 363, 364, 548, 549,
	365, 367, 368, 550, 552, 553, 0, 383, 384, 385,
	386, 387, 388, 389, 391, 0, 393, 394, 395, 554,
	396, 397, 398, 399, 1933, 400, 401, 402, 403, 404,
	406, 409, 410, 411, 412, 0, 415, 416, 417, 418,
	419, 420, 421, 423, 424, 425, 427, 428, 429, 587,
	430, 431, 432, 433, 557, 435, 436, 588, 438, 439,
	441, 442, 443, 444, 445, 446, 603, 0, 448, 558,
	449, 450, 451, 452, 453, 0, 455, 456, 457, 458,
	459, 460, 463, 464, 465, 467, 468, 560, 469, 470,
	0, 472, 473, 0, 475, 476, 477, 478, 479, 0,
	604, 480, 562, 481, 563, 482, 483, 484, 485, 486,
	487, 488, 490, 0, 1932, 492, 493, 494, 496, 497,
	498, 499, 502, 503, 504, 505, 506, 0, 507, 509,
	511, 589, 566, 567, 568, 569, 570, 572, 573, 574,
	575, 512, 513, 529, 380, 374, 330, 372, 373, 377,
	378, 381, 193, 0, 0, 0, 1931, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 223, 0, 0, 272, 309, 524, 0, 0,
	369, 0, 422, 426, 0, 515, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 211, 605, 514, 585, 0, 0, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 347, 0, 564, 440, 218, 264, 251,
	293, 335, 447, 0, 0, 325, 495, 260, 349, 0,
	239, 382, 0, 471, 346, 0, 454, 474, 0, 366,
	245, 405, 461, 462, 0, 0, 1929, 0, 0, 249,
	250, 371, 231, 379, 576, 542, 434, 392, 390, 0,
	357, 414, 571, 0, 0, 279, 0, 274, 370, 510,
	237, 489, 408, 375, 329, 437, 466, 276, 261, 262,
	305, 407, 295, 247, 500, 539, 543, 541, 537, 534,
	538, 535, 536, 540, 296, 533, 0, 508, 517, 551,
	531, 559, 516, 556, 526, 271, 555, 520, 519, 565,
	546, 547, 501, 561, 532, 530, 523, 522, 518, 0,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 0, 208, 209, 210, 212, 213, 214, 0, 215,
	216, 217, 220, 221, 222, 224, 584, 225, 226, 227,
	228, 229, 230, 521, 0, 232, 233, 234, 235, 236,
	238, 240, 241, 242, 243, 244, 246, 248, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 0, 258, 259, 263, 265, 266, 267, 268, 269,
	270, 273, 0, 275, 277, 0, 278, 281, 0, 1935,
	283, 284, 285, 286, 287, 288, 289, 525, 290, 0,
	291, 292, 294, 1934, 297, 298, 299, 300, 301, 0,
	302, 527, 528, 303, 304, 306, 307, 308, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 323, 324, 326, 0, 327, 328, 331, 332,
	333, 334, 0, 336, 544, 0, 337, 338, 339, 0,
	0, 340, 341, 342, 343, 344, 345, 348, 545, 350,
	351, 352, 353, 354, 355, 356, 586, 358, 359, 360,
	361, 362, 363, 364, 548, 549, 365, 367, 368, 550,
	552, 553, 0, 383, 384, 385, 386, 387, 388, 389,
	391, 0, 393, 394, 395, 554, 396, 397, 398, 399,
	1933, 400, 401, 402, 403, 404, 406, 409, 410, 411,
	412, 0, 415, 416, 417, 418, 419, 420, 421, 423,
	424, 425, 427, 428, 429, 587, 430, 431, 432, 433,
	557, 435, 436, 588, 438, 439, 441, 442, 443, 444,
	445, 446, 603, 0, 448, 558, 449, 450, 451, 452,
	453, 0, 455, 456, 457, 458, 459, 460, 463, 464,
	465, 467, 468, 560, 469, 470, 0, 472, 473, 0,
	475, 476, 477, 478, 479, 0, 604, 480, 562, 481,
	563, 482, 483, 484, 485, 486, 487, 488, 490, 0,
	1932, 492, 493, 494, 496, 497, 498, 499, 502, 503,
	504, 505, 506, 0, 507, 509, 511, 589, 566, 567,
	568, 569, 570, 572, 573, 574, 575, 512, 513, 529,
	380, 374, 330, 372, 373, 377, 378, 381, 805, 0,
	0, 0, 1931, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 223, 711,
	0, 272, 309, 0, 0, 0, 369, 0, 422, 426,
	0, 0, 0, 0, 0, 0, 280, 0, 716, 2286,
	722, 0, 728, 0, 491, 0, 718, 719, 724, 211,
	804, 514, 585, 0, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 720,
	717, 721, 727, 715, 725, 712, 723, 0, 413, 347,
	0, 0, 440, 218, 264, 251, 293, 335, 447, 0,
	0, 325, 495, 260, 349, 0, 239, 382, 0, 471,
	346, 0, 454, 474, 0, 366, 245, 405, 461, 462,
	709, 714, 0, 730, 0, 249, 250, 371, 231, 379,
	0, 0, 434, 392, 390, 0, 357, 414, 0, 0,
	0, 279, 0, 274, 370, 510, 237, 489, 408, 375,
	329, 437, 466, 276, 261, 262, 305, 407, 295, 247,
	500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 0, 508, 807, 797, 789, 790, 791, 792,
	793, 794, 0, 809, 810, 811, 812, 813, 501, 803,
	0, 788, 795, 796, 798, 2289, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 0, 208, 209,
	210, 212, 213, 214, 708, 215, 216, 217, 220, 221,
	222, 224, 584, 225, 226, 227, 228, 229, 230, 0,
	710, 232, 233, 234, 235, 236, 238, 240, 241, 242,
	243, 244, 246, 248, 0, 0, 0, 713, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 0, 258, 259,
	263, 265, 266, 267, 268, 269, 270, 273, 0, 275,
	277, 0, 278, 281, 0, 282, 283, 284, 285, 286,
	287, 288, 289, 0, 290, 0, 291, 292, 294, 0,
	297, 298, 299, 300, 301, 0, 302, 0, 0, 303,
	304, 306, 307, 308, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 323, 324,
	326, 0, 327, 328, 331, 332, 333, 334, 0, 336,
	0, 0, 337, 338, 339, 0, 0, 340, 341, 342,
	343, 344, 345, 348, 0, 350, 351, 352, 353, 354,
	355, 356, 586, 358, 359, 360, 361, 362, 363, 364,
	0, 0, 365, 367, 368, 0, 2287, 0, 726, 383,
	384, 385, 386, 387, 388, 389, 391, 0, 393, 394,
	395, 0, 396, 397, 398, 399, 0, 400, 401, 402,
	403, 404, 406, 409, 410, 411, 412, 0, 415, 416,
	417, 418, 419, 420, 421, 423, 424, 425, 427, 428,
	429, 587, 430, 431, 432, 433, 0, 435, 436, 588,
	438, 439, 441, 442, 443, 444, 445, 446, 603, 0,
	448, 2292, 449, 450, 451, 452, 453, 0, 455, 456,
	457, 458, 459, 460, 463, 464, 465, 467, 468, 0,
	469, 470, 0, 472, 473, 729, 475, 476, 477, 478,
	479, 0, 604, 480, 0, 481, 0, 482, 483, 484,
	485, 486, 487, 488, 490, 0, 0, 492, 493, 494,
	496, 497, 498, 499, 502, 503, 504, 505, 506, 0,
	507, 509, 511, 589, 0, 0, 0, 193, 0, 0,
	0, 0, 0, 512, 513, 2288, 380, 374, 330, 372,
	373, 377, 378, 381, 1904, 206, 0, 223, 0, 0,
	272, 309, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 0, 0, 280, 0, 2280, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 211, 605,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 602,
	1907, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 0,
	0, 0, 0, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 0, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 0,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 1911, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 0, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 1908, 473, 0, 475, 476, 477, 478, 479,
	0, 604, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 0, 0, 272, 309, 524, 0,
	0, 369, 0, 422, 426, 0, 515, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 211, 605, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 602, 1907, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 0, 0, 0, 0, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 0,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 0, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 1911, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 0, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 557, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 1908, 473,
	0, 475, 476, 477, 478, 479, 0, 604, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2431, 206, 0, 223,
	0, 0, 272, 309, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 2432,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 0, 0, 0, 0, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 0, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 0, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 0,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 0, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2422, 206, 0, 223, 0, 0, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 2423, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 690, 206,
	0, 223, 0, 0, 272, 689, 524, 0, 0, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 211, 605, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 602, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 0, 0, 0, 0, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 0, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 0, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 0, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 557,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 0, 475,
	476, 477, 478, 479, 0, 604, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 223, 0, 0,
	272, 309, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 211, 605,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 602,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 0,
	0, 0, 0, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 0, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 0,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 0, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 0, 475, 476, 477, 478, 479,
	0, 604, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 0, 0, 272, 309, 524, 0,
	0, 369, 0, 422, 426, 0, 515, 0, 0, 3442,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 211, 605, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 0, 0, 0, 0, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 0,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 0, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 0, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 557, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	0, 475, 476, 477, 478, 479, 0, 604, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 2656, 223,
	0, 0, 272, 309, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 0, 0, 0, 0, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 0, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 0, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 0,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 0, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 223, 0, 0, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 3181, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 0, 0, 272, 309, 524, 0, 0, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 211, 605, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 0, 0, 0, 0, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 0, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 0, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	3165, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 0, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 557,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 0, 475,
	476, 477, 478, 479, 0, 604, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 223, 0, 0,
	272, 309, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 2876, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 211, 605,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 0,
	0, 0, 0, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 0, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 0,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 0, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 0, 475, 476, 477, 478, 479,
	0, 604, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 193, 0, 0, 0, 0, 0, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 0, 0, 272, 309, 524, 0,
	0, 369, 0, 422, 426, 0, 515, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 211, 605, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 0, 0, 0, 0, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 0,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 0, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 0, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 557, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	0, 475, 476, 477, 478, 479, 0, 604, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 223,
	0, 0, 272, 1041, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 602, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 0, 0, 0, 0, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 0, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 0, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 0,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 0, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1039, 206, 0, 223, 0, 0, 272, 1038,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 0, 0, 272, 309, 524, 0, 0, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 211, 186, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 0, 0, 0, 0, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 830, 215, 216,
	217, 220, 221, 222, 224, 187, 225, 829, 227, 228,
	229, 230, 521, 0, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 189, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 0, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 190, 430, 431, 432, 433, 557,
	435, 436, 188, 438, 439, 441, 442, 443, 444, 445,
	446, 827, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 0, 475,
	476, 477, 478, 479, 0, 182, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 191, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 693, 206, 0, 223, 0, 0,
	272, 692, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 211, 605,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 0,
	0, 0, 0, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 0, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 0,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 0, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 0, 475, 476, 477, 478, 479,
	0, 604, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 206, 0, 223, 0, 0, 272, 309, 524, 0,
	0, 369, 0, 422, 426, 0, 515, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 211, 579, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 0, 0, 0, 0, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 0,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 0, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 0, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 557, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 581, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	0, 475, 476, 477, 478, 479, 0, 580, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 223,
	0, 0, 272, 309, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 0, 0, 0, 0, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 4137, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 0, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 0, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 0,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 0, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 223, 0, 0, 272, 309,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 0, 0, 272, 309, 524, 0, 0, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 211, 186, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 0, 0, 0, 0, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 0, 215, 216,
	217, 220, 221, 222, 224, 187, 225, 226, 227, 228,
	229, 230, 521, 0, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 189, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 0, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 190, 430, 431, 432, 433, 557,
	435, 436, 188, 438, 439, 441, 442, 443, 444, 445,
	446, 2720, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 0, 475,
	476, 477, 478, 479, 0, 2721, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 191, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 223, 0, 0,
	272, 2492, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 211, 605,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 0,
	0, 0, 0, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 0, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 0,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 0, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 0, 475, 476, 477, 478, 479,
	0, 604, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 0, 0, 272, 2410, 524, 0,
	0, 369, 0, 422, 426, 0, 515, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 211, 605, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 0, 0, 0, 0, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 0,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 0, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 0, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 557, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	0, 475, 476, 477, 478, 479, 0, 604, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 223,
	0, 0, 272, 2408, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 0, 0, 0, 0, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 0, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 0, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 0,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 0, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 223, 0, 0, 272, 2393,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 0, 0, 272, 1895, 524, 0, 0, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 211, 605, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 0, 0, 0, 0, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 0, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 0, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 0, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 557,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 0, 475,
	476, 477, 478, 479, 0, 604, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 223, 0, 0,
	272, 1837, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 211, 605,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 0,
	0, 0, 0, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 0, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 0,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 0, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 0, 475, 476, 477, 478, 479,
	0, 604, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 0, 0, 272, 1146, 524, 0,
	0, 369, 0, 422, 426, 0, 515, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 211, 605, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 0, 0, 0, 0, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 0,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 0, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 0, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 557, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	0, 475, 476, 477, 478, 479, 0, 604, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 223,
	0, 0, 272, 964, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 0, 0, 0, 0, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 0, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 0, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 0,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 0, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 223, 0, 0, 272, 925,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 0, 0, 272, 921, 524, 0, 0, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 211, 605, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 0, 0, 0, 0, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 0, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 0, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 0, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 557,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 0, 475,
	476, 477, 478, 479, 0, 604, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 914, 223, 0, 0,
	272, 309, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 211, 605,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 0, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 0,
	0, 0, 0, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 0, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 0,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 0, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 0, 475, 476, 477, 478, 479,
	0, 604, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 0, 0, 272, 309, 524, 0,
	0, 369, 0, 422, 426, 0, 515, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 211, 186, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 0, 0, 0, 0, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 0,
	215, 216, 217, 220, 221, 222, 224, 187, 225, 226,
	227, 228, 229, 230, 521, 0, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 189, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 0, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 190, 430, 431, 432,
	433, 557, 435, 436, 188, 438, 439, 441, 442, 443,
	444, 445, 446, 827, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	0, 475, 476, 477, 478, 479, 0, 182, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 191, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 223,
	0, 0, 272, 777, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 0, 0, 0, 0, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 0, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 0, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 0,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 0, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 223, 0, 0, 272, 773,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 0, 0, 272, 770, 524, 0, 0, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 211, 605, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 0, 0, 0, 0, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 0, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 0, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 0, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 557,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 0, 475,
	476, 477, 478, 479, 0, 604, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 223, 0, 0,
	272, 766, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 211, 605,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 0,
	0, 0, 0, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 0, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 0,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 0, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 0, 475, 476, 477, 478, 479,
	0, 604, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 0, 0, 272, 751, 524, 0,
	0, 369, 0, 422, 426, 0, 515, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 211, 605, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 0, 0, 0, 0, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 0,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 0, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 0, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 557, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	0, 475, 476, 477, 478, 479, 0, 604, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 223,
	0, 0, 272, 697, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 0, 0, 0, 0, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 0, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 0, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 0,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 0, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 223, 0, 0, 272, 695,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 0, 0, 272, 678, 524, 0, 0, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 211, 605, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 0, 0, 0, 0, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 0, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 0, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 0, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 557,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 0, 475,
	476, 477, 478, 479, 0, 604, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 223, 0, 0,
	272, 670, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 211, 605,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 0,
	0, 0, 0, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 0, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 521, 0,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 0, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 557, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 0, 475, 476, 477, 478, 479,
	0, 604, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 0, 0, 272, 666, 524, 0,
	0, 369, 0, 422, 426, 0, 515, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 211, 605, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 347, 0, 564, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 0, 0, 0, 0, 0,
	249, 250, 371, 231, 379, 576, 542, 434, 392, 390,
	0, 357, 414, 571, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 539, 543, 541, 537,
	534, 538, 535, 536, 540, 296, 533, 0, 508, 517,
	551, 531, 559, 516, 556, 526, 271, 555, 520, 519,
	565, 546, 547, 501, 561, 532, 530, 523, 522, 518,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 0,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 521, 0, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 525, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 527, 528, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 544, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 545,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 548, 549, 365, 367, 368,
	550, 552, 553, 0, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 554, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 557, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 558, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 560, 469, 470, 0, 472, 473,
	0, 475, 476, 477, 478, 479, 0, 604, 480, 562,
	481, 563, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 566,
	567, 568, 569, 570, 572, 573, 574, 575, 512, 513,
	529, 380, 374, 330, 372, 373, 377, 378, 381, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 223,
	0, 0, 272, 664, 524, 0, 0, 369, 0, 422,
	426, 0, 515, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	211, 605, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	347, 0, 564, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 0, 0, 0, 0, 0, 249, 250, 371, 231,
	379, 576, 542, 434, 392, 390, 0, 357, 414, 571,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 539, 543, 541, 537, 534, 538, 535, 536,
	540, 296, 533, 0, 508, 517, 551, 531, 559, 516,
	556, 526, 271, 555, 520, 519, 565, 546, 547, 501,
	561, 532, 530, 523, 522, 518, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 0, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	521, 0, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 525, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 527, 528,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 544, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 545, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 548, 549, 365, 367, 368, 550, 552, 553, 0,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 554, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 557, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 558, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	560, 469, 470, 0, 472, 473, 0, 475, 476, 477,
	478, 479, 0, 604, 480, 562, 481, 563, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 566, 567, 568, 569, 570,
	572, 573, 574, 575, 512, 513, 529, 380, 374, 330,
	372, 373, 377, 378, 381, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 223, 0, 0, 272, 639,
	524, 0, 0, 369, 0, 422, 426, 0, 515, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 211, 605, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 347, 0, 564, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 0, 0, 0,
	0, 0, 249, 250, 371, 231, 379, 576, 542, 434,
	392, 390, 0, 357, 414, 571, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 539, 543,
	541, 537, 534, 538, 535, 536, 540, 296, 533, 0,
	508, 517, 551, 531, 559, 516, 556, 526, 271, 555,
	520, 519, 565, 546, 547, 501, 561, 532, 530, 523,
	522, 518, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 0, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 521, 0, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	525, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 527, 528, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 544, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 545, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 548, 549, 365,
	367, 368, 550, 552, 553, 0, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 554, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 557, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 558, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 560, 469, 470, 0,
	472, 473, 0, 475, 476, 477, 478, 479, 0, 604,
	480, 562, 481, 563, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 566, 567, 568, 569, 570, 572, 573, 574, 575,
	512, 513, 529, 380, 374, 330, 372, 373, 377, 378,
	381, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 223, 0, 0, 272, 309, 524, 0, 0, 369,
	0, 422, 426, 0, 515, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 211, 605, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 347, 0, 564, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 0, 0, 0, 0, 0, 249, 250,
	371, 231, 379, 576, 542, 434, 392, 390, 0, 357,
	414, 571, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 539, 543, 541, 537, 534, 538,
	535, 536, 540, 296, 533, 0, 508, 517, 551, 531,
	559, 516, 556, 526, 271, 555, 520, 519, 565, 546,
	547, 501, 561, 532, 530, 523, 522, 518, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 0, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 521, 0, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 525, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	527, 528, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 544, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 545, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 548, 549, 365, 367, 368, 550, 552,
	553, 0, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 554, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 557,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 0, 448, 558, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 560, 469, 470, 0, 472, 473, 0, 475,
	476, 477, 478, 479, 0, 604, 480, 562, 481, 563,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 566, 567, 568,
	569, 570, 572, 573, 574, 575, 512, 513, 529, 380,
	374, 330, 372, 373, 377, 378, 381, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 223, 0, 0,
	272, 309, 524, 0, 0, 369, 0, 422, 426, 0,
	515, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 211, 186,
	514, 180, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 347, 0,
	564, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 0,
	0, 0, 0, 0, 249, 250, 371, 231, 379, 576,
	542, 434, 392, 390, 0, 357, 414, 571, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	539, 543, 541, 537, 534, 538, 535, 536, 540, 296,
	533, 0, 508, 517, 551, 531, 559, 516, 556, 526,
	271, 555, 520, 519, 565, 546, 547, 501, 561, 532,
	530, 523, 522, 518, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 0, 215, 216, 217, 220, 221, 222,
	224, 187, 225, 226, 227, 228, 229, 230, 521, 0,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 525, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 527, 528, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 544,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 545, 350, 351, 352, 353, 354, 355,
	356, 189, 358, 359, 360, 361, 362, 363, 364, 548,
	549, 365, 367, 368, 550, 552, 553, 0, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	554, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	190, 430, 431, 432, 433, 557, 435, 436, 188, 438,
	439, 441, 442, 443, 444, 445, 446, 181, 0, 448,
	558, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 560, 469,
	470, 0, 472, 473, 0, 475, 476, 477, 478, 479,
	0, 182, 480, 562, 481, 563, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 191, 566, 567, 568, 569, 570, 572, 573,
	574, 575, 512, 513, 529, 380, 374, 330, 372, 373,
	377, 378, 381, 805, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 223, 711, 0, 272, 309, 0, 0,
	0, 369, 0, 422, 426, 0, 0, 0, 0, 0,
	0, 280, 0, 716, 2286, 722, 0, 728, 0, 491,
	0, 718, 719, 724, 211, 804, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 720, 717, 721, 727, 715, 725,
	712, 723, 0, 413, 347, 0, 0, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 709, 714, 0, 730, 0,
	249, 250, 371, 231, 379, 0, 0, 434, 392, 390,
	0, 357, 414, 0, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 0, 508, 807,
	797, 789, 790, 791, 792, 793, 794, 0, 809, 810,
	811, 812, 813, 501, 803, 0, 788, 795, 796, 798,
	2289, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 708,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 0, 710, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 713, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 0, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 0, 0, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 0, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 0,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 0, 0, 365, 367, 368,
	0, 2287, 0, 726, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 0, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 0, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 2292, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 0, 469, 470, 0, 472, 473,
	729, 475, 476, 477, 478, 479, 0, 604, 480, 0,
	481, 0, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 0,
	0, 805, 0, 0, 0, 0, 0, 0, 512, 513,
	2288, 380, 374, 330, 372, 373, 377, 378, 381, 206,
	0, 223, 711, 0, 272, 309, 0, 0, 0, 369,
	0, 422, 426, 0, 0, 0, 0, 0, 0, 280,
	0, 716, 0, 722, 2697, 728, 0, 491, 0, 718,
	719, 724, 211, 804, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 2696, 0, 0, 219, 0, 0,
	0, 0, 720, 717, 721, 727, 715, 725, 712, 723,
	0, 413, 347, 0, 0, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 709, 714, 0, 730, 0, 249, 250,
	371, 231, 379, 0, 0, 434, 392, 390, 0, 357,
	414, 0, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 0, 0, 508, 807, 797, 789,
	790, 791, 792, 793, 794, 0, 809, 810, 811, 812,
	813, 501, 803, 0, 788, 795, 796, 798, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 708, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 0, 710, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	713, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 0, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	0, 0, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 0, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 0, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 0, 0, 365, 367, 368, 0, 0,
	0, 726, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 0, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 0,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 0, 448, 2292, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 0, 469, 470, 0, 472, 473, 729, 475,
	476, 477, 478, 479, 0, 604, 480, 0, 481, 0,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 0, 0, 805,
	0, 0, 0, 0, 0, 0, 512, 513, 0, 380,
	374, 330, 372, 373, 377, 378, 381, 206, 0, 223,
	711, 0, 272, 309, 0, 0, 0, 369, 0, 422,
	426, 0, 0, 0, 0, 0, 0, 280, 0, 716,
	0, 722, 0, 728, 0, 491, 0, 718, 719, 724,
	211, 804, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	720, 717, 721, 727, 715, 725, 712, 723, 0, 413,
	347, 0, 0, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 709, 714, 0, 730, 0, 249, 250, 371, 231,
	379, 0, 0, 434, 392, 390, 4167, 357, 414, 0,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 0, 508, 807, 797, 789, 790, 791,
	792, 793, 794, 0, 809, 810, 811, 812, 813, 501,
	803, 0, 788, 795, 796, 798, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 708, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	0, 710, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 713, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 0, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 0, 0,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 0, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 0, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 0, 0, 365, 367, 368, 0, 0, 0, 726,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 0, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 0, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 0, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	0, 469, 470, 0, 472, 473, 729, 475, 476, 477,
	478, 479, 0, 604, 480, 0, 481, 0, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 0, 0, 805, 0, 0,
	0, 0, 0, 0, 512, 513, 0, 380, 374, 330,
	372, 373, 377, 378, 381, 206, 0, 223, 711, 0,
	272, 309, 0, 0, 0, 369, 0, 422, 426, 0,
	0, 0, 0, 0, 0, 280, 0, 716, 0, 722,
	0, 728, 0, 491, 0, 718, 719, 724, 211, 804,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 720, 717,
	721, 727, 715, 725, 712, 723, 0, 413, 347, 0,
	0, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 709,
	714, 0, 730, 0, 249, 250, 371, 231, 379, 0,
	0, 434, 392, 390, 3879, 357, 414, 0, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	0, 0, 508, 807, 797, 789, 790, 791, 792, 793,
	794, 0, 809, 810, 811, 812, 813, 501, 803, 0,
	788, 795, 796, 798, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 708, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 0, 710,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 713, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 0, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 0, 0, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 0,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 0, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 0,
	0, 365, 367, 368, 0, 0, 0, 726, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	0, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 0, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	0, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 0, 469,
	470, 0, 472, 473, 729, 475, 476, 477, 478, 479,
	0, 604, 480, 0, 481, 0, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 0, 0, 805, 0, 0, 0, 0,
	0, 0, 512, 513, 0, 380, 374, 330, 372, 373,
	377, 378, 381, 206, 0, 223, 711, 0, 272, 309,
	0, 0, 0, 369, 0, 422, 426, 0, 0, 0,
	0, 0, 0, 280, 0, 716, 0, 722, 0, 728,
	0, 491, 0, 718, 719, 724, 211, 804, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 720, 717, 721, 727,
	715, 725, 712, 723, 0, 413, 347, 0, 0, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 709, 714, 0,
	730, 0, 249, 250, 371, 231, 379, 0, 0, 434,
	392, 390, 0, 357, 414, 0, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 0, 0,
	508, 807, 797, 789, 790, 791, 792, 793, 794, 0,
	809, 810, 811, 812, 813, 501, 803, 0, 788, 795,
	796, 798, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 708, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 0, 710, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 713, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	0, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 0, 0, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 0, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 0, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 3711, 0, 365,
	367, 368, 0, 0, 0, 726, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 0, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 0, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 0, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 0, 469, 470, 0,
	472, 473, 729, 475, 476, 477, 478, 479, 0, 604,
	480, 0, 481, 0, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 0, 0, 805, 0, 0, 0, 0, 0, 0,
	512, 513, 0, 380, 374, 330, 372, 373, 377, 378,
	381, 206, 0, 223, 711, 0, 272, 309, 0, 0,
	0, 369, 0, 422, 426, 0, 0, 0, 0, 0,
	0, 280, 0, 716, 0, 722, 0, 728, 0, 491,
	0, 718, 719, 724, 211, 804, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 720, 717, 721, 727, 715, 725,
	712, 723, 0, 413, 347, 0, 0, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 709, 714, 0, 730, 0,
	249, 250, 371, 231, 379, 0, 0, 434, 392, 390,
	0, 357, 414, 0, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 0, 508, 807,
	797, 789, 790, 791, 792, 793, 794, 0, 809, 810,
	811, 812, 813, 501, 803, 0, 788, 795, 796, 798,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 708,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 0, 710, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 713, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 0, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 0, 0, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 0, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 0,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 0, 0, 365, 367, 368,
	0, 0, 0, 726, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 0, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 0, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 2292, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 0, 469, 470, 0, 472, 473,
	729, 475, 476, 477, 478, 479, 0, 604, 480, 0,
	481, 0, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 0,
	0, 805, 0, 0, 0, 0, 0, 0, 512, 513,
	0, 380, 374, 330, 372, 373, 377, 378, 381, 206,
	0, 223, 711, 0, 272, 309, 0, 0, 0, 369,
	0, 422, 426, 0, 0, 0, 0, 0, 0, 280,
	0, 716, 0, 722, 0, 728, 0, 491, 0, 718,
	719, 724, 211, 804, 514, 585, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 720, 717, 721, 727, 715, 725, 712, 723,
	0, 413, 347, 0, 0, 440, 218, 264, 251, 293,
	335, 447, 0, 0, 325, 495, 260, 349, 0, 239,
	382, 0, 471, 346, 0, 454, 474, 0, 366, 245,
	405, 461, 462, 709, 714, 0, 730, 0, 249, 250,
	371, 231, 379, 0, 0, 434, 392, 390, 0, 357,
	414, 0, 0, 0, 279, 0, 274, 370, 510, 237,
	489, 408, 375, 329, 437, 466, 276, 261, 262, 305,
	407, 295, 247, 500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 0, 0, 508, 807, 797, 789,
	790, 791, 792, 793, 794, 0, 809, 810, 811, 812,
	813, 501, 803, 0, 788, 795, 796, 798, 0, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 207,
	0, 208, 209, 210, 212, 213, 214, 708, 215, 216,
	217, 220, 221, 222, 224, 584, 225, 226, 227, 228,
	229, 230, 0, 710, 232, 233, 234, 235, 236, 238,
	240, 241, 242, 243, 244, 246, 248, 0, 0, 0,
	713, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	0, 258, 259, 263, 265, 266, 267, 268, 269, 270,
	273, 0, 275, 277, 0, 278, 281, 0, 282, 283,
	284, 285, 286, 287, 288, 289, 0, 290, 0, 291,
	292, 294, 0, 297, 298, 299, 300, 301, 0, 302,
	0, 0, 303, 304, 306, 307, 308, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 323, 324, 326, 0, 327, 328, 331, 332, 333,
	334, 0, 336, 0, 0, 337, 338, 339, 0, 0,
	340, 341, 342, 343, 344, 345, 348, 0, 350, 351,
	352, 353, 354, 355, 356, 586, 358, 359, 360, 361,
	362, 363, 364, 3285, 0, 365, 367, 368, 0, 0,
	0, 726, 383, 384, 385, 386, 387, 388, 389, 391,
	0, 393, 394, 395, 0, 396, 397, 398, 399, 0,
	400, 401, 402, 403, 404, 406, 409, 410, 411, 412,
	0, 415, 416, 417, 418, 419, 420, 421, 423, 424,
	425, 427, 428, 429, 587, 430, 431, 432, 433, 0,
	435, 436, 588, 438, 439, 441, 442, 443, 444, 445,
	446, 603, 0, 448, 0, 449, 450, 451, 452, 453,
	0, 455, 456, 457, 458, 459, 460, 463, 464, 465,
	467, 468, 0, 469, 470, 0, 472, 473, 729, 475,
	476, 477, 478, 479, 0, 604, 480, 0, 481, 0,
	482, 483, 484, 485, 486, 487, 488, 490, 0, 0,
	492, 493, 494, 496, 497, 498, 499, 502, 503, 504,
	505, 506, 0, 507, 509, 511, 589, 0, 0, 805,
	0, 0, 0, 0, 0, 0, 512, 513, 0, 380,
	374, 330, 372, 373, 377, 378, 381, 206, 0, 223,
	711, 0, 272, 309, 0, 0, 0, 369, 0, 422,
	426, 0, 0, 0, 0, 0, 0, 280, 0, 716,
	0, 722, 0, 728, 0, 491, 0, 718, 719, 724,
	211, 804, 514, 585, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	720, 717, 721, 727, 715, 725, 712, 723, 0, 413,
	347, 0, 0, 440, 218, 264, 251, 293, 335, 447,
	0, 0, 325, 495, 260, 349, 0, 239, 382, 0,
	471, 346, 0, 454, 474, 0, 366, 245, 405, 461,
	462, 709, 714, 0, 730, 0, 249, 250, 371, 231,
	379, 0, 0, 434, 392, 390, 0, 357, 414, 0,
	0, 0, 279, 0, 274, 370, 510, 237, 489, 408,
	375, 329, 437, 466, 276, 261, 262, 305, 407, 295,
	247, 500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 0, 508, 807, 797, 789, 790, 791,
	792, 793, 794, 0, 809, 810, 811, 812, 813, 501,
	803, 0, 788, 795, 796, 798, 0, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 207, 0, 208,
	209, 210, 212, 213, 214, 708, 215, 216, 217, 220,
	221, 222, 224, 584, 225, 226, 227, 228, 229, 230,
	0, 710, 232, 233, 234, 235, 236, 238, 240, 241,
	242, 243, 244, 246, 248, 0, 0, 0, 713, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 0, 258,
	259, 263, 265, 266, 267, 268, 269, 270, 273, 0,
	275, 277, 0, 278, 281, 0, 282, 283, 284, 285,
	286, 287, 288, 289, 0, 290, 0, 291, 292, 294,
	0, 297, 298, 299, 300, 301, 0, 302, 0, 0,
	303, 304, 306, 307, 308, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 323,
	324, 326, 0, 327, 328, 331, 332, 333, 334, 0,
	336, 0, 0, 337, 338, 339, 0, 0, 340, 341,
	342, 343, 344, 345, 348, 0, 350, 351, 352, 353,
	354, 355, 356, 586, 358, 359, 360, 361, 362, 363,
	364, 0, 0, 365, 367, 368, 0, 0, 0, 726,
	383, 384, 385, 386, 387, 388, 389, 391, 0, 393,
	394, 395, 0, 396, 397, 398, 399, 0, 400, 401,
	402, 403, 404, 406, 409, 410, 411, 412, 0, 415,
	416, 417, 418, 419, 420, 421, 423, 424, 425, 427,
	428, 429, 587, 430, 431, 432, 433, 0, 435, 436,
	588, 438, 439, 441, 442, 443, 444, 445, 446, 603,
	0, 448, 0, 449, 450, 451, 452, 453, 0, 455,
	456, 457, 458, 459, 460, 463, 464, 465, 467, 468,
	0, 469, 470, 0, 472, 473, 729, 475, 476, 477,
	478, 479, 0, 604, 480, 0, 481, 0, 482, 483,
	484, 485, 486, 487, 488, 490, 0, 0, 492, 493,
	494, 496, 497, 498, 499, 502, 503, 504, 505, 506,
	0, 507, 509, 511, 589, 0, 0, 805, 0, 0,
	0, 0, 0, 0, 512, 513, 0, 380, 374, 330,
	372, 373, 377, 378, 381, 206, 0, 223, 711, 0,
	272, 815, 0, 0, 0, 369, 0, 422, 426, 0,
	0, 0, 0, 0, 0, 280, 0, 716, 0, 722,
	0, 728, 0, 491, 0, 718, 719, 724, 211, 804,
	514, 585, 0, 0, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 720, 717,
	721, 727, 715, 725, 712, 723, 0, 413, 347, 0,
	0, 440, 218, 264, 251, 293, 335, 447, 0, 0,
	325, 495, 260, 349, 0, 239, 382, 0, 471, 346,
	0, 454, 474, 0, 366, 245, 405, 461, 462, 709,
	714, 0, 730, 0, 249, 250, 371, 231, 379, 0,
	0, 434, 392, 390, 0, 357, 414, 0, 0, 0,
	279, 0, 274, 370, 510, 237, 489, 408, 375, 329,
	437, 466, 276, 261, 262, 305, 407, 295, 247, 500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	0, 0, 508, 807, 797, 789, 790, 791, 792, 793,
	794, 0, 809, 810, 811, 812, 813, 501, 803, 0,
	788, 795, 796, 798, 0, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 207, 0, 208, 209, 210,
	212, 213, 214, 708, 215, 216, 217, 220, 221, 222,
	224, 584, 225, 226, 227, 228, 229, 230, 0, 710,
	232, 233, 234, 235, 236, 238, 240, 241, 242, 243,
	244, 246, 248, 0, 0, 0, 713, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 0, 258, 259, 263,
	265, 266, 267, 268, 269, 270, 273, 0, 275, 277,
	0, 278, 281, 0, 282, 283, 284, 285, 286, 287,
	288, 289, 0, 290, 0, 291, 292, 294, 0, 297,
	298, 299, 300, 301, 0, 302, 0, 0, 303, 304,
	306, 307, 308, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 323, 324, 326,
	0, 327, 328, 331, 332, 333, 334, 0, 336, 0,
	0, 337, 338, 339, 0, 0, 340, 341, 342, 343,
	344, 345, 348, 0, 350, 351, 352, 353, 354, 355,
	356, 586, 358, 359, 360, 361, 362, 363, 364, 0,
	0, 365, 367, 368, 0, 0, 0, 726, 383, 384,
	385, 386, 387, 388, 389, 391, 0, 393, 394, 395,
	0, 396, 397, 398, 399, 0, 400, 401, 402, 403,
	404, 406, 409, 410, 411, 412, 0, 415, 416, 417,
	418, 419, 420, 421, 423, 424, 425, 427, 428, 429,
	587, 430, 431, 432, 433, 0, 435, 436, 588, 438,
	439, 441, 442, 443, 444, 445, 446, 603, 0, 448,
	0, 449, 450, 451, 452, 453, 0, 455, 456, 457,
	458, 459, 460, 463, 464, 465, 467, 468, 0, 469,
	470, 0, 472, 473, 729, 475, 476, 477, 478, 479,
	0, 604, 480, 0, 481, 0, 482, 483, 484, 485,
	486, 487, 488, 490, 0, 0, 492, 493, 494, 496,
	497, 498, 499, 502, 503, 504, 505, 506, 0, 507,
	509, 511, 589, 0, 0, 805, 0, 0, 0, 0,
	0, 0, 512, 513, 0, 380, 374, 330, 372, 373,
	377, 378, 381, 206, 0, 223, 711, 0, 272, 779,
	0, 0, 0, 369, 0, 422, 426, 0, 0, 0,
	0, 0, 0, 280, 0, 716, 0, 722, 0, 728,
	0, 491, 0, 718, 719, 724, 211, 804, 514, 585,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 720, 717, 721, 727,
	715, 725, 712, 723, 0, 413, 347, 0, 0, 440,
	218, 264, 251, 293, 335, 447, 0, 0, 325, 495,
	260, 349, 0, 239, 382, 0, 471, 346, 0, 454,
	474, 0, 366, 245, 405, 461, 462, 709, 714, 0,
	730, 0, 249, 250, 371, 231, 379, 0, 0, 434,
	392, 390, 0, 357, 414, 0, 0, 0, 279, 0,
	274, 370, 510, 237, 489, 408, 375, 329, 437, 466,
	276, 261, 262, 305, 407, 295, 247, 500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 0, 0,
	508, 807, 797, 789, 790, 791, 792, 793, 794, 0,
	809, 810, 811, 812, 813, 501, 803, 0, 788, 795,
	796, 798, 0, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 207, 0, 208, 209, 210, 212, 213,
	214, 708, 215, 216, 217, 220, 221, 222, 224, 584,
	225, 226, 227, 228, 229, 230, 0, 710, 232, 233,
	234, 235, 236, 238, 240, 241, 242, 243, 244, 246,
	248, 0, 0, 0, 713, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 0, 258, 259, 263, 265, 266,
	267, 268, 269, 270, 273, 0, 275, 277, 0, 278,
	281, 0, 282, 283, 284, 285, 286, 287, 288, 289,
	0, 290, 0, 291, 292, 294, 0, 297, 298, 299,
	300, 301, 0, 302, 0, 0, 303, 304, 306, 307,
	308, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 323, 324, 326, 0, 327,
	328, 331, 332, 333, 334, 0, 336, 0, 0, 337,
	338, 339, 0, 0, 340, 341, 342, 343, 344, 345,
	348, 0, 350, 351, 352, 353, 354, 355, 356, 586,
	358, 359, 360, 361, 362, 363, 364, 0, 0, 365,
	367, 368, 0, 0, 0, 726, 383, 384, 385, 386,
	387, 388, 389, 391, 0, 393, 394, 395, 0, 396,
	397, 398, 399, 0, 400, 401, 402, 403, 404, 406,
	409, 410, 411, 412, 0, 415, 416, 417, 418, 419,
	420, 421, 423, 424, 425, 427, 428, 429, 587, 430,
	431, 432, 433, 0, 435, 436, 588, 438, 439, 441,
	442, 443, 444, 445, 446, 603, 0, 448, 0, 449,
	450, 451, 452, 453, 0, 455, 456, 457, 458, 459,
	460, 463, 464, 465, 467, 468, 0, 469, 470, 0,
	472, 473, 729, 475, 476, 477, 478, 479, 0, 604,
	480, 0, 481, 0, 482, 483, 484, 485, 486, 487,
	488, 490, 0, 0, 492, 493, 494, 496, 497, 498,
	499, 502, 503, 504, 505, 506, 0, 507, 509, 511,
	589, 0, 0, 805, 0, 0, 0, 0, 0, 0,
	512, 513, 0, 380, 374, 330, 372, 373, 377, 378,
	381, 206, 0, 223, 711, 0, 272, 309, 0, 0,
	0, 369, 0, 422, 426, 0, 0, 0, 0, 0,
	0, 280, 0, 716, 0, 722, 0, 728, 0, 491,
	0, 718, 719, 724, 211, 0, 514, 585, 0, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 720, 717, 721, 727, 715, 725,
	712, 723, 0, 413, 347, 0, 0, 440, 218, 264,
	251, 293, 335, 447, 0, 0, 325, 495, 260, 349,
	0, 239, 382, 0, 471, 346, 0, 454, 474, 0,
	366, 245, 405, 461, 462, 709, 714, 0, 730, 0,
	249, 250, 371, 231, 379, 0, 0, 434, 392, 390,
	0, 357, 414, 0, 0, 0, 279, 0, 274, 370,
	510, 237, 489, 408, 375, 329, 437, 466, 276, 261,
	262, 305, 407, 295, 247, 500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 271, 0, 0, 0,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 207, 0, 208, 209, 210, 212, 213, 214, 708,
	215, 216, 217, 220, 221, 222, 224, 584, 225, 226,
	227, 228, 229, 230, 0, 710, 232, 233, 234, 235,
	236, 238, 240, 241, 242, 243, 244, 246, 248, 0,
	0, 0, 713, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 0, 258, 259, 263, 265, 266, 267, 268,
	269, 270, 273, 0, 275, 277, 0, 278, 281, 0,
	282, 283, 284, 285, 286, 287, 288, 289, 0, 290,
	0, 291, 292, 294, 0, 297, 298, 299, 300, 301,
	0, 302, 0, 0, 303, 304, 306, 307, 308, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 323, 324, 326, 0, 327, 328, 331,
	332, 333, 334, 0, 336, 0, 0, 337, 338, 339,
	0, 0, 340, 341, 342, 343, 344, 345, 348, 0,
	350, 351, 352, 353, 354, 355, 356, 586, 358, 359,
	360, 361, 362, 363, 364, 0, 0, 365, 367, 368,
	0, 0, 0, 726, 383, 384, 385, 386, 387, 388,
	389, 391, 0, 393, 394, 395, 0, 396, 397, 398,
	399, 0, 400, 401, 402, 403, 404, 406, 409, 410,
	411, 412, 0, 415, 416, 417, 418, 419, 420, 421,
	423, 424, 425, 427, 428, 429, 587, 430, 431, 432,
	433, 0, 435, 436, 588, 438, 439, 441, 442, 443,
	444, 445, 446, 603, 0, 448, 0, 449, 450, 451,
	452, 453, 0, 455, 456, 457, 458, 459, 460, 463,
	464, 465, 467, 468, 0, 469, 470, 0, 472, 473,
	729, 475, 476, 477, 478, 479, 0, 604, 480, 0,
	481, 0, 482, 483, 484, 485, 486, 487, 488, 490,
	0, 0, 492, 493, 494, 496, 497, 498, 499, 502,
	503, 504, 505, 506, 0, 507, 509, 511, 589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 513,
	0, 380, 374, 330, 372, 373, 377, 378, 381,
}

var yyPact = [...]int32{
	4357, -1000, 6, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2054, 563, 5657, 9091, 6168, 2177, 61103,
	46429, -1000, 2194, 596, 2649, 40863, 2, 60597, 47441, 246,
	4357, 2345, 40863, 2409, 2344, 596, 47441, -1000, 944, 1341,
	1057, 2689, 60091, 47441, 27221, 47441, 2143, 59585, 59079, 1695,
	58573, 1216, 2171, 615, 47441, 47441, 1195, 58067, 47441, 47441,
	287, 1494, -1000, -1000, 695, 673, -1000, -1000, -1000, 40357,
	45923, 57561, 57055, 497, 1663, 34825, 47441, 47441, 47441, 47441,
	34825, 31282, 1285, 1484, 56549, 34825, 47441, 34825, 47441, 47441,
	47441, 47441, 47441, 611, 31282, 32295, 47441, 56043, 2141, 47441,
	47441, -1000, 55537, 55031, 54525, 66001, 65513, 2811, 1211, -1000,
	-1000, -1000, 495, 1662, -1000, -1000, -1000, 2140, 1194, 601,
	-1000, 1284, -1000, -1000, -1000, -1000, -1000, -1000, 493, -1000,
	54019, 45417, 1250, -1000, -1000, 496, 2541, 2916, 2916, 2668,
	33813, 433, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2537,
	1253, 1545, 44, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 140, 131, 2194, 14389, 14389, -1000, 2338, -1000, 15,
	-1000, 38, 34319, -1000, -1000, -1000, 283, 1, 47441, -1000,
	221, -1000, 1, 16450, -1000, 47441, 2100, 53513, 40863, 40863,
	122, -1000, 153, 53007, 47441, 491, 52501, 2810, 34825, 34825,
	47441, 594, 34825, 1887, 1075, -1000, 1048, 1542, -1000, 2724,
	2843, 33, 238, 47441, 47441, -1000, 42, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 633, 1171, 604, 2723, 837, 2722, 1764, 51995, 566,
	2720, 1977, 487, 47441, 1149, 2337, 47441, 221, 2719, -1000,
	1908, 1505, 65025, 47441, -1000, -1000, -1000, -1000, 5063, 2799,
	2624, 1516, 2798, 2623, 8924, 2796, 8863, 2795, 44911, 44405,
	1757, 1079, 281, -1000, 38, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1078, 1076, 1074, 1135, 1072, 281, 1070, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 47441, 47441, 47441,
	2336, 2794, 1067, 1393, 1065, 1064, 546, 1385, 2328, 2327,
	47441, 1060, 1059, 1886, 1252, 1281, 2792, 1111, 1406, 1770,
	2789, 267, -1000, 2787, 316, -1000, 2326, 2786, 284, 2785,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 39, -1000, -1000,
	-1000, -1000, -1000, 280, 1598, 271, 271, 271, -1000, -1000,
	-1000, -1000, -1000, 65, 62, -1000, -1000, 1588, 270, 1588,
	1588, -1000, 1623, 1588, 284, 2783, 51489, 1938, -1000, 1755,
	-1000, 1103, -1000, -1000, -1000, 2810, -1000, 1537, -1000, 2869,
	32801, 264, 2916, -1000, 1242, 904, -1000, 1475, 1944, 19541,
	19026, 47441, 383, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1487, -1000, 1240, -1000, -1000, -1000, 2340, -16,
	-1000, 10748, -1000, -1000, 16450, 16450, 16450, 16450, -1000, -1000,
	-1000, 13358, -1000, -1000, 38, 269, 135, -1000, -1000, 266,
	-1000, 245, 38, -1000, -1000, -1000, -1000, -1000, -1000, 16450,
	-1000, 262, -1000, 261, 311, 260, -1000, 38, -1000, 10228,
	16450, -1000, 47441, 16450, 47441, 1, 2882, 47441, -8, 8441,
	575, 2879, 33307, -1000, 47441, 2239, 2236, 2523, 2422, 47441,
	500, 2716, 153, 47441, 1593, 2715, 50983, -1000, 254, 254,
	1447, 47441, 253, 65025, 1282, 885, -1000, 31282, 2807, 2782,
	65025, -1000, 28, 11797, -1000, 11797, 2645, 2232, 25631, -1000,
	323, 47441, 47441, 47441, 47441, -1000, 47441, 2781, -1000, -1000,
	-1000, 2779, 47441, 342, 2714, 503, 2916, 2775, 30270, 2709,
	50477, 2325, 1222, 31282, 47441, 580, 2324, 2774, -1000, 38333,
	238, 2916, 2878, 1884, -15, -1000, 845, -1000, 1142, 1141,
	36326, 781, 778, 1962, 482, 2322, 1049, 661, 47441, 1468,
	47441, 1941, 2522, 163, 1367, 962, -1000, 252, 40863, 707,
	-15, -1000, 2521, 1140, 47441, 706, -15, 2520, 1593, -1000,
	1554, 65025, 552, -1000, 2370, -1000, 552, 552, 2369, 1173,
	837, 837, -1000, 47441, -15, 900, 47441, 8564, 2773, 2622,
	8505, 2771, 47441, 2519, -1000, 120, 38, 2517, 2515, 2513,
	2013, -1000, 2062, 2648, 894, 1950, 2512, -1000, 2511, 1055,
	2231, 2230, 47441, 47441, 2510, 2509, 30776, 38839, 38839, 2508,
	2504, 2502, 421, -1000, 2601, 2498, 272, 2916, 1116, 1110,
	1109, -1000, -1000, 238, 47441, 47441, 1159, 2495, 2492, 30270,
	2491, 163, 163, 2490, 746, 47441, 47441, 47441, 47441, 47441,
	1705, 1682, 1678, -1000, 8604, -1000, -1000, 47441, 47441, -1000,
	-1000, -1000, 47441, 47441, -1000, 47441, 47441, 65025, -1000, 65025,
	-1000, 43, 16450, -1000, 2884, -1000, -1000, -1000, -1000, 2884,
	-1000, 2548, 2546, 2884, -1000, 251, -1000, 2884, -1000, -1000,
	1588, 1588, -1000, -1000, 65025, 267, 2769, 30270, 2767, -1000,
	-1000, -1000, -1000, -1000, 47441, 2869, 567, -1000, -1000, 1470,
	-1000, -1000, 1017, -1000, -1000, -1000, -1000, 0, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2914, 2913, -1000,
	-1000, 0, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2408, 47441,
	14389, 65025, 16450, 16450, 16450, 16450, 16450, 16450, 16450, 16450,
	16450, 16450, 16450, 16450, 16450, 16450, 2579, -1000, -1000, 16450,
	2593, 16450, 47441, 2529, 16450, 2489, 231, 2486, 11797, -1000,
	245, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 791, 791, 4884, 481, 38, 8211,
	-1, 36, 246, 38, -1000, -1000, -1000, 14905, 16450, 25631,
	38, 2556, 8441, -1000, 15935, 13874, 2408, 16450, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 8114, -232, 119, -9, -1000,
	2219, -11, 16450, -1000, 16450, 16450, 2579, 16450, 16450, 47441,
	2529, 2489, 231, 2486, 245, 2319, -1000, 2031, 29258, 2159,
	47441, 334, -1000, 357, 47441, -1000, -1000, 2383, 22595, 22595,
	1971, 1971, -1000, -1000, -23, -1000, 36832, 47441, 1940, 2763,
	2658, 244, -1000, 1593, 1440, 2762, 2318, 2707, -1000, 7073,
	37844, 6934, 941, -1000, -1000, 1937, 1569, 238, -1000, 35837,
	1269, 47441, 47441, 484, -1000, -1000, -1000, -1000, -1000, -1000,
	1378, 47441, -1000, 11797, -1000, -24, -1000, 356, 1883, 47441,
	-1000, 47441, 242, 238, 238, 238, 238, 238, -1000, 47441,
	1069, 47441, 942, 36832, 1936, 2756, 1418, -1000, -1000, 47441,
	911, -1000, -1000, 2752, 2867, 2705, 153, 11797, 2922, -1000,
	2859, 1594, 24619, 47441, 616, 366, -1000, 40863, 2621, 31,
	153, -1000, 15, -1000, 1105, 65025, 2916, 5701, 47441, 47441,
	47441, -1000, 47441, 47441, -1000, 2703, 49971, -1000, 65025, 47441,
	-1000, 237, 2250, 458, 443, 2203, 43899, 47441, 49465, 48959,
	47441, 720, -1000, -1000, 1192, 47441, -1000, 11797, 47441, 39851,
	769, 741, 47441, 1235, 39345, 47441, 1234, -1000, 47441, 960,
	-1000, -1000, 31282, -1000, 2084, 1232, 12309, 4082, 47441, 47441,
	47441, 8278, 47441, 47441, -1000, -1000, -1000, -1000, -1000, -1000,
	552, -1000, -1000, -1000, 47441, 47441, 552, 552, 8841, 47441,
	47441, 6895, -15, 876, 47441, 703, -15, 856, 40863, 888,
	47441, -1000, 47441, 47441, 47441, 47441, 47441, -1000, 2608, 48453,
	16450, 2607, -1000, 47441, -1000, 236, 2606, 47441, 47441, 31282,
	2485, 47441, 47441, 1317, 2307, 47441, 47441, -1000, -2, -2,
	-2, 47441, 47441, 47441, -1000, -1000, -1000, 47441, -1000, 47441,
	-1000, 2662, 47441, 47441, -1000, 1054, 1053, 2482, -1000, 1207,
	-1000, 31282, 31282, 910, 47441, -1000, -1000, 47441, 547, 2096,
	1045, 1041, 1038, 1029, 47441, 47441, 2916, 2804, 2916, 2481,
	47441, 47441, 34825, 235, 65025, 34825, 26691, 34825, 34825, 1881,
	65025, -1000, -1000, -1000, -1000, -1000, -1000, 267, -1000, 316,
	-1000, 2692, 2306, -1000, 284, -1000, -27, 117, 116, 2534,
	2533, 115, 16450, 114, -1000, -1000, 284, -1000, 47441, 896,
	1879, 2664, 1470, -1000, -1000, 806, 1098, -1000, 20056, -1000,
	-1000, -1000, -1000, 2376, 22595, -1000, -1000, -1000, -37, -37,
	11, 11, 11, -1000, 468, 468, 468, 468, 468, 468,
	4884, 4758, -1000, 2600, 4346, 16450, 16450, 2480, 231, 2477,
	1732, -1000, 2493, -1000, 481, 17995, 17995, -1000, -1000, -1000,
	13358, 16450, -1000, -1000, -1000, 16450, -43, -45, -1000, -1000,
	-49, 113, 1670, -1000, 16450, -1000, -55, -1000, -1000, -3,
	16450, 16450, 16450, -1000, 8441, 2891, -1000, 2376, -57, -1000,
	16450, -1000, -1000, 230, -1000, 2164, -1000, 8441, 2044, 2041,
	1675, -1000, -1000, -59, -1000, -1000, -1000, -1000, 2383, 33307,
	16450, -61, -1000, 38, 2044, 16965, -46, 2308, 41875, 41875,
	25125, -1000, 22089, 41875, 41875, 41875, 337, 2401, 229, 222,
	38, -1000, 2873, 2078, -1000, 2078, 47441, -1000, 110, -4,
	-1000, -1000, -1000, -1000, 47441, 166, 47441, 47441, 2857, 163,
	47441, 47441, 40863, 2745, 62097, 1189, 6934, -1000, 2916, 33813,
	1878, -1000, -1000, 2302, -1000, -1000, -1000, -1000, 922, 1359,
	-1000, 1246, 552, 552, 47441, -1000, 47441, 47947, -1000, -62,
	-1000, -1000, 750, 64049, 61609, -1000, 1157, -1000, -1000, -1000,
	39, -1000, 66489, 1189, 2598, 2317, -1000, -1000, -1000, 1935,
	-1000, -1000, 941, -1000, 108, -213, 2368, -65, -1000, -1000,
	-1000, 350, 47441, 1382, 153, 47441, 2807, 929, 934, 1541,
	-1000, 4391, -1000, -1000, 11797, 12821, 576, -1000, 106, -5,
	-1000, 65025, 2916, -1000, -1000, -1000, -1000, -1000, 534, -1000,
	47441, 33813, 33813, -1000, 837, 418, 942, -1000, 47441, 694,
	47441, 104, 47441, 47441, 1490, 566, 47441, 1870, 596, 2741,
	2196, 1669, 2658, 1857, 2928, 1371, -1000, -1000, 296, -1000,
	38, -1000, 16450, 221, 2662, -1000, 38839, 153, 841, 31,
	2381, 2381, 47441, 103, 2475, -1000, -1000, 2473, 2471, 1912,
	1679, 2740, -1000, 2699, 721, 679, 16450, 219, -1000, 2641,
	1339, 557, 212, 210, 47441, 1043, 2085, -1000, 2738, 2692,
	2736, 2692, -1000, -1000, -1000, 43393, -1000, -67, -1000, 46,
	-1000, -1000, -1000, -1000, 47441, 47441, 47441, 47441, -1000, 921,
	-1000, -1000, -1000, -1000, 918, -1000, 1231, -1000, -1000, -1000,
	-1000, -1000, 1333, 917, -72, -1000, -1000, 11797, 11797, 11797,
	2916, -1000, -15, -1000, 833, 1423, -1000, -1000, -15, 2467,
	1420, -1000, -1000, -1000, -1000, -1000, -1000, -15, 2464, 1593,
	-1000, 2463, -15, 855, 47441, 47441, 5115, 47441, 47441, 47441,
	4495, 2462, 421, 942, -1000, -1000, -1000, -1000, -1000, 2461,
	-1000, 2692, 2733, 8441, -1000, 891, 16450, -1000, -1000, -1000,
	-1000, 47441, 1027, 1387, 2460, 2204, 31282, 47441, -1000, -1000,
	-1000, -1000, -1000, -1000, 345, -1000, 345, 345, 2457, 2456,
	47441, -1000, -1000, -1000, -1000, 47441, -1000, -1000, -1000, -1000,
	-1000, 2884, 2884, 744, 2453, 2452, 2451, 2450, -1000, 2449,
	2448, 2916, 2693, -1000, -1000, 33813, -1000, -1000, -1000, 65025,
	-1000, -1000, -1000, 47441, 47441, 208, -1000, -1000, 65025, -1000,
	-1000, -1000, -1000, 47441, -1000, -1000, -1000, 373, -1000, -1000,
	373, -73, -1000, -1000, 267, 47441, 30270, -1000, 1279, 264,
	-1000, -1000, -1000, -1000, -1000, 16450, -46, -1000, 16450, 1703,
	1581, 17995, 17995, -1000, 16450, 16450, 16450, 1509, -1000, 17995,
	17995, 1061, -75, 1351, 38, 7903, -1000, -1000, 298, -1000,
	-1000, 1443, -1000, 16450, 7856, -1000, -1000, 102, 15420, -1000,
	-7, -7, 16450, 16450, -1000, -1000, 224, 8441, 596, -1000,
	-1000, 14389, 560, 596, 640, 47441, 38, 2044, -1000, 8441,
	354, 47441, -1000, 8441, 1934, 22595, 2260, 2257, 22595, 2270,
	2243, 2243, 2243, -1000, -1000, -1000, 47441, 205, -1000, 41875,
	41875, 41875, 41875, 31788, 98, 2308, -1000, -1000, -1000, -1000,
	1915, 203, 21583, 16450, 38, 16450, 837, -1000, -1000, -1000,
	2229, -1000, 1308, 36832, -1000, 1134, 37338, 166, 456, 596,
	-1000, -77, 1593, 2203, 47441, 6934, 202, 2298, -1000, 39,
	-1000, -1000, 1552, 16450, -1000, -1000, -10, -1000, -13, 564,
	2584, 1356, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1539, 820, -1000, 61609, 16450, 16450, 64049, -1000, 64049, -1000,
	-1000, 14, 33, -1000, 47441, 941, 47441, 2292, -1000, -1000,
	2364, 61609, 61609, -1000, 2926, 12821, 201, 47441, 2658, 200,
	31282, 2807, -1000, 47441, -1000, -1000, 47441, 1687, -1000, 2696,
	439, 197, 17995, 47441, 1690, -1000, 1419, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 196, 2914, 2913, 65025,
	-1000, 47441, 2650, 95, -14, -1000, -1000, 47441, -1000, -1000,
	-1000, -1000, -1000, 194, -1000, -1000, 33, -1000, -1000, -1000,
	1308, 166, 255, 1754, 503, 418, 30270, 2664, 47441, 2658,
	47441, 1160, 47441, -1000, 2446, 2211, -1000, 47441, 22595, 24619,
	7522, 2297, -1000, -1000, 2381, 42887, 2381, -1000, 193, -1000,
	345, 1809, 2916, 47441, 47441, -1000, 2157, -1000, -1000, -1000,
	47441, 2732, 1510, -1000, 42381, -1000, 2203, 7054, 47441, 1601,
	-1000, 2630, 47441, 47441, -1000, 47441, 23101, -1000, -1000, 1631,
	1218, 163, 1392, 1290, 537, -1000, -1000, 837, 735, 1601,
	47441, -1000, 47441, -1000, -1000, -1000, -1000, -1000, 11797, 12821,
	11797, -1000, -1000, -1000, -1000, -1000, -1000, 880, 47441, -1000,
	-1000, 12309, -1000, -1000, -1000, -1000, -1000, 47441, 47441, 47441,
	693, 2363, 47441, 689, 2362, 47441, 47441, 47441, 47441, -1000,
	2443, -15, 839, 1412, -1000, 2442, -15, 834, 47441, -1000,
	47441, -1000, 47441, -1000, 6929, 1601, -1000, 2441, 2438, 1068,
	1624, 47441, 2679, 192, -38, -1000, 1024, -1000, -1000, -1000,
	47441, 47441, -1000, 421, 547, 47441, 47441, 47441, 47441, 47441,
	2916, 1555, 2731, -1000, 2856, 2210, 2207, -1000, 64537, 1258,
	2692, -1000, -1000, -1000, -1000, -1000, 875, -1000, 1489, 8441,
	1090, 16450, 16450, 861, 652, 697, 1090, 785, 16450, 65025,
	17995, 17995, 17995, 17995, 17995, 17995, 17995, 17995, 17995, 17995,
	17995, 17995, 734, 734, 16450, -1000, 16450, -1000, -1000, -1000,
	8441, 16450, -1000, 16450, -1000, 89, 80, 16450, 79, 8441,
	8441, -1000, 77, -16, 1978, 23101, 1943, -1000, -1000, 2031,
	-1000, -1000, 16450, -1000, 47441, 2308, 22595, 22595, 2224, 2251,
	22595, -1000, -1000, -1000, -1000, 191, 47441, -1000, -1000, -1000,
	-1000, 41875, -1000, 34825, 1850, 190, -21, 6704, 6607, 186,
	837, 1667, -1000, 1134, 189, -1000, 1380, 2196, -1000, 2361,
	-78, -1000, -1000, -1000, 2683, 1912, 36832, 47441, 1932, 2660,
	2658, -1000, 188, 2293, 1189, 66489, 2582, -1000, 8441, 2916,
	1848, 65025, 1301, -1000, -1000, -1000, 8441, 8441, -1000, -1000,
	535, 16, 1022, -1000, -69, 47441, 61609, -1000, -79, -1000,
	350, -1000, 2391, 1304, 2854, 47441, -1000, 1255, -1000, -1000,
	-1000, 2662, 2662, 16450, 1039, 153, 2853, -1000, 2643, -1000,
	-1000, 25631, 2205, -1000, -1000, 47441, -1000, 2916, -1000, 1069,
	11797, 28, 868, 1912, 36832, 1931, 47441, 1414, -1000, 867,
	-1000, 2850, 634, -1000, 34825, -1000, -1000, 1681, -1000, 2595,
	2204, 31282, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -46,
	-1000, -1000, 24619, -1000, -1000, -1000, -1000, 16450, -1000, 680,
	1413, 2399, -1000, -1000, 2411, -1000, 47441, 418, -1000, 41369,
	-1000, -1000, -1000, -80, -1000, 782, -1000, 1415, 1323, -1000,
	-1000, -83, 1601, -90, -91, -1000, 2681, 517, 2647, 16450,
	2581, 2803, 2802, -1000, -1000, 1690, 2574, 2849, 547, -1000,
	-1000, -1000, -1000, 1690, -1000, 4281, 65025, 552, 547, 2692,
	2692, -1000, -1000, 312, -1000, -1000, -1000, -1000, 2435, 2434,
	47441, 31282, -1000, 47441, 31282, -1000, -1000, -1000, 2430, 47441,
	47441, 47441, 688, 2357, 47441, 47441, 47441, -1000, -1000, 2692,
	-1000, 47441, 47441, -125, -1000, 2884, 2884, 65025, -31, -1000,
	2884, 2884, -1000, -1000, 409, 16450, 31282, 2429, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2692, -1000, 2916, 2916,
	-1000, 65025, 47441, 47441, -93, -34, 47441, -1000, 47441, -1000,
	1090, 1090, 16450, 16450, 16450, 1090, -1000, -92, -92, 9,
	9, 9, -1000, 734, 734, 734, 734, 734, 734, 1090,
	1090, 8441, -1000, -1000, -1000, -1000, 2139, 1994, -98, -1000,
	47441, 1652, 8441, -1000, -1000, -1000, 2224, -1000, 187, 16450,
	22595, -1000, 47441, -103, -1000, -106, -1000, 2847, 1929, 21077,
	17480, 16450, -1000, -1000, 1615, 2098, -1000, 2726, 2726, 2106,
	-1000, 2142, 11797, 186, 2916, 2196, 47441, 1642, 1642, 1777,
	47441, -1000, 37338, 4391, 420, 1134, 75, 166, 47441, -1000,
	831, 2846, 23101, 40863, -1000, -108, -1000, 64049, -1000, 1295,
	4295, -1000, 532, -1000, -1000, -1000, 530, 1838, 610, 2390,
	-109, -1000, 73, 811, 765, 624, 47441, 596, -113, 2807,
	-1000, 2566, 2200, 2200, 5847, 1204, 322, -1000, 72, 47441,
	-1000, -1000, -114, -1000, 47441, 865, 71, 47441, 418, 1486,
	47441, 596, -1000, 47441, 185, 1160, 47441, 184, 2679, -38,
	295, 5711, 34825, 2844, 2844, 47441, 183, 182, 178, -1000,
	-1000, -1000, -1000, 1601, 1352, -1000, -1000, -1000, -1000, -1000,
	1352, 1093, 1352, 23101, 26161, -1000, 47441, 47441, -1000, 5622,
	-1000, 2730, 2729, -1000, -1000, 177, -1000, 2845, 2650, -1000,
	-1000, -1000, -1000, 12821, 47441, 47441, 1165, 328, 1165, 327,
	47441, -1000, -1000, 2426, 47441, 31282, -1000, -1000, 2421, -1000,
	1601, -1000, -1000, 1068, 25631, 24113, -1000, 1624, 174, 173,
	172, 4825, -1000, 47441, -1000, -1000, -1000, 69, -1000, -1000,
	-1000, 63561, 65025, -1000, -1000, 1090, 1090, 1090, 67, 2117,
	2125, 2082, -1000, 2376, 23101, -1000, 596, -1000, 47441, 8441,
	-1000, -124, -1000, 337, 34825, -1000, 170, 47441, 2356, 20571,
	1673, -127, -1000, 308, 17995, 4561, 1676, -1000, -1000, 2016,
	16450, 1990, -1000, 2033, -1000, -1000, -1000, 2843, 2843, -1000,
	-1000, 2843, 2843, 1828, 2916, -129, -1000, 18510, 2376, -1000,
	1777, -130, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2284, 163, 436, 169, -1000,
	-1000, 2196, 1308, 1134, 166, 432, 400, 391, 596, -134,
	2203, 66489, 6934, -1000, -1000, -1000, 4, -1000, -1000, 65025,
	-1000, 2555, 1455, 610, -1000, 1275, -1000, -1000, -1000, 47441,
	-1000, -1000, 2674, 2669, -1000, -1000, 47441, 510, -1000, 2660,
	2658, -1000, 1327, -1000, 1175, 2287, 1182, 159, 16450, -1000,
	1425, -1000, 11797, 418, 47441, 1308, 166, -1000, 1744, 418,
	2664, -1000, 66, 34825, -1000, 2920, -1000, 22595, -1000, 2844,
	-1000, 1459, -1000, -1000, 35331, 16450, 16450, 4391, 2662, 165,
	2662, 47441, 2662, -1000, -1000, 164, 2107, 163, -1000, 2647,
	-1000, -1000, 16450, 1361, 2201, -1000, -1000, -1000, -1000, -1000,
	681, -1000, 668, -1000, 47441, 1165, 307, 47441, -1000, 478,
	1822, -1000, 65025, -1000, 65025, 65025, 16450, -1000, -1000, -1000,
	60, 59, 57, -1000, -1000, 47441, 2115, 2108, 33307, -1000,
	-1000, -1000, -137, -1000, -1000, -1000, 47441, -142, -1000, 63073,
	-1000, 1673, 2356, -1000, -1000, 17480, -44, 11797, 1039, 1890,
	47441, 47441, 2028, 8441, 2001, 2355, 2916, 2916, 2916, 2916,
	28752, 2565, 28246, -1000, -1000, 11797, -1000, -1000, -1000, -1000,
	-1000, 29764, -1000, 2284, 47441, -1000, 634, 1515, -1000, -1000,
	23607, 4391, 1777, 1134, 2196, 1912, -1000, 427, 424, 2660,
	1349, 162, -1000, 1189, -1000, -1000, 1435, 161, 873, -1000,
	-1000, 2843, -1000, -1000, 1571, -1000, 1410, 1407, -1000, -1000,
	-1000, 2835, 667, -1000, 1321, -1000, 2289, 2288, 2089, -1000,
	-1000, -1000, -1000, 1593, 1803, 2832, 47441, -1000, -1000, 418,
	857, 1912, 47441, -1000, -1000, -1000, 160, -145, -1000, -46,
	-1000, -1000, -1000, -148, -1000, 2884, -150, -160, 2200, 47441,
	2200, 153, 2200, 25631, 368, -1000, -1000, 2107, -1000, 1437,
	159, -1000, 16450, 47441, 47441, -1000, -1000, 662, -1000, 1046,
	847, 1046, -162, -1000, -167, -168, 777, -1000, -1000, -1000,
	258, 2354, 2353, 291, 2828, -184, -1000, 47441, 1985, 1906,
	-1000, -1000, 20571, -1000, 1928, 16450, -1000, -1000, -1000, -1000,
	1984, 2066, -1000, -1000, 1975, 514, 2004, -1000, -1000, -1000,
	-1000, -69, -1000, 27740, -69, -1000, -1000, -187, -1000, -1000,
	634, -1000, -1000, 1482, -192, -1000, 517, 2647, 16450, 2284,
	2196, 1777, 1134, -1000, -1000, -1000, 2696, 158, 23101, -1000,
	1160, 16450, -1000, -1000, -1000, 47441, 1449, 34825, 34825, 596,
	47441, -1000, -1000, 2069, -1000, 2079, 1570, 1570, 1336, 729,
	1068, -1000, -1000, 47441, 853, 418, 56, -1000, 2915, -1000,
	35331, -1000, -1000, 2417, -1000, -197, -1000, 1204, 2376, 55,
	-1000, 2113, 368, -1000, -1000, 8441, 1165, 1165, 47441, -1000,
	-1000, -1000, 2352, -1000, 34825, 65025, -1000, -1000, -1000, 47441,
	47441, 47441, -1000, -1000, 47441, -1000, -1000, 1985, -1000, 17995,
	17995, 2562, -1000, 17995, -1000, 1850, 157, -48, -1000, 2815,
	-1000, 33307, -1000, -1000, 2031, 47441, 2149, 156, -1000, -1000,
	-69, -1000, -1000, 29764, -1000, -1000, 1900, 1899, -1000, 23607,
	47441, 47441, 727, 634, 1777, 2284, 2196, 2658, 23101, -203,
	34825, 324, -1000, -1000, 946, -104, -105, 2660, -1000, -1000,
	1574, -1000, -1000, 2571, -1000, -1000, -1000, -125, 418, 47441,
	-1000, -1000, -1000, -1000, 155, 1601, -1000, 1601, 2287, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1165, 47441, -1000, -1000,
	2228, 223, 216, -1000, -1000, 1039, 1039, -1000, 1039, 1918,
	46935, 16450, 11797, -128, 1648, -209, -1000, 16450, -1000, -1000,
	-1000, -1000, -1000, -1000, 2647, -1000, 2284, 634, 1777, 634,
	-210, -1000, 1349, 154, -1000, 2555, 2416, 2389, -1000, -1000,
	153, 153, -1000, 418, 16450, -1000, 1601, -1000, -1000, 2737,
	47441, 47441, 47441, 47441, -217, -1000, 62585, 1894, -1000, -1000,
	2148, 2061, -224, 47441, 634, -1000, 2284, 2376, -1000, 23101,
	2696, 11285, 1433, 764, 760, -1000, -1000, -1000, -227, 1601,
	2638, -1000, -1000, -1000, -228, 1957, 46935, 1904, 869, 2903,
	-1000, -1000, -1000, 2031, -1000, -1000, -1000, 634, -1000, -1000,
	2658, -229, -1000, -1000, -1000, -1000, -1000, 1160, 2657, 2655,
	-1000, 2737, -1000, 53, 2283, 16450, -1000, -1000, -1000, -1000,
	-1000, -1000, 1863, -1000, -1000, 1776, 1892, 1892, 2902, 2018,
	1634, -1000, 634, -1000, 11285, 34825, 1396, 1389, 2193, -1000,
	1801, 8441, -1000, -1000, 1698, 1867, 1849, 1776, 1957, -1000,
	149, 47441, 2148, 2376, -1000, 148, 34825, 34825, 47441, -1000,
	1957, 1723, 1702, -1000, 1740, -1000, 1737, 1852, 1771, 1698,
	-1000, 46935, 1909, -1000, -1000, 11285, -1000, -1000, -1000, -1000,
	2282, 2281, 2277, -1000, -1000, 1736, -1000, 1733, -1000, 1957,
	-230, 143, -235, 1783, 1694, 1688, -1000, -1000, -1000, -1000,
	46935, -1000, 1957, -1000, 1691, 1689, -243, 2263, -1000, -1000,
	-1000, 1782, -1000,
}

var yyPgo = [...]int16{
	0, 3316, 3315, 2328, 107, 0, 2, 4865, 3314, 146,
	215, 265, 115, 364, 4391, 3313, 260, 270, 2575, 3071,
	202, 118, 3312, 229, 3312, 3311, 272, 234, 186, 3309,
	173, 3308, 3307, 137, 171, 3306, 3305, 285, 33, 5830,
	293, 2075, 10, 3303, 3301, 3300, 3299, 3298, 256, 3296,
	213, 3292, 3290, 3289, 253, 198, 275, 254, 3273, 237,
	252, 407, 158, 301, 5497, 3272, 277, 221, 1339, 279,
	3271, 3270, 3269, 3265, 3263, 3260, 3259, 3257, 3256, 3254,
	119, 178, 196, 222, 300, 37, 185, 674, 3253, 3251,
	3250, 4348, 101, 3249, 116, 3248, 258, 257, 160, 210,
	247, 4380, 289, 3247, 3246, 3245, 3244, 3243, 161, 155,
	3241, 3240, 3239, 3238, 38, 44, 3236, 3235, 204, 211,
	251, 3233, 249, 145, 7, 25, 144, 151, 3232, 3231,
	3230, 3229, 27, 89, 14, 3228, 3227, 57, 41, 3226,
	269, 3226, 3226, 3226, 3226, 3225, 240, 3224, 3222, 3221,
	135, 3219, 3215, 3214, 50, 3214, 53, 66, 3210, 36,
	141, 259, 3207, 274, 51, 225, 2421, 212, 3201, 283,
	267, 271, 79, 129, 8, 180, 169, 255, 3199, 3198,
	3196, 3196, 282, 245, 209, 208, 157, 142, 3194, 288,
	3193, 281, 3192, 3191, 3190, 3188, 250, 32, 67, 3187,
	192, 3184, 88, 3183, 3179, 84, 248, 24, 48, 3178,
	39, 100, 52, 68, 3176, 69, 243, 1, 16, 13,
	3175, 201, 3172, 26, 3169, 12, 4, 3167, 5, 18,
	6, 15, 3165, 3164, 167, 3162, 85, 3161, 207, 172,
	114, 3159, 117, 3158, 63, 47, 105, 3155, 3154, 3151,
	113, 59, 3150, 109, 3149, 183, 226, 3148, 3147, 3146,
	17, 42, 110, 62, 64, 54, 30, 99, 55, 3144,
	3143, 43, 74, 3142, 174, 34, 49, 60, 218, 78,
	3141, 23, 21, 19, 241, 112, 268, 266, 3139, 29,
	227, 278, 3138, 3137, 276, 132, 273, 35, 177, 3136,
	176, 3133, 31, 3132, 81, 56, 165, 61, 58, 3131,
	45, 175, 3131, 224, 296, 3130, 233, 607, 6549, 3128,
	111, 239, 292, 80, 3127, 184, 179, 3125, 11, 261,
	92, 3124, 139, 133, 106, 3123, 124, 3120, 3119, 3118,
	3115, 3113, 3112, 3111, 3110, 3108, 3107, 3105, 3104, 3102,
	3100, 3098, 3097, 3095, 3092, 3091, 3089, 3088, 3087, 3086,
	3085, 3084, 3080, 3079, 3078, 3077, 3075, 3074, 3073, 3072,
	3070, 3069, 3066, 3065, 3064, 3062, 3061, 3060, 3059, 206,
	188, 3058, 3057, 3052, 264, 263, 219, 232, 287, 189,
	199, 86, 3051, 3050, 103, 3049, 3046, 3045, 3043, 280,
	3041, 286, 3040, 3036, 3035, 3033, 168, 104, 3032, 75,
	163, 284, 46, 3030, 3029, 190, 228, 97, 90, 3026,
	3025, 3024, 3022, 3021, 170, 3020, 3018, 193, 72, 3015,
	216, 191, 152, 3014, 1801, 238, 3011, 3003, 3003, 3001,
	28, 294, 3000, 200, 197, 82, 235, 2978, 91, 2977,
	2976, 244, 2971, 2970, 65, 2969, 2968, 195, 230, 2967,
	2966, 2965, 2962, 2961, 2960, 3, 77, 22, 9, 2958,
	2957, 40, 2956, 2946, 262, 217, 2944, 2943, 2942, 73,
	102, 2942, 2941, 2937, 203, 20, 2934, 2934,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 17, 17, 282, 282, 317, 317, 317, 24,
	24, 25, 25, 26, 26, 27, 27, 38, 38, 38,
	5, 5, 5, 6, 6, 6, 6, 6, 8, 8,
	7, 12, 12, 13, 13, 318, 318, 23, 23, 15,
	15, 481, 481, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 14, 14, 16, 16, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 42, 42, 42, 42, 42,
	42, 61, 63, 62, 62, 62, 43, 43, 56, 56,
	60, 60, 59, 59, 59, 59, 57, 57, 44, 197,
	440, 440, 87, 87, 87, 87, 87, 87, 54, 54,
	55, 55, 55, 45, 46, 46, 49, 49, 48, 47,
	47, 50, 50, 50, 53, 53, 51, 51, 52, 85,
	85, 68, 69, 69, 69, 69, 69, 64, 64, 64,
	66, 67, 81, 81, 82, 82, 70, 70, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 77,
	77, 73, 73, 65, 65, 65, 65, 65, 65, 74,
	75, 78, 79, 76, 76, 76, 76, 83, 83, 83,
	84, 84, 72, 72, 91, 91, 93, 93, 94, 94,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 92, 92, 86, 88, 89, 90, 97, 97,
	96, 96, 98, 98, 99, 101, 101, 100, 100, 102,
	102, 102, 102, 168, 168, 167, 167, 170, 170, 170,
	170, 171, 171, 172, 172, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 320, 320, 321, 321,
	321, 322, 322, 322, 183, 183, 183, 183, 183, 183,
	184, 184, 184, 184, 185, 185, 186, 186, 187, 187,
	187, 188, 188, 189, 189, 191, 192, 192, 192, 193,
	193, 193, 194, 194, 194, 195, 195, 174, 174, 122,
	122, 122, 145, 177, 177, 176, 176, 176, 176, 178,
	178, 179, 179, 180, 180, 181, 181, 182, 182, 196,
	196, 205, 205, 201, 201, 202, 203, 203, 204, 204,
	445, 199, 199, 198, 198, 200, 211, 211, 213, 213,
	212, 212, 212, 212, 214, 214, 215, 215, 206, 206,
	207, 207, 208, 208, 208, 209, 209, 210, 210, 210,
	210, 210, 216, 221, 220, 220, 224, 224, 222, 222,
	223, 226, 226, 227, 227, 227, 227, 227, 227, 227,
	227, 228, 228, 228, 228, 225, 225, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 230, 230, 230, 230,
	230, 231, 231, 232, 232, 233, 233, 217, 217, 218,
	218, 218, 218, 218, 218, 219, 219, 103, 319, 319,
	113, 113, 113, 113, 113, 134, 134, 114, 114, 118,
	104, 115, 115, 120, 120, 119, 116, 116, 105, 190,
	190, 106, 117, 117, 107, 107, 139, 139, 140, 140,
	146, 146, 146, 147, 147, 148, 148, 150, 150, 151,
	151, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 152, 152, 157, 158,
	158, 158, 158, 158, 158, 153, 153, 159, 164, 164,
	164, 164, 160, 160, 160, 160, 33, 33, 294, 294,
	294, 294, 294, 294, 294, 294, 293, 293, 293, 292,
	292, 292, 292, 292, 163, 163, 401, 401, 162, 162,
	482, 482, 428, 428, 141, 141, 142, 142, 143, 143,
	144, 144, 126, 126, 126, 126, 126, 135, 135, 136,
	136, 127, 127, 129, 130, 131, 131, 131, 131, 131,
	124, 121, 121, 121, 128, 128, 128, 155, 155, 156,
	156, 132, 132, 132, 133, 133, 125, 125, 137, 137,
	137, 138, 138, 138, 123, 123, 108, 108, 108, 108,
	108, 108, 296, 296, 296, 296, 296, 296, 296, 296,
	234, 234, 235, 235, 238, 238, 238, 241, 249, 249,
	249, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 298, 298, 299, 299, 300, 300, 301, 301, 236,
	236, 237, 237, 242, 242, 243, 243, 244, 244, 244,
	244, 245, 248, 248, 302, 302, 303, 303, 304, 10,
	32, 239, 253, 253, 254, 254, 254, 254, 257, 257,
	257, 257, 260, 260, 260, 306, 306, 309, 309, 311,
	311, 311, 311, 307, 307, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 483, 483, 28, 28, 28, 305, 305, 308, 308,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 240,
	240, 256, 256, 256, 256, 256, 256, 256, 258, 258,
	247, 247, 246, 246, 262, 262, 261, 261, 261, 261,
	266, 266, 266, 266, 266, 263, 264, 265, 265, 265,
	265, 265, 267, 267, 268, 268, 269, 270, 270, 271,
	271, 271, 297, 297, 275, 275, 275, 275, 276, 276,
	277, 277, 278, 109, 109, 259, 259, 279, 279, 281,
	281, 280, 280, 283, 283, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 284, 284, 289, 289,
	285, 285, 11, 432, 432, 432, 432, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 287, 287,
	287, 288, 290, 290, 484, 484, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 335, 335,
	335, 434, 434, 434, 437, 437, 437, 437, 436, 436,
	438, 438, 336, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 37, 328, 330, 58,
	58, 58, 58, 329, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 251,
	251, 252, 252, 252, 252, 252, 252, 272, 273, 273,
	274, 274, 274, 274, 331, 331, 331, 331, 441, 441,
	442, 442, 443, 443, 443, 444, 444, 444, 444, 444,
	446, 446, 446, 446, 446, 447, 80, 80, 80, 448,
	448, 449, 449, 451, 451, 451, 451, 451, 453, 453,
	450, 450, 454, 454, 454, 334, 472, 472, 455, 455,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 439, 439, 332,
	332, 456, 456, 456, 458, 458, 457, 457, 457, 457,
	457, 463, 463, 464, 464, 466, 461, 461, 462, 462,
	469, 459, 459, 486, 486, 460, 460, 467, 467, 485,
	485, 465, 465, 465, 468, 468, 468, 468, 470, 470,
	333, 333, 333, 333, 154, 154, 471, 471, 471, 471,
	339, 339, 339, 339, 340, 341, 341, 341, 341, 341,
	341, 341, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 344, 344,
	379, 379, 487, 487, 345, 345, 346, 346, 380, 380,
	382, 382, 382, 382, 347, 381, 381, 383, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 396, 396, 369, 370, 370, 386, 386, 386, 386,
	385, 385, 384, 384, 391, 391, 371, 371, 372, 372,
	372, 387, 387, 388, 388, 389, 389, 373, 373, 373,
	373, 374, 374, 375, 376, 376, 390, 390, 423, 423,
	423, 423, 424, 424, 431, 425, 426, 426, 427, 343,
	343, 343, 343, 343, 377, 377, 378, 378, 429, 429,
	430, 430, 337, 337, 338, 324, 324, 325, 323, 323,
	323, 326, 326, 327, 327, 327, 327, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 433, 433,
	433, 433, 166, 166, 169, 169, 161, 161, 473, 473,
	473, 473, 473, 473, 473, 473, 473, 476, 476, 476,
	165, 165, 9, 9, 9, 9, 478, 478, 474, 474,
	474, 475, 475, 475, 475, 475, 477, 477, 477, 477,
	295, 295, 295, 295, 295, 295, 313, 313, 29, 29,
	30, 31, 31, 34, 34, 34, 34, 35, 35, 36,
	36, 36, 36, 314, 315, 315, 316, 316, 349, 349,
	350, 395, 395, 395, 395, 392, 392, 394, 393, 393,
	351, 397, 397, 352, 352, 353, 354, 398, 398, 402,
	402, 403, 403, 403, 403, 403, 404, 404, 405, 405,
	406, 406, 407, 407, 355, 408, 408, 356, 356, 357,
	357, 410, 410, 415, 415, 415, 358, 358, 358, 359,
	359, 359, 359, 411, 411, 416, 416, 416, 416, 416,
	416, 416, 175, 175, 360, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 362, 362, 362, 409, 409, 409,
	363, 419, 419, 412, 412, 417, 417, 417, 417, 417,
	399, 399, 479, 479, 479, 480, 480, 364, 365, 365,
	413, 413, 418, 418, 366, 367, 414, 414, 414, 414,
	368, 368, 400, 400, 420, 420, 421, 421, 422, 422,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 2,
	0, 3, 0, 2, 0, 1, 0, 2, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 2, 3, 0, 1,
	3, 1, 0, 3, 3, 4, 4, 4, 4, 3,
	2, 1, 1, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 2,
	4, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	3, 5, 3, 3, 2, 6, 7, 6, 7, 3,
	4, 4, 6, 5, 7, 1, 3, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 2, 4, 1, 1, 1, 2, 2,
	2, 2, 1, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 2, 1, 2,
	1, 0, 2, 2, 3, 5, 0, 2, 4, 1,
	1, 2, 3, 5, 6, 8, 6, 6, 1, 3,
	1, 3, 3, 5, 1, 0, 1, 2, 4, 2,
	0, 3, 3, 2, 1, 3, 4, 3, 5, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 0, 2, 3, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 3, 3, 2, 4,
	1, 5, 2, 5, 2, 5, 2, 3, 3, 0,
	1, 0, 3, 0, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 0, 0, 0, 0, 1,
	1, 3, 1, 1, 1, 3, 3, 1, 2, 6,
	6, 2, 1, 1, 0, 1, 3, 3, 2, 1,
	1, 2, 0, 1, 3, 2, 2, 3, 1, 4,
	2, 3, 2, 3, 2, 3, 1, 1, 2, 2,
	4, 1, 2, 3, 3, 4, 5, 4, 5, 4,
	2, 2, 2, 1, 1, 0, 5, 2, 2, 2,
	3, 1, 0, 1, 3, 9, 1, 2, 0, 7,
	7, 0, 10, 6, 0, 4, 5, 2, 0, 2,
	4, 0, 1, 1, 0, 5, 2, 4, 1, 2,
	0, 1, 0, 1, 5, 1, 0, 2, 0, 2,
	6, 2, 0, 1, 3, 2, 4, 0, 1, 3,
	2, 1, 0, 1, 3, 3, 2, 0, 2, 2,
	2, 3, 3, 4, 1, 3, 3, 2, 7, 12,
	1, 3, 2, 3, 3, 1, 2, 2, 2, 2,
	1, 2, 13, 2, 2, 0, 2, 0, 1, 3,
	3, 2, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 3, 3, 6, 0, 3, 0, 2, 3, 2,
	3, 4, 4, 3, 3, 0, 5, 2, 5, 2,
	0, 4, 2, 1, 0, 1, 0, 1, 3, 3,
	6, 7, 5, 7, 9, 2, 0, 7, 1, 3,
	1, 4, 4, 7, 2, 1, 1, 1, 3, 2,
	8, 1, 3, 3, 5, 2, 1, 3, 7, 2,
	0, 10, 1, 2, 9, 11, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 3, 0, 1, 3, 2,
	0, 1, 1, 3, 3, 1, 1, 3, 3, 3,
	3, 4, 4, 3, 3, 2, 1, 3, 2, 1,
	1, 1, 1, 3, 0, 1, 3, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 2, 2,
	1, 3, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 0, 2, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	1, 0, 4, 4, 4, 5, 5, 2, 5, 3,
	5, 2, 0, 3, 1, 2, 5, 5, 8, 3,
	4, 8, 5, 0, 4, 3, 0, 1, 3, 1,
	3, 2, 2, 4, 4, 5, 2, 0, 1, 1,
	0, 2, 2, 0, 2, 0, 13, 16, 12, 15,
	14, 17, 1, 1, 2, 2, 2, 2, 1, 0,
	1, 0, 1, 3, 1, 1, 1, 3, 3, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 0, 2, 2, 1, 0, 3,
	0, 1, 3, 1, 1, 2, 4, 6, 6, 10,
	1, 2, 1, 3, 4, 0, 1, 3, 2, 1,
	1, 6, 2, 0, 3, 1, 1, 2, 1, 2,
	2, 2, 2, 3, 0, 1, 2, 1, 2, 1,
	3, 2, 3, 1, 2, 2, 2, 1, 2, 3,
	1, 2, 2, 2, 2, 3, 3, 3, 1, 3,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 0,
	2, 1, 4, 4, 5, 2, 5, 5, 7, 3,
	1, 5, 9, 3, 9, 4, 11, 10, 2, 0,
	1, 3, 3, 6, 4, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	3, 3, 4, 0, 1, 0, 6, 1, 3, 3,
	3, 5, 2, 0, 3, 4, 4, 0, 2, 0,
	4, 0, 3, 16, 19, 1, 0, 2, 0, 4,
	0, 1, 3, 2, 0, 4, 6, 4, 6, 4,
	4, 6, 4, 6, 5, 7, 5, 7, 4, 6,
	10, 13, 10, 13, 11, 14, 1, 3, 1, 0,
	1, 3, 1, 1, 1, 1, 1, 2, 5, 3,
	6, 4, 6, 6, 9, 5, 7, 6, 6, 5,
	5, 5, 5, 9, 4, 5, 7, 6, 4, 8,
	4, 2, 4, 3, 6, 4, 3, 3, 3, 2,
	2, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	4, 4, 3, 2, 3, 2, 2, 3, 4, 3,
	2, 2, 3, 4, 4, 4, 5, 1, 4, 4,
	4, 3, 3, 2, 1, 0, 6, 4, 6, 4,
	6, 8, 4, 6, 4, 6, 5, 7, 2, 3,
	3, 2, 5, 1, 1, 2, 3, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	1, 1, 3, 3, 3, 3, 2, 2, 2, 3,
	5, 5, 5, 2, 6, 6, 6, 6, 6, 8,
	8, 6, 6, 7, 9, 9, 8, 10, 6, 6,
	6, 6, 6, 6, 6, 8, 6, 8, 6, 8,
	7, 9, 6, 8, 7, 9, 8, 10, 8, 10,
	9, 11, 8, 10, 9, 11, 8, 8, 7, 6,
	6, 6, 6, 8, 8, 8, 8, 6, 9, 0,
	2, 2, 1, 2, 2, 2, 2, 3, 1, 3,
	3, 1, 5, 3, 9, 12, 7, 7, 3, 2,
	1, 3, 1, 3, 3, 3, 3, 2, 2, 1,
	1, 1, 1, 2, 1, 1, 1, 4, 5, 1,
	0, 1, 2, 2, 2, 2, 1, 1, 1, 3,
	3, 5, 1, 4, 0, 2, 3, 0, 1, 1,
	4, 5, 1, 1, 1, 1, 3, 3, 2, 2,
	1, 2, 2, 2, 2, 1, 2, 2, 1, 17,
	21, 1, 1, 2, 1, 3, 1, 1, 1, 3,
	1, 2, 0, 1, 2, 4, 1, 1, 1, 1,
	1, 3, 0, 1, 0, 1, 1, 4, 0, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 2, 0,
	9, 11, 12, 14, 3, 0, 3, 4, 4, 0,
	6, 4, 9, 7, 6, 4, 6, 6, 5, 7,
	9, 6, 6, 5, 4, 4, 3, 6, 6, 6,
	6, 4, 7, 5, 8, 7, 8, 6, 5, 8,
	1, 0, 1, 0, 4, 6, 5, 8, 2, 0,
	2, 2, 2, 1, 5, 2, 0, 2, 6, 6,
	6, 10, 6, 6, 6, 9, 9, 6, 6, 9,
	6, 1, 1, 7, 7, 6, 2, 2, 2, 2,
	1, 2, 1, 0, 1, 2, 10, 13, 5, 4,
	4, 2, 0, 2, 2, 1, 0, 11, 14, 12,
	15, 8, 11, 8, 7, 9, 1, 1, 3, 3,
	5, 6, 1, 3, 1, 3, 1, 3, 3, 7,
	9, 9, 8, 6, 1, 0, 1, 3, 3, 1,
	5, 3, 8, 11, 6, 1, 0, 5, 2, 3,
	0, 2, 0, 1, 1, 1, 1, 1, 3, 3,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 2, 2, 1, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 2, 0, 2, 0,
	4, 1, 3, 1, 2, 2, 2, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 3, 11, 13,
	5, 1, 2, 2, 1, 1, 3, 5, 1, 3,
	7, 2, 0, 5, 5, 10, 8, 2, 0, 2,
	0, 1, 1, 1, 1, 1, 2, 0, 2, 0,
	4, 0, 5, 0, 8, 1, 1, 8, 11, 6,
	8, 1, 3, 1, 1, 3, 4, 7, 6, 5,
	5, 5, 5, 1, 3, 4, 4, 4, 3, 4,
	3, 1, 4, 0, 8, 5, 5, 6, 7, 7,
	7, 4, 4, 5, 11, 10, 10, 2, 2, 0,
	13, 2, 0, 1, 3, 5, 5, 3, 6, 2,
	1, 0, 2, 4, 0, 1, 3, 6, 8, 8,
	1, 3, 5, 5, 10, 10, 11, 11, 5, 5,
	6, 10, 1, 0, 2, 0, 1, 0, 2, 2,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -98, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -331, -332, -333, -337,
	-338, -339, -340, -341, -342, -343, -344, -345, -346, -347,
	-348, -369, -370, -371, -372, -373, -374, -375, -376, -349,
	-350, -351, -352, -353, -354, -355, -356, -357, -358, -359,
	-360, -361, -362, -363, -364, -365, -366, -367, -368, -335,
	-336, -100, -101, -188, 112, 26, 22, 27, 395, 94,
	402, -102, -187, 532, 63, 67, -195, 36, 519, 87,
	541, 97, 98, 99, 100, 532, -147, 116, -296, -259,
	-26, 33, 415, 262, 62, 465, 455, 226, 277, 285,
	423, 104, -324, 269, 450, 376, 195, 439, 388, 444,
	513, -399, 454, 452, 58, 290, 474, 472, 40, 67,
	308, 420, 481, 85, 285, 200, 226, 237, 248, 262,
	287, 71, -401, 62, 376, 386, 388, 410, 415, 423,
	444, 413, 461, 269, 407, 104, 450, 439, 455, 465,
	277, 385, -291, -294, -293, 465, 262, 308, 104, 67,
	420, 481, 85, 285, 226, 237, 439, 455, 195, 269,
	277, -401, 388, 415, 423, 376, 413, 461, 85, -434,
	58, 424, 458, -435, -433, -166, 56, 218, 415, 348,
	407, 489, -5, 4, -18, -19, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 22, 202, 204, 205,
	206, 55, 207, 208, 209, 211, 212, 213, 89, 70,
	214, 215, 216, 24, 217, 219, 220, 221, 222, 223,
	224, 124, 227, 228, 229, 230, 231, 142, 232, 102,
	233, 234, 235, 236, 237, 112, 238, 155, 239, 121,
	122, 91, 247, 248, 249, 250, 251, 252, 254, 255,
	99, 150, 151, 256, 90, 257, 258, 259, 260, 261,
	262, 177, 27, 263, 139, 265, 149, 266, 268, 137,
	42, 269, 271, 272, 273, 274, 275, 276, 277, 278,
	280, 282, 283, 92, 284, 154, 166, 286, 287, 288,
	289, 290, 292, 295, 296, 152, 297, 298, 299, 28,
	300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	310, 311, 313, 314, 315, 97, 316, 318, 319, 146,
	504, 320, 321, 322, 323, 93, 325, 328, 329, 330,
	333, 334, 335, 336, 337, 338, 106, 85, 339, 100,
	341, 342, 343, 344, 345, 346, 347, 132, 349, 350,
	351, 352, 353, 354, 355, 358, 111, 359, 360, 32,
	140, 123, 505, 506, 503, 145, 62, 507, 508, 125,
	502, 509, 103, 365, 366, 367, 368, 369, 370, 371,
	130, 372, 129, 374, 375, 376, 378, 379, 380, 381,
	383, 384, 385, 386, 387, 113, 388, 153, 144, 389,
	390, 391, 392, 84, 133, 394, 395, 396, 397, 398,
	399, 400, 34, 401, 402, 403, 35, 404, 405, 406,
	408, 409, 410, 411, 128, 413, 414, 147, 416, 417,
	88, 418, 419, 420, 421, 422, 423, 94, 426, 428,
	429, 430, 431, 432, 108, 434, 435, 436, 437, 438,
	439, 114, 115, 440, 441, 442, 148, 443, 444, 446,
	447, 105, 449, 450, 109, 452, 453, 454, 455, 456,
	459, 461, 463, 464, 465, 466, 467, 468, 469, 143,
	470, 50, 473, 474, 475, 98, 476, 477, 478, 479,
	156, 184, 480, 481, 482, 483, 484, 486, 169, 487,
	141, 488, 499, 500, 57, 37, 174, 170, 190, 180,
	179, 225, 189, 188, 29, 279, 176, 293, 294, 501,
	187, 172, 186, 167, 161, 163, 164, 160, 162, 157,
	165, 159, 127, 158, 326, 340, 182, 183, 356, 357,
	361, 171, 362, 363, 377, 178, 175, 412, 427, 173,
	445, 185, 460, 462, 87, 181, 490, 491, 492, 493,
	494, 134, 495, 496, 497, 498, 126, -437, -436, 56,
	458, 424, -166, 21, 218, 58, 348, 407, 415, 489,
	-102, -100, -101, -187, -179, -180, 21, 41, -320, -318,
	-321, -5, 66, 424, 458, 56, 542, -189, 84, -191,
	-7, -5, -189, 532, -3, 73, -322, -320, 64, 73,
	-99, -98, -318, 67, 481, 84, 420, 308, 287, 386,
	461, 118, 200, 459, -400, 464, 34, -17, -5, 28,
	-14, -5, -92, 222, 280, -94, -5, 11, -95, 535,
	536, 537, 538, 539, 540, 526, 527, 528, 18, 19,
	20, -14, 88, -14, 28, -7, 28, 247, 67, -7,
	28, 337, 85, 461, -7, -7, 341, -282, 28, -14,
	-7, -7, 532, 237, 454, 452, 454, 452, -320, 28,
	21, -318, 28, 21, -318, 28, -318, 28, 481, 67,
	247, -329, -440, -64, -5, 4, -18, -20, 210, 116,
	226, 25, 81, 243, 117, 79, 44, 76, 52, 53,
	75, 77, 46, 82, 54, 80, 364, 78, 48, 451,
	119, -14, -14, -7, -14, -328, -440, -11, -432, -9,
	242, 246, 425, 4, -18, -19, -20, 322, 222, 280,
	-7, 28, -328, -7, -328, -7, -7, -7, -7, -7,
	461, -11, -11, 337, -7, -14, 28, 88, -14, -7,
	28, -16, -14, 28, -12, -7, -7, 28, -163, 28,
	-68, -69, -70, -71, -77, -73, -76, -64, 187, 172,
	173, 174, 175, 176, 177, 188, 189, 171, 190, -78,
	-79, -74, -75, 185, 56, 4, -18, 170, -65, 179,
	180, 181, 182, 183, -163, 28, 25, 337, 481, 247,
	67, 88, 341, 461, 322, 481, -434, 424, -434, 220,
	210, -474, 432, -475, 319, 390, 253, 31, 64, 61,
	528, 534, 57, -63, 7, -63, -476, -63, 40, -165,
	-9, -63, 507, 57, 319, 210, 533, 533, -168, -167,
	-170, -39, 537, -41, 535, 536, 31, -91, -43, -42,
	13, 532, -45, -44, -101, 29, 135, -51, -52, 294,
	11, 62, -5, -61, 6, -63, 49, 43, 47, 38,
	-87, 412, 12, -440, -167, 74, 537, -56, -59, 534,
	530, -318, 532, 532, 542, -189, -23, 532, -85, -39,
	-319, -318, 94, -5, 23, -322, -322, 533, -154, 532,
	-318, 28, -318, 481, -318, 28, -27, 25, -440, -440,
	-7, 461, -440, 131, -401, -296, 474, 210, -326, 31,
	-428, 23, -81, 534, -314, 532, -14, -14, 534, -314,
	23, 369, 258, 453, 232, -314, 64, 31, -28, 36,
	519, 31, 141, -318, 28, -387, 465, 31, 131, 28,
	481, -7, -397, 366, 74, -7, -23, 31, -313, 131,
	36, 233, -68, -14, -284, -287, 399, -286, 208, 257,
	197, 22, 27, 478, 94, 224, 265, 259, 310, 355,
	123, 31, 366, 402, 401, 154, -30, 508, 29, 45,
	-284, -288, 399, 208, 29, 45, -284, 399, -307, -310,
	355, 23, 214, 91, 306, 336, 339, 343, 365, 420,
	437, 403, 474, 29, -284, 399, 29, -318, 28, 21,
	-320, 28, 141, 399, -37, 532, -56, 399, 399, 399,
	399, -290, 27, 94, 197, 478, 399, -37, 399, -7,
	-14, -14, 74, 29, 399, 399, 94, 197, 27, 399,
	399, 399, -388, -30, 480, 399, 94, 233, 395, 197,
	27, 265, 259, 431, 74, 74, -7, 399, 399, 131,
	399, 94, 402, 399, 94, 29, 369, 258, 453, 232,
	399, 197, 27, 98, -396, 197, 27, 29, 542, -317,
	24, 35, 29, 542, -317, 74, 29, 542, -317, 29,
	-82, -81, 532, -72, 532, 178, -82, -82, -82, 532,
	-83, 519, 520, 532, -83, -84, 184, 532, -84, -84,
	179, 180, -84, -317, 29, -16, 28, 131, 28, 141,
	369, 258, 453, 232, -27, 220, 23, -165, 40, 542,
	-475, -63, 328, 66, 488, 253, 121, -169, 40, -161,
	-164, -160, 49, 43, 74, -165, 6, 535, 536, -62,
	-61, -169, 40, -5, -473, -63, 4, -160, 40, 58,
	49, 43, 74, 505, -478, 261, 235, 328, -182, 73,
	542, 14, 535, 536, 537, 538, 539, 540, 526, 527,
	528, 18, 19, 20, 30, 33, 52, 53, 54, 46,
	517, 44, 39, 55, -91, 37, 45, 48, 23, -8,
	62, 4, -22, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 21, 201, 22, 202, 203, 120, 511, 95,
	204, 205, 206, 60, 207, 208, 209, 210, 211, 212,
	213, 174, 116, 170, 190, 512, 89, 70, 214, 215,
	216, 24, 217, 38, 513, 218, 219, 220, 514, 221,
	222, 223, 224, 225, 226, 515, 124, 227, 228, 229,
	230, 231, 25, 142, 232, 102, 233, 118, 234, 235,
	236, 237, 112, 238, 81, 155, 239, 121, 240, 241,
	242, 243, 244, 245, 246, 122, 91, 247, 248, 250,
	189, 188, 251, 40, 252, 253, 254, 255, 99, 150,
	151, 256, 90, 96, 257, 258, 259, 260, 41, 110,
	261, 262, 177, 27, 263, 264, 139, 265, 149, 266,
	267, 268, 137, 42, 269, 271, 272, 273, 274, 29,
	275, 276, 277, 278, 279, 43, 280, 283, 92, 176,
	284, 154, 285, 166, 286, 117, 79, 287, 288, 289,
	290, 292, 293, 294, 295, 296, 152, 297, 299, 28,
	300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	310, 311, 312, 313, 76, 501, 314, 315, 97, 316,
	187, 172, 186, 318, 319, 75, 167, 161, 163, 164,
	160, 162, 157, 165, 159, 127, 158, 146, 504, 320,
	321, 322, 323, 93, 324, 327, 325, 326, 77, 328,
	329, 330, 58, 331, 332, 333, 334, 335, 336, 337,
	338, 106, 85, 339, 100, 340, 341, 343, 344, 346,
	347, 348, 182, 82, 183, 132, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 31, 111, 359, 360,
	47, 361, 32, 171, 140, 123, 505, 506, 503, 145,
	66, 507, 508, 125, 502, 362, 80, 363, 103, 365,
	366, 367, 368, 369, 370, 371, 130, 372, 129, 373,
	374, 375, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 385, 386, 387, 113, 388, 153, 144, 389, 390,
	175, 391, 392, 84, 133, 393, 394, 395, 396, 397,
	398, 399, 400, 34, 401, 402, 403, 35, 404, 405,
	406, 78, 407, 408, 409, 410, 411, 412, 128, 413,
	414, 147, 415, 416, 417, 88, 419, 63, 420, 421,
	422, 423, 424, 425, 94, 427, 426, 428, 429, 430,
	431, 173, 432, 433, 108, 434, 435, 436, 437, 438,
	439, 114, 115, 440, 441, 442, 148, 443, 444, 445,
	446, 59, 447, 105, 448, 67, 449, 451, 450, 109,
	452, 453, 454, 455, 107, 456, 56, 185, 457, 458,
	459, 460, 461, 462, 49, 463, 464, 465, 466, 467,
	468, 469, 143, 470, 472, 50, 473, 474, 475, 98,
	104, 83, 476, 477, 478, 479, 156, 87, 181, 191,
	119, 480, 481, 482, 483, 51, 484, 487, 141, 488,
	489, 490, 491, 492, 493, 494, 134, 495, 496, 497,
	498, 126, 500, 57, -39, -39, -39, -39, -57, -39,
	-85, -101, 87, -56, -101, -101, -50, 530, 532, 532,
	-56, -46, -39, -88, 532, 532, -182, 532, -59, -66,
	537, -6, 4, -18, -19, -20, -21, 21, 203, 120,
	30, 511, 135, 23, 95, 60, 512, 38, 513, 514,
	39, 515, 118, 26, 240, 241, 242, 244, 245, 246,
	40, 253, 96, 41, 110, 264, 267, 270, 43, 281,
	131, 285, 64, 291, 71, 72, 45, 312, 317, 73,
	324, 327, 68, 331, 332, 31, 47, 69, 74, 66,
	33, 510, 373, 382, 393, 101, 63, 425, 433, 59,
	448, 67, 107, 61, 457, 49, 471, 472, 104, 83,
	191, 51, 65, 485, 36, -39, -60, -318, -85, -191,
	23, -12, 542, 533, 30, 33, 52, 46, 44, 39,
	55, 37, 45, 48, 62, -113, -98, 103, 532, 40,
	23, -115, -120, -119, 532, -5, -5, -190, 83, 83,
	61, -139, 64, 61, -13, -5, 532, 123, 371, 31,
	-154, -318, -379, -307, 355, 31, -17, 28, -5, -441,
	532, -441, -456, 212, 199, 316, -7, -423, -425, 532,
	-68, 322, 481, 84, -432, -327, -108, -109, -332, -333,
	26, 29, -68, 534, -66, -315, -316, -6, -399, 83,
	-92, 532, 268, 389, -14, -14, -14, -14, -14, 29,
	-380, 29, -7, 532, 371, 31, -389, -388, -63, 29,
	-390, -432, 104, 31, -325, 28, -318, 74, 333, -432,
	-318, 465, 74, 29, 21, -411, -416, 67, 449, -5,
	-321, 243, -318, -314, -63, 23, 131, 542, 61, -484,
	118, 515, 371, 371, -239, 28, 515, -240, -5, 118,
	-256, 514, 472, 382, 285, 271, -484, 118, -484, 118,
	118, 169, 336, 474, 195, 450, -272, 532, 74, 461,
	202, 401, 413, 412, 461, 413, 412, -318, 310, 154,
	-14, 123, 61, -272, 299, 412, 532, -320, 450, 61,
	371, -318, 450, 61, -310, 91, 339, 343, -69, -160,
	-483, 70, -160, -160, 70, 347, -28, -28, -318, 61,
	-484, -318, -284, 399, 29, 45, -284, 399, 29, -7,
	61, 533, 61, 61, 61, 61, 118, 40, 31, 118,
	40, 31, -429, 118, -430, 514, 31, 118, 61, 61,
	399, 83, 83, -318, -7, 61, 61, -314, -411, -411,
	-411, 61, 61, 61, -30, -63, 47, 61, -314, 388,
	-63, 388, 388, 388, -314, -318, -318, 399, -395, 265,
	259, 61, 61, -390, 61, -272, -272, 61, 439, -14,
	-14, -14, -14, -14, 61, 209, 156, 156, 156, -381,
	-292, -291, 200, 513, 262, 287, 62, 386, 410, 459,
	465, -294, 248, 407, 444, 450, 308, -16, -14, -12,
	-7, -14, -7, -68, -163, -82, -85, -61, -61, 56,
	56, -61, 532, -61, -84, -84, -163, -317, 29, -390,
	29, -318, 458, -475, -477, 390, 400, 422, 542, -61,
	6, -61, 6, -171, 64, -318, -170, -68, -39, -39,
	-39, -39, -39, -39, -39, -39, -39, -39, -39, -39,
	-39, -39, 47, 31, -39, 46, 44, 37, 45, 48,
	-39, -14, 56, 58, -39, -97, 59, 60, -96, -101,
	532, 61, -6, -59, 533, 542, -85, -53, 531, -50,
	-85, -92, -49, -48, 51, -89, -85, 533, 533, -54,
	191, 21, 41, -55, -39, -67, -64, -171, -85, 531,
	543, 533, 533, -192, 85, 31, 533, -39, -121, 74,
	-134, 104, 105, -114, -118, -5, 87, -5, -171, 542,
	528, -116, -119, -57, -122, 65, -172, -173, -320, -101,
	86, -183, 532, -196, -206, -216, -197, 128, 126, 127,
	-5, -87, -173, -140, 113, -140, 542, 533, -234, -235,
	-238, -239, -241, -240, 46, -14, 123, 29, -283, 36,
	532, 29, 74, 31, 405, -448, -449, -451, 23, 322,
	459, 485, -452, 216, 442, 301, 435, 483, 278, 419,
	325, 31, 238, 128, 446, -439, 367, 94, -336, -442,
	533, -443, -444, -446, -67, -80, 45, 362, 501, 191,
	-64, -68, 427, -448, 405, -458, -457, 97, 99, 98,
	463, 123, 199, -314, 537, -424, 510, -426, -431, -427,
	-444, 4, 322, -7, -318, 481, -326, -296, -26, -17,
	-5, -253, -66, 533, 542, 528, 131, -7, -199, -198,
	-200, -5, 532, -314, -314, -314, -314, -314, -14, -382,
	415, 480, 64, 24, -7, -384, -385, -386, 296, 355,
	479, -234, 123, 29, 285, -7, 423, 29, 23, 31,
	-154, -6, 7, -398, 23, -408, 308, 67, -410, -415,
	-5, -197, 532, -14, 449, -313, 542, -320, 45, -56,
	-154, -154, 388, -68, -63, -286, -7, -7, -7, -318,
	-318, 31, -239, 28, -68, -7, 532, -260, -278, 32,
	83, 504, 504, -279, 83, -5, -61, -7, 28, -5,
	28, -7, -7, 506, 224, 341, -7, -273, -274, -6,
	-7, -7, 21, 104, 461, 413, 461, 413, -7, 328,
	-7, 21, 104, -7, 328, -318, 412, -432, -36, 111,
	79, 40, 83, 328, -31, -34, -304, 94, 197, 27,
	-10, -6, -284, -287, 399, -7, -7, -318, -284, 399,
	-7, -7, -160, -14, -14, -160, -160, -284, 399, -307,
	-7, -7, -284, 399, 61, -484, -318, 450, 61, -484,
	-320, 399, -384, -385, -7, -7, -7, -7, -7, -7,
	47, -7, 28, -39, 47, -7, 532, 47, -7, -7,
	-11, 61, -7, -7, 399, -405, 61, 74, -7, -7,
	-7, -7, -7, -7, -12, -313, -12, -12, 399, 399,
	61, 401, 202, -11, -11, 423, -7, -7, -33, -62,
	40, 535, 536, 94, 399, 399, 399, 399, -7, -7,
	-63, -25, 28, -63, -383, 61, -7, -14, -329, 532,
	-68, -328, -330, 222, 280, -92, -328, -328, 131, -68,
	-317, -317, -317, 74, -317, 533, 533, 533, 57, 57,
	533, -85, 533, -317, -16, 423, 131, -323, 36, -474,
	469, 230, 390, -161, -174, 65, -172, 47, 42, -39,
	-39, -97, 59, -96, 61, 42, 57, -40, -41, 535,
	536, -40, -85, -39, -57, -39, 531, 531, 542, 533,
	533, -47, -48, 264, -39, -90, 533, -86, 542, -55,
	-54, -54, 16, 17, -174, 533, -60, -39, 532, 85,
	-123, 101, 102, 156, 533, 542, -57, -122, -120, -39,
	533, 542, -123, -39, 121, 542, 81, -184, 75, 82,
	79, 77, 78, 76, -177, -176, 23, -5, -177, -101,
	-196, -206, -216, -101, -183, -173, -177, -177, -177, -205,
	519, 64, 532, 532, -56, 74, -146, -63, 114, 115,
	-146, -5, 533, 542, -318, -236, 532, -318, -318, 23,
	-272, -13, -318, -320, 29, -447, 67, 47, -80, -64,
	-454, -334, 213, 404, -451, -453, -63, -165, -450, 131,
	74, 419, 255, 318, 325, -160, -160, -14, -5, -435,
	424, 458, 533, 542, 40, 528, -67, -80, -446, -80,
	362, -81, -64, -454, 74, 33, 123, -458, 533, 533,
	510, 542, 70, 533, 542, 528, -7, 296, -154, -318,
	210, -326, -254, 118, -255, -257, 39, 31, 47, 472,
	382, 514, 40, 393, 289, 253, 312, -316, -295, -80,
	-21, -93, -160, -63, 356, -94, 62, 535, 536, 465,
	533, 542, -68, -377, -378, -63, -314, 64, -7, -165,
	-165, -28, -302, 508, -386, -391, -7, 296, 479, -391,
	533, -318, -318, 247, -387, -7, 131, -98, 29, -297,
	83, 274, 51, -283, -402, 131, 4, 296, 64, 542,
	-39, -23, -313, -416, -154, 415, -154, -175, 65, -175,
	-12, 533, 61, 61, 61, -244, 131, 40, -27, 283,
	29, 31, -301, -300, 440, -256, 271, -39, 532, -251,
	41, 31, 308, 532, -278, 532, 532, -7, -290, 27,
	94, 402, 197, -309, -162, -30, -311, 403, 94, -251,
	29, -317, 29, -317, -35, -5, 40, 533, 542, 528,
	534, -7, -7, -7, -7, 419, 419, 328, 308, 419,
	533, 542, -304, -304, -10, -32, -63, 61, -484, 118,
	94, 365, 61, 94, 365, 61, 61, 61, -484, -7,
	-7, -284, 399, -7, -7, -7, -284, 399, 61, -30,
	61, -317, 29, -430, -39, -251, -7, 399, 399, 197,
	27, 61, -406, 83, -285, -432, -318, -313, -313, -313,
	61, 61, -7, -7, 439, 61, 61, 61, 61, 61,
	61, -63, 31, -165, -68, -14, -14, -58, 532, -68,
	-14, -83, -83, 533, -317, -7, -390, 247, 355, -39,
	-39, 42, 42, -40, -40, -39, -39, -39, 30, 14,
	535, 536, 537, 538, 539, 540, 526, 527, 528, 18,
	19, 20, -40, -40, 30, 533, 42, 533, -50, 267,
	-39, 107, 533, 191, -55, -86, -86, 542, -86, -39,
	-39, 531, -99, -167, -128, 532, 74, -98, -98, 103,
	-118, -123, 528, -119, 123, -173, 75, 75, -173, -184,
	75, -185, 80, -185, -185, -5, 532, -177, -177, -177,
	-177, 533, 125, 532, -41, 134, -221, -39, -39, -28,
	-148, -482, 83, -267, 311, -238, -249, -268, -269, 371,
	-237, -242, -243, -240, -5, -236, 532, 123, 371, -98,
	533, -379, -279, -7, -448, 532, 74, 207, -39, 542,
	542, 465, 47, 255, 318, -443, -39, -39, -80, -80,
	539, -81, -318, -457, -13, 74, 70, -431, -424, -427,
	4, -295, 532, -391, -283, 532, -432, -7, -14, 253,
	47, -260, 504, 532, -40, -318, -306, 202, 70, 254,
	300, 532, -68, -200, -211, 39, 533, 542, -14, -380,
	532, -81, -267, -236, 532, 371, 141, -389, -302, -390,
	-323, -325, -283, -7, -485, 287, 386, -392, -394, -5,
	-404, 61, -403, 21, 63, 97, 98, 99, -391, -172,
	-415, 533, 74, -175, -5, 243, -175, 532, -313, 36,
	169, -63, -7, -7, 87, -239, 29, -299, -298, 231,
	-5, 40, 533, -13, -252, 31, 253, 312, 355, 41,
	-7, -13, -251, -13, -247, -246, -132, -5, -197, 532,
	31, 276, 299, 247, -310, 289, 31, 276, 439, -272,
	-300, -298, -272, 289, -311, 94, 465, -28, 439, -5,
	-7, -274, -295, -6, 419, -7, -34, -7, -7, -7,
	450, 70, -7, 450, 70, -7, -7, -7, -7, 61,
	61, -484, 94, 365, 61, 61, -484, -7, -7, -7,
	533, 61, 61, -412, -417, 62, 287, 440, -413, -418,
	62, 287, -7, -407, 36, 532, 542, 399, -7, -7,
	-30, -33, -7, -7, -7, -7, -7, -63, 212, 199,
	29, 23, 83, 83, -68, 356, 322, -317, 423, 247,
	-39, -39, 30, 30, 42, -39, -68, -40, -40, -40,
	-40, -40, -40, -40, -40, -40, -40, -40, -40, -39,
	-39, -39, -55, 533, 533, 533, 533, 110, -156, -132,
	118, -134, -39, -145, -7, -173, -173, -186, 83, 74,
	75, -173, 532, -12, -176, -201, -202, -197, -212, 130,
	532, 542, -232, -231, 516, -117, -126, -135, -136, 51,
	-150, -151, 532, -28, 151, -268, 532, 305, 272, -297,
	70, 533, 542, -253, 36, -244, -234, -14, 123, -471,
	36, -283, 532, 74, -454, -204, -445, -67, -64, 47,
	-472, -63, 131, -68, 314, 465, 539, -463, 394, -318,
	-424, 533, -414, 64, 61, -420, 313, 23, -13, -326,
	-255, 31, -313, -313, -39, -154, 23, 40, -92, 83,
	-14, -63, -303, -304, 423, -244, -234, 123, -7, 285,
	423, 23, -276, 450, -440, 274, 30, 45, -406, -285,
	-410, -39, 287, 501, 287, 64, 36, 45, 64, -239,
	-302, -5, 40, -251, 533, 253, 477, 300, 254, 310,
	533, 533, 533, 542, 36, -133, -125, 39, -133, -39,
	47, 28, 28, -306, 47, 23, -33, -306, -68, -160,
	-33, -317, -317, 528, 61, 61, -7, -285, -7, -285,
	61, -7, -7, -7, 450, 70, -7, -7, -7, -317,
	-251, -7, -7, 542, -61, -61, -68, 542, -61, -61,
	514, -39, -432, 61, -317, -63, -63, -68, -7, -7,
	533, 542, 542, -7, -7, -39, -39, -39, -86, -193,
	88, 98, 111, 533, 542, -7, 156, -186, 532, -39,
	-173, -12, 533, 533, 542, -203, 23, 124, -41, -213,
	70, -214, -215, -40, 40, -39, 167, -123, -126, -127,
	30, -127, 106, 31, -149, 116, 117, 150, 47, 155,
	152, 153, 42, 154, 149, -152, -157, -6, -150, -63,
	-297, -15, -318, -250, 228, 231, 234, 252, 299, 289,
	309, 439, 440, 21, -250, -38, 36, 169, -5, -242,
	508, -268, 533, -236, -318, 514, 217, 58, 23, -156,
	-320, 542, 533, -80, 314, 267, -455, -4, -334, 465,
	465, -459, 131, -464, -466, -461, 349, 503, -470, 64,
	533, 533, 434, 434, -421, -422, 479, 355, -391, -98,
	533, -277, 83, -277, 533, -261, 338, 299, 532, 533,
	-7, 533, 542, -7, 423, 533, -318, -302, 247, -7,
	-98, -7, 532, -485, -394, 532, -407, 64, 533, -328,
	-409, 23, -409, -14, 532, 532, 532, -253, -262, 304,
	-262, 393, -262, -246, -92, 62, -282, -14, -14, 533,
	29, 29, 532, 23, -211, -295, -7, -7, -289, 360,
	94, -289, 94, -7, 61, -7, -285, 61, -417, -92,
	-330, -328, 532, -418, 532, 532, 532, 533, -7, 533,
	-68, 356, -68, 533, -194, 91, 90, 89, 94, -174,
	-132, -98, -12, 533, -205, -202, 532, -207, -208, -5,
	-213, 70, -41, 133, 156, 542, 533, 23, -40, -220,
	23, 149, 107, -39, 107, 106, -428, -428, -428, -428,
	153, 31, 47, -63, 533, 542, -158, -164, -160, 537,
	40, 532, -174, -38, 542, 533, -275, 74, -272, 506,
	532, -253, -297, -267, -268, -236, 507, 514, 514, -98,
	533, -279, -445, -448, 541, -68, -467, 51, -486, 263,
	-466, -462, 67, 412, -251, -318, 36, 36, -391, 479,
	-471, -283, 308, -258, 355, -266, -263, -264, 74, 79,
	370, 430, -308, 532, -39, -419, 280, -304, -302, -7,
	-267, -236, 141, -302, -323, 533, -440, -393, 7, -172,
	-409, 302, 206, -248, -245, -9, -85, -85, -313, 532,
	-313, -318, -313, 532, -137, 95, 96, -272, -133, -39,
	299, -29, 83, 450, 450, -7, -289, 94, -7, -479,
	131, -479, -480, -68, -480, -480, -39, 533, 533, 533,
	-13, 92, 92, -115, 533, -198, 533, 542, -68, 131,
	-213, -215, 542, -6, -224, 130, -5, -7, -129, -130,
	110, 98, 99, -131, 110, 97, 70, -63, -63, -63,
	-63, -13, 537, 47, -13, 537, -157, -153, -159, -164,
	-275, -318, -276, 229, -270, -271, -5, -197, 532, -38,
	-268, -297, -244, 507, 507, -471, -281, 304, 532, -454,
	274, 532, -460, 412, 438, -428, 131, 287, 287, 23,
	450, 310, -264, 74, -263, 74, 98, 99, -307, 533,
	23, -14, -302, 423, -244, -7, 532, 533, 542, 533,
	542, -61, 533, 533, -277, -13, -277, -154, -277, -92,
	-138, 518, -137, 533, -308, -39, -7, -7, 450, -305,
	392, 88, 510, -305, 533, 542, 533, 533, 533, 94,
	70, 70, -174, -178, 23, 533, -208, -209, -210, 4,
	40, 31, 47, 129, 125, -41, 124, -222, -223, -221,
	111, 94, 111, -124, 103, 532, 40, 87, 108, 109,
	-13, 537, 533, 542, -276, 27, 99, 381, 533, 542,
	-125, -125, -39, -275, -297, -38, -268, -260, 532, -156,
	-485, -39, -469, -5, 263, -328, -328, -98, -7, -265,
	355, 35, 24, 94, -265, 533, 441, -412, -7, 423,
	-302, 533, 7, -245, 61, -251, 533, -251, -261, -174,
	533, 92, 93, -138, -289, -289, -7, 70, -328, -68,
	-5, -13, -13, -5, -210, -40, -40, 47, -40, -212,
	532, 542, 23, -115, -134, -114, 87, 532, -159, 128,
	128, -271, -282, -282, 533, -276, -38, -275, -297, -283,
	-280, -132, 533, -440, 533, 412, 542, 542, -471, 196,
	47, 40, -302, -7, 532, -266, -251, -289, -14, 61,
	83, 94, 94, 124, -217, -218, -5, 132, -223, -6,
	156, 533, -85, -125, -275, -276, -38, -276, 533, 542,
	-281, 532, -467, 61, 64, -154, -154, -302, -85, -251,
	-42, -5, -5, -5, -207, 533, 542, 131, -68, -233,
	129, -124, -124, 103, 533, -282, -276, -275, -174, -132,
	-260, -465, -468, -61, 6, -63, -6, 274, 434, 434,
	533, 40, 533, -225, -226, 40, -227, 137, 47, 49,
	43, 50, 139, -218, 125, -219, -231, 29, 129, 7,
	-134, -276, -283, 533, 542, -485, 36, 36, -42, 533,
	74, -39, 135, 140, -229, 169, 36, -219, -219, 7,
	124, 23, 156, -276, -468, -440, 287, 287, 83, 137,
	-230, 146, 145, 141, 135, 141, 135, 142, 143, -229,
	-225, 532, -7, -124, -174, 532, -328, -328, -5, -228,
	-226, 144, 144, 141, 141, 135, 141, 135, 141, -230,
	-217, 124, -465, 74, 74, 74, 141, 141, -228, 533,
	532, 533, 139, 137, 147, 147, -217, -226, 148, 148,
	533, 74, 137,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 1272, 1273, 0, 1504, -2, 1567, 1567, 0, 0,
	0, 1277, 1331, 0, 1362, 0, 1282, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 1503, 0, 0,
	2483, 0, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	0, 0, 1632, 1633, 0, 0, -2, 1805, 2460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1566, 0, 0, 0, 0, 0, 1947, 0, 1943,
	1944, 1945, 0, 0, 1949, 1950, 1951, 0, 0, 0,
	1550, 0, 1553, 1554, 1555, 1556, 1557, 1558, 0, 1928,
	261, 372, 406, 1933, 2287, 0, 489, 145, 362, -2,
	353, 439, 2302, 80, 81, 82, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 141, 142, 143, 144, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 352,
	354, 355, 356, 357, 358, 359, 360, 361, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
	407, 408, 409, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 422, 423, 424, 425, 426,
	427, 428, 429, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 457,
	458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
	468, 469, 470, 471, 472, 473, 474, 475, 476, 477,
	478, 479, 480, 481, 482, 483, 484, 485, 486, 487,
	488, 490, 491, 492, 493, 494, 495, 496, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 1942, 1934, 489,
	406, 372, 1938, 1939, 145, 261, 279, 353, 362, 439,
	1278, 0, 0, 0, 1284, 0, 1361, 1363, 1281, 1306,
	1307, 95, 0, 372, 406, 489, 0, 1328, 336, 1333,
	98, 90, 1329, 0, 2, 0, 0, 1311, 0, 0,
	0, 1274, 2145, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 1567, 2482, -2, 0, -2, 230,
	1573, 112, 0, 149, 211, 1262, 0, 1248, 1249, 1250,
	1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
	1261, 2166, 0, 0, 230, 1735, 230, 0, 0, 2232,
	230, 0, 0, 0, 2382, 0, 0, 98, 230, 64,
	2347, 0, 0, 0, 1634, 1635, 1636, 1637, 0, 230,
	0, 0, 230, 0, 0, 230, 0, 230, 0, 0,
	0, 0, 0, 1160, 0, -2, -2, 1199, 506, 507,
	508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 0, 0, 0, 0, 0, 0, 0, 1842, 1843,
	1844, 1845, 1846, 2322, 2323, 2324, 2325, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 230, 0, 0, 0,
	230, 68, 114, 230, 68, 91, 0, 230, 68, 230,
	1564, 1191, 1192, 1193, 1194, 1195, 1196, 1205, 1208, 1209,
	1210, 1211, 1212, 1243, 192, 1205, 1205, 1205, 1218, 1219,
	1220, 1221, 1222, 1239, 1239, 1197, 1198, 1241, 1230, 1241,
	1241, 1225, 0, 1241, 68, 230, 0, 0, 1946, 0,
	1948, 0, 1548, 1549, 1552, 76, 1929, 372, 1930, 147,
	0, 1931, 0, 2328, 0, 0, 2334, 0, 0, 0,
	0, 0, 0, 2290, 1142, 2291, 2292, 2317, 2318, 2293,
	2320, 2321, 0, 1935, 0, 1937, 1275, 1276, 1368, 1283,
	1285, 1289, 1290, 1059, 0, 0, 0, 0, 1121, 1122,
	1156, 0, 1125, 1126, 1127, 452, 0, 1132, 1133, 456,
	1244, 299, 1146, 1135, 1136, 1137, 1138, 1139, 1140, 1175,
	1265, 485, 1141, 0, 1368, 0, 1308, 96, 1148, 0,
	1151, 1309, 0, 0, 0, 1330, 0, 0, 0, 1189,
	0, 1468, 0, 1312, 0, 1490, 0, 0, 0, 0,
	0, 230, 2145, 0, 2181, 230, 63, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 1638, 0, 2151, 0,
	0, 1572, 113, 0, 2164, 0, 2461, 0, 0, 2165,
	0, 0, 0, 0, 0, 2171, 0, 0, 2189, 1733,
	1734, 0, 0, 0, 230, 2236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2416, 0,
	0, 0, 0, 0, 1815, 1828, 1915, 1836, 0, 0,
	0, 1915, 1915, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1907, 0, 0, 0,
	1817, 1819, 0, 0, 0, 0, 1820, 0, 2184, 1713,
	0, 0, 0, 1717, 1732, 1720, 0, 0, 0, 0,
	1735, -2, 1730, 0, 1822, 1915, 0, 0, 230, 0,
	0, 230, 0, 0, 1963, 0, 1161, 0, 0, 0,
	0, 2155, 0, 0, 0, 0, 0, 1957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2229, 2230, 0, 0, 0, 0, 0, 0,
	0, 2441, 2442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2196, 1567, 2211, 2212, 0, 0, 1917,
	66, 67, 0, 0, 1919, 0, 0, 0, 1922, 0,
	1206, 1205, 0, 1213, 0, 1214, 1215, 1216, 1217, 0,
	1234, 0, 0, 0, 1236, 1232, 1240, 0, 1223, 1224,
	1241, 1241, 1228, 1924, 0, 68, 230, 0, 0, 1551,
	1952, 1953, 1954, 1955, 0, 0, 0, 2294, 2295, 0,
	2330, 2297, 0, 2332, 2333, 2335, 2288, 2298, 2300, 2304,
	2306, 2307, 1538, 1539, 1540, 1541, 1542, 0, 0, 1545,
	1143, 2299, 2301, 2303, 2289, 2308, 2309, 2310, 2311, 2312,
	2313, 2314, 2315, 2316, 2296, 2326, 2327, 1936, 1292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 876, 794, 1079, 1081, 821,
	0, 768, 661, 629, 0, -2, 773, 963, 0, 1288,
	873, 88, 89, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 618, 619, 620, 621, 623, 624,
	625, 626, 627, 628, 630, 631, 632, 633, 634, 635,
	636, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 662, 663, 664, 665, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	769, 770, 771, 772, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 874, 875, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1060, 1061, 1077, 1094, 1123, 1189,
	0, 1127, 493, 1128, 1129, 1130, 1131, 0, 0, 0,
	-2, 0, 1174, 1266, 0, 0, 1292, 0, 1149, 1152,
	1153, 1200, 83, 84, 85, 86, 87, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 1150, 0, 0, 0, 1334,
	1338, 0, 0, 1345, 0, 0, 0, 0, 0, 0,
	0, 1268, 0, 0, 0, 1603, 1470, 0, 0, 0,
	0, 1292, 1481, 0, 0, 1156, 1313, 1351, 0, 0,
	1499, 1499, 1496, 1497, 0, 93, 1641, 0, 0, 0,
	1814, 0, 2178, 2180, 0, 0, 0, 230, 62, 2060,
	0, 2060, 0, 2101, 2102, 0, 0, 0, 2163, 0,
	0, 0, 0, 0, 2282, 2281, 2283, 2284, 2285, 2286,
	-2, 63, 1693, 0, 1202, 0, 2364, 2366, 0, 0,
	1263, 1382, 0, 0, 0, 0, 0, 0, 2173, 0,
	2186, 0, 2223, 1641, 0, 0, 0, 2235, 2231, 0,
	0, 2246, 2247, 0, 0, 230, 2145, 0, 0, 2381,
	2388, 0, 0, 0, 0, 2347, 2423, 0, 398, -2,
	2145, 2431, 0, 2346, 0, 0, 0, 0, 0, 0,
	0, 1914, 0, 0, 1847, 230, 0, 1871, 0, 0,
	1750, 0, 1704, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 1879, 1880, 0, 0, 1900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1893, 0, 0,
	1895, 1896, 0, 1901, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1714, 1718, 1723, 1724, 1715, 1716,
	0, 1731, 1721, 1722, 0, 0, 0, 0, 0, 0,
	0, 0, 1824, 1915, 0, 0, 1826, 1915, 0, 2223,
	0, 1956, 0, 0, 0, 0, 0, 1913, 0, 0,
	0, 0, 2158, 0, 2269, 0, 0, 0, 0, 0,
	0, 0, 0, 2399, 0, 0, 0, 2419, 2421, 2420,
	2422, 0, 0, 0, 2228, 2233, 2234, 0, 2435, 0,
	2436, 2347, 0, 0, 2443, 0, 0, 0, 2370, 2371,
	2374, 0, 0, 0, 0, 2383, 2384, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 2194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1559, 1560, 1561, 1562, 1563, 1947, 68, 115, 68,
	92, 68, 0, 1565, 68, 1207, 0, 0, 0, 0,
	0, 0, 0, 0, 1226, 1227, 68, 1926, 0, 0,
	0, 2280, 0, 2329, 2331, 0, 0, 2339, 0, 1144,
	1543, 1145, 1544, 1348, 0, 1367, 1286, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, -2, -2, -2, -2, -2, -2,
	1075, 1076, 1078, 0, -2, 0, 0, 1268, 0, 0,
	-2, 1090, 0, 1092, 1093, 0, 0, 1269, 1099, 1270,
	0, 0, 1287, 1157, 1156, 0, 0, 0, 1183, 1184,
	0, 0, 1180, 1176, 0, 1267, 0, 1187, 1162, 1264,
	0, 0, 0, 1168, 1170, 0, -2, 1348, 0, 1154,
	1151, 1310, 1346, 0, 1336, 0, 97, 1190, 1625, 0,
	0, 1475, 1476, 0, 1477, 1156, 1474, 1469, 1351, 0,
	0, 0, 1486, 1485, 1625, 0, 1489, 1293, 1354, 1354,
	0, 1298, 0, 1354, 1354, 1354, 1372, 358, 505, 470,
	95, 1159, 0, 0, 1498, 0, 0, 2144, 0, 1640,
	1642, 1644, 1645, 1646, 0, 1670, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2074, 2059, 2061, 0, 0,
	0, 2066, 2067, 0, 2082, 2083, 2084, 2085, 0, 0,
	2090, 0, 0, 0, 0, 2095, 0, 0, 2098, 0,
	2039, 2040, 2042, 0, 0, 2049, 2050, 2051, 2052, 2054,
	-2, 2056, 0, 2074, 0, 0, 2104, 2106, 2107, 2108,
	2110, 2103, 0, 2162, 0, 0, 0, 0, 2252, 2256,
	2254, 1197, 0, 2480, 2145, 0, 2150, 0, 0, 0,
	-2, 2154, 1203, 2363, 0, 0, 0, 2467, 0, 1381,
	1383, 0, 2265, 2177, 2167, 2168, 2169, 2170, 0, 2188,
	0, 0, 0, 2193, 1735, 1685, 2222, 2220, 0, 0,
	0, 0, 0, 0, 0, 2232, 0, 0, 0, 0,
	1793, 0, 1814, 2390, 0, 0, 2405, 2406, 0, 2411,
	2413, 2414, 0, 98, 2347, 2418, 0, 2145, 0, -2,
	2433, 2433, 0, 0, 0, 1837, 1984, 0, 0, 0,
	76, 0, 1849, 230, 1668, 0, 0, 0, 2019, 0,
	0, 0, 0, 0, 0, 1569, 0, 2019, 230, 68,
	230, 68, 1873, 1876, 1878, 0, 1899, 0, 2028, 2031,
	1877, 1881, 1884, 1885, 0, 0, 0, 0, 1889, 0,
	1886, 1887, 1888, 1892, 0, 1894, 0, 1897, 1902, 2359,
	2360, 2361, 0, 0, 0, 2351, 2353, 373, 121, 193,
	0, 1689, 1816, 1829, 1915, 0, 1992, 1911, 1818, 0,
	0, 1986, 1719, 1725, 1726, 1727, 1729, 1821, 0, 2185,
	1988, 0, 1823, 1915, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 1964, 1965, 1966, 1967, 1968, 0,
	2156, 68, 230, 1912, 2157, 0, 0, 2019, 2161, 1971,
	1972, 0, 0, 0, 0, 2401, 0, 0, 1978, 1979,
	1980, 1981, 1982, 1983, 2347, 2437, 2347, 2347, 0, 0,
	0, 2372, 2373, 2009, 2010, 0, 2011, 2012, 2409, 1546,
	1547, 0, 0, 0, 0, 0, 0, 0, 2017, 0,
	0, 0, 0, 2263, 2195, 0, 2198, 2199, 2200, 0,
	2202, 2203, 2204, 149, 211, 0, 2207, 2208, 0, 2210,
	1916, 1918, 1920, 0, 1923, 1204, 1242, 1239, 1237, 1238,
	1239, 0, 1229, 1925, 68, 0, 0, 2274, 0, 1932,
	2336, 2337, 2338, 2305, 1279, 0, 1291, 1080, 0, -2,
	-2, 0, 0, 1100, 0, 0, 0, 0, 1105, 0,
	0, 0, 0, -2, 1124, 1190, 1181, 1182, 0, 1134,
	1245, 0, 1177, 0, 0, 1158, 1186, 0, 0, 1264,
	1264, 1264, 0, 0, 1280, 1364, 0, 1150, 0, 1337,
	1467, 0, 1606, 0, 0, 0, 1479, 1625, 1482, 1483,
	0, 0, 1488, 1349, 170, 0, 0, 0, 0, 0,
	1325, 1325, 1325, 1323, 1295, 1353, 0, 1358, 1296, 1354,
	1354, 1354, 1354, 1354, 1298, 0, 1300, 1302, 1304, 1369,
	0, 0, 0, 0, -2, 0, 1735, 1500, 1501, 1502,
	-2, 94, 1783, 0, 1650, 1785, 0, 1670, 0, 0,
	1813, 0, 2181, 1808, 0, 2060, 0, 0, 2055, 1205,
	2036, 2072, 0, 0, 2062, 2063, 2068, 2064, 2065, 0,
	0, 0, 2088, 2089, 2091, 2092, 2093, 2094, 2096, 2097,
	372, 406, 2038, 0, 0, 0, 0, 2048, 0, 2047,
	2053, 1205, 0, 2037, 0, 0, 0, 0, 2248, 2249,
	0, 0, 0, 2255, 0, 0, 0, 0, 1814, 0,
	0, 2153, 1692, 0, 1695, 1696, 0, 0, 1741, 1704,
	0, 0, 0, 0, 0, 1698, 0, 2365, 2367, 2340,
	2341, 2342, 2343, 2344, 2345, 1246, 299, 1250, 1251, 0,
	2175, 0, 1387, 0, 2264, 2266, 2172, 0, 2190, 2191,
	2192, 2189, 2213, 0, 2221, 2216, 2224, 2217, 2219, 2218,
	1783, 1670, 0, 0, 2236, 1685, 0, 2280, 0, 1814,
	0, 0, 0, 2380, 2397, 0, 2387, 0, 0, 0,
	0, 0, 2417, 2424, 2433, 0, 2433, 2428, 0, 2430,
	2347, 0, 0, 0, 0, 1908, 0, 1680, 1909, 1910,
	0, 0, 1664, 1667, 0, 1749, 1808, 0, 0, 1753,
	1702, 0, 0, 0, 2019, 0, 0, 1807, 1851, 0,
	0, 0, 0, 1864, 0, 1870, 1707, -2, 0, 1872,
	0, 1868, 0, 1875, 1898, 2357, 2358, 2027, 0, 0,
	0, 1882, 1890, 1883, 1891, 1903, 1904, 0, 0, 1905,
	2350, 0, 2354, 2355, 2356, 1688, 1690, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1990,
	0, 1825, 1915, 0, 1994, 0, 1827, 1915, 0, 2214,
	0, 2159, 0, 2268, 0, 2271, 1973, 0, 0, 0,
	0, 0, 2403, 0, 2398, 1840, 0, 2440, 2438, 2439,
	0, 0, 2008, 0, 0, 0, 0, 0, 0, 0,
	0, 2259, 0, 2197, 0, 0, 0, 1958, 0, 0,
	68, 1233, 1235, 1231, 1927, 2244, 0, 2278, 0, 1347,
	-2, 0, 0, 0, 0, -2, -2, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 1108, 0, 1271, 0, 1188, 1185, 1173,
	1179, 0, 1163, 0, 1169, 0, 0, 0, 0, 1171,
	1172, 1155, 0, 1624, 0, 0, 0, 1471, 1472, 0,
	1478, 1480, 0, 1487, 0, 1294, 0, 0, 0, 0,
	0, 1320, 1324, 1321, 1322, 1356, 0, 1297, 1301, 1303,
	1305, 1314, 1371, 0, 0, 500, 0, 1454, 0, 1510,
	1735, 0, 1570, 1785, 0, 1643, 1647, 1793, 1784, 0,
	0, 1671, 1673, 1674, 1693, 0, 1641, 0, 0, 2149,
	1814, 2179, 0, 0, 2074, 0, 0, 2077, 2075, 0,
	0, 0, 0, 2086, 2087, 2041, 2043, 2044, 2045, 2046,
	0, 0, 2112, 2105, 2109, 0, 0, 2253, 0, 2257,
	0, 2258, 0, 2485, 0, 0, 2282, 0, 1697, 1699,
	1740, 2347, 2347, 0, 1745, 2145, 0, 1705, 0, 1700,
	1701, 0, 0, 1384, 1385, 0, 2176, 0, 2174, 2187,
	0, 2225, 0, 0, 1641, 0, 0, 0, 2241, 0,
	2272, 0, 1799, 1792, 0, 2129, 2130, 0, 2375, 0,
	2401, 0, 2389, 2391, 2392, 2393, 2394, 2395, 2404, 2407,
	2412, 2415, 0, 2425, 2426, 2427, 2429, 0, 2434, 0,
	0, 0, 1996, 2002, 0, 1848, 0, 1685, 1663, 0,
	1665, 1666, 2019, 0, 2020, 0, 2022, 0, 0, 1703,
	1802, 0, 1755, 0, 0, 1760, 0, 1617, 1617, 0,
	0, 1855, 1865, 1568, 1711, 0, 0, 0, 0, 1859,
	1861, 1862, 1860, 0, 1708, 0, 0, 0, 0, 68,
	68, 2029, 2030, 2033, 1906, 2362, 2352, 1985, 0, 0,
	0, 0, 1993, 0, 0, 1987, 1998, 1989, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1970, 1969, 68,
	2019, 0, 0, 2468, 2453, 0, 0, 0, 2469, 2470,
	0, 0, 1976, 2386, 0, 0, 0, 0, 2006, 2007,
	2243, 2410, 2013, 2014, 2015, 2016, 68, 2262, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 1921, 0, 2279,
	-2, -2, 0, 0, 0, -2, 1106, 1109, 1110, 1111,
	1112, 1113, 1114, -2, -2, -2, -2, -2, -2, -2,
	-2, 1178, 1264, 1164, 1166, 1167, 1341, 0, 0, 1609,
	0, 0, 1484, 1350, 1352, 1315, 0, 1317, 0, 0,
	0, 1319, 0, 0, 1299, 0, 1373, 1377, 0, 0,
	0, 0, 1413, 1453, 0, 1625, 1492, 1592, 1592, 0,
	1494, 1507, 0, 1510, 0, 1793, 0, 0, 0, 79,
	0, 1669, 0, 1675, 0, 1785, 0, 1670, 0, 2140,
	0, 0, 0, 0, 2034, 0, 1378, 0, 1201, 0,
	-2, 2069, 0, 2070, 2080, 2057, 0, 2122, 0, 2139,
	0, 2250, 0, 0, 0, 2487, 0, 0, 0, 2152,
	1694, 0, 1801, 1801, 0, 1769, 0, 1706, 0, 0,
	1386, 2267, 0, 1686, 0, 0, 0, 0, 1685, 0,
	0, 0, 2277, 0, 0, 0, 0, 0, 2403, 2396,
	0, 0, 0, 2449, 2449, 0, 0, 0, 0, 1850,
	1693, 1661, 1662, 1751, 1765, 2021, 2025, 2023, 2024, 2026,
	1765, 0, 1765, 0, 0, 1611, 65, 0, 1612, 0,
	1852, 0, 0, 1712, 1853, 0, 1857, 0, 1387, 1710,
	1858, 1867, 1874, 0, 0, 0, 1839, 0, 1839, 0,
	0, 2000, 1991, 0, 0, 0, 2004, 1995, 0, 2160,
	2270, 1974, 1975, 0, 0, 0, 2459, 0, 0, 0,
	0, 0, 1841, 0, 2018, 2260, 2261, 0, 2205, 2206,
	1959, 0, 0, 2209, 2245, -2, -2, -2, 0, 1344,
	0, 0, 1602, 1348, 0, 1605, 0, 1316, 0, 1327,
	1318, 0, 1357, 1372, 0, 1375, 0, 0, 1390, 0,
	139, 0, 1394, 0, 0, 1415, 1452, 1491, 1493, 0,
	0, 0, 1587, 0, 1509, 1511, 1512, 1573, 1573, 1515,
	1516, 1573, 1573, 0, 0, 0, 1526, 1534, 1348, 1505,
	79, 0, 99, 1648, 1651, 1652, 1653, 1654, 1655, 1656,
	1657, 1658, 1659, 1660, 1649, 1797, 0, 0, 0, 1672,
	1693, 1793, 1783, 1785, 1670, 0, 0, 0, 0, 0,
	1808, 0, 2060, 1380, 2081, 2073, 0, 2078, 2079, 0,
	2058, 2128, 2124, 2111, 2113, 0, 2116, 2117, 2019, 0,
	2251, 2475, 0, 0, 2481, 2486, 0, 0, 2484, 2149,
	1814, 1742, 0, 1743, 1759, 1774, 0, 1739, 0, 1247,
	2452, 1684, 0, 1685, 0, 1783, 1670, 2226, 0, 1685,
	2280, 1798, 0, 0, 2376, 0, 2385, 0, 2432, 2449,
	2446, 0, 2445, 2474, 0, 0, 0, 1691, 2347, 0,
	2347, 0, 2347, 1761, 1762, 299, 1620, 64, 1616, 1617,
	1856, 1866, 0, 0, 2349, 2032, 1997, 2003, 1830, 1838,
	0, 1832, 0, 1999, 0, 1839, 0, 0, 2454, 2464,
	2464, 2457, 0, 2471, 0, 0, 0, 2400, 1977, 2201,
	0, 0, 0, 1165, 1335, 0, 0, 0, 0, 1604,
	1610, 1473, 0, 1355, 1370, 1374, 0, 0, 1400, 0,
	1391, 0, 1392, 1388, 1389, 0, 0, 0, 1397, 1417,
	0, 0, 0, 1591, 0, 1589, 0, 0, 0, 0,
	0, 0, 0, 1525, 1508, 0, 1528, 1529, 1530, 1531,
	1532, 0, 1495, 1797, 0, 1782, 1799, 0, 77, 78,
	0, 1676, 79, 1785, 1793, 0, 2146, 0, 0, 2149,
	1810, 0, 1379, 2074, 2076, 2071, 0, 0, 0, 2123,
	2114, 1573, 2118, 2119, 0, 2138, 0, 0, 2488, 2489,
	2141, 0, 0, 1744, 0, 1746, 1770, 1771, 0, 1766,
	1767, 1768, 1747, 0, 0, 0, 0, 1687, 2237, 1685,
	0, 0, 0, 2242, 2273, 2368, 0, 0, 2378, 2408,
	2444, 2447, 2448, 0, 1682, 0, 0, 0, 1801, 0,
	1801, 2145, 1801, 0, 1623, 1618, 1619, 1620, 1613, 0,
	1739, 1869, 0, 0, 0, 2001, 1834, 0, 2005, 1737,
	0, 1737, 0, 2465, 0, 0, 0, 1960, 1962, 1961,
	0, 0, 0, 1348, 1360, 0, 1398, 0, 1402, 0,
	1393, 1395, 0, 1396, 0, 0, 1414, 1451, 1582, 1583,
	0, 0, 1594, 1584, 0, 0, 0, 1513, 1514, 1517,
	1518, 1519, 1520, 0, 1523, 1524, 1527, 0, 1535, 1537,
	1799, 100, 1628, 0, 0, 1787, 1617, 1617, 0, 1797,
	1793, 79, 1785, 2147, 2148, 2142, 1704, 0, 0, 2035,
	0, 0, 2121, 2125, 2126, 0, 0, 0, 0, 0,
	0, 1758, 1772, 0, 1773, 0, 0, 0, 0, 0,
	0, 2451, 2239, 0, 0, 1685, 0, 2377, 0, 1677,
	0, 1681, 1678, 0, 2019, 0, 2019, 1769, 1348, 0,
	1614, 0, 1623, 1854, 1863, 2348, 1839, 1839, 0, 2455,
	1736, 2462, 0, 2456, 0, 0, 2472, 2473, 2402, 0,
	0, 0, 1601, 1326, 0, 1376, 1401, 1404, 1405, 0,
	0, 0, 1410, 0, 1403, 0, 0, 1416, 1418, 0,
	1585, 0, 1586, 1595, 0, 0, 0, 0, 1588, 1590,
	1521, 1522, 1533, 0, 1626, 1794, 0, 0, 1786, 0,
	65, 65, 0, 1799, 79, 1797, 1793, 1814, 0, 0,
	0, 0, 2115, 2120, 0, 2478, 2479, 2149, 1800, 1775,
	0, 1778, 1779, 0, 1776, 1738, 1748, 2450, 1685, 0,
	2227, 2369, 2379, 1683, 0, 1752, 1764, 1754, 1774, 2019,
	1763, 1621, 1622, 1615, 1831, 1833, 1839, 0, 2458, 2466,
	0, 0, 0, 1359, 1406, 1407, 1408, 1409, 1411, 0,
	0, 0, 0, 1593, 0, 0, 1599, 0, 1536, 1795,
	1796, 1788, 1789, 1790, 1617, 1630, 1797, 1799, 79, 1799,
	0, 1811, 1810, 0, 2127, 2128, 0, 0, 2143, 1777,
	2145, 2145, 2238, 1685, 0, 2019, 1757, 1835, 2463, 0,
	0, 0, 0, 0, 0, 1457, 0, -2, 1419, 1420,
	0, 0, 0, 65, 1799, 1629, 1797, 1348, 1809, 0,
	1704, 2133, 0, 0, 0, 1780, 1781, 2240, 0, 1756,
	0, 1343, 1339, 1340, 0, 1436, 0, 0, 1466, 0,
	1455, 1596, 1597, 0, 1600, 1791, 1627, 1799, 1803, 1812,
	1814, 0, 2131, 2134, 2135, 2136, 2137, 0, 0, 0,
	1679, 0, 1399, 0, 0, 0, 1422, 1423, 1424, 1425,
	1426, 1427, 1430, 1458, 1459, 1445, 1466, 1466, 0, 0,
	0, 1631, 1799, 2099, 0, 0, 0, 0, 0, 1412,
	0, 1421, 1428, 1429, 1450, 0, 0, 1445, 1436, 1465,
	0, 0, 0, 1348, 2132, 0, 0, 0, 0, 1435,
	1434, 0, 0, 1437, 0, 1439, 0, 0, 0, 1450,
	1462, 0, 0, 1598, 1804, 2133, 2476, 2477, 1342, 1460,
	0, 1447, 1449, 1438, 1440, 0, 1443, 0, 1444, 1434,
	0, 0, 0, 0, 0, 0, 1441, 1442, 1461, 1463,
	0, 2100, 1431, 1432, 0, 0, 0, 0, 1446, 1448,
	1464, 0, 1433,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 539, 3, 3,
	532, 533, 537, 535, 542, 536, 534, 538, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 543, 541,
	526, 528, 527, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 530, 3, 531, 540,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 525, 57868, 529, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:488
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:503
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:511
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:526
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:537
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:538
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:539
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:540
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:541
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:542
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:543
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:544
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:545
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:546
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:547
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:548
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:549
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:550
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:551
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:552
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:553
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:554
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:555
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:556
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:557
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:558
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:559
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:560
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:561
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:562
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:563
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:564
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:565
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:566
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:567
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:568
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:569
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:570
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:571
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:572
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:573
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:574
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:575
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:576
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:577
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:578
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:579
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:580
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:581
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:582
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:583
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:584
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:585
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:586
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:587
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:588
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:589
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:590
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:591
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:592
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:594
		{
			yyVAL.stmt = nil
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:605
		{
			yyVAL.str = yyDollar[1].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:606
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:610
		{
			yyVAL.list = yyDollar[1].list
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:611
		{
			yyVAL.list = nil
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:615
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:617
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:621
		{
			yyVAL.ival = 1
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:622
		{
			yyVAL.ival = 0
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:626
		{
			yyVAL.ival = 1
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:627
		{
			yyVAL.ival = 0
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:631
		{
			yyVAL.bval = true
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:632
		{
			yyVAL.bval = false
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.bval = true
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:637
		{
			yyVAL.bval = false
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:641
		{
			yyVAL.list = yyDollar[2].list
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:642
		{
			yyVAL.list = nil
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:643
		{
			yyVAL.list = nil
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.str = yyDollar[1].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.str = yyDollar[1].str
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.str = yyDollar[1].str
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.str = yyDollar[1].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.str = yyDollar[1].str
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.str = yyDollar[1].str
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.str = yyDollar[1].str
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.str = yyDollar[1].str
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.str = yyDollar[1].str
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.str = yyDollar[1].str
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.str = yyDollar[1].str
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:678
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:691
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:706
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:735
		{
			yyVAL.list = yyDollar[2].list
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:736
		{
			yyVAL.list = nil
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:741
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:745
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:758
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:764
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:770
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:776
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:782
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:789
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:796
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:802
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:808
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:817
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:821
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:833
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:837
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:847
		{
			yyVAL.str = "abort"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:848
		{
			yyVAL.str = "absent"
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:849
		{
			yyVAL.str = "absolute"
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:850
		{
			yyVAL.str = "access"
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:851
		{
			yyVAL.str = "action"
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:852
		{
			yyVAL.str = "add"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:853
		{
			yyVAL.str = "admin"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:854
		{
			yyVAL.str = "after"
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.str = "aggregate"
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:856
		{
			yyVAL.str = "also"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:857
		{
			yyVAL.str = "alter"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:858
		{
			yyVAL.str = "always"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:859
		{
			yyVAL.str = "asensitive"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:860
		{
			yyVAL.str = "assertion"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:861
		{
			yyVAL.str = "assignment"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:862
		{
			yyVAL.str = "at"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:863
		{
			yyVAL.str = "atomic"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:864
		{
			yyVAL.str = "attach"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:865
		{
			yyVAL.str = "attribute"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.str = "backward"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:867
		{
			yyVAL.str = "before"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:868
		{
			yyVAL.str = "begin"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:869
		{
			yyVAL.str = "breadth"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:870
		{
			yyVAL.str = "by"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:871
		{
			yyVAL.str = "cache"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:872
		{
			yyVAL.str = "call"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:873
		{
			yyVAL.str = "called"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:874
		{
			yyVAL.str = "cascade"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:875
		{
			yyVAL.str = "cascaded"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:876
		{
			yyVAL.str = "catalog"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:877
		{
			yyVAL.str = "chain"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:878
		{
			yyVAL.str = "characteristics"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:879
		{
			yyVAL.str = "checkpoint"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:880
		{
			yyVAL.str = "class"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:881
		{
			yyVAL.str = "close"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:882
		{
			yyVAL.str = "cluster"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:883
		{
			yyVAL.str = "columns"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:884
		{
			yyVAL.str = "comment"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:885
		{
			yyVAL.str = "comments"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:886
		{
			yyVAL.str = "commit"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:887
		{
			yyVAL.str = "committed"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:888
		{
			yyVAL.str = "compression"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:889
		{
			yyVAL.str = "conditional"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.str = "configuration"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:891
		{
			yyVAL.str = "conflict"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.str = "connection"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:893
		{
			yyVAL.str = "constraints"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.str = "content"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:895
		{
			yyVAL.str = "continue"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:896
		{
			yyVAL.str = "conversion"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.str = "copy"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:898
		{
			yyVAL.str = "cost"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.str = "csv"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:900
		{
			yyVAL.str = "cube"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:901
		{
			yyVAL.str = "current"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:902
		{
			yyVAL.str = "cursor"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:903
		{
			yyVAL.str = "cycle"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:904
		{
			yyVAL.str = "data"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:905
		{
			yyVAL.str = "database"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.str = "day"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:907
		{
			yyVAL.str = "deallocate"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:908
		{
			yyVAL.str = "declare"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:909
		{
			yyVAL.str = "defaults"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.str = "deferred"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "definer"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "delete"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "delimiter"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "delimiters"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "depends"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "depth"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "detach"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "dictionary"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "disable"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "discard"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "document"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "domain"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "double"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "drop"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "each"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "empty"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "enable"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "encoding"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "encrypted"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "enum"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "error"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "escape"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "event"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "exclude"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "excluding"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "exclusive"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "execute"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "explain"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "expression"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "extension"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "external"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "family"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "filter"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "finalize"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "first"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "following"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "force"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "format"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "forward"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "function"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "functions"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "generated"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "global"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "granted"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "groups"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "handler"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "header"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "hold"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "hour"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "identity"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "if"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "immediate"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "immutable"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "implicit"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "import"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "include"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "including"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "increment"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "indent"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "index"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "indexes"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "inherit"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "inherits"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "inline"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "input"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "insensitive"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "insert"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "instead"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "invoker"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "isolation"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "keep"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "key"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "keys"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "label"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "language"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "large"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "last"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "leakproof"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "level"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "listen"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "load"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "local"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "location"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "lock"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "locked"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "logged"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "mapping"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "match"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "matched"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "materialized"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "maxvalue"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "merge"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "method"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "minute"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "minvalue"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "mode"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "month"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "move"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "name"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "names"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "nested"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "new"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "next"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "nfc"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "nfd"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "nfkc"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "nfkd"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "no"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "normalized"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "nothing"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "notify"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "nowait"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "nulls"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "object"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "of"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "off"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "oids"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "old"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "omit"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "operator"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "option"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "options"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "ordinality"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "others"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "over"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "overriding"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "owned"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "owner"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "parallel"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "parameter"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "parser"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "partial"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "partition"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "passing"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "password"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "path"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "plan"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "plans"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "policy"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "preceding"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "prepare"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "prepared"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "preserve"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "prior"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "privileges"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "procedural"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "procedure"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "procedures"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "program"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "publication"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "quote"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "quotes"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "range"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "read"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "reassign"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "recheck"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "recursive"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "ref"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "referencing"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "refresh"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "reindex"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "relative"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "release"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "rename"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "repeatable"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "replace"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "replica"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "reset"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "restart"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "restrict"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "return"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "returns"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "revoke"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "role"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "rollback"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "rollup"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "routine"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "routines"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "rows"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "rule"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "savepoint"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "scalar"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "schema"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "schemas"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "scroll"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "search"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "second"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "security"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "sequence"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "sequences"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "serializable"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "server"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "session"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "set"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "sets"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "share"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "show"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "simple"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "skip"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "snapshot"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "source"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "sql"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "stable"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "standalone"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "start"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "statement"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "statistics"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "stdin"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "stdout"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "storage"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "stored"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "strict"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "string"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "strip"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "subscription"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "support"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "sysid"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "system"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "tables"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "tablespace"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "target"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "temp"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "template"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "temporary"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "text"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "ties"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "transaction"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "transform"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "trigger"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "truncate"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "trusted"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "type"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "types"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "uescape"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "unbounded"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "uncommitted"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "unconditional"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "unencrypted"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "unknown"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "unlisten"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "unlogged"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "until"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "update"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "vacuum"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "valid"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "validate"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "validator"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "value"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "varying"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "version"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "view"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "views"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "volatile"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "whitespace"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "within"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "without"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "work"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "wrapper"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "write"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "xml"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "year"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "yes"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "zone"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "between"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "bigint"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "bit"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "boolean"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "char"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "character"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "coalesce"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "dec"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "decimal"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "exists"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "extract"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "float"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "greatest"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "grouping"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "inout"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "int"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "integer"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "interval"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "json"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "json_array"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "json_arrayagg"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "json_exists"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "json_object"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "json_objectagg"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "json_query"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "json_scalar"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "json_serialize"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "json_table"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "json_value"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "least"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "merge_action"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "national"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "nchar"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "none"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "normalize"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "nullif"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "numeric"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "out"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "overlay"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "position"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "precision"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "real"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "row"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "setof"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "smallint"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "substring"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "time"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "timestamp"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "treat"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "trim"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "values"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "varchar"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "xmlattributes"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "xmlconcat"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "xmlelement"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "xmlexists"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "xmlforest"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "xmlparse"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "xmlpi"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "xmlroot"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "xmlserialize"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "xmltable"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "authorization"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "binary"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "collation"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "concurrently"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "cross"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "current_schema"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "freeze"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "full"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "ilike"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "inner"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "is"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "isnull"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "join"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "left"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "like"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "natural"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "notnull"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "outer"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "overlaps"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "right"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "similar"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "tablesample"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "verbose"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "all"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "analyse"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "analyze"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "and"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "any"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "array"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "as"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "asc"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "asymmetric"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "both"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "case"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "cast"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "check"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "collate"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "column"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "constraint"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "create"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "current_catalog"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "current_date"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "current_role"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "current_time"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "current_timestamp"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "current_user"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "default"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "deferrable"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "desc"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "distinct"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "do"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "else"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "end"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "except"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "false"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "fetch"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "for"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "foreign"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "from"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "grant"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "group"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "having"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "in"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "initially"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "intersect"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "into"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "lateral"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "leading"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "limit"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "localtime"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "localtimestamp"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "not"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "null"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "offset"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "on"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "only"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "or"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "order"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "placing"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "primary"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "references"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "returning"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "select"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "session_user"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "some"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "symmetric"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "system_user"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "table"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "then"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "to"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "trailing"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "true"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "union"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "unique"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "user"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "using"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "variadic"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "when"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "where"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "window"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "with"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "abort"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "absent"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "absolute"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "access"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "action"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "add"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "admin"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "after"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "aggregate"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "all"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "also"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "alter"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "always"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "analyse"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "analyze"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "and"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "any"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "asc"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "asensitive"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "assertion"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "assignment"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "asymmetric"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "at"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "atomic"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "attach"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "attribute"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "authorization"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "backward"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "before"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "begin"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "between"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "bigint"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "binary"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "bit"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "boolean"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "both"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "breadth"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "by"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "cache"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "call"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "called"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "cascade"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "cascaded"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "case"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "cast"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "catalog"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "chain"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "characteristics"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "check"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "checkpoint"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "class"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "close"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "cluster"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "coalesce"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "collate"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "collation"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "column"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "columns"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "comment"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "comments"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "commit"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "committed"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "compression"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "concurrently"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "conditional"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "configuration"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "conflict"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "connection"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "constraint"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "constraints"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "content"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "continue"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "conversion"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "copy"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "cost"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "cross"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "csv"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "cube"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "current"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "current_catalog"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "current_date"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "current_role"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "current_schema"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "current_time"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "current_timestamp"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "current_user"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "cursor"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "cycle"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "data"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "database"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "deallocate"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "dec"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "decimal"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "declare"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "default"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "defaults"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "deferrable"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "deferred"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "definer"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "delete"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "delimiter"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "delimiters"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "depends"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "depth"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "desc"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "detach"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "dictionary"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "disable"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "discard"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "distinct"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "do"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "document"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "domain"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "double"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "drop"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "each"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "else"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "empty"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "enable"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "encoding"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "encrypted"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "end"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "enum"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "error"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "escape"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "event"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "exclude"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "excluding"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "exclusive"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "execute"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "exists"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "explain"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "expression"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "extension"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "external"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "extract"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "false"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "family"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "finalize"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "first"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "float"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "following"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "force"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "foreign"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "format"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "forward"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "freeze"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "full"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "function"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "functions"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "generated"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "global"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "granted"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "greatest"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "grouping"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "groups"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "handler"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "header"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "hold"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "identity"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "if"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "ilike"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "immediate"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "immutable"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "implicit"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "import"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "in"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "include"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "including"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "increment"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "indent"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "index"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "indexes"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "inherit"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "inherits"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "initially"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "inline"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "inner"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "inout"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "input"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "insensitive"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "insert"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "instead"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "int"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "integer"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "interval"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "invoker"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "is"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "isolation"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "join"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "json"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "json_array"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "json_arrayagg"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "json_exists"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "json_object"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "json_objectagg"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "json_query"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "json_scalar"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "json_serialize"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "json_table"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "json_value"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "keep"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "key"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "keys"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "label"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "language"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "large"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "last"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "lateral"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "leading"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "leakproof"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "least"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "left"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "level"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "like"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "listen"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "load"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "local"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "localtime"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "localtimestamp"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "location"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "lock"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "locked"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "logged"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "mapping"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "match"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "matched"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "materialized"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "maxvalue"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "merge"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "merge_action"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "method"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "minvalue"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "mode"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "move"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "name"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "names"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "national"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "natural"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "nchar"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "nested"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "new"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "next"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "nfc"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "nfd"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "nfkc"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "nfkd"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "no"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "none"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "normalize"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "normalized"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "not"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "nothing"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "notify"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "nowait"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "null"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "nullif"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "nulls"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "numeric"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "object"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "of"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "off"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "oids"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "old"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "omit"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "only"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "operator"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "option"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "options"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "or"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "ordinality"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "others"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "out"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "outer"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "overlay"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "overriding"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "owned"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "owner"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "parallel"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "parameter"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "parser"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "partial"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "partition"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "passing"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "password"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "path"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "placing"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "plan"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "plans"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "policy"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "position"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "preceding"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "prepare"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "prepared"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "preserve"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "primary"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "prior"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "privileges"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "procedural"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "procedure"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "procedures"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "program"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "publication"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "quote"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "quotes"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "range"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "read"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "real"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "reassign"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "recheck"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "recursive"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "ref"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "references"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "referencing"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "refresh"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "reindex"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "relative"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "release"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "rename"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "repeatable"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "replace"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "replica"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "reset"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "restart"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "restrict"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "return"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "returns"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "revoke"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "right"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "role"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "rollback"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "rollup"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "routine"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "routines"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "row"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "rows"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "rule"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "savepoint"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "scalar"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "schema"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "schemas"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "scroll"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "search"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "security"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "select"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "sequence"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "sequences"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "serializable"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "server"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "session"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "session_user"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "set"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "setof"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "sets"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "share"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "show"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "similar"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "simple"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "skip"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "smallint"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "snapshot"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "some"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "source"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "sql"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "stable"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "standalone"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "start"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "statement"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "statistics"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "stdin"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "stdout"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "storage"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "stored"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "strict"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "string"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "strip"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "subscription"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "substring"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "support"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "symmetric"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "sysid"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "system"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "system_user"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "table"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "tables"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "tablesample"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "tablespace"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "target"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "temp"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "template"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "temporary"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "text"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "then"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "ties"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "time"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "timestamp"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "trailing"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "transaction"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "transform"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "treat"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "trigger"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "trim"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "true"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "truncate"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "trusted"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "type"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "types"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "uescape"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "unbounded"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "uncommitted"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "unconditional"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "unencrypted"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "unique"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "unknown"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "unlisten"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "unlogged"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "until"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "update"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "user"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "using"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "vacuum"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "valid"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "validate"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "validator"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "value"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "values"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "varchar"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "variadic"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "verbose"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "version"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "view"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "views"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "volatile"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "when"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "whitespace"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "work"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "wrapper"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "write"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "xml"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "xmlattributes"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "xmlconcat"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "xmlelement"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "xmlexists"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "xmlforest"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "xmlparse"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "xmlpi"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "xmlroot"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "xmlserialize"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "xmltable"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "yes"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "zone"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1060:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1853
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1858
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1062:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1867
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1872
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1877
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1882
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1887
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1892
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1897
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1902
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1907
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1912
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1917
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1922
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1943
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1080:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1947
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1951
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1955
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1083:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1960
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1084:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1968
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1973
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1981
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1986
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1994
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1999
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2007
		{
			// Pass the NodeList directly to NewCollateClause
			nodeList := yyDollar[3].list
			collateClause := ast.NewCollateClause(nodeList)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1091:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2015
		{
			// Create timezone function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2021
		{
			// Create timezone function call with no argument
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2027
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2031
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2035
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1096:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2040
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1097:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2045
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1098:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2050
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2055
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2060
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2065
		{
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1102:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2070
		{
			// Create similar_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2078
		{
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1104:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2083
		{
			// Create similar_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2092
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2094
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2098
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2103
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2108
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2113
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2118
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2123
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2128
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2133
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2138
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2143
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2148
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2153
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2158
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2163
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2169
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2170
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2172
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2181
		{
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(parenExpr, yyDollar[4].list, 0)
			} else {
				yyVAL.node = parenExpr
			}
		}
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2189
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2190
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2192
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2196
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2201
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2205
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2209
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2213
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2219
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2225
		{
			// TODO: Fix GROUPING function implementation
			// Current implementation is simplified and needs proper expr_list handling
			// The expr_list should be properly converted to NodeList and assigned to Args
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     nil, // We'll need to convert expr_list properly
			}
			yyVAL.node = grouping
		}
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2239
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2243
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2247
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2251
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2255
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2259
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2264
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2267
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2270
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2271
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2272
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2277
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2281
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2291
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2295
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2301
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2302
		{
			yyVAL.node = nil
		}
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2306
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2310
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2314
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2318
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2323
		{
			yyVAL.list = nil
		}
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2325
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2337
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2346
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2350
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2354
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2365
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2369
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2375
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1165:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2381
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2389
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2395
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2403
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2407
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2414
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2418
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2422
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1173:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2429
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2434
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2435
		{
			yyVAL.node = nil
		}
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2439
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2441
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2449
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2455
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2456
		{
			yyVAL.node = nil
		}
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2461
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2465
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2469
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2474
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2476
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2483
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2484
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2488
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2496
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2500
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2509
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2514
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2515
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2516
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2517
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2518
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2521
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2522
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2523
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2526
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2529
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2533
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2537
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2544
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2548
		{
			yyVAL.list = nil
		}
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2554
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2560
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2571
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2575
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2579
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2583
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2587
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2591
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2595
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2599
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2603
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2607
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2611
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2617
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2621
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2627
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2631
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2637
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2645
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2653
		{
			yyVAL.str = "varchar"
		}
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2657
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2665
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2673
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2683
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2694
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1231:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2708
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2720
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2732
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2742
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2752
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2762
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2773
		{
			yyVAL.ival = 1
		}
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2774
		{
			yyVAL.ival = 0
		}
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2775
		{
			yyVAL.ival = 0
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2778
		{
			yyVAL.ival = 1
		}
	case 1241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2779
		{
			yyVAL.ival = 0
		}
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2783
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2793
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2800
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2804
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2811
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2815
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2820
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2821
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2824
		{
			yyVAL.str = "+"
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2825
		{
			yyVAL.str = "-"
		}
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2826
		{
			yyVAL.str = "*"
		}
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2827
		{
			yyVAL.str = "/"
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2828
		{
			yyVAL.str = "%"
		}
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2829
		{
			yyVAL.str = "^"
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2830
		{
			yyVAL.str = "<"
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2831
		{
			yyVAL.str = ">"
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2832
		{
			yyVAL.str = "="
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2833
		{
			yyVAL.str = "<="
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2834
		{
			yyVAL.str = ">="
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2835
		{
			yyVAL.str = "<>"
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2839
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2843
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2851
		{
			yyVAL.list = nil
		}
	case 1265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2854
		{
			yyVAL.node = nil
		}
	case 1266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2857
		{
			yyVAL.node = nil
		}
	case 1267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2860
		{
			yyVAL.node = nil
		}
	case 1268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2863
		{
			yyVAL.ival = 0
		}
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2864
		{
			yyVAL.ival = 0
		}
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2868
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2873
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2888
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2889
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2893
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2898
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2899
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2907
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2909
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2923
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2935
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2947
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2957
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2968
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2969
		{
			yyVAL.list = nil
		}
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2973
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2974
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2979
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2983
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2988
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2993
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3004
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3005
		{
			yyVAL.list = nil
		}
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3009
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3010
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3019
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3027
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3038
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3049
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3053
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3059
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].alias != nil {
				rangeFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3067
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3076
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3084
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3093
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3101
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3113
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3119
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3126
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3132
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3138
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3148
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3152
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3158
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3175
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3179
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3188
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3214
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3240
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3248
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3258
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3259
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3260
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3261
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3266
		{
			yyVAL.ival = 1
		}
	case 1325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3267
		{
			yyVAL.ival = 0
		}
	case 1326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3277
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3288
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3299
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3303
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3307
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3313
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3314
		{
			yyVAL.with = nil
		}
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3319
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3323
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1335:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3331
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3359
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3360
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3361
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1339:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3366
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1340:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3372
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3378
		{
			yyVAL.node = nil
		}
	case 1342:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3385
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1343:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3394
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3402
		{
			yyVAL.node = nil
		}
	case 1345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3413
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = []*ast.NodeList{exprList}
			yyVAL.stmt = selectStmt
		}
	case 1346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3421
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists = append(selectStmt.ValuesLists, exprList)
			yyVAL.stmt = selectStmt
		}
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3435
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3436
		{
			yyVAL.node = nil
		}
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3444
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1350:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3446
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3450
		{
			yyVAL.node = nil
		}
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3454
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3462
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3463
		{
			yyVAL.alias = nil
		}
	case 1355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3468
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3473
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3477
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3482
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3490
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3494
		{
			yyVAL.alias = nil
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3502
		{
			yyVAL.ival = 1
		}
	case 1362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3503
		{
			yyVAL.ival = 0
		}
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3507
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1364:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3508
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3512
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3513
		{
			yyVAL.list = nil
		}
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3523
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].rangevar, nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3526
		{
			yyVAL.into = nil
		}
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3537
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1370:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3546
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3556
		{
			yyVAL.ival = 1
		}
	case 1372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3557
		{
			yyVAL.ival = 0
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3563
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3567
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3574
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3583
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3584
		{
			yyVAL.list = nil
		}
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3594
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3598
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3610
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3623
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3624
		{
			yyVAL.list = nil
		}
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3630
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3634
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3643
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3654
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3659
		{
			yyVAL.node = nil
		}
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3664
		{
			yyVAL.str = "BY REF"
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3665
		{
			yyVAL.str = "BY VALUE"
		}
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3671
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3675
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3679
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1393:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3683
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3691
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3695
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3703
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3708
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1398:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3717
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1399:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:3725
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3736
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3740
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3749
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3754
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3759
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3769
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3773
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3782
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3786
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3790
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3794
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3798
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1412:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:3811
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3835
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3846
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3847
		{
			yyVAL.node = nil
		}
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3852
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3853
		{
			yyVAL.node = nil
		}
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3857
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3858
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3863
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3871
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3879
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3890
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3891
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3892
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3893
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3894
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3895
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3896
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3897
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3902
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3906
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1433:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3910
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3914
		{
			yyVAL.node = nil
		}
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3919
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3920
		{
			yyVAL.node = nil
		}
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3925
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3926
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3927
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3928
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3929
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3930
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3931
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3932
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3933
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3938
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3939
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3940
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3941
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3942
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3948
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3968
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3978
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3979
		{
			yyVAL.node = nil
		}
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3984
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3985
		{
			yyVAL.node = nil
		}
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3991
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3995
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4004
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1460:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4013
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1461:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4027
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1462:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4041
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1463:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4052
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1464:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4061
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4072
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4073
		{
			yyVAL.node = nil
		}
	case 1467:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4089
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4101
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4105
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4114
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4120
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4127
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1473:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4134
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4142
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4151
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4152
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4157
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4161
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4169
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4181
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4194
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4198
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4209
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1484:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4215
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4235
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4241
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4242
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1488:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4252
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4264
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4268
		{
			yyVAL.list = nil
		}
	case 1491:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4283
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4300
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4304
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1494:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4315
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1495:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:4339
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4375
		{
			yyVAL.ival = 1
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4376
		{
			yyVAL.ival = 0
		}
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4380
		{
			yyVAL.ival = 1
		}
	case 1499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4381
		{
			yyVAL.ival = 0
		}
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4385
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4386
		{
			yyVAL.str = ""
		}
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4387
		{
			yyVAL.str = ""
		}
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4392
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4395
		{
			yyVAL.node = nil
		}
	case 1505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4400
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4403
		{
			yyVAL.node = nil
		}
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4407
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4408
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4413
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4421
		{
			yyVAL.list = nil
		}
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4428
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4432
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4436
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4440
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4444
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4448
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4452
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4456
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4460
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4464
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4468
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4472
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4476
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4480
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4484
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4492
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4496
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4503
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4509
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4510
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4511
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4512
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4513
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4514
		{
			yyVAL.node = nil
		}
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4519
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4523
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4529
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4533
		{
			yyVAL.str = "true"
		}
	case 1539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4534
		{
			yyVAL.str = "false"
		}
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4535
		{
			yyVAL.str = "on"
		}
	case 1541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4536
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4540
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4541
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4543
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4548
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4552
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4553
		{
			yyVAL.node = nil
		}
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4557
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4558
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4559
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4560
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4561
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4562
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4563
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4564
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4568
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4569
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4570
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4574
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4575
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4576
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4577
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4578
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4583
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4588
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4595
		{
			yyVAL.bval = true
		}
	case 1567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4596
		{
			yyVAL.bval = false
		}
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4600
		{
			yyVAL.ival = 1
		}
	case 1569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4601
		{
			yyVAL.ival = 0
		}
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4617
		{
			yyVAL.node = nil
		}
	case 1573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4619
		{
			yyVAL.node = nil
		}
	case 1574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4627
		{
			yyVAL.ival = 1
		}
	case 1575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4628
		{
			yyVAL.ival = 0
		}
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4632
		{
			yyVAL.ival = 1
		}
	case 1577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4633
		{
			yyVAL.ival = 0
		}
	case 1578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4637
		{
			yyVAL.ival = 1
		}
	case 1579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4638
		{
			yyVAL.ival = 0
		}
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4642
		{
			yyVAL.ival = 1
		}
	case 1581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4643
		{
			yyVAL.ival = 0
		}
	case 1582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4652
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4658
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4664
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4670
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1586:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4676
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4684
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1588:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4685
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4689
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4690
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4694
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4695
		{
			yyVAL.node = nil
		}
	case 1593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4700
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4715
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4724
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4731
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1597:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4738
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1598:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4751
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4764
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4773
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1601:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4788
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1602:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4798
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4806
		{
			yyVAL.onconflict = nil
		}
	case 1604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4817
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4826
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4833
		{
			yyVAL.node = nil
		}
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4844
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4848
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4855
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4859
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4866
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4871
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4876
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4884
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4895
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4909
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4910
		{
			yyVAL.list = nil
		}
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4914
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4915
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4916
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4920
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4921
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4922
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4927
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4931
		{
			yyVAL.list = nil
		}
	case 1626:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:4952
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1627:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:4968
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1628:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:4985
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1629:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:5001
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1630:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:5018
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1631:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:5035
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5053
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5054
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5055
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5056
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5057
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5058
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5059
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5060
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5064
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5065
		{
			yyVAL.list = nil
		}
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5070
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5075
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5082
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5083
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5084
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5089
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5096
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5100
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5104
		{
			yyVAL.ival = 0
		}
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5110
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5111
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5112
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5113
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5114
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5115
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5116
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5117
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5118
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5119
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5124
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5125
		{
			yyVAL.str = "default"
		}
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5129
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5130
		{
			yyVAL.str = ""
		}
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5134
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5135
		{
			yyVAL.str = "default"
		}
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5139
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5140
		{
			yyVAL.str = ""
		}
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5145
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5146
		{
			yyVAL.list = nil
		}
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5151
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5157
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5164
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5165
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5170
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5176
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1677:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5187
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1678:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5216
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1679:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5225
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5235
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5244
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5251
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5255
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5263
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5264
		{
			yyVAL.list = nil
		}
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5269
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5273
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5281
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5287
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5292
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1691:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5297
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5309
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5314
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5321
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5326
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5327
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5329
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5342
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5347
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5352
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5357
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5365
		{
			yyVAL.bval = true
		}
	case 1703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5366
		{
			yyVAL.bval = false
		}
	case 1704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5367
		{
			yyVAL.bval = true
		}
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5371
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5372
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5377
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5379
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5384
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5388
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5392
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5402
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5408
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5409
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5414
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5418
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5422
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5426
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5430
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5434
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5438
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5442
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5446
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5450
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5454
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5458
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5462
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5466
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5470
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5474
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5480
		{
		}
	case 1732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5481
		{
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5485
		{
		}
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5486
		{
		}
	case 1735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5487
		{
		}
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5492
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5499
		{
			yyVAL.bval = false
		}
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5503
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5504
		{
			yyVAL.list = nil
		}
	case 1740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5509
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5513
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1742:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5517
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 1743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5526
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1744:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5532
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5538
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 1746:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5544
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 1747:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5561
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 1748:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5568
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5578
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5583
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1751:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5588
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 1752:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5596
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5607
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 1754:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5618
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1755:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5628
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 1756:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5639
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 1757:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5660
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5674
		{
			yyVAL.bval = true
		}
	case 1759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5675
		{
			yyVAL.bval = false
		}
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5681
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5687
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5695
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 1763:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5700
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 1764:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5708
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5712
		{
			yyVAL.list = nil
		}
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5719
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5723
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5727
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5731
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5738
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5748
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5758
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5765
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5772
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5787
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 1776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5800
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5807
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5814
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5821
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5828
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5835
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1782:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5844
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1783:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5845
		{
			yyVAL.list = nil
		}
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5849
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 1785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5850
		{
			yyVAL.partspec = nil
		}
	case 1786:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5855
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5863
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5868
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5876
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5883
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1791:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5890
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 1792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5899
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1793:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5900
		{
			yyVAL.str = ""
		}
	case 1794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5904
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 1795:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5905
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 1796:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5906
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5907
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5911
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5912
		{
			yyVAL.str = ""
		}
	case 1800:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5916
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5917
		{
			yyVAL.str = ""
		}
	case 1802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5921
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1803:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:5934
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 1804:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:5949
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5965
		{
			yyVAL.bval = true
		}
	case 1806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5966
		{
			yyVAL.bval = false
		}
	case 1807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5970
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5971
		{
			yyVAL.str = "btree"
		}
	case 1809:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5975
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5976
		{
			yyVAL.list = nil
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5981
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5986
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5994
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5995
		{
			yyVAL.list = nil
		}
	case 1815:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6007
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1816:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6013
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1817:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6020
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1818:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6026
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1819:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6033
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1820:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6042
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 1821:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6048
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1822:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6055
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 1823:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6061
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1824:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6068
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 1825:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6074
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1826:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6081
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1827:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6087
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1828:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6094
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1829:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6103
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1830:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6113
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1831:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6120
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1832:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6128
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1833:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6135
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1834:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6143
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 1835:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6150
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6161
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6166
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6174
		{
			yyVAL.bval = true
		}
	case 1839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6175
		{
			yyVAL.bval = false
		}
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6180
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 1841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6185
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6193
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6224
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6247
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6254
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6261
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 1847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6272
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1848:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6279
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6286
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1850:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6293
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1851:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6300
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 1852:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6305
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 1853:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6310
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 1854:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6315
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 1855:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6320
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 1856:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6325
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1857:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6332
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 1858:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6337
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 1859:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6344
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1860:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6349
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1861:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6354
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1862:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6359
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1863:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6364
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1864:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6374
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 1865:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6379
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1866:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6386
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1867:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6393
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1868:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6401
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1869:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6412
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 1870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6422
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 1871:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6427
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 1872:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6432
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6443
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 1874:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6448
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1875:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6456
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1876:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6464
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 1877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6469
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 1878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6474
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 1879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6479
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 1880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6484
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 1881:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6489
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 1882:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6494
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 1883:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6499
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 1884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6504
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 1885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6509
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 1886:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6514
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 1887:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6519
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 1888:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6524
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 1889:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6529
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 1890:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6534
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 1891:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6539
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 1892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6544
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 1893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6549
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 1894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6554
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 1895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6559
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 1896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6565
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 1897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6570
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 1898:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6577
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 1899:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6582
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 1900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6587
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 1901:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6592
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 1902:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6597
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 1903:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6602
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 1904:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6607
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 1905:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6612
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 1906:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6617
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 1907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6621
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 1908:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6629
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1909:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6637
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1910:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6644
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6655
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6664
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6665
		{
			yyVAL.node = nil
		}
	case 1914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6669
		{
		}
	case 1915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6670
		{
		}
	case 1916:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6681
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1917:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6694
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1918:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6707
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1919:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6720
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1920:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6733
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1921:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6748
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1922:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6763
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1923:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6776
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1924:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6789
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1925:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6802
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1926:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6815
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1927:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6828
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6844
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6850
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 1930:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6856
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6865
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 1932:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6869
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 1933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6872
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6876
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1935:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6878
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 1936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6882
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 1937:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6886
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 1938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6893
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 1939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6897
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 1940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6903
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 1941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6904
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 1942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6908
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 1943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6913
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 1944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6914
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 1945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6915
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 1946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6916
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 1947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6917
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 1948:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6918
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 1949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6919
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 1950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6920
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 1951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6921
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 1952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6922
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 1953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6923
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 1954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6924
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 1955:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6925
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 1956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6938
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6943
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 1958:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6957
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 1959:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6969
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 1960:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6974
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 1961:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6976
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 1962:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6978
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 1963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6982
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 1964:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6996
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1965:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7007
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1966:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7018
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1967:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7029
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1968:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7040
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1969:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7051
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1970:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7063
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1971:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7074
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1972:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7085
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1973:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7096
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1974:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7107
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1975:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7124
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1976:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7141
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1977:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7153
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1978:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7165
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1979:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7176
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1980:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7187
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1981:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7198
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1982:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7209
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1983:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7220
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1984:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7231
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1985:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7242
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1986:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7253
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1987:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7264
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1988:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7275
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1989:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7286
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1990:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7297
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1991:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7308
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1992:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7319
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1993:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7330
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1994:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7341
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1995:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7352
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1996:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7363
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1997:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7376
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1998:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7389
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1999:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7402
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2000:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7415
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2001:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7428
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2002:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7441
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2003:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7453
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2004:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7465
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2005:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7478
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2006:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7491
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2007:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7503
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2008:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7515
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2009:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7526
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2010:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7537
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2011:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7548
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2012:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7559
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2013:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7570
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2014:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7581
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2015:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7592
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2016:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7603
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2017:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7614
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2018:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7625
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2019:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7651
		{
			yyVAL.ival = 0
		}
	case 2020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7653
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7667
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7668
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7669
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2024:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7670
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7671
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2026:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7672
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2027:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7676
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7681
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7686
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2030:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7694
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7698
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2032:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7702
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2033:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7706
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2034:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7720
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2035:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:7734
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2036:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7750
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2037:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7765
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7780
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7781
		{
			yyVAL.list = nil
		}
	case 2040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7786
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2041:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7790
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7798
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2043:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7802
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2044:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7807
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2045:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7815
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7824
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2047:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7833
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7842
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7851
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7862
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7863
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7864
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2053:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7865
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7866
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7870
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7874
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2057:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7876
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2058:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7886
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7898
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2060:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7899
		{
			yyVAL.list = nil
		}
	case 2061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7904
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2062:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7910
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2063:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7918
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7922
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7926
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7930
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7934
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7941
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7947
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7957
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2071:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7963
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7971
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2073:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7975
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2074:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7987
		{
			yyVAL.node = nil
		}
	case 2075:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7994
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8003
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2077:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8013
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8019
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8020
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2080:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8025
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2081:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8029
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8033
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8037
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8041
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8045
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8049
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2087:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8053
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8057
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2089:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8061
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8065
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2091:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8069
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2092:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8073
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2093:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8077
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8081
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8085
		{
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2096:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8089
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8096
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8100
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2099:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:8116
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2100:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:8148
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8179
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8180
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8181
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8186
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8188
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8228
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8235
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8242
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8249
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8256
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8265
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8266
		{
			yyVAL.list = nil
		}
	case 2113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8270
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8275
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8283
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8294
		{
			yyVAL.bval = true
		}
	case 2117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8295
		{
			yyVAL.bval = false
		}
	case 2118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8299
		{
			yyVAL.bval = true
		}
	case 2119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8300
		{
			yyVAL.bval = false
		}
	case 2120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8304
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8309
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8313
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8325
		{
			yyVAL.bval = true
		}
	case 2126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8326
		{
			yyVAL.bval = false
		}
	case 2127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8330
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8331
		{
			yyVAL.node = nil
		}
	case 2131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8340
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8345
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8349
		{
			yyVAL.list = nil
		}
	case 2134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8354
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8357
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8358
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8359
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8363
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8364
		{
			yyVAL.rangevar = nil
		}
	case 2140:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8377
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2141:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8393
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2142:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8409
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2143:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:8425
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8442
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8443
		{
			yyVAL.list = nil
		}
	case 2146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8447
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8448
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8449
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8450
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8461
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8468
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2152:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8475
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2153:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8482
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2154:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8498
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8516
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2156:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8522
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2157:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8527
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2158:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8532
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2159:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8538
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2160:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8546
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2161:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8554
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8569
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8585
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8591
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8596
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8601
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8607
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2168:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8612
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2169:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8617
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2170:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8622
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8627
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2172:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8632
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2173:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8637
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2174:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8642
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2175:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8647
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2176:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8658
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8663
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8677
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2179:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8682
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8689
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8690
		{
			yyVAL.list = nil
		}
	case 2182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8693
		{
		}
	case 2183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8694
		{
		}
	case 2184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8705
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8709
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8722
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2187:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8727
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8735
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8744
		{
			yyVAL.list = nil
		}
	case 2190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8751
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8755
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8759
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8764
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8777
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8785
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8794
		{
			yyVAL.list = nil
		}
	case 2197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8801
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2198:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8814
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2199:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8818
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2200:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8822
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2201:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8826
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2202:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8833
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2203:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8837
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2204:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8841
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2205:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8845
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2206:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8854
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8863
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8867
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2209:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8871
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2210:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8876
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8881
		{
			yyVAL.ival = 1
		}
	case 2212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8882
		{
			yyVAL.ival = 0
		}
	case 2213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8892
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2214:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8898
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8902
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8908
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8909
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8910
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8911
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8915
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8916
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8920
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2223:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8921
		{
			yyVAL.list = nil
		}
	case 2224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8925
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8926
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2226:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8943
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2227:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:8948
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8954
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8958
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8962
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8968
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8969
		{
			yyVAL.str = ""
		}
	case 2233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8973
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8974
		{
			yyVAL.str = ""
		}
	case 2235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8978
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8979
		{
			yyVAL.str = ""
		}
	case 2237:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8992
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2238:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:8998
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2239:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9004
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2240:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:9010
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2241:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9022
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2242:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9026
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2243:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9032
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9038
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2245:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9042
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9048
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9049
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9054
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9060
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2250:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9066
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9072
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9086
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9090
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9098
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9105
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9112
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9116
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9124
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9131
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2260:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9139
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2261:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9148
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2262:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9157
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9165
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9181
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9183
		{
			yyVAL.list = nil
		}
	case 2266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9188
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9190
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9195
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9204
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9209
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9220
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2272:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9240
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2273:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9248
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9259
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9265
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9266
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9271
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9283
		{
			yyVAL.bval = true
		}
	case 2279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9284
		{
			yyVAL.bval = false
		}
	case 2280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9285
		{
			yyVAL.bval = true
		}
	case 2281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9290
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9299
		{
			yyVAL.list = nil
		}
	case 2287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9310
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9312
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9316
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9321
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9326
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9331
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9339
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9344
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9349
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9353
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9364
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9372
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9376
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9380
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9384
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9391
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9395
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9402
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9408
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9415
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9416
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9420
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9421
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9422
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9423
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9424
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9425
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9426
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9427
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9428
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9432
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9433
		{
			yyVAL.str = "default"
		}
	case 2319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9434
		{
			yyVAL.str = ""
		}
	case 2320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9438
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9439
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9443
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9444
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9445
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9446
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9450
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9451
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9456
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9462
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9467
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9475
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9479
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9483
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9487
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9491
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9497
		{
			yyVAL.str = "read uncommitted"
		}
	case 2337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9498
		{
			yyVAL.str = "read committed"
		}
	case 2338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9499
		{
			yyVAL.str = "repeatable read"
		}
	case 2339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9500
		{
			yyVAL.str = "serializable"
		}
	case 2340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9504
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9505
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9506
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9509
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9510
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9511
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9515
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9516
		{
			yyVAL.list = nil
		}
	case 2348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9520
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9521
		{
			yyVAL.node = nil
		}
	case 2350:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9525
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9530
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9535
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9543
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9547
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9553
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9559
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9565
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9566
		{
			yyVAL.str = ""
		}
	case 2359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9570
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9571
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9572
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9573
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9577
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9582
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9587
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9594
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9595
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2368:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9606
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2369:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:9610
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9616
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9622
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9623
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9624
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9625
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9630
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9635
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9643
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9650
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9655
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2380:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9669
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9675
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9676
		{
			yyVAL.rolespec = nil
		}
	case 2383:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9681
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9685
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2385:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9700
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2386:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9708
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9715
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9727
		{
			yyVAL.bval = true
		}
	case 2389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9731
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9732
		{
			yyVAL.str = "all"
		}
	case 2391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9736
		{
			yyVAL.str = "all"
		}
	case 2392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9737
		{
			yyVAL.str = "select"
		}
	case 2393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9738
		{
			yyVAL.str = "insert"
		}
	case 2394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9739
		{
			yyVAL.str = "update"
		}
	case 2395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9740
		{
			yyVAL.str = "delete"
		}
	case 2396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9744
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9745
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9753
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9754
		{
			yyVAL.list = nil
		}
	case 2400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9758
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9759
		{
			yyVAL.node = nil
		}
	case 2402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9763
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9764
		{
			yyVAL.node = nil
		}
	case 2404:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9775
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9781
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9782
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2407:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9793
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2408:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9797
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2409:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9804
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2410:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9808
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9814
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9815
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9819
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9820
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9821
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9832
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2417:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9836
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2418:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9840
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9847
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2420:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9851
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9855
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2422:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9859
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9865
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9866
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9871
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9876
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9880
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9884
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9896
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9902
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9907
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9913
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9914
		{
			yyVAL.node = nil
		}
	case 2434:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9925
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9932
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9936
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2437:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9940
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2438:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9944
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2439:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9948
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2440:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9952
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9956
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9962
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9968
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2444:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9981
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2445:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9985
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2446:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9989
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9995
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9996
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9997
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2450:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10009
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10015
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10016
		{
			yyVAL.list = nil
		}
	case 2453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10020
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10021
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2455:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10026
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2456:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10032
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10036
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2458:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10040
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10044
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10050
		{
			yyVAL.bval = true
		}
	case 2461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10051
		{
			yyVAL.bval = false
		}
	case 2462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10055
		{
			yyVAL.list = nil
		}
	case 2463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10056
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10057
		{
			yyVAL.list = nil
		}
	case 2465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10061
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10062
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2467:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10073
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2468:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10086
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2469:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10090
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10096
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10097
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10102
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10108
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2474:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10123
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2475:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10136
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2476:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10143
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2477:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10149
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10155
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2479:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10161
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10176
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2481:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10182
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10188
		{
			yyVAL.bval = true
		}
	case 2483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10189
		{
			yyVAL.bval = false
		}
	case 2484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10194
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10195
		{
			yyVAL.list = nil
		}
	case 2486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10199
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10200
		{
			yyVAL.list = nil
		}
	case 2488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10204
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10205
		{
			yyVAL.list = nil
		}
	}
	goto yystack /* stack new state and value */
}
