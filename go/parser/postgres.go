// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
)

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:28
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string

	// AST nodes
	node       ast.Node
	stmt       ast.Stmt
	stmtList   []ast.Stmt
	list       *ast.NodeList
	strList    []string
	astStrList []*ast.String

	// Specific AST node types
	onconflict *ast.OnConflictClause

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const ORDER_P = 57412
const BY = 57413
const GROUP_P = 57414
const HAVING = 57415
const INTO = 57416
const ON = 57417
const JOIN = 57418
const INNER_P = 57419
const LEFT = 57420
const RIGHT = 57421
const FULL = 57422
const OUTER_P = 57423
const CROSS = 57424
const NATURAL = 57425
const USING = 57426
const RECURSIVE = 57427
const MATERIALIZED = 57428
const LATERAL = 57429
const VALUES = 57430
const SEARCH = 57431
const BREADTH = 57432
const DEPTH = 57433
const CYCLE = 57434
const FIRST_P = 57435
const LAST_P = 57436
const SET = 57437
const ASC = 57438
const DESC = 57439
const INSERT = 57440
const UPDATE = 57441
const DELETE_P = 57442
const MERGE = 57443
const RETURNING = 57444
const CONFLICT = 57445
const OVERRIDING = 57446
const USER = 57447
const SYSTEM_P = 57448
const MATCHED = 57449
const THEN = 57450
const SOURCE = 57451
const TARGET = 57452
const DO = 57453
const NOTHING = 57454
const COPY = 57455
const PROGRAM = 57456
const STDIN = 57457
const STDOUT = 57458
const BINARY = 57459
const FREEZE = 57460
const CONSTRAINT = 57461
const VERBOSE = 57462
const ANALYZE = 57463
const CURRENT_P = 57464
const CURSOR = 57465
const OF = 57466
const COLUMNS = 57467
const ORDINALITY = 57468
const XMLTABLE = 57469
const JSON_TABLE = 57470
const ROWS = 57471
const PATH = 57472
const PASSING = 57473
const FOR = 57474
const NESTED = 57475
const REF_P = 57476
const XMLNAMESPACES = 57477
const ARRAY = 57478
const ERROR = 57479
const ERROR_P = 57480
const EMPTY = 57481
const EMPTY_P = 57482
const OBJECT_P = 57483
const WRAPPER = 57484
const CONDITIONAL = 57485
const UNCONDITIONAL = 57486
const QUOTES = 57487
const OMIT = 57488
const KEEP = 57489
const SCALAR = 57490
const STRING_P = 57491
const ENCODING = 57492
const DELIMITER = 57493
const DELIMITERS = 57494
const HEADER_P = 57495
const QUOTE = 57496
const FORCE = 57497
const CSV = 57498
const VALUE_P = 57499
const JSON_QUERY = 57500
const JSON_VALUE = 57501
const JSON_SERIALIZE = 57502
const JSON_OBJECT = 57503
const JSON_ARRAY = 57504
const JSON_OBJECTAGG = 57505
const JSON_ARRAYAGG = 57506
const JSON_EXISTS = 57507
const JSON_SCALAR = 57508
const FORMAT = 57509
const JSON = 57510
const UTF8 = 57511
const WITHOUT = 57512
const BIT = 57513
const NUMERIC = 57514
const INTEGER = 57515
const SMALLINT = 57516
const BIGINT = 57517
const REAL = 57518
const FLOAT_P = 57519
const DOUBLE_P = 57520
const PRECISION = 57521
const CHARACTER = 57522
const CHAR_P = 57523
const VARCHAR = 57524
const NATIONAL = 57525
const NCHAR = 57526
const VARYING = 57527
const TIMESTAMP = 57528
const INTERVAL = 57529
const INT_P = 57530
const DECIMAL_P = 57531
const DEC = 57532
const BOOLEAN_P = 57533
const VARIADIC = 57534
const ABORT_P = 57535
const ABSENT = 57536
const ABSOLUTE_P = 57537
const ACCESS = 57538
const ACTION = 57539
const ADD_P = 57540
const ADMIN = 57541
const AFTER = 57542
const AGGREGATE = 57543
const ALSO = 57544
const ALWAYS = 57545
const ANALYSE = 57546
const ASENSITIVE = 57547
const ASSERTION = 57548
const ASSIGNMENT = 57549
const ATOMIC = 57550
const ATTACH = 57551
const ATTRIBUTE = 57552
const AUTHORIZATION = 57553
const BACKWARD = 57554
const BEFORE = 57555
const BEGIN_P = 57556
const CACHE = 57557
const CALL = 57558
const CALLED = 57559
const CASCADED = 57560
const CATALOG_P = 57561
const CHAIN = 57562
const CHARACTERISTICS = 57563
const CHECKPOINT = 57564
const CLASS = 57565
const CLOSE = 57566
const CLUSTER = 57567
const COALESCE = 57568
const COLLATION = 57569
const COMMENT = 57570
const COMMENTS = 57571
const COMMIT = 57572
const COMMITTED = 57573
const COMPRESSION = 57574
const CONFIGURATION = 57575
const CONNECTION = 57576
const CONSTRAINTS = 57577
const CONTENT_P = 57578
const CONTINUE_P = 57579
const CONVERSION_P = 57580
const COST = 57581
const CUBE = 57582
const CURRENT_CATALOG = 57583
const CURRENT_DATE = 57584
const CURRENT_ROLE = 57585
const CURRENT_SCHEMA = 57586
const CURRENT_TIME = 57587
const CURRENT_TIMESTAMP = 57588
const CURRENT_USER = 57589
const DATA_P = 57590
const DATABASE = 57591
const DAY_P = 57592
const DEALLOCATE = 57593
const DECLARE = 57594
const DEFAULTS = 57595
const DEFERRABLE = 57596
const DEFERRED = 57597
const DEFINER = 57598
const DEPENDS = 57599
const DETACH = 57600
const DICTIONARY = 57601
const DISABLE_P = 57602
const DISCARD = 57603
const DOCUMENT_P = 57604
const DOMAIN_P = 57605
const EACH = 57606
const ELSE = 57607
const ENABLE_P = 57608
const ENCRYPTED = 57609
const END_P = 57610
const ENUM_P = 57611
const EVENT = 57612
const EXCEPT = 57613
const EXCLUDE = 57614
const EXCLUDING = 57615
const EXCLUSIVE = 57616
const EXECUTE = 57617
const EXPLAIN = 57618
const EXPRESSION = 57619
const EXTENSION = 57620
const EXTERNAL = 57621
const EXTRACT = 57622
const FAMILY = 57623
const FETCH = 57624
const FILTER = 57625
const FINALIZE = 57626
const FOLLOWING = 57627
const FOREIGN = 57628
const FORWARD = 57629
const FUNCTION = 57630
const FUNCTIONS = 57631
const GENERATED = 57632
const GLOBAL = 57633
const GRANT = 57634
const GRANTED = 57635
const GREATEST = 57636
const GROUPING = 57637
const GROUPS = 57638
const HANDLER = 57639
const HOLD = 57640
const HOUR_P = 57641
const IDENTITY_P = 57642
const IMMEDIATE = 57643
const IMMUTABLE = 57644
const IMPLICIT_P = 57645
const IMPORT_P = 57646
const INCLUDE = 57647
const INCLUDING = 57648
const INCREMENT = 57649
const INDENT = 57650
const INDEX = 57651
const INDEXES = 57652
const INHERIT = 57653
const INHERITS = 57654
const INITIALLY = 57655
const INLINE_P = 57656
const INPUT_P = 57657
const INSENSITIVE = 57658
const INSTEAD = 57659
const INTERSECT = 57660
const INVOKER = 57661
const ISOLATION = 57662
const KEYS = 57663
const LABEL = 57664
const LANGUAGE = 57665
const LARGE_P = 57666
const LATERAL_P = 57667
const LEAKPROOF = 57668
const LEAST = 57669
const LEADING = 57670
const LEVEL = 57671
const LISTEN = 57672
const LOAD = 57673
const LOCALTIME = 57674
const LOCALTIMESTAMP = 57675
const LOCATION = 57676
const LOCK_P = 57677
const LOCKED = 57678
const LOGGED = 57679
const MAPPING = 57680
const MATCH = 57681
const MAXVALUE = 57682
const MERGE_ACTION = 57683
const METHOD = 57684
const MINUTE_P = 57685
const MINVALUE = 57686
const MODE = 57687
const MONTH_P = 57688
const MOVE = 57689
const NAME_P = 57690
const NAMES = 57691
const NEW = 57692
const NEXT = 57693
const NFC = 57694
const NFD = 57695
const NFKC = 57696
const NFKD = 57697
const NO = 57698
const NONE = 57699
const NORMALIZE = 57700
const NORMALIZED = 57701
const NOTIFY = 57702
const NOWAIT = 57703
const NULLIF = 57704
const OUT_P = 57705
const OVERLAY = 57706
const OVERLAPS = 57707
const OWNED = 57708
const OWNER = 57709
const PARALLEL = 57710
const PARAMETER = 57711
const PARSER = 57712
const PARTIAL = 57713
const PARTITION = 57714
const PASSWORD = 57715
const PLACING = 57716
const PLAN = 57717
const PLANS = 57718
const POLICY = 57719
const POSITION = 57720
const PRECEDING = 57721
const PREPARE = 57722
const PREPARED = 57723
const PRESERVE = 57724
const PRIMARY = 57725
const PRIOR = 57726
const PRIVILEGES = 57727
const PROCEDURAL = 57728
const PROCEDURE = 57729
const PROCEDURES = 57730
const PUBLICATION = 57731
const RANGE = 57732
const READ = 57733
const REASSIGN = 57734
const RECHECK = 57735
const REFERENCES = 57736
const REFERENCING = 57737
const REFRESH = 57738
const REINDEX = 57739
const RELATIVE_P = 57740
const RELEASE = 57741
const RENAME = 57742
const REPEATABLE = 57743
const REPLICA = 57744
const RESET = 57745
const RESTART = 57746
const RETURN = 57747
const RETURNS = 57748
const REVOKE = 57749
const ROLE = 57750
const ROLLBACK = 57751
const ROLLUP = 57752
const ROUTINE = 57753
const ROUTINES = 57754
const ROW = 57755
const RULE = 57756
const SAVEPOINT = 57757
const SCHEMA = 57758
const SCHEMAS = 57759
const SCROLL = 57760
const SECOND_P = 57761
const SECURITY = 57762
const SEQUENCE = 57763
const SEQUENCES = 57764
const SERIALIZABLE = 57765
const SERVER = 57766
const SESSION = 57767
const SESSION_USER = 57768
const SETS = 57769
const SETOF = 57770
const SHARE = 57771
const SHOW = 57772
const SIMPLE = 57773
const SKIP = 57774
const SNAPSHOT = 57775
const SOME = 57776
const SQL_P = 57777
const STABLE = 57778
const STANDALONE_P = 57779
const START = 57780
const STATEMENT = 57781
const STATISTICS = 57782
const STORAGE = 57783
const STORED = 57784
const STRICT_P = 57785
const STRIP_P = 57786
const SUBSCRIPTION = 57787
const SUBSTRING = 57788
const SUPPORT = 57789
const SYSID = 57790
const SYSTEM_USER = 57791
const TABLES = 57792
const TABLESPACE = 57793
const TABLESAMPLE = 57794
const TEMP = 57795
const TEMPLATE = 57796
const TEMPORARY = 57797
const TEXT_P = 57798
const TIES = 57799
const TRAILING = 57800
const TRANSACTION = 57801
const TRANSFORM = 57802
const TREAT = 57803
const TRIGGER = 57804
const TRIM = 57805
const TRUNCATE = 57806
const TRUSTED = 57807
const TYPE_P = 57808
const TYPES_P = 57809
const UESCAPE = 57810
const UNBOUNDED = 57811
const UNCOMMITTED = 57812
const UNENCRYPTED = 57813
const UNION = 57814
const UNIQUE = 57815
const UNLISTEN = 57816
const UNLOGGED = 57817
const UNTIL = 57818
const VACUUM = 57819
const VALID = 57820
const VALIDATE = 57821
const VALIDATOR = 57822
const VERSION_P = 57823
const VIEW = 57824
const VIEWS = 57825
const VOLATILE = 57826
const WHITESPACE_P = 57827
const WINDOW = 57828
const WITHIN = 57829
const WORK = 57830
const WRITE = 57831
const XML_P = 57832
const XMLATTRIBUTES = 57833
const XMLCONCAT = 57834
const XMLELEMENT = 57835
const XMLEXISTS = 57836
const XMLFOREST = 57837
const XMLPARSE = 57838
const XMLPI = 57839
const XMLROOT = 57840
const XMLSERIALIZE = 57841
const YEAR_P = 57842
const YES_P = 57843
const INOUT = 57844
const OTHERS = 57845
const OLD = 57846
const KEY = 57847
const OFF = 57848
const OIDS = 57849
const OPTION = 57850
const OPTIONS = 57851
const OVER = 57852
const ORDER = 57853
const ANY = 57854
const BOTH = 57855
const CAST = 57856
const CHECK = 57857
const COLUMN = 57858
const FORMAT_LA = 57859
const NOT_LA = 57860
const NULLS_LA = 57861
const WITH_LA = 57862
const WITHOUT_LA = 57863
const MODE_TYPE_NAME = 57864
const MODE_PLPGSQL_EXPR = 57865
const MODE_PLPGSQL_ASSIGN1 = 57866
const MODE_PLPGSQL_ASSIGN2 = 57867
const MODE_PLPGSQL_ASSIGN3 = 57868
const UMINUS = 57869

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"ORDER_P",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:4676

// Helper functions for converting between grammar types and AST types

// convertToResTargetList converts a slice of ast.Node to []*ast.ResTarget
func convertToResTargetList(nodes []ast.Node) []*ast.ResTarget {
	if nodes == nil {
		return nil
	}
	targets := make([]*ast.ResTarget, len(nodes))
	for i, node := range nodes {
		if target, ok := node.(*ast.ResTarget); ok {
			targets[i] = target
		}
	}
	return targets
}

// convertToIntoClause converts an ast.Node to *ast.IntoClause
func convertToIntoClause(node ast.Node) *ast.IntoClause {
	if node == nil {
		return nil
	}
	if intoClause, ok := node.(*ast.IntoClause); ok {
		return intoClause
	}
	return nil
}

// convertToStringList converts an ast.Node to []*ast.String
func convertToStringList(node ast.Node) []*ast.String {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		strings := make([]*ast.String, len(nodeList.Items))
		for i, item := range nodeList.Items {
			if str, ok := item.(*ast.String); ok {
				strings[i] = str
			}
		}
		return strings
	}
	return nil
}

// convertToNodeList converts an ast.Node to []ast.Node
func convertToNodeList(node ast.Node) []ast.Node {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		return nodeList.Items
	}
	// If it's a single node, wrap it in a slice
	return []ast.Node{node}
}

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 11,
	542, 11,
	-2, 1250,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 24,
	1, 11,
	542, 11,
	-2, 1250,
	-1, 475,
	16, 1116,
	17, 1116,
	533, 1116,
	-2, 1081,
	-1, 557,
	1, 459,
	64, 459,
	65, 459,
	74, 459,
	75, 459,
	102, 459,
	534, 459,
	542, 459,
	543, 459,
	-2, 1021,
	-1, 558,
	1, 464,
	64, 464,
	65, 464,
	74, 464,
	75, 464,
	102, 464,
	534, 464,
	542, 464,
	543, 464,
	-2, 1023,
	-1, 565,
	1, 385,
	64, 385,
	65, 385,
	74, 385,
	75, 385,
	102, 385,
	534, 385,
	542, 385,
	543, 385,
	-2, 1186,
	-1, 655,
	533, 1096,
	-2, 1082,
	-1, 661,
	531, 1087,
	535, 1087,
	-2, 47,
	-1, 750,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1011,
	-1, 751,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1012,
	-1, 752,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1013,
	-1, 753,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1014,
	-1, 754,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1015,
	-1, 755,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1016,
	-1, 760,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1024,
	-1, 766,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1028,
	-1, 813,
	533, 1095,
	-2, 1120,
	-1, 859,
	533, 1116,
	-2, 46,
	-1, 896,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1026,
	-1, 897,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1030,
	-1, 912,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1043,
	-1, 950,
	533, 1116,
	534, 41,
	543, 41,
	-2, 46,
	-1, 978,
	533, 1096,
	-2, 48,
	-1, 980,
	152, 1470,
	-2, 1427,
	-1, 1000,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1025,
	-1, 1005,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1045,
	-1, 1006,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1029,
	-1, 1095,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1027,
	-1, 1096,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1031,
	-1, 1100,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1037,
	-1, 1108,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1057,
	-1, 1109,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1058,
	-1, 1110,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1059,
	-1, 1111,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1060,
	-1, 1112,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1061,
	-1, 1113,
	18, 0,
	19, 0,
	20, 0,
	527, 0,
	528, 0,
	529, 0,
	-2, 1062,
	-1, 1114,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1039,
	-1, 1115,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1044,
	-1, 1124,
	533, 1116,
	-2, 1516,
	-1, 1166,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1038,
	-1, 1167,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1040,
	-1, 1168,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	518, 0,
	-2, 1046,
	-1, 1353,
	531, 1087,
	535, 1087,
	-2, 47,
	-1, 1421,
	7, 1375,
	-2, 222,
}

const yyPrivate = 57344

const yyLast = 23550

var yyAct = [...]int16{
	475, 1445, 1494, 1479, 1418, 1468, 671, 1376, 1456, 469,
	1444, 1419, 1150, 1246, 711, 828, 526, 1361, 488, 487,
	44, 1371, 444, 444, 1340, 693, 831, 44, 443, 443,
	44, 767, 1145, 1306, 1224, 1247, 48, 855, 1341, 476,
	1176, 1198, 849, 12, 5, 1195, 44, 867, 42, 1266,
	1143, 482, 1205, 973, 472, 990, 1159, 1123, 1135, 881,
	34, 1084, 989, 931, 917, 1153, 1372, 12, 953, 961,
	1294, 670, 1063, 12, 810, 455, 459, 980, 453, 695,
	832, 454, 786, 851, 870, 665, 707, 517, 516, 843,
	11, 854, 694, 478, 519, 775, 904, 772, 846, 652,
	853, 1415, 806, 886, 1414, 1523, 1513, 852, 33, 863,
	473, 868, 1347, 541, 1433, 1433, 1443, 551, 552, 553,
	1013, 964, 1259, 467, 1441, 1309, 1432, 708, 817, 674,
	1425, 1385, 675, 672, 473, 1433, 683, 541, 681, 936,
	1386, 1356, 838, 680, 684, 679, 473, 685, 1308, 541,
	1357, 676, 677, 678, 682, 1304, 1275, 1309, 1346, 1404,
	683, 686, 681, 541, 823, 1276, 1255, 680, 684, 679,
	1242, 685, 1314, 1189, 681, 1254, 1148, 1099, 682, 823,
	1188, 541, 1190, 1174, 540, 686, 1037, 951, 681, 823,
	682, 1165, 1175, 1016, 1017, 1018, 1019, 686, 1087, 1056,
	672, 1029, 941, 918, 682, 935, 681, 672, 823, 473,
	672, 942, 541, 925, 936, 522, 551, 552, 553, 439,
	865, 824, 672, 544, 545, 546, 547, 460, 674, 823,
	823, 675, 541, 24, 1019, 683, 473, 681, 819, 541,
	673, 547, 680, 684, 679, 21, 685, 672, 514, 672,
	676, 677, 678, 682, 518, 1178, 986, 518, 1302, 518,
	686, 656, 915, 515, 681, 903, 1463, 1030, 483, 872,
	1046, 986, 18, 872, 1379, 873, 19, 1226, 1120, 1119,
	682, 882, 883, 1118, 1117, 1094, 1092, 686, 47, 1089,
	47, 47, 1088, 473, 884, 47, 541, 23, 47, 21,
	1055, 21, 1032, 691, 882, 883, 914, 818, 537, 457,
	456, 1514, 1490, 1049, 47, 1410, 1403, 880, 1245, 1161,
	1184, 681, 1380, 1147, 847, 31, 18, 1140, 18, 1075,
	19, 1068, 19, 996, 977, 976, 446, 682, 1377, 928,
	776, 21, 888, 872, 686, 875, 654, 660, 658, 536,
	525, 23, 521, 23, 1041, 1052, 839, 882, 883, 974,
	442, 440, 887, 891, 892, 876, 1470, 689, 18, 1458,
	1202, 1252, 19, 538, 1476, 1158, 1424, 1182, 14, 934,
	848, 1260, 449, 1518, 445, 1522, 1525, 1521, 1272, 1517,
	1481, 1480, 1497, 23, 1253, 1496, 1220, 1502, 1511, 1510,
	41, 1216, 1485, 1503, 1273, 1500, 1483, 450, 1484, 1486,
	1487, 1501, 1482, 1499, 1446, 1498, 1516, 1451, 1515, 1478,
	1466, 1449, 1146, 1450, 1452, 1467, 1317, 1459, 1437, 1455,
	1362, 1506, 1475, 1367, 1074, 1417, 1369, 1193, 1054, 1127,
	864, 1172, 444, 1323, 1324, 485, 1375, 1373, 443, 44,
	1327, 531, 44, 44, 1173, 1322, 1121, 1364, 1381, 1382,
	1209, 1263, 473, 1326, 1261, 541, 1363, 829, 830, 1380,
	1459, 1213, 1214, 1365, 1264, 25, 26, 27, 28, 1156,
	573, 933, 932, 1300, 1301, 1440, 1391, 1392, 1297, 1374,
	681, 1231, 530, 1002, 1296, 1230, 1229, 529, 572, 1228,
	1469, 1171, 1380, 1409, 1222, 1215, 682, 1218, 1219, 1221,
	1217, 1271, 1448, 686, 1453, 835, 661, 569, 929, 1477,
	1083, 44, 1524, 444, 701, 700, 444, 1064, 1138, 443,
	932, 697, 1059, 698, 1474, 1412, 1208, 444, 667, 1058,
	44, 1509, 736, 979, 954, 959, 957, 958, 956, 1346,
	952, 955, 1346, 982, 983, 18, 1366, 822, 1413, 19,
	1346, 718, 1508, 768, 655, 1507, 1464, 1349, 827, 666,
	513, 12, 539, 688, 1137, 954, 959, 957, 958, 956,
	23, 952, 955, 1136, 452, 564, 448, 573, 709, 838,
	954, 959, 957, 958, 956, 1348, 952, 955, 1062, 959,
	957, 958, 956, 1328, 663, 572, 838, 1250, 705, 868,
	844, 704, 821, 975, 703, 708, 451, 560, 901, 899,
	774, 1091, 777, 706, 778, 1090, 548, 549, 550, 773,
	774, 769, 994, 770, 905, 542, 543, 544, 545, 546,
	547, 560, 1014, 1015, 1016, 1017, 1018, 1019, 993, 1400,
	1335, 564, 894, 1442, 759, 788, 1396, 803, 763, 542,
	543, 544, 545, 546, 547, 762, 764, 761, 1178, 765,
	758, 542, 543, 544, 545, 546, 547, 815, 813, 38,
	458, 1085, 768, 1352, 1206, 542, 543, 544, 545, 546,
	547, 833, 1405, 836, 1355, 15, 1267, 697, 1192, 40,
	692, 859, 859, 542, 543, 544, 545, 546, 547, 859,
	47, 669, 32, 463, 922, 923, 560, 47, 512, 47,
	47, 47, 484, 35, 16, 548, 549, 550, 1045, 22,
	571, 32, 1239, 34, 542, 543, 544, 545, 546, 547,
	784, 30, 17, 663, 3, 1473, 814, 518, 16, 1199,
	1460, 656, 860, 860, 542, 543, 544, 545, 546, 547,
	860, 542, 543, 544, 545, 546, 547, 1378, 710, 447,
	485, 1162, 564, 564, 564, 564, 841, 564, 1082, 1436,
	837, 33, 1149, 22, 47, 22, 1345, 1447, 564, 47,
	1316, 47, 484, 911, 47, 885, 690, 842, 17, 47,
	1343, 47, 1370, 523, 1258, 47, 484, 869, 47, 1197,
	1395, 877, 878, 879, 1360, 871, 866, 1191, 542, 543,
	544, 545, 546, 547, 444, 22, 1142, 813, 813, 813,
	930, 47, 450, 450, 533, 534, 1305, 571, 17, 697,
	20, 1227, 1170, 889, 890, 820, 950, 893, 13, 963,
	963, 969, 699, 963, 963, 963, 37, 1151, 39, 36,
	900, 898, 924, 859, 1354, 43, 1286, 1279, 564, 564,
	564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
	564, 564, 919, 668, 564, 913, 659, 1277, 946, 988,
	564, 1122, 573, 965, 535, 564, 1339, 860, 1223, 1160,
	1212, 1081, 860, 926, 1007, 946, 29, 943, 1130, 702,
	572, 920, 921, 1351, 860, 991, 788, 948, 1299, 1155,
	992, 1154, 573, 47, 995, 47, 1177, 938, 997, 947,
	784, 939, 1325, 937, 1321, 564, 33, 833, 813, 1320,
	1010, 1044, 968, 697, 984, 826, 947, 963, 978, 564,
	47, 967, 859, 33, 1152, 859, 987, 981, 966, 47,
	981, 47, 840, 1067, 687, 47, 963, 963, 963, 963,
	960, 12, 528, 455, 970, 971, 972, 12, 12, 1047,
	1048, 10, 9, 8, 1035, 1036, 1038, 542, 543, 544,
	545, 546, 547, 1034, 7, 998, 999, 6, 1031, 790,
	787, 784, 1051, 860, 916, 573, 860, 804, 657, 1043,
	1042, 874, 731, 1093, 736, 730, 733, 1050, 732, 812,
	564, 564, 1053, 572, 1061, 784, 861, 738, 1101, 717,
	1065, 1066, 716, 718, 715, 714, 564, 713, 712, 978,
	1290, 486, 468, 524, 1078, 1234, 1124, 574, 4, 1086,
	2, 564, 1, 813, 0, 444, 963, 813, 1073, 859,
	859, 1131, 0, 859, 564, 1128, 663, 0, 564, 444,
	0, 0, 0, 1013, 0, 0, 969, 1023, 1024, 1025,
	0, 0, 1256, 0, 0, 0, 0, 1069, 1070, 1071,
	1072, 0, 47, 0, 0, 477, 485, 0, 0, 0,
	1125, 484, 0, 0, 0, 0, 0, 47, 1116, 564,
	860, 860, 1034, 1144, 860, 0, 0, 47, 47, 0,
	0, 47, 47, 47, 564, 1132, 0, 860, 444, 564,
	564, 0, 480, 0, 1181, 564, 481, 0, 479, 859,
	1141, 444, 571, 1157, 0, 0, 0, 0, 0, 1163,
	0, 0, 1164, 1013, 0, 0, 0, 1023, 1024, 1025,
	0, 663, 527, 564, 564, 0, 1179, 0, 0, 1098,
	949, 0, 1009, 0, 0, 0, 1124, 0, 1237, 768,
	573, 1169, 0, 0, 47, 444, 0, 949, 0, 0,
	860, 969, 0, 1183, 1248, 0, 0, 0, 572, 461,
	461, 0, 0, 564, 564, 47, 0, 0, 1207, 1236,
	1238, 47, 1187, 1073, 1210, 47, 1203, 1225, 1204, 564,
	564, 0, 1232, 0, 564, 12, 1235, 1240, 1144, 1295,
	1125, 47, 697, 1233, 47, 47, 47, 47, 564, 564,
	1249, 1244, 860, 1243, 0, 0, 1307, 0, 0, 736,
	0, 0, 1211, 564, 0, 571, 1241, 1298, 1265, 0,
	1318, 444, 0, 1310, 1278, 1293, 1268, 1319, 718, 1269,
	1270, 0, 1295, 0, 1295, 573, 1057, 0, 0, 1060,
	1303, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 564, 564, 572, 0, 573, 1313, 1312, 0, 0,
	0, 0, 0, 1353, 564, 0, 0, 0, 736, 564,
	1248, 1338, 1315, 572, 0, 0, 1274, 0, 0, 1292,
	0, 573, 1358, 47, 47, 564, 0, 718, 1342, 1344,
	0, 0, 1225, 0, 0, 0, 1295, 47, 0, 1010,
	0, 0, 1333, 0, 1336, 1359, 1350, 1387, 1388, 1295,
	1295, 0, 0, 0, 0, 0, 1393, 0, 1307, 0,
	1329, 0, 1330, 1331, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 697, 1292, 0, 1397, 833,
	0, 0, 0, 1133, 1134, 0, 564, 1139, 0, 0,
	0, 1394, 0, 1407, 0, 0, 47, 768, 0, 0,
	1406, 1402, 0, 0, 1420, 1408, 1383, 0, 0, 47,
	0, 1411, 0, 0, 1428, 1429, 1430, 0, 1248, 1389,
	1390, 736, 1427, 0, 573, 0, 1422, 1426, 1416, 0,
	571, 1431, 1438, 1439, 1420, 1435, 0, 0, 0, 0,
	718, 0, 572, 0, 0, 1454, 47, 47, 1457, 0,
	0, 0, 1462, 47, 0, 0, 1461, 0, 0, 0,
	0, 1423, 47, 1186, 0, 0, 1471, 1472, 0, 0,
	0, 0, 0, 0, 0, 0, 444, 1488, 1493, 0,
	1292, 1495, 1491, 1489, 1492, 0, 907, 907, 0, 0,
	0, 1420, 1504, 0, 1291, 1505, 0, 47, 0, 0,
	47, 0, 0, 0, 0, 0, 1495, 1512, 473, 0,
	0, 541, 0, 0, 47, 1420, 0, 1520, 473, 1519,
	0, 541, 906, 910, 0, 571, 0, 1013, 47, 47,
	0, 1023, 1024, 1025, 0, 0, 681, 0, 0, 1001,
	47, 0, 47, 1097, 0, 571, 681, 0, 0, 902,
	0, 1291, 682, 0, 0, 0, 0, 0, 0, 686,
	0, 0, 682, 0, 0, 0, 0, 0, 0, 686,
	0, 1009, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 1020, 1021, 1022, 564,
	0, 0, 0, 0, 0, 1014, 1015, 1016, 1017, 1018,
	1019, 0, 0, 0, 47, 1013, 0, 0, 0, 1023,
	1024, 1025, 907, 907, 0, 47, 47, 47, 47, 0,
	0, 1028, 907, 907, 47, 0, 47, 648, 649, 650,
	651, 0, 0, 0, 653, 1013, 0, 0, 0, 1023,
	1024, 1025, 0, 47, 0, 0, 0, 47, 1003, 1004,
	0, 1012, 0, 0, 0, 1291, 1013, 0, 1026, 1027,
	1023, 1024, 1025, 0, 0, 47, 1020, 1021, 1022, 0,
	0, 0, 47, 0, 571, 1014, 1015, 1016, 1017, 1018,
	1019, 664, 47, 47, 47, 0, 47, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 47, 461, 0, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 0,
	0, 0, 760, 0, 766, 0, 0, 771, 907, 907,
	907, 907, 907, 907, 907, 907, 907, 907, 907, 907,
	0, 0, 0, 0, 47, 0, 47, 0, 0, 473,
	0, 0, 541, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 0, 0, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 0, 681, 0, 0,
	895, 0, 0, 47, 0, 0, 0, 0, 0, 473,
	0, 0, 541, 682, 0, 0, 551, 552, 553, 0,
	686, 0, 0, 0, 0, 0, 0, 0, 674, 0,
	0, 675, 0, 0, 0, 683, 0, 681, 0, 0,
	0, 811, 680, 684, 679, 0, 685, 0, 0, 1156,
	676, 677, 678, 682, 0, 825, 0, 756, 757, 0,
	686, 0, 760, 766, 0, 473, 0, 0, 541, 0,
	0, 0, 551, 552, 553, 0, 0, 0, 0, 0,
	1194, 907, 0, 0, 674, 0, 0, 675, 0, 0,
	0, 683, 0, 681, 0, 0, 0, 0, 680, 684,
	679, 0, 685, 0, 0, 0, 676, 677, 678, 682,
	0, 0, 0, 0, 473, 0, 686, 541, 0, 0,
	0, 551, 552, 553, 0, 0, 0, 0, 0, 1251,
	0, 0, 0, 674, 907, 0, 675, 0, 0, 0,
	683, 0, 681, 0, 896, 897, 0, 680, 684, 679,
	0, 685, 0, 0, 0, 676, 677, 678, 682, 0,
	912, 0, 0, 0, 0, 686, 0, 0, 0, 0,
	1257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 907, 0,
	811, 811, 811, 0, 0, 473, 0, 0, 541, 0,
	927, 0, 551, 552, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 0, 675, 0, 0,
	0, 683, 940, 681, 0, 0, 0, 944, 680, 684,
	679, 0, 685, 0, 0, 0, 676, 677, 678, 682,
	0, 0, 0, 0, 0, 0, 686, 0, 1368, 0,
	0, 985, 0, 542, 543, 544, 545, 546, 547, 0,
	1020, 1021, 1022, 542, 543, 544, 545, 546, 547, 1014,
	1015, 1016, 1017, 1018, 1019, 0, 0, 0, 1000, 0,
	0, 0, 0, 473, 1005, 1006, 541, 0, 1011, 0,
	551, 552, 553, 0, 0, 0, 907, 907, 0, 0,
	907, 811, 674, 0, 0, 1039, 1040, 0, 0, 683,
	0, 681, 0, 0, 0, 461, 680, 684, 679, 0,
	685, 0, 0, 0, 676, 677, 678, 682, 0, 0,
	0, 0, 1398, 1399, 686, 0, 1401, 0, 1020, 1021,
	1022, 0, 0, 0, 0, 0, 0, 1014, 1015, 1016,
	1017, 1018, 1019, 0, 0, 0, 0, 0, 0, 0,
	1079, 0, 1080, 0, 0, 0, 0, 0, 1020, 1021,
	1022, 0, 0, 0, 0, 0, 0, 1014, 1015, 1016,
	1017, 1018, 1019, 0, 1095, 1096, 0, 0, 0, 1020,
	1021, 1022, 0, 0, 0, 1100, 0, 0, 1014, 1015,
	1016, 1017, 1018, 1019, 0, 0, 0, 0, 0, 0,
	0, 1114, 0, 1115, 0, 0, 811, 0, 0, 0,
	811, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1166, 1167, 1168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 542, 543, 544, 545, 546, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1180,
	0, 0, 0, 0, 0, 0, 560, 0, 0, 0,
	1185, 0, 0, 0, 0, 548, 549, 550, 0, 0,
	0, 1201, 0, 0, 542, 543, 544, 545, 546, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1151, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 549, 550, 0, 0, 0, 0, 0, 1262,
	542, 543, 544, 545, 546, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 549, 550, 0, 0, 816, 0, 0, 0, 542,
	543, 544, 545, 546, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 0, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 549, 550, 0, 0, 0, 0, 785, 0,
	542, 543, 544, 545, 546, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 550, 0, 0, 0, 0, 0, 0, 542, 543,
	544, 545, 546, 547, 0, 0, 570, 0, 0, 0,
	0, 0, 0, 473, 0, 0, 541, 0, 0, 1465,
	551, 552, 553, 575, 59, 568, 76, 492, 588, 126,
	163, 385, 554, 619, 225, 555, 278, 282, 647, 565,
	583, 562, 595, 598, 134, 603, 561, 566, 559, 620,
	567, 638, 351, 644, 556, 557, 558, 563, 422, 375,
	194, 632, 581, 636, 474, 629, 607, 645, 623, 634,
	616, 621, 0, 72, 609, 610, 613, 622, 501, 498,
	502, 508, 496, 506, 493, 504, 642, 269, 202, 0,
	426, 298, 71, 118, 105, 147, 189, 306, 580, 597,
	179, 355, 114, 204, 628, 93, 238, 641, 330, 201,
	635, 313, 333, 599, 222, 99, 261, 320, 321, 490,
	495, 587, 511, 577, 103, 104, 227, 85, 235, 438,
	403, 291, 248, 246, 605, 213, 270, 433, 579, 0,
	133, 0, 128, 226, 370, 91, 349, 264, 231, 183,
	294, 325, 130, 115, 116, 159, 263, 149, 101, 360,
	400, 404, 402, 398, 395, 399, 396, 397, 401, 150,
	394, 0, 368, 378, 412, 392, 420, 377, 417, 387,
	125, 416, 381, 380, 427, 407, 408, 361, 423, 393,
	391, 384, 383, 379, 643, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 60, 576, 61, 62, 63,
	65, 66, 67, 489, 68, 69, 70, 73, 74, 75,
	77, 78, 79, 80, 81, 82, 83, 84, 382, 491,
	86, 87, 88, 89, 90, 92, 94, 95, 96, 97,
	98, 100, 102, 589, 590, 591, 494, 592, 593, 594,
	106, 107, 108, 109, 110, 111, 596, 112, 113, 117,
	119, 120, 121, 122, 123, 124, 127, 600, 129, 131,
	601, 132, 135, 602, 136, 137, 138, 139, 140, 141,
	142, 143, 386, 144, 604, 145, 146, 148, 606, 151,
	152, 153, 154, 155, 608, 156, 388, 389, 157, 158,
	160, 161, 162, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 611, 176, 177, 178, 180,
	612, 181, 182, 185, 186, 187, 188, 614, 190, 405,
	615, 191, 192, 193, 617, 618, 195, 196, 197, 198,
	199, 200, 203, 406, 205, 206, 207, 208, 209, 210,
	211, 212, 214, 215, 216, 217, 218, 219, 220, 409,
	410, 221, 223, 224, 411, 413, 414, 507, 239, 240,
	241, 242, 243, 244, 245, 247, 625, 249, 250, 251,
	415, 252, 253, 254, 255, 626, 256, 257, 258, 259,
	260, 262, 265, 266, 267, 268, 627, 271, 272, 273,
	274, 275, 276, 277, 279, 280, 281, 283, 284, 285,
	286, 287, 288, 289, 290, 418, 292, 293, 295, 296,
	297, 299, 300, 301, 302, 303, 304, 305, 630, 307,
	419, 308, 309, 310, 311, 312, 631, 314, 315, 316,
	317, 318, 319, 322, 323, 324, 326, 327, 421, 328,
	329, 633, 331, 332, 510, 334, 335, 336, 337, 338,
	637, 339, 340, 424, 341, 425, 342, 343, 344, 345,
	346, 347, 348, 350, 639, 640, 352, 353, 354, 356,
	357, 358, 359, 362, 363, 364, 365, 366, 646, 367,
	369, 371, 372, 428, 429, 430, 431, 432, 434, 435,
	436, 437, 373, 374, 390, 236, 230, 184, 228, 229,
	233, 234, 237, 624, 578, 582, 584, 585, 586, 0,
	560, 0, 0, 0, 0, 0, 0, 1008, 0, 548,
	549, 550, 0, 0, 0, 0, 0, 0, 542, 543,
	544, 545, 546, 547, 575, 59, 780, 76, 492, 588,
	126, 163, 385, 779, 619, 225, 783, 278, 282, 647,
	376, 583, 781, 595, 598, 134, 603, 497, 782, 503,
	620, 509, 638, 351, 644, 499, 500, 505, 64, 422,
	375, 194, 632, 581, 636, 232, 629, 607, 645, 623,
	634, 616, 621, 0, 72, 609, 610, 613, 622, 501,
	498, 502, 508, 496, 506, 493, 504, 642, 269, 202,
	0, 426, 298, 71, 118, 105, 147, 189, 306, 580,
	597, 179, 355, 114, 204, 628, 93, 238, 641, 330,
	201, 635, 313, 333, 599, 222, 99, 261, 320, 321,
	490, 495, 587, 511, 577, 103, 104, 227, 85, 235,
	438, 403, 291, 248, 246, 605, 213, 270, 433, 579,
	0, 133, 0, 128, 226, 370, 91, 349, 264, 231,
	183, 294, 325, 130, 115, 116, 159, 263, 149, 101,
	360, 400, 404, 402, 398, 395, 399, 396, 397, 401,
	150, 394, 0, 368, 378, 412, 392, 420, 377, 417,
	387, 125, 416, 381, 380, 427, 407, 408, 361, 423,
	393, 391, 384, 383, 379, 643, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 60, 576, 61, 62,
	63, 65, 66, 67, 489, 68, 69, 70, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 83, 84, 382,
	491, 86, 87, 88, 89, 90, 92, 94, 95, 96,
	97, 98, 100, 102, 589, 590, 591, 494, 592, 593,
	594, 106, 107, 108, 109, 110, 111, 596, 112, 113,
	117, 119, 120, 121, 122, 123, 124, 127, 600, 129,
	131, 601, 132, 135, 602, 136, 137, 138, 139, 140,
	141, 142, 143, 386, 144, 604, 145, 146, 148, 606,
	151, 152, 153, 154, 155, 608, 156, 388, 389, 157,
	158, 160, 161, 162, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 611, 176, 177, 178,
	180, 612, 181, 182, 185, 186, 187, 188, 614, 190,
	405, 615, 191, 192, 193, 617, 618, 195, 196, 197,
	198, 199, 200, 203, 406, 205, 206, 207, 208, 209,
	210, 211, 212, 214, 215, 216, 217, 218, 219, 220,
	409, 410, 221, 223, 224, 411, 413, 414, 507, 239,
	240, 241, 242, 243, 244, 245, 247, 625, 249, 250,
	251, 415, 252, 253, 254, 255, 626, 256, 257, 258,
	259, 260, 262, 265, 266, 267, 268, 627, 271, 272,
	273, 274, 275, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 418, 292, 293, 295,
	296, 297, 299, 300, 301, 302, 303, 304, 305, 630,
	307, 419, 308, 309, 310, 311, 312, 631, 314, 315,
	316, 317, 318, 319, 322, 323, 324, 326, 327, 421,
	328, 329, 633, 331, 332, 510, 334, 335, 336, 337,
	338, 637, 339, 340, 424, 341, 425, 342, 343, 344,
	345, 346, 347, 348, 350, 639, 640, 352, 353, 354,
	356, 357, 358, 359, 362, 363, 364, 365, 366, 646,
	367, 369, 371, 372, 428, 429, 430, 431, 432, 434,
	435, 436, 437, 373, 374, 390, 236, 230, 184, 228,
	229, 233, 234, 237, 624, 578, 582, 584, 585, 586,
	0, 0, 0, 0, 0, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 662, 575, 59, 780, 76, 492, 588, 126, 163,
	385, 779, 619, 225, 783, 278, 282, 647, 376, 583,
	781, 595, 598, 134, 603, 497, 782, 503, 620, 509,
	638, 351, 644, 499, 500, 505, 64, 422, 375, 194,
	632, 581, 636, 232, 629, 607, 645, 623, 634, 616,
	621, 0, 72, 609, 610, 613, 622, 501, 498, 502,
	508, 496, 506, 493, 504, 642, 269, 202, 0, 426,
	298, 71, 118, 105, 147, 189, 306, 580, 597, 179,
	355, 114, 204, 628, 93, 238, 641, 330, 201, 635,
	313, 333, 599, 222, 99, 261, 320, 321, 490, 495,
	587, 511, 577, 103, 104, 227, 85, 235, 438, 403,
	291, 248, 246, 605, 213, 270, 433, 579, 0, 133,
	0, 128, 226, 370, 91, 349, 264, 231, 183, 294,
	325, 130, 115, 116, 159, 263, 149, 101, 360, 400,
	404, 402, 398, 395, 399, 396, 397, 401, 150, 394,
	0, 368, 378, 412, 392, 420, 377, 417, 387, 125,
	416, 381, 380, 427, 407, 408, 361, 423, 393, 391,
	384, 383, 379, 643, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 60, 576, 61, 62, 63, 65,
	66, 67, 489, 68, 69, 70, 73, 74, 75, 77,
	78, 79, 80, 81, 82, 83, 84, 382, 491, 86,
	87, 88, 89, 90, 92, 94, 95, 96, 97, 98,
	100, 102, 589, 590, 591, 494, 592, 593, 594, 106,
	107, 108, 109, 110, 111, 596, 112, 113, 117, 119,
	120, 121, 122, 123, 124, 127, 600, 129, 131, 601,
	132, 135, 602, 136, 137, 138, 139, 140, 141, 142,
	143, 386, 144, 604, 145, 146, 148, 606, 151, 152,
	153, 154, 155, 608, 156, 388, 389, 157, 158, 160,
	161, 162, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 611, 176, 177, 178, 180, 612,
	181, 182, 185, 186, 187, 188, 614, 190, 405, 615,
	191, 192, 193, 617, 618, 195, 196, 197, 198, 199,
	200, 203, 406, 205, 206, 207, 208, 209, 210, 211,
	212, 214, 215, 216, 217, 218, 219, 220, 409, 410,
	221, 223, 224, 411, 413, 414, 507, 239, 240, 241,
	242, 243, 244, 245, 247, 625, 249, 250, 251, 415,
	252, 253, 254, 255, 626, 256, 257, 258, 259, 260,
	262, 265, 266, 267, 268, 627, 271, 272, 273, 274,
	275, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 418, 292, 293, 295, 296, 297,
	299, 300, 301, 302, 303, 304, 305, 630, 307, 419,
	308, 309, 310, 311, 312, 631, 314, 315, 316, 317,
	318, 319, 322, 323, 324, 326, 327, 421, 328, 329,
	633, 331, 332, 510, 334, 335, 336, 337, 338, 637,
	339, 340, 424, 341, 425, 342, 343, 344, 345, 346,
	347, 348, 350, 639, 640, 352, 353, 354, 356, 357,
	358, 359, 362, 363, 364, 365, 366, 646, 367, 369,
	371, 372, 428, 429, 430, 431, 432, 434, 435, 436,
	437, 373, 374, 390, 236, 230, 184, 228, 229, 233,
	234, 237, 624, 578, 582, 584, 585, 586, 1008, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 575, 59, 780, 76, 492,
	588, 126, 163, 385, 779, 619, 225, 783, 278, 282,
	647, 376, 583, 781, 595, 598, 134, 603, 497, 782,
	503, 620, 509, 638, 351, 644, 499, 500, 505, 64,
	422, 375, 194, 632, 581, 636, 232, 629, 607, 645,
	623, 634, 616, 621, 0, 72, 609, 610, 613, 622,
	501, 498, 502, 508, 496, 506, 493, 504, 642, 269,
	202, 0, 426, 298, 71, 118, 105, 147, 189, 306,
	580, 597, 179, 355, 114, 204, 628, 93, 238, 641,
	330, 201, 635, 313, 333, 599, 222, 99, 261, 320,
	321, 490, 495, 587, 511, 577, 103, 104, 227, 85,
	235, 438, 403, 291, 248, 246, 605, 213, 270, 433,
	579, 0, 133, 0, 128, 226, 370, 91, 349, 264,
	231, 183, 294, 325, 130, 115, 116, 159, 263, 149,
	101, 360, 400, 404, 402, 398, 395, 399, 396, 397,
	401, 150, 394, 0, 368, 378, 412, 392, 420, 377,
	417, 387, 125, 416, 381, 380, 427, 407, 408, 361,
	423, 393, 391, 384, 383, 379, 643, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 60, 576, 61,
	62, 63, 65, 66, 67, 489, 68, 69, 70, 73,
	74, 75, 77, 78, 79, 80, 81, 82, 83, 84,
	382, 491, 86, 87, 88, 89, 90, 92, 94, 95,
	96, 97, 98, 100, 102, 589, 590, 591, 494, 592,
	593, 594, 106, 107, 108, 109, 110, 111, 596, 112,
	113, 117, 119, 120, 121, 122, 123, 124, 127, 600,
	129, 131, 601, 132, 135, 602, 136, 137, 138, 139,
	140, 141, 142, 143, 386, 144, 604, 145, 146, 148,
	606, 151, 152, 153, 154, 155, 608, 156, 388, 389,
	157, 158, 160, 161, 162, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 611, 176, 177,
	178, 180, 612, 181, 182, 185, 186, 187, 188, 614,
	190, 405, 615, 191, 192, 193, 617, 618, 195, 196,
	197, 198, 199, 200, 203, 406, 205, 206, 207, 208,
	209, 210, 211, 212, 214, 215, 216, 217, 218, 219,
	220, 409, 410, 221, 223, 224, 411, 413, 414, 507,
	239, 240, 241, 242, 243, 244, 245, 247, 625, 249,
	250, 251, 415, 252, 253, 254, 255, 626, 256, 257,
	258, 259, 260, 262, 265, 266, 267, 268, 627, 271,
	272, 273, 274, 275, 276, 277, 279, 280, 281, 283,
	284, 285, 286, 287, 288, 289, 290, 418, 292, 293,
	295, 296, 297, 299, 300, 301, 302, 303, 304, 305,
	630, 307, 419, 308, 309, 310, 311, 312, 631, 314,
	315, 316, 317, 318, 319, 322, 323, 324, 326, 327,
	421, 328, 329, 633, 331, 332, 510, 334, 335, 336,
	337, 338, 637, 339, 340, 424, 341, 425, 342, 343,
	344, 345, 346, 347, 348, 350, 639, 640, 352, 353,
	354, 356, 357, 358, 359, 362, 363, 364, 365, 366,
	646, 367, 369, 371, 372, 428, 429, 430, 431, 432,
	434, 435, 436, 437, 373, 374, 390, 236, 230, 184,
	228, 229, 233, 234, 237, 624, 578, 582, 584, 585,
	586, 46, 0, 477, 485, 0, 0, 0, 473, 484,
	470, 0, 0, 0, 0, 0, 0, 0, 808, 59,
	0, 76, 492, 0, 126, 163, 385, 0, 466, 225,
	0, 278, 282, 0, 376, 0, 0, 0, 809, 134,
	480, 497, 0, 503, 481, 509, 479, 351, 0, 499,
	500, 505, 64, 422, 375, 194, 0, 0, 0, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 501, 498, 502, 508, 496, 506, 493,
	504, 0, 269, 202, 0, 426, 298, 71, 118, 105,
	147, 189, 306, 0, 0, 179, 355, 114, 204, 0,
	93, 238, 0, 330, 201, 0, 313, 333, 0, 222,
	99, 261, 320, 321, 490, 495, 0, 511, 0, 103,
	104, 227, 85, 235, 438, 403, 291, 248, 246, 0,
	213, 270, 433, 0, 0, 133, 0, 128, 226, 370,
	91, 349, 264, 231, 183, 294, 325, 130, 115, 116,
	159, 263, 149, 101, 360, 400, 404, 402, 398, 395,
	399, 396, 397, 401, 150, 394, 0, 368, 378, 412,
	392, 420, 377, 417, 387, 125, 416, 381, 380, 427,
	407, 408, 361, 423, 393, 391, 384, 383, 379, 807,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	60, 0, 61, 62, 63, 65, 66, 67, 489, 68,
	69, 70, 73, 74, 75, 77, 78, 79, 80, 81,
	82, 83, 84, 382, 491, 86, 87, 88, 89, 90,
	92, 94, 95, 96, 97, 98, 100, 102, 0, 0,
	0, 494, 0, 0, 0, 106, 107, 108, 109, 110,
	111, 0, 112, 113, 117, 119, 120, 121, 122, 123,
	124, 127, 0, 129, 131, 0, 132, 135, 0, 136,
	137, 138, 139, 140, 141, 142, 143, 386, 144, 0,
	145, 146, 148, 0, 151, 152, 153, 154, 155, 0,
	156, 388, 389, 157, 158, 160, 161, 162, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	0, 176, 177, 178, 180, 0, 181, 182, 185, 186,
	187, 188, 0, 190, 405, 0, 191, 192, 193, 0,
	0, 195, 196, 197, 198, 199, 200, 203, 406, 205,
	206, 207, 208, 209, 210, 211, 212, 214, 215, 216,
	217, 218, 219, 220, 409, 410, 221, 223, 224, 411,
	413, 414, 507, 239, 240, 241, 242, 243, 244, 245,
	247, 0, 249, 250, 251, 415, 252, 253, 254, 255,
	0, 256, 257, 258, 259, 260, 262, 265, 266, 267,
	268, 0, 271, 272, 273, 274, 275, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	418, 292, 293, 295, 296, 297, 299, 300, 301, 302,
	303, 304, 305, 0, 307, 419, 308, 309, 310, 311,
	312, 0, 314, 315, 316, 317, 318, 319, 322, 323,
	324, 326, 327, 421, 328, 329, 0, 331, 332, 510,
	334, 335, 336, 337, 338, 0, 339, 340, 424, 341,
	425, 342, 343, 344, 345, 346, 347, 348, 350, 0,
	0, 352, 353, 354, 356, 357, 358, 359, 362, 363,
	364, 365, 366, 0, 367, 369, 371, 372, 428, 429,
	430, 431, 432, 434, 435, 436, 437, 373, 374, 390,
	236, 230, 184, 228, 229, 233, 234, 237, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 477,
	485, 0, 0, 0, 473, 484, 470, 0, 0, 0,
	471, 805, 0, 464, 465, 59, 0, 76, 492, 0,
	126, 163, 385, 0, 466, 225, 0, 278, 282, 0,
	376, 0, 0, 0, 0, 134, 480, 497, 0, 503,
	481, 509, 479, 351, 0, 499, 500, 505, 64, 422,
	375, 194, 0, 0, 0, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 501,
	498, 502, 508, 496, 506, 493, 504, 0, 269, 202,
	0, 426, 298, 71, 118, 105, 147, 189, 306, 0,
	0, 179, 355, 114, 204, 0, 93, 238, 0, 330,
	201, 0, 313, 333, 0, 222, 99, 261, 320, 321,
	490, 495, 0, 511, 0, 103, 104, 227, 85, 235,
	438, 403, 291, 248, 246, 0, 213, 270, 433, 0,
	0, 133, 0, 128, 226, 370, 91, 349, 264, 231,
	183, 294, 325, 130, 115, 116, 159, 263, 149, 101,
	360, 400, 404, 402, 398, 395, 399, 396, 397, 401,
	150, 394, 0, 368, 378, 412, 392, 420, 377, 417,
	387, 125, 416, 381, 380, 427, 407, 408, 361, 423,
	393, 391, 384, 383, 379, 0, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 60, 0, 61, 62,
	63, 65, 66, 67, 489, 68, 69, 70, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 83, 84, 382,
	491, 86, 87, 88, 89, 90, 92, 94, 95, 96,
	97, 98, 100, 102, 0, 0, 0, 494, 0, 0,
	0, 106, 107, 108, 109, 110, 111, 0, 112, 113,
	117, 119, 120, 121, 122, 123, 124, 127, 0, 129,
	131, 0, 132, 135, 0, 136, 137, 138, 139, 140,
	141, 142, 143, 386, 144, 0, 145, 146, 148, 0,
	151, 152, 153, 154, 155, 0, 156, 388, 389, 157,
	158, 160, 161, 162, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 0, 176, 177, 178,
	180, 0, 181, 182, 185, 186, 187, 188, 0, 190,
	405, 0, 191, 192, 193, 0, 0, 195, 196, 197,
	198, 199, 200, 203, 406, 205, 206, 207, 208, 209,
	210, 211, 212, 214, 215, 216, 217, 218, 219, 220,
	409, 410, 221, 223, 224, 411, 413, 414, 507, 239,
	240, 241, 242, 243, 244, 245, 247, 0, 249, 250,
	251, 415, 252, 253, 254, 255, 0, 256, 257, 258,
	259, 260, 262, 265, 266, 267, 268, 0, 271, 272,
	273, 274, 275, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 418, 292, 293, 295,
	296, 297, 299, 300, 301, 302, 303, 304, 305, 0,
	307, 419, 308, 309, 310, 311, 312, 0, 314, 315,
	316, 317, 318, 319, 322, 323, 324, 326, 327, 421,
	328, 329, 0, 331, 332, 510, 334, 335, 336, 337,
	338, 0, 339, 340, 424, 341, 425, 342, 343, 344,
	345, 346, 347, 348, 350, 0, 0, 352, 353, 354,
	356, 357, 358, 359, 362, 363, 364, 365, 366, 0,
	367, 369, 371, 372, 428, 429, 430, 431, 432, 434,
	435, 436, 437, 373, 374, 390, 236, 230, 184, 228,
	229, 233, 234, 237, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 46, 0, 477, 485, 0, 0,
	0, 473, 484, 470, 0, 0, 471, 0, 0, 464,
	465, 462, 59, 0, 76, 492, 0, 126, 163, 385,
	0, 466, 225, 0, 278, 282, 0, 376, 0, 0,
	0, 0, 134, 480, 497, 0, 503, 481, 509, 479,
	351, 0, 499, 500, 505, 64, 422, 375, 194, 0,
	0, 0, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 501, 498, 502, 508,
	496, 506, 493, 504, 0, 269, 202, 0, 426, 298,
	71, 118, 105, 147, 189, 306, 0, 0, 179, 355,
	114, 204, 0, 93, 238, 0, 330, 201, 0, 313,
	333, 0, 222, 99, 261, 320, 321, 490, 495, 0,
	511, 0, 103, 104, 227, 85, 235, 438, 403, 291,
	248, 246, 0, 213, 270, 433, 0, 0, 133, 0,
	128, 226, 370, 91, 349, 264, 231, 183, 294, 325,
	130, 115, 116, 159, 263, 149, 101, 360, 400, 404,
	402, 398, 395, 399, 396, 397, 401, 150, 394, 0,
	368, 378, 412, 392, 420, 377, 417, 387, 125, 416,
	381, 380, 427, 407, 408, 361, 423, 393, 391, 384,
	383, 379, 1033, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 60, 0, 61, 62, 63, 65, 66,
	67, 489, 68, 69, 70, 73, 74, 75, 77, 78,
	79, 80, 81, 82, 83, 84, 382, 491, 86, 87,
	88, 89, 90, 92, 94, 95, 96, 97, 98, 100,
	102, 0, 0, 0, 494, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 0, 112, 113, 117, 119, 120,
	121, 122, 123, 124, 127, 0, 129, 131, 0, 132,
	135, 0, 136, 137, 138, 139, 140, 141, 142, 143,
	386, 144, 0, 145, 146, 148, 0, 151, 152, 153,
	154, 155, 0, 156, 388, 389, 157, 158, 160, 161,
	162, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 0, 176, 177, 178, 180, 0, 181,
	182, 185, 186, 187, 188, 0, 190, 405, 0, 191,
	192, 193, 0, 0, 195, 196, 197, 198, 199, 200,
	203, 406, 205, 206, 207, 208, 209, 210, 211, 212,
	214, 215, 216, 217, 218, 219, 220, 409, 410, 221,
	223, 224, 411, 413, 414, 507, 239, 240, 241, 242,
	243, 244, 245, 247, 0, 249, 250, 251, 415, 252,
	253, 254, 255, 0, 256, 257, 258, 259, 260, 262,
	265, 266, 267, 268, 0, 271, 272, 273, 274, 275,
	276, 277, 279, 280, 281, 283, 284, 285, 286, 287,
	288, 289, 290, 418, 292, 293, 295, 296, 297, 299,
	300, 301, 302, 303, 304, 305, 0, 307, 419, 308,
	309, 310, 311, 312, 0, 314, 315, 316, 317, 318,
	319, 322, 323, 324, 326, 327, 421, 328, 329, 0,
	331, 332, 510, 334, 335, 336, 337, 338, 0, 339,
	340, 424, 341, 425, 342, 343, 344, 345, 346, 347,
	348, 350, 0, 0, 352, 353, 354, 356, 357, 358,
	359, 362, 363, 364, 365, 366, 0, 367, 369, 371,
	372, 428, 429, 430, 431, 432, 434, 435, 436, 437,
	373, 374, 390, 236, 230, 184, 228, 229, 233, 234,
	237, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 0, 477, 485, 0, 0, 0, 473, 484, 470,
	0, 0, 0, 471, 0, 0, 464, 465, 59, 0,
	76, 492, 0, 126, 163, 385, 0, 466, 225, 0,
	278, 282, 0, 376, 0, 0, 0, 0, 134, 480,
	497, 0, 503, 481, 509, 479, 351, 0, 499, 500,
	505, 64, 422, 375, 194, 0, 0, 0, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 501, 498, 502, 508, 496, 506, 493, 504,
	0, 269, 202, 0, 426, 298, 71, 118, 105, 147,
	189, 306, 0, 0, 179, 355, 114, 204, 0, 93,
	238, 0, 330, 201, 0, 313, 333, 0, 222, 99,
	261, 320, 321, 490, 495, 0, 511, 0, 103, 104,
	227, 85, 235, 438, 403, 291, 248, 246, 0, 213,
	270, 433, 0, 0, 133, 0, 128, 226, 370, 91,
	349, 264, 231, 183, 294, 325, 130, 115, 116, 159,
	263, 149, 101, 360, 400, 404, 402, 398, 395, 399,
	396, 397, 401, 150, 394, 0, 368, 378, 412, 392,
	420, 377, 417, 387, 125, 416, 381, 380, 427, 407,
	408, 361, 423, 393, 391, 384, 383, 379, 0, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 60,
	0, 61, 62, 63, 65, 66, 67, 489, 68, 69,
	70, 73, 74, 75, 77, 78, 79, 80, 81, 82,
	83, 84, 382, 491, 86, 87, 88, 89, 90, 92,
	94, 95, 96, 97, 98, 100, 102, 0, 0, 0,
	494, 0, 0, 0, 106, 107, 108, 109, 110, 111,
	0, 112, 113, 117, 119, 120, 121, 122, 123, 124,
	127, 0, 129, 131, 0, 132, 135, 0, 136, 137,
	138, 139, 140, 141, 142, 143, 386, 144, 0, 145,
	146, 148, 0, 151, 152, 153, 154, 155, 0, 156,
	388, 389, 157, 158, 160, 161, 162, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 0,
	176, 177, 178, 180, 0, 181, 182, 185, 186, 187,
	188, 0, 190, 405, 0, 191, 192, 193, 0, 0,
	195, 196, 197, 198, 199, 200, 203, 406, 205, 206,
	207, 208, 209, 210, 211, 212, 214, 215, 216, 217,
	218, 219, 220, 409, 410, 221, 223, 224, 411, 413,
	414, 507, 239, 240, 241, 242, 243, 244, 245, 247,
	0, 249, 250, 251, 415, 252, 253, 254, 255, 0,
	256, 257, 258, 259, 260, 262, 265, 266, 267, 268,
	0, 271, 272, 273, 274, 275, 276, 277, 279, 280,
	281, 283, 284, 285, 286, 287, 288, 289, 290, 418,
	292, 293, 295, 296, 297, 299, 300, 301, 302, 303,
	304, 305, 0, 307, 419, 308, 309, 310, 311, 312,
	0, 314, 315, 316, 317, 318, 319, 322, 323, 324,
	326, 327, 421, 328, 329, 0, 331, 332, 510, 334,
	335, 336, 337, 338, 0, 339, 340, 424, 341, 425,
	342, 343, 344, 345, 346, 347, 348, 350, 0, 0,
	352, 353, 354, 356, 357, 358, 359, 362, 363, 364,
	365, 366, 0, 367, 369, 371, 372, 428, 429, 430,
	431, 432, 434, 435, 436, 437, 373, 374, 390, 236,
	230, 184, 228, 229, 233, 234, 237, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 46, 0, 477, 485,
	0, 0, 0, 473, 484, 470, 0, 0, 0, 471,
	0, 0, 464, 465, 59, 0, 76, 492, 0, 126,
	163, 385, 0, 466, 225, 0, 278, 282, 0, 376,
	0, 0, 0, 0, 134, 480, 497, 0, 503, 481,
	509, 479, 351, 0, 499, 500, 505, 64, 422, 375,
	194, 0, 0, 0, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 501, 498,
	502, 508, 496, 506, 493, 504, 0, 269, 202, 0,
	426, 298, 71, 118, 105, 147, 189, 306, 0, 0,
	179, 355, 114, 204, 0, 93, 238, 0, 330, 201,
	0, 313, 333, 0, 222, 99, 261, 320, 321, 490,
	495, 0, 511, 0, 945, 104, 227, 85, 235, 438,
	403, 291, 248, 246, 0, 213, 270, 433, 0, 0,
	133, 0, 128, 226, 370, 91, 349, 264, 231, 183,
	294, 325, 130, 115, 116, 159, 263, 149, 101, 360,
	400, 404, 402, 398, 395, 399, 396, 397, 401, 150,
	394, 0, 368, 378, 412, 392, 420, 377, 417, 387,
	125, 416, 381, 380, 427, 407, 408, 361, 423, 393,
	391, 384, 383, 379, 0, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 60, 0, 61, 62, 63,
	65, 66, 67, 489, 68, 69, 70, 73, 74, 75,
	77, 78, 79, 80, 81, 82, 83, 84, 382, 491,
	86, 87, 88, 89, 90, 92, 94, 95, 96, 97,
	98, 100, 102, 0, 0, 0, 494, 0, 0, 0,
	106, 107, 108, 109, 110, 111, 0, 112, 113, 117,
	119, 120, 121, 122, 123, 124, 127, 0, 129, 131,
	0, 132, 135, 0, 136, 137, 138, 139, 140, 141,
	142, 143, 386, 144, 0, 145, 146, 148, 0, 151,
	152, 153, 154, 155, 0, 156, 388, 389, 157, 158,
	160, 161, 162, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 0, 176, 177, 178, 180,
	0, 181, 182, 185, 186, 187, 188, 0, 190, 405,
	0, 191, 192, 193, 0, 0, 195, 196, 197, 198,
	199, 200, 203, 406, 205, 206, 207, 208, 209, 210,
	211, 212, 214, 215, 216, 217, 218, 219, 220, 409,
	410, 221, 223, 224, 411, 413, 414, 507, 239, 240,
	241, 242, 243, 244, 245, 247, 0, 249, 250, 251,
	415, 252, 253, 254, 255, 0, 256, 257, 258, 259,
	260, 262, 265, 266, 267, 268, 0, 271, 272, 273,
	274, 275, 276, 277, 279, 280, 281, 283, 284, 285,
	286, 287, 288, 289, 290, 418, 292, 293, 295, 296,
	297, 299, 300, 301, 302, 303, 304, 305, 0, 307,
	419, 308, 309, 310, 311, 312, 0, 314, 315, 316,
	317, 318, 319, 322, 323, 324, 326, 327, 421, 328,
	329, 0, 331, 332, 510, 334, 335, 336, 337, 338,
	0, 339, 340, 424, 341, 425, 342, 343, 344, 345,
	346, 347, 348, 350, 0, 0, 352, 353, 354, 356,
	357, 358, 359, 362, 363, 364, 365, 366, 0, 367,
	369, 371, 372, 428, 429, 430, 431, 432, 434, 435,
	436, 437, 373, 374, 390, 236, 230, 184, 228, 229,
	233, 234, 237, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 0, 477, 485, 0, 0, 0, 0,
	484, 470, 0, 0, 0, 471, 0, 0, 464, 465,
	59, 0, 76, 492, 0, 126, 163, 385, 0, 0,
	225, 0, 278, 282, 0, 376, 0, 0, 1200, 0,
	134, 480, 497, 0, 503, 481, 509, 479, 351, 0,
	499, 500, 505, 64, 422, 375, 194, 0, 0, 0,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 501, 498, 502, 508, 496, 506,
	493, 504, 0, 269, 202, 0, 426, 298, 71, 118,
	105, 147, 189, 306, 0, 0, 179, 355, 114, 204,
	0, 93, 238, 0, 330, 201, 0, 313, 333, 0,
	222, 99, 261, 320, 321, 490, 495, 0, 511, 0,
	103, 104, 227, 85, 235, 438, 403, 291, 248, 246,
	0, 213, 270, 433, 0, 0, 133, 0, 128, 226,
	370, 91, 349, 264, 231, 183, 294, 325, 130, 115,
	116, 159, 263, 149, 101, 360, 400, 404, 402, 398,
	395, 399, 396, 397, 401, 150, 394, 0, 368, 378,
	412, 392, 420, 377, 417, 387, 125, 416, 381, 380,
	427, 407, 408, 361, 423, 393, 391, 384, 383, 379,
	0, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 60, 0, 61, 62, 63, 65, 66, 67, 489,
	68, 69, 70, 73, 74, 75, 77, 78, 79, 80,
	81, 82, 83, 84, 382, 491, 86, 87, 88, 89,
	90, 92, 94, 95, 96, 97, 98, 100, 102, 0,
	0, 0, 494, 0, 0, 0, 106, 107, 108, 109,
	110, 111, 0, 112, 113, 117, 119, 120, 121, 122,
	123, 124, 127, 0, 129, 131, 0, 132, 135, 0,
	136, 137, 138, 139, 140, 141, 142, 143, 386, 144,
	0, 145, 146, 148, 0, 151, 152, 153, 154, 155,
	0, 156, 388, 389, 157, 158, 160, 161, 162, 164,
	165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 0, 176, 177, 178, 180, 0, 181, 182, 185,
	186, 187, 188, 0, 190, 405, 0, 191, 192, 193,
	0, 0, 195, 196, 197, 198, 199, 200, 203, 406,
	205, 206, 207, 208, 209, 210, 211, 212, 214, 215,
	216, 217, 218, 219, 220, 409, 410, 221, 223, 224,
	411, 413, 414, 507, 239, 240, 241, 242, 243, 244,
	245, 247, 0, 249, 250, 251, 415, 252, 253, 254,
	255, 0, 256, 257, 258, 259, 260, 262, 265, 266,
	267, 268, 0, 271, 272, 273, 274, 275, 276, 277,
	279, 280, 281, 283, 284, 285, 286, 287, 288, 289,
	290, 418, 292, 293, 295, 296, 297, 299, 300, 301,
	302, 303, 304, 305, 0, 307, 419, 308, 309, 310,
	311, 312, 0, 314, 315, 316, 317, 318, 319, 322,
	323, 324, 326, 327, 421, 328, 329, 0, 331, 332,
	510, 334, 335, 336, 337, 338, 0, 339, 340, 424,
	341, 425, 342, 343, 344, 345, 346, 347, 348, 350,
	0, 0, 352, 353, 354, 356, 357, 358, 359, 362,
	363, 364, 365, 366, 0, 367, 369, 371, 372, 428,
	429, 430, 431, 432, 434, 435, 436, 437, 373, 374,
	390, 236, 230, 184, 228, 229, 233, 234, 237, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 0,
	477, 485, 0, 0, 0, 0, 484, 470, 0, 0,
	0, 471, 0, 0, 908, 909, 59, 0, 76, 492,
	0, 126, 163, 385, 0, 0, 225, 0, 278, 282,
	0, 376, 0, 0, 0, 0, 134, 480, 497, 0,
	503, 481, 509, 479, 351, 0, 499, 500, 505, 64,
	422, 375, 194, 0, 0, 0, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	501, 498, 502, 508, 496, 506, 493, 504, 0, 269,
	202, 0, 426, 298, 71, 118, 105, 147, 189, 306,
	0, 0, 179, 355, 114, 204, 0, 93, 238, 0,
	330, 201, 0, 313, 333, 0, 222, 99, 261, 320,
	321, 490, 495, 0, 511, 0, 103, 104, 227, 85,
	235, 438, 403, 291, 248, 246, 0, 213, 270, 433,
	0, 0, 133, 0, 128, 226, 370, 91, 349, 264,
	231, 183, 294, 325, 130, 115, 116, 159, 263, 149,
	101, 360, 400, 404, 402, 398, 395, 399, 396, 397,
	401, 150, 394, 0, 368, 378, 412, 392, 420, 377,
	417, 387, 125, 416, 381, 380, 427, 407, 408, 361,
	423, 393, 391, 384, 383, 379, 0, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 60, 0, 61,
	62, 63, 65, 66, 67, 489, 68, 69, 70, 73,
	74, 75, 77, 78, 79, 80, 81, 82, 83, 84,
	382, 491, 86, 87, 88, 89, 90, 92, 94, 95,
	96, 97, 98, 100, 102, 0, 0, 0, 494, 0,
	0, 0, 106, 107, 108, 109, 110, 111, 0, 112,
	113, 117, 119, 120, 121, 122, 123, 124, 127, 0,
	129, 131, 0, 132, 135, 0, 136, 137, 138, 139,
	140, 141, 142, 143, 386, 144, 0, 145, 146, 148,
	0, 151, 152, 153, 154, 155, 0, 156, 388, 389,
	157, 158, 160, 161, 162, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 0, 176, 177,
	178, 180, 0, 181, 182, 185, 186, 187, 188, 0,
	190, 405, 0, 191, 192, 193, 0, 0, 195, 196,
	197, 198, 199, 200, 203, 406, 205, 206, 207, 208,
	209, 210, 211, 212, 214, 215, 216, 217, 218, 219,
	220, 409, 410, 221, 223, 224, 411, 413, 414, 507,
	239, 240, 241, 242, 243, 244, 245, 247, 0, 249,
	250, 251, 415, 252, 253, 254, 255, 0, 256, 257,
	258, 259, 260, 262, 265, 266, 267, 268, 0, 271,
	272, 273, 274, 275, 276, 277, 279, 280, 281, 283,
	284, 285, 286, 287, 288, 289, 290, 418, 292, 293,
	295, 296, 297, 299, 300, 301, 302, 303, 304, 305,
	0, 307, 419, 308, 309, 310, 311, 312, 0, 314,
	315, 316, 317, 318, 319, 322, 323, 324, 326, 327,
	421, 328, 329, 0, 331, 332, 510, 334, 335, 336,
	337, 338, 0, 339, 340, 424, 341, 425, 342, 343,
	344, 345, 346, 347, 348, 350, 0, 0, 352, 353,
	354, 356, 357, 358, 359, 362, 363, 364, 365, 366,
	0, 367, 369, 371, 372, 428, 429, 430, 431, 432,
	434, 435, 436, 437, 373, 374, 390, 236, 230, 184,
	228, 229, 233, 234, 237, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 46, 0, 477, 485, 0, 0,
	0, 0, 484, 470, 0, 0, 0, 471, 0, 0,
	908, 909, 59, 0, 76, 492, 0, 126, 163, 385,
	0, 0, 225, 0, 278, 282, 0, 376, 0, 0,
	0, 0, 134, 480, 497, 0, 503, 481, 509, 479,
	351, 0, 499, 500, 505, 64, 422, 375, 194, 0,
	0, 0, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 501, 498, 502, 508,
	496, 506, 493, 504, 0, 269, 202, 0, 426, 298,
	71, 118, 105, 147, 189, 306, 0, 0, 179, 355,
	114, 204, 0, 93, 238, 0, 330, 201, 0, 313,
	333, 0, 222, 99, 261, 320, 321, 490, 495, 0,
	511, 0, 103, 104, 227, 85, 235, 438, 403, 291,
	248, 246, 0, 213, 270, 433, 0, 0, 133, 0,
	128, 226, 370, 91, 349, 264, 231, 183, 294, 325,
	130, 115, 116, 159, 263, 149, 101, 360, 400, 404,
	402, 398, 395, 399, 396, 397, 401, 150, 394, 0,
	368, 378, 412, 392, 420, 377, 417, 387, 125, 416,
	381, 380, 427, 407, 408, 361, 423, 393, 391, 384,
	383, 379, 0, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 60, 0, 61, 62, 63, 65, 66,
	67, 489, 68, 69, 70, 73, 74, 75, 77, 78,
	79, 80, 81, 82, 83, 84, 382, 491, 86, 87,
	88, 89, 90, 92, 94, 95, 96, 97, 98, 100,
	102, 0, 0, 0, 494, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 0, 112, 113, 117, 119, 120,
	121, 122, 123, 124, 127, 0, 129, 131, 0, 132,
	135, 0, 136, 137, 138, 139, 140, 141, 142, 143,
	386, 144, 0, 145, 146, 148, 0, 151, 152, 153,
	154, 155, 0, 156, 388, 389, 157, 158, 160, 161,
	162, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 0, 176, 177, 178, 180, 0, 181,
	182, 185, 186, 187, 188, 0, 190, 405, 0, 191,
	192, 193, 0, 0, 195, 196, 197, 198, 199, 200,
	203, 406, 205, 206, 207, 208, 209, 210, 211, 212,
	214, 215, 216, 217, 218, 219, 220, 409, 410, 221,
	223, 224, 411, 413, 414, 507, 239, 240, 241, 242,
	243, 244, 245, 247, 0, 249, 250, 251, 415, 252,
	253, 254, 255, 0, 256, 257, 258, 259, 260, 262,
	265, 266, 267, 268, 0, 271, 272, 273, 274, 275,
	276, 277, 279, 280, 281, 283, 284, 285, 286, 287,
	288, 289, 290, 418, 292, 293, 295, 296, 297, 299,
	300, 301, 302, 303, 304, 305, 0, 307, 419, 308,
	309, 310, 311, 312, 0, 314, 315, 316, 317, 318,
	319, 322, 323, 324, 326, 327, 421, 328, 329, 0,
	331, 332, 510, 334, 335, 336, 337, 338, 0, 339,
	340, 424, 341, 425, 342, 343, 344, 345, 346, 347,
	348, 350, 0, 0, 352, 353, 354, 356, 357, 358,
	359, 362, 363, 364, 365, 366, 0, 367, 369, 371,
	372, 428, 429, 430, 431, 432, 434, 435, 436, 437,
	373, 374, 390, 236, 230, 184, 228, 229, 233, 234,
	237, 46, 0, 477, 485, 0, 0, 0, 0, 484,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 76, 492, 471, 126, 163, 385, 0, 0, 225,
	0, 278, 282, 0, 376, 0, 0, 0, 0, 134,
	480, 497, 0, 503, 481, 509, 479, 351, 0, 499,
	500, 505, 64, 422, 375, 194, 0, 0, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 1196, 0,
	0, 0, 0, 501, 498, 502, 508, 496, 506, 493,
	504, 0, 269, 202, 0, 426, 298, 71, 118, 105,
	147, 189, 306, 0, 0, 179, 355, 114, 204, 0,
	93, 238, 0, 330, 201, 0, 313, 333, 0, 222,
	99, 261, 320, 321, 490, 495, 0, 511, 0, 103,
	104, 227, 85, 235, 438, 403, 291, 248, 246, 0,
	213, 270, 433, 0, 0, 133, 0, 128, 226, 370,
	91, 349, 264, 231, 183, 294, 325, 130, 115, 116,
	159, 263, 149, 101, 360, 400, 404, 402, 398, 395,
	399, 396, 397, 401, 150, 394, 0, 368, 378, 412,
	392, 420, 377, 417, 387, 125, 416, 381, 380, 427,
	407, 408, 361, 423, 393, 391, 384, 383, 379, 0,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	60, 0, 61, 62, 63, 65, 66, 67, 489, 68,
	69, 70, 73, 74, 75, 77, 78, 79, 80, 81,
	82, 83, 84, 382, 491, 86, 87, 88, 89, 90,
	92, 94, 95, 96, 97, 98, 100, 102, 0, 0,
	0, 494, 0, 0, 0, 106, 107, 108, 109, 110,
	111, 0, 112, 113, 117, 119, 120, 121, 122, 123,
	124, 127, 0, 129, 131, 0, 132, 135, 0, 136,
	137, 138, 139, 140, 141, 142, 143, 386, 144, 0,
	145, 146, 148, 0, 151, 152, 153, 154, 155, 0,
	156, 388, 389, 157, 158, 160, 161, 162, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	0, 176, 177, 178, 180, 0, 181, 182, 185, 186,
	187, 188, 0, 190, 405, 0, 191, 192, 193, 0,
	0, 195, 196, 197, 198, 199, 200, 203, 406, 205,
	206, 207, 208, 209, 210, 211, 212, 214, 215, 216,
	217, 218, 219, 220, 409, 410, 221, 223, 224, 411,
	413, 414, 507, 239, 240, 241, 242, 243, 244, 245,
	247, 0, 249, 250, 251, 415, 252, 253, 254, 255,
	0, 256, 257, 258, 259, 260, 262, 265, 266, 267,
	268, 0, 271, 272, 273, 274, 275, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	418, 292, 293, 295, 296, 297, 299, 300, 301, 302,
	303, 304, 305, 0, 307, 419, 308, 309, 310, 311,
	312, 0, 314, 315, 316, 317, 318, 319, 322, 323,
	324, 326, 327, 421, 328, 329, 0, 331, 332, 510,
	334, 335, 336, 337, 338, 0, 339, 340, 424, 341,
	425, 342, 343, 344, 345, 346, 347, 348, 350, 0,
	0, 352, 353, 354, 356, 357, 358, 359, 362, 363,
	364, 365, 366, 0, 367, 369, 371, 372, 428, 429,
	430, 431, 432, 434, 435, 436, 437, 373, 374, 390,
	236, 230, 184, 228, 229, 233, 234, 237, 46, 0,
	477, 485, 0, 0, 0, 0, 484, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 76, 492,
	471, 126, 163, 385, 0, 0, 225, 0, 278, 282,
	0, 376, 0, 0, 0, 0, 134, 480, 497, 0,
	503, 481, 509, 479, 351, 0, 499, 500, 505, 64,
	422, 375, 194, 0, 0, 0, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	501, 498, 502, 508, 496, 506, 493, 504, 0, 269,
	202, 0, 426, 298, 71, 118, 105, 147, 189, 306,
	0, 0, 179, 355, 114, 204, 0, 93, 238, 0,
	330, 201, 0, 313, 333, 0, 222, 99, 261, 320,
	321, 490, 495, 0, 511, 0, 103, 104, 227, 85,
	235, 438, 403, 291, 248, 246, 0, 213, 270, 1077,
	0, 0, 133, 0, 128, 226, 370, 91, 349, 264,
	231, 183, 294, 325, 130, 115, 116, 159, 263, 149,
	101, 360, 400, 404, 402, 398, 395, 399, 396, 397,
	401, 150, 394, 0, 368, 378, 412, 392, 420, 377,
	417, 387, 125, 416, 381, 380, 427, 407, 408, 361,
	423, 393, 391, 384, 383, 379, 0, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 60, 0, 61,
	62, 63, 65, 66, 67, 489, 68, 69, 70, 73,
	74, 75, 77, 78, 79, 80, 81, 82, 83, 84,
	382, 491, 86, 87, 88, 89, 90, 92, 94, 95,
	96, 97, 98, 100, 102, 0, 0, 0, 494, 0,
	0, 0, 106, 107, 108, 109, 110, 111, 0, 112,
	113, 117, 119, 120, 121, 122, 123, 124, 127, 0,
	129, 131, 0, 132, 135, 0, 136, 137, 138, 139,
	140, 141, 142, 143, 386, 144, 0, 145, 146, 148,
	0, 151, 152, 153, 154, 155, 0, 156, 388, 389,
	157, 158, 160, 161, 162, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 0, 176, 177,
	178, 180, 0, 181, 182, 185, 186, 187, 188, 0,
	190, 405, 0, 191, 192, 193, 0, 0, 195, 196,
	197, 198, 199, 200, 203, 406, 205, 206, 207, 208,
	209, 210, 211, 212, 214, 215, 216, 217, 218, 219,
	220, 409, 410, 221, 223, 224, 411, 413, 414, 507,
	239, 240, 241, 242, 243, 244, 245, 247, 0, 249,
	250, 251, 415, 252, 253, 254, 255, 0, 256, 257,
	258, 259, 260, 262, 265, 266, 267, 268, 0, 271,
	272, 273, 274, 275, 276, 277, 279, 280, 281, 283,
	284, 285, 286, 287, 288, 289, 290, 418, 292, 293,
	295, 296, 297, 299, 300, 301, 302, 303, 304, 305,
	0, 307, 419, 308, 309, 310, 311, 312, 0, 314,
	315, 316, 317, 318, 319, 322, 323, 324, 326, 327,
	421, 328, 329, 0, 331, 332, 510, 334, 335, 336,
	337, 338, 0, 339, 340, 424, 341, 425, 342, 343,
	344, 345, 346, 347, 348, 350, 0, 0, 352, 353,
	354, 356, 357, 358, 359, 362, 363, 364, 365, 366,
	0, 367, 369, 371, 372, 428, 429, 430, 431, 432,
	434, 435, 436, 437, 373, 374, 390, 236, 230, 184,
	228, 229, 233, 234, 237, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 76, 492, 471, 126, 163,
	385, 0, 0, 225, 0, 278, 282, 21, 376, 0,
	0, 0, 0, 134, 0, 497, 0, 503, 0, 509,
	0, 351, 0, 499, 500, 505, 64, 422, 375, 194,
	0, 0, 0, 232, 18, 0, 0, 45, 19, 0,
	0, 0, 72, 0, 0, 0, 0, 501, 498, 502,
	508, 496, 506, 493, 504, 0, 269, 202, 850, 834,
	298, 71, 118, 105, 147, 189, 306, 0, 0, 179,
	355, 114, 204, 0, 93, 238, 0, 330, 201, 0,
	313, 333, 0, 222, 99, 261, 320, 321, 490, 495,
	0, 511, 0, 103, 104, 227, 85, 235, 857, 858,
	856, 248, 246, 0, 213, 270, 433, 0, 0, 133,
	0, 128, 226, 370, 91, 349, 264, 231, 183, 294,
	325, 130, 115, 116, 159, 263, 149, 101, 360, 400,
	404, 402, 398, 395, 399, 396, 397, 401, 150, 394,
	0, 368, 378, 412, 392, 420, 377, 417, 387, 125,
	416, 381, 380, 427, 407, 408, 361, 423, 393, 391,
	384, 383, 379, 0, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 60, 0, 61, 62, 63, 65,
	66, 67, 489, 68, 69, 70, 73, 74, 75, 77,
	78, 79, 80, 81, 82, 83, 84, 382, 491, 86,
	87, 88, 89, 90, 92, 94, 95, 96, 97, 98,
	100, 102, 0, 0, 0, 494, 0, 0, 0, 106,
	107, 108, 109, 110, 111, 0, 112, 113, 117, 119,
	120, 121, 122, 123, 124, 127, 0, 129, 131, 0,
	132, 135, 0, 136, 137, 138, 139, 140, 141, 142,
	143, 386, 144, 0, 145, 146, 148, 0, 151, 152,
	153, 154, 155, 0, 156, 388, 389, 157, 158, 160,
	161, 162, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 0, 176, 177, 178, 180, 0,
	181, 182, 185, 186, 187, 188, 0, 190, 405, 0,
	191, 192, 193, 0, 0, 195, 196, 197, 198, 199,
	200, 203, 406, 205, 206, 207, 208, 209, 210, 211,
	212, 214, 215, 216, 217, 218, 219, 220, 409, 410,
	221, 223, 224, 411, 413, 414, 507, 239, 240, 241,
	242, 243, 244, 245, 247, 0, 249, 250, 251, 415,
	252, 253, 254, 255, 0, 256, 257, 258, 259, 260,
	262, 265, 266, 267, 268, 0, 271, 272, 273, 274,
	275, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 418, 292, 293, 295, 296, 297,
	299, 300, 301, 302, 303, 304, 305, 0, 307, 419,
	308, 309, 310, 311, 312, 0, 314, 315, 316, 317,
	318, 319, 322, 323, 324, 326, 327, 421, 328, 329,
	0, 331, 332, 510, 334, 335, 336, 337, 338, 0,
	339, 340, 424, 341, 425, 342, 343, 344, 345, 346,
	347, 348, 350, 0, 0, 352, 353, 354, 356, 357,
	358, 359, 362, 363, 364, 365, 366, 0, 367, 369,
	371, 372, 428, 429, 430, 431, 432, 434, 435, 436,
	437, 373, 374, 390, 236, 230, 184, 228, 229, 233,
	234, 237, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 22, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 76, 492, 862, 126, 163, 385, 0, 0,
	225, 0, 278, 282, 0, 376, 0, 0, 0, 0,
	134, 0, 497, 0, 503, 0, 509, 0, 351, 0,
	499, 500, 505, 64, 422, 375, 194, 0, 0, 0,
	232, 0, 0, 0, 45, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 501, 498, 502, 508, 496, 506,
	493, 504, 0, 269, 202, 850, 426, 298, 71, 118,
	105, 147, 189, 306, 0, 0, 179, 355, 114, 204,
	0, 93, 238, 0, 330, 201, 0, 313, 333, 0,
	222, 99, 261, 320, 321, 490, 495, 0, 511, 0,
	103, 104, 227, 85, 235, 857, 858, 856, 248, 246,
	0, 213, 270, 433, 0, 0, 133, 0, 128, 226,
	370, 91, 349, 264, 231, 183, 294, 325, 130, 115,
	116, 159, 263, 149, 101, 360, 400, 404, 402, 398,
	395, 399, 396, 397, 401, 150, 394, 0, 368, 378,
	412, 392, 420, 377, 417, 387, 125, 416, 381, 380,
	427, 407, 408, 361, 423, 393, 391, 384, 383, 379,
	0, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 60, 0, 61, 62, 63, 65, 66, 67, 489,
	68, 69, 70, 73, 74, 75, 77, 78, 79, 80,
	81, 82, 83, 84, 382, 491, 86, 87, 88, 89,
	90, 92, 94, 95, 96, 97, 98, 100, 102, 0,
	0, 0, 494, 0, 0, 0, 106, 107, 108, 109,
	110, 111, 0, 112, 113, 117, 119, 120, 121, 122,
	123, 124, 127, 0, 129, 131, 0, 132, 135, 0,
	136, 137, 138, 139, 140, 141, 142, 143, 386, 144,
	0, 145, 146, 148, 0, 151, 152, 153, 154, 155,
	0, 156, 388, 389, 157, 158, 160, 161, 162, 164,
	165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 0, 176, 177, 178, 180, 0, 181, 182, 185,
	186, 187, 188, 0, 190, 405, 0, 191, 192, 193,
	0, 0, 195, 196, 197, 198, 199, 200, 203, 406,
	205, 206, 207, 208, 209, 210, 211, 212, 214, 215,
	216, 217, 218, 219, 220, 409, 410, 221, 223, 224,
	411, 413, 414, 507, 239, 240, 241, 242, 243, 244,
	245, 247, 0, 249, 250, 251, 415, 252, 253, 254,
	255, 0, 256, 257, 258, 259, 260, 262, 265, 266,
	267, 268, 0, 271, 272, 273, 274, 275, 276, 277,
	279, 280, 281, 283, 284, 285, 286, 287, 288, 289,
	290, 418, 292, 293, 295, 296, 297, 299, 300, 301,
	302, 303, 304, 305, 0, 307, 419, 308, 309, 310,
	311, 312, 0, 314, 315, 316, 317, 318, 319, 322,
	323, 324, 326, 327, 421, 328, 329, 0, 331, 332,
	510, 334, 335, 336, 337, 338, 0, 339, 340, 424,
	341, 425, 342, 343, 344, 345, 346, 347, 348, 350,
	0, 0, 352, 353, 354, 356, 357, 358, 359, 362,
	363, 364, 365, 366, 0, 367, 369, 371, 372, 428,
	429, 430, 431, 432, 434, 435, 436, 437, 373, 374,
	390, 236, 230, 184, 228, 229, 233, 234, 237, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 76,
	492, 862, 126, 163, 385, 0, 0, 225, 0, 278,
	282, 0, 376, 0, 0, 0, 0, 134, 0, 497,
	0, 503, 0, 509, 0, 351, 0, 499, 500, 505,
	64, 422, 375, 194, 0, 0, 0, 232, 0, 0,
	0, 45, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 501, 498, 502, 508, 496, 506, 493, 504, 0,
	269, 202, 850, 426, 298, 71, 118, 105, 147, 189,
	306, 0, 0, 179, 355, 114, 204, 0, 93, 238,
	0, 330, 201, 0, 313, 333, 0, 222, 99, 261,
	320, 321, 490, 495, 0, 511, 0, 103, 104, 227,
	85, 235, 857, 858, 856, 248, 246, 0, 213, 270,
	433, 0, 0, 133, 0, 128, 226, 370, 91, 349,
	264, 231, 183, 294, 325, 130, 115, 116, 159, 263,
	149, 101, 360, 400, 404, 402, 398, 395, 399, 396,
	397, 401, 150, 394, 0, 368, 378, 412, 392, 420,
	377, 417, 387, 125, 416, 381, 380, 427, 407, 408,
	361, 423, 393, 391, 384, 383, 379, 0, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 60, 0,
	61, 62, 63, 65, 66, 67, 489, 68, 69, 70,
	73, 74, 75, 77, 78, 79, 80, 81, 82, 83,
	84, 382, 491, 86, 87, 88, 89, 90, 92, 94,
	95, 96, 97, 98, 100, 102, 0, 0, 0, 494,
	0, 0, 0, 106, 107, 108, 109, 110, 111, 0,
	112, 113, 117, 119, 120, 121, 122, 123, 124, 127,
	0, 129, 131, 0, 132, 135, 0, 136, 137, 138,
	139, 140, 141, 142, 143, 386, 144, 0, 145, 146,
	148, 0, 151, 152, 153, 154, 155, 0, 156, 388,
	389, 157, 158, 160, 161, 162, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 0, 176,
	177, 178, 180, 0, 181, 182, 185, 186, 187, 188,
	0, 190, 405, 0, 191, 192, 193, 0, 0, 195,
	196, 197, 198, 199, 200, 203, 406, 205, 206, 207,
	208, 209, 210, 211, 212, 214, 215, 216, 217, 218,
	219, 220, 409, 410, 221, 223, 224, 411, 413, 414,
	507, 239, 240, 241, 242, 243, 244, 245, 247, 0,
	249, 250, 251, 415, 252, 253, 254, 255, 0, 256,
	257, 258, 259, 260, 262, 265, 266, 267, 268, 0,
	271, 272, 273, 274, 275, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 418, 292,
	293, 295, 296, 297, 299, 300, 301, 302, 303, 304,
	305, 0, 307, 419, 308, 309, 310, 311, 312, 0,
	314, 315, 316, 317, 318, 319, 322, 323, 324, 326,
	327, 421, 328, 329, 0, 331, 332, 510, 334, 335,
	336, 337, 338, 0, 339, 340, 424, 341, 425, 342,
	343, 344, 345, 346, 347, 348, 350, 0, 0, 352,
	353, 354, 356, 357, 358, 359, 362, 363, 364, 365,
	366, 0, 367, 369, 371, 372, 428, 429, 430, 431,
	432, 434, 435, 436, 437, 373, 374, 390, 236, 230,
	184, 228, 229, 233, 234, 237, 46, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 76, 492, 845, 126,
	163, 385, 0, 0, 225, 0, 278, 282, 0, 376,
	0, 0, 0, 0, 134, 0, 497, 0, 503, 0,
	509, 0, 351, 0, 499, 500, 505, 64, 422, 375,
	194, 0, 0, 0, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 501, 498,
	502, 508, 496, 506, 493, 504, 0, 269, 202, 0,
	426, 298, 71, 118, 105, 147, 189, 306, 0, 0,
	179, 355, 114, 204, 0, 93, 238, 0, 330, 201,
	0, 313, 333, 0, 222, 99, 261, 320, 321, 490,
	495, 0, 511, 0, 103, 104, 227, 85, 235, 438,
	403, 291, 248, 246, 0, 213, 270, 433, 0, 0,
	133, 0, 128, 226, 370, 91, 349, 264, 231, 183,
	294, 325, 130, 115, 116, 159, 263, 149, 101, 360,
	400, 404, 402, 398, 395, 399, 396, 397, 401, 150,
	394, 0, 368, 378, 412, 392, 420, 377, 417, 387,
	125, 416, 381, 380, 427, 407, 408, 361, 423, 393,
	391, 384, 383, 379, 0, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 60, 0, 61, 62, 63,
	65, 66, 67, 489, 68, 69, 70, 73, 74, 75,
	77, 78, 79, 80, 81, 82, 83, 84, 382, 491,
	86, 87, 88, 89, 90, 92, 94, 95, 96, 97,
	98, 100, 102, 0, 0, 0, 494, 0, 0, 0,
	106, 107, 108, 109, 110, 111, 0, 112, 113, 117,
	119, 120, 121, 122, 123, 124, 127, 0, 129, 131,
	0, 132, 135, 0, 136, 137, 138, 139, 140, 141,
	142, 143, 386, 144, 0, 145, 146, 148, 0, 151,
	152, 153, 154, 155, 0, 156, 388, 389, 157, 158,
	160, 161, 162, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 0, 176, 177, 178, 180,
	0, 181, 182, 185, 186, 187, 188, 0, 190, 405,
	0, 191, 192, 193, 0, 0, 195, 196, 197, 198,
	199, 200, 203, 406, 205, 206, 207, 208, 209, 210,
	211, 212, 214, 215, 216, 217, 218, 219, 220, 409,
	410, 221, 223, 224, 411, 413, 414, 507, 239, 240,
	241, 242, 243, 244, 245, 247, 0, 249, 250, 251,
	415, 252, 253, 254, 255, 0, 256, 257, 258, 259,
	260, 262, 265, 266, 267, 268, 0, 271, 272, 273,
	274, 275, 276, 277, 279, 280, 281, 283, 284, 285,
	286, 287, 288, 289, 290, 418, 292, 293, 295, 296,
	297, 299, 300, 301, 302, 303, 304, 305, 0, 307,
	419, 308, 309, 310, 311, 312, 0, 314, 315, 316,
	317, 318, 319, 322, 323, 324, 326, 327, 421, 328,
	329, 0, 331, 332, 510, 334, 335, 336, 337, 338,
	0, 339, 340, 424, 341, 425, 342, 343, 344, 345,
	346, 347, 348, 350, 0, 0, 352, 353, 354, 356,
	357, 358, 359, 362, 363, 364, 365, 366, 0, 367,
	369, 371, 372, 428, 429, 430, 431, 432, 434, 435,
	436, 437, 373, 374, 390, 236, 230, 184, 228, 229,
	233, 234, 237, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 76, 492, 1126, 126, 163, 385, 0,
	0, 225, 0, 278, 282, 0, 376, 0, 0, 0,
	0, 134, 0, 497, 0, 503, 0, 509, 0, 351,
	0, 499, 500, 505, 64, 422, 375, 194, 0, 0,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 501, 498, 502, 508, 496,
	506, 493, 504, 0, 269, 202, 0, 426, 298, 71,
	118, 105, 147, 189, 306, 0, 0, 179, 355, 114,
	204, 0, 93, 238, 0, 330, 201, 0, 313, 333,
	0, 222, 99, 261, 320, 321, 490, 495, 0, 511,
	0, 103, 104, 227, 85, 235, 857, 858, 856, 248,
	246, 0, 213, 270, 433, 0, 0, 133, 0, 128,
	226, 370, 91, 349, 264, 231, 183, 294, 325, 130,
	115, 116, 159, 263, 149, 101, 360, 400, 404, 402,
	398, 395, 399, 396, 397, 401, 150, 394, 0, 368,
	378, 412, 392, 420, 377, 417, 387, 125, 416, 381,
	380, 427, 407, 408, 361, 423, 393, 391, 384, 383,
	379, 0, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 60, 0, 61, 62, 63, 65, 66, 67,
	489, 68, 69, 70, 73, 74, 75, 77, 78, 79,
	80, 81, 82, 83, 84, 382, 491, 86, 87, 88,
	89, 90, 92, 94, 95, 96, 97, 98, 100, 102,
	0, 0, 0, 494, 0, 0, 0, 106, 107, 108,
	109, 110, 111, 0, 112, 113, 117, 119, 120, 121,
	122, 123, 124, 127, 0, 129, 131, 0, 132, 135,
	0, 136, 137, 138, 139, 140, 141, 142, 143, 386,
	144, 0, 145, 146, 148, 0, 151, 152, 153, 154,
	155, 0, 156, 388, 389, 157, 158, 160, 161, 162,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 0, 176, 177, 178, 180, 0, 181, 182,
	185, 186, 187, 188, 0, 190, 405, 0, 191, 192,
	193, 0, 0, 195, 196, 197, 198, 199, 200, 203,
	406, 205, 206, 207, 208, 209, 210, 211, 212, 214,
	215, 216, 217, 218, 219, 220, 409, 410, 221, 223,
	224, 411, 413, 414, 507, 239, 240, 241, 242, 243,
	244, 245, 247, 0, 249, 250, 251, 415, 252, 253,
	254, 255, 0, 256, 257, 258, 259, 260, 262, 265,
	266, 267, 268, 0, 271, 272, 273, 274, 275, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 418, 292, 293, 295, 296, 297, 299, 300,
	301, 302, 303, 304, 305, 0, 307, 419, 308, 309,
	310, 311, 312, 0, 314, 315, 316, 317, 318, 319,
	322, 323, 324, 326, 327, 421, 328, 329, 0, 331,
	332, 510, 334, 335, 336, 337, 338, 0, 339, 340,
	424, 341, 425, 342, 343, 344, 345, 346, 347, 348,
	350, 0, 0, 352, 353, 354, 356, 357, 358, 359,
	362, 363, 364, 365, 366, 0, 367, 369, 371, 372,
	428, 429, 430, 431, 432, 434, 435, 436, 437, 373,
	374, 390, 236, 230, 184, 228, 229, 233, 234, 237,
	46, 0, 0, 0, 0, 0, 0, 789, 0, 0,
	0, 0, 0, 0, 800, 801, 802, 0, 59, 0,
	76, 0, 17, 126, 163, 385, 0, 0, 225, 0,
	278, 282, 0, 376, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 64, 422, 375, 194, 0, 0, 0, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 202, 0, 426, 298, 71, 118, 105, 147,
	189, 306, 0, 0, 179, 355, 114, 204, 0, 93,
	238, 0, 330, 201, 0, 313, 333, 0, 222, 99,
	261, 320, 321, 0, 0, 0, 0, 0, 103, 104,
	227, 85, 235, 438, 403, 291, 248, 246, 0, 213,
	270, 433, 0, 0, 133, 0, 128, 226, 370, 91,
	349, 264, 231, 183, 294, 325, 130, 115, 116, 159,
	263, 149, 101, 360, 400, 404, 402, 398, 395, 399,
	396, 397, 401, 150, 394, 0, 368, 378, 412, 392,
	420, 377, 417, 387, 125, 416, 381, 380, 427, 407,
	408, 361, 423, 393, 391, 384, 383, 379, 0, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 60,
	0, 61, 62, 63, 65, 66, 67, 0, 68, 69,
	70, 73, 74, 75, 77, 78, 79, 80, 81, 82,
	83, 84, 382, 0, 86, 87, 88, 89, 90, 92,
	94, 95, 96, 97, 98, 100, 102, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 110, 111,
	0, 112, 113, 117, 119, 120, 121, 122, 123, 124,
	127, 0, 129, 131, 0, 132, 135, 0, 136, 137,
	138, 139, 140, 141, 142, 143, 386, 144, 0, 145,
	146, 148, 0, 151, 152, 153, 154, 155, 0, 156,
	388, 389, 157, 158, 160, 161, 162, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 0,
	176, 177, 178, 180, 0, 181, 182, 185, 186, 187,
	188, 0, 190, 405, 0, 191, 192, 193, 0, 0,
	195, 196, 197, 198, 199, 200, 203, 406, 205, 206,
	207, 208, 209, 210, 211, 212, 214, 215, 216, 217,
	218, 219, 220, 409, 410, 221, 223, 224, 411, 413,
	414, 0, 239, 240, 241, 242, 243, 244, 245, 247,
	0, 249, 250, 251, 415, 252, 253, 254, 255, 0,
	256, 257, 258, 259, 260, 262, 265, 266, 267, 268,
	0, 271, 272, 273, 274, 275, 276, 277, 279, 280,
	281, 283, 284, 285, 286, 287, 288, 289, 290, 418,
	292, 293, 295, 296, 297, 299, 300, 301, 302, 303,
	304, 305, 0, 307, 419, 308, 309, 310, 311, 312,
	0, 314, 315, 316, 317, 318, 319, 322, 323, 324,
	326, 327, 421, 328, 329, 0, 331, 332, 0, 334,
	335, 336, 337, 338, 0, 339, 340, 424, 341, 425,
	342, 343, 344, 345, 346, 347, 348, 350, 0, 0,
	352, 353, 354, 356, 357, 358, 359, 362, 363, 364,
	365, 366, 0, 367, 369, 371, 372, 428, 429, 430,
	431, 432, 434, 435, 436, 437, 373, 374, 390, 236,
	230, 184, 228, 229, 233, 234, 237, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 0, 0, 797, 798, 799, 0, 0, 0, 0,
	0, 0, 791, 792, 793, 794, 795, 796, 59, 0,
	76, 0, 0, 126, 163, 385, 0, 0, 225, 0,
	278, 282, 0, 376, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 64, 422, 375, 194, 0, 0, 0, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 202, 0, 426, 298, 71, 118, 105, 147,
	189, 306, 0, 0, 179, 355, 114, 204, 0, 93,
	238, 0, 330, 201, 0, 313, 333, 0, 222, 99,
	261, 320, 321, 0, 0, 0, 0, 0, 103, 104,
	227, 85, 235, 438, 403, 291, 248, 246, 0, 213,
	270, 433, 0, 0, 133, 0, 128, 226, 370, 91,
	349, 264, 231, 183, 294, 325, 130, 115, 116, 159,
	263, 149, 101, 360, 400, 404, 402, 398, 395, 399,
	396, 397, 401, 150, 394, 0, 368, 378, 412, 392,
	420, 377, 417, 387, 125, 416, 381, 380, 427, 407,
	408, 361, 423, 393, 391, 384, 383, 379, 0, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 60,
	0, 61, 62, 63, 65, 66, 67, 0, 68, 69,
	70, 73, 74, 75, 77, 78, 79, 80, 81, 82,
	83, 84, 382, 0, 86, 87, 88, 89, 90, 92,
	94, 95, 96, 97, 98, 100, 102, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 110, 111,
	0, 112, 113, 117, 119, 120, 121, 122, 123, 124,
	127, 0, 129, 131, 0, 132, 135, 0, 136, 137,
	138, 139, 140, 141, 142, 143, 386, 144, 0, 145,
	146, 148, 0, 151, 152, 153, 154, 155, 0, 156,
	388, 389, 157, 158, 160, 161, 162, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 0,
	176, 177, 178, 180, 0, 181, 182, 185, 186, 187,
	188, 0, 190, 405, 0, 191, 192, 193, 0, 0,
	195, 196, 197, 198, 199, 200, 203, 406, 205, 206,
	207, 208, 209, 210, 211, 212, 214, 215, 216, 217,
	218, 219, 220, 409, 410, 221, 223, 224, 411, 413,
	414, 0, 239, 240, 241, 242, 243, 244, 245, 247,
	0, 249, 250, 251, 415, 252, 253, 254, 255, 0,
	256, 257, 258, 259, 260, 262, 265, 266, 267, 268,
	0, 271, 272, 273, 274, 275, 276, 277, 279, 280,
	281, 283, 284, 285, 286, 287, 288, 289, 290, 418,
	292, 293, 295, 296, 297, 299, 300, 301, 302, 303,
	304, 305, 0, 307, 419, 308, 309, 310, 311, 312,
	0, 314, 315, 316, 317, 318, 319, 322, 323, 324,
	326, 327, 421, 328, 329, 0, 331, 332, 0, 334,
	335, 336, 337, 338, 0, 339, 340, 424, 341, 425,
	342, 343, 344, 345, 346, 347, 348, 350, 0, 0,
	352, 353, 354, 356, 357, 358, 359, 362, 363, 364,
	365, 366, 0, 367, 369, 371, 372, 428, 429, 430,
	431, 432, 434, 435, 436, 437, 373, 374, 390, 236,
	230, 184, 228, 229, 233, 234, 237, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 76, 0, 0,
	126, 163, 385, 0, 1384, 225, 0, 278, 282, 0,
	376, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 64, 422,
	375, 194, 0, 0, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 202,
	0, 426, 298, 71, 118, 105, 147, 189, 306, 0,
	0, 179, 355, 114, 204, 0, 93, 238, 0, 330,
	201, 0, 313, 333, 0, 222, 99, 261, 320, 321,
	0, 0, 0, 0, 0, 103, 104, 227, 85, 235,
	438, 403, 291, 248, 246, 0, 213, 270, 433, 0,
	0, 133, 0, 128, 226, 370, 91, 349, 264, 231,
	183, 294, 325, 130, 115, 116, 159, 263, 149, 101,
	360, 400, 404, 402, 398, 395, 399, 396, 397, 401,
	150, 394, 0, 368, 378, 412, 392, 420, 377, 417,
	387, 125, 416, 381, 380, 427, 407, 408, 361, 423,
	393, 391, 384, 383, 379, 0, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 60, 0, 61, 62,
	63, 65, 66, 67, 0, 68, 69, 70, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 83, 84, 382,
	0, 86, 87, 88, 89, 90, 92, 94, 95, 96,
	97, 98, 100, 102, 0, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 110, 111, 0, 112, 113,
	117, 119, 120, 121, 122, 123, 124, 127, 0, 129,
	131, 0, 132, 135, 0, 136, 137, 138, 139, 140,
	141, 142, 143, 386, 144, 0, 145, 146, 148, 0,
	151, 152, 153, 154, 155, 0, 156, 388, 389, 157,
	158, 160, 161, 162, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 0, 176, 177, 178,
	180, 0, 181, 182, 185, 186, 187, 188, 0, 190,
	405, 0, 191, 192, 193, 0, 0, 195, 196, 197,
	198, 199, 200, 203, 406, 205, 206, 207, 208, 209,
	210, 211, 212, 214, 215, 216, 217, 218, 219, 220,
	409, 410, 221, 223, 224, 411, 413, 414, 0, 239,
	240, 241, 242, 243, 244, 245, 247, 0, 249, 250,
	251, 415, 252, 253, 254, 255, 0, 256, 257, 258,
	259, 260, 262, 265, 266, 267, 268, 0, 271, 272,
	273, 274, 275, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 418, 292, 293, 295,
	296, 297, 299, 300, 301, 302, 303, 304, 305, 0,
	307, 419, 308, 309, 310, 311, 312, 0, 314, 315,
	316, 317, 318, 319, 322, 323, 324, 326, 327, 421,
	328, 329, 0, 331, 332, 0, 334, 335, 336, 337,
	338, 0, 339, 340, 424, 341, 425, 342, 343, 344,
	345, 346, 347, 348, 350, 0, 0, 352, 353, 354,
	356, 357, 358, 359, 362, 363, 364, 365, 366, 0,
	367, 369, 371, 372, 428, 429, 430, 431, 432, 434,
	435, 436, 437, 373, 374, 390, 236, 230, 184, 228,
	229, 233, 234, 237, 46, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 76, 0, 0, 126, 163, 385,
	0, 1337, 225, 0, 278, 282, 0, 376, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 64, 422, 375, 194, 0,
	0, 0, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 202, 0, 426, 298,
	71, 118, 105, 147, 189, 306, 0, 0, 179, 355,
	114, 204, 0, 93, 238, 0, 330, 201, 0, 313,
	333, 0, 222, 99, 261, 320, 321, 0, 0, 0,
	0, 0, 103, 104, 227, 85, 235, 438, 403, 291,
	248, 246, 0, 213, 270, 433, 0, 0, 133, 0,
	128, 226, 370, 91, 349, 264, 231, 183, 294, 325,
	130, 115, 116, 159, 263, 149, 101, 360, 400, 404,
	402, 398, 395, 399, 396, 397, 401, 150, 394, 0,
	368, 378, 412, 392, 420, 377, 417, 387, 125, 416,
	381, 380, 427, 407, 408, 361, 423, 393, 391, 384,
	383, 379, 0, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 60, 0, 61, 62, 63, 65, 66,
	67, 0, 68, 69, 70, 73, 74, 75, 77, 78,
	79, 80, 81, 82, 83, 84, 382, 0, 86, 87,
	88, 89, 90, 92, 94, 95, 96, 97, 98, 100,
	102, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 0, 112, 113, 117, 119, 120,
	121, 122, 123, 124, 127, 0, 129, 131, 0, 132,
	135, 0, 136, 137, 138, 139, 140, 141, 142, 143,
	386, 144, 0, 145, 146, 148, 0, 151, 152, 153,
	154, 155, 0, 156, 388, 389, 157, 158, 160, 161,
	162, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 0, 176, 177, 178, 180, 0, 181,
	182, 185, 186, 187, 188, 0, 190, 405, 0, 191,
	192, 193, 0, 0, 195, 196, 197, 198, 199, 200,
	203, 406, 205, 206, 207, 208, 209, 210, 211, 212,
	214, 215, 216, 217, 218, 219, 220, 409, 410, 221,
	223, 224, 411, 413, 414, 0, 239, 240, 241, 242,
	243, 244, 245, 247, 0, 249, 250, 251, 415, 252,
	253, 254, 255, 0, 256, 257, 258, 259, 260, 262,
	265, 266, 267, 268, 0, 271, 272, 273, 274, 275,
	276, 277, 279, 280, 281, 283, 284, 285, 286, 287,
	288, 289, 290, 418, 292, 293, 295, 296, 297, 299,
	300, 301, 302, 303, 304, 305, 0, 307, 419, 308,
	309, 310, 311, 312, 0, 314, 315, 316, 317, 318,
	319, 322, 323, 324, 326, 327, 421, 328, 329, 0,
	331, 332, 0, 334, 335, 336, 337, 338, 0, 339,
	340, 424, 341, 425, 342, 343, 344, 345, 346, 347,
	348, 350, 0, 0, 352, 353, 354, 356, 357, 358,
	359, 362, 363, 364, 365, 366, 0, 367, 369, 371,
	372, 428, 429, 430, 431, 432, 434, 435, 436, 437,
	373, 374, 390, 236, 230, 184, 228, 229, 233, 234,
	237, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 76, 0, 0, 126, 163, 385, 0, 1334, 225,
	0, 278, 282, 0, 376, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 64, 422, 375, 194, 0, 0, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 202, 0, 426, 298, 71, 118, 105,
	147, 189, 306, 0, 0, 179, 355, 114, 204, 0,
	93, 238, 0, 330, 201, 0, 313, 333, 0, 222,
	99, 261, 320, 321, 0, 0, 0, 0, 0, 103,
	104, 227, 85, 235, 438, 403, 291, 248, 246, 0,
	213, 270, 433, 0, 0, 133, 0, 128, 226, 370,
	91, 349, 264, 231, 183, 294, 325, 130, 115, 116,
	159, 263, 149, 101, 360, 400, 404, 402, 398, 395,
	399, 396, 397, 401, 150, 394, 0, 368, 378, 412,
	392, 420, 377, 417, 387, 125, 416, 381, 380, 427,
	407, 408, 361, 423, 393, 391, 384, 383, 379, 0,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	60, 0, 61, 62, 63, 65, 66, 67, 0, 68,
	69, 70, 73, 74, 75, 77, 78, 79, 80, 81,
	82, 83, 84, 382, 0, 86, 87, 88, 89, 90,
	92, 94, 95, 96, 97, 98, 100, 102, 0, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 110,
	111, 0, 112, 113, 117, 119, 120, 121, 122, 123,
	124, 127, 0, 129, 131, 0, 132, 135, 0, 136,
	137, 138, 139, 140, 141, 142, 143, 386, 144, 0,
	145, 146, 148, 0, 151, 152, 153, 154, 155, 0,
	156, 388, 389, 157, 158, 160, 161, 162, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	0, 176, 177, 178, 180, 0, 181, 182, 185, 186,
	187, 188, 0, 190, 405, 0, 191, 192, 193, 0,
	0, 195, 196, 197, 198, 199, 200, 203, 406, 205,
	206, 207, 208, 209, 210, 211, 212, 214, 215, 216,
	217, 218, 219, 220, 409, 410, 221, 223, 224, 411,
	413, 414, 0, 239, 240, 241, 242, 243, 244, 245,
	247, 0, 249, 250, 251, 415, 252, 253, 254, 255,
	0, 256, 257, 258, 259, 260, 262, 265, 266, 267,
	268, 0, 271, 272, 273, 274, 275, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	418, 292, 293, 295, 296, 297, 299, 300, 301, 302,
	303, 304, 305, 0, 307, 419, 308, 309, 310, 311,
	312, 0, 314, 315, 316, 317, 318, 319, 322, 323,
	324, 326, 327, 421, 328, 329, 0, 331, 332, 0,
	334, 335, 336, 337, 338, 0, 339, 340, 424, 341,
	425, 342, 343, 344, 345, 346, 347, 348, 350, 0,
	0, 352, 353, 354, 356, 357, 358, 359, 362, 363,
	364, 365, 366, 0, 367, 369, 371, 372, 428, 429,
	430, 431, 432, 434, 435, 436, 437, 373, 374, 390,
	236, 230, 184, 228, 229, 233, 234, 237, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 76, 0,
	0, 126, 163, 385, 0, 662, 225, 0, 278, 282,
	21, 376, 0, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 64,
	422, 375, 194, 0, 0, 0, 232, 18, 0, 0,
	0, 19, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	202, 0, 834, 298, 71, 118, 105, 147, 189, 306,
	0, 0, 179, 355, 114, 204, 0, 93, 238, 0,
	330, 201, 0, 313, 333, 0, 222, 99, 261, 320,
	321, 0, 0, 0, 0, 0, 103, 104, 227, 85,
	235, 438, 403, 291, 248, 246, 0, 213, 270, 433,
	0, 0, 133, 0, 128, 226, 370, 91, 349, 264,
	231, 183, 294, 325, 130, 115, 116, 159, 263, 149,
	101, 360, 400, 404, 402, 398, 395, 399, 396, 397,
	401, 150, 394, 0, 368, 378, 412, 392, 420, 377,
	417, 387, 125, 416, 381, 380, 427, 407, 408, 361,
	423, 393, 391, 384, 383, 379, 0, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 60, 0, 61,
	62, 63, 65, 66, 67, 0, 68, 69, 70, 73,
	74, 75, 77, 78, 79, 80, 81, 82, 83, 84,
	382, 0, 86, 87, 88, 89, 90, 92, 94, 95,
	96, 97, 98, 100, 102, 0, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 110, 111, 0, 112,
	113, 117, 119, 120, 121, 122, 123, 124, 127, 0,
	129, 131, 0, 132, 135, 0, 136, 137, 138, 139,
	140, 141, 142, 143, 386, 144, 0, 145, 146, 148,
	0, 151, 152, 153, 154, 155, 0, 156, 388, 389,
	157, 158, 160, 161, 162, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 0, 176, 177,
	178, 180, 0, 181, 182, 185, 186, 187, 188, 0,
	190, 405, 0, 191, 192, 193, 0, 0, 195, 196,
	197, 198, 199, 200, 203, 406, 205, 206, 207, 208,
	209, 210, 211, 212, 214, 215, 216, 217, 218, 219,
	220, 409, 410, 221, 223, 224, 411, 413, 414, 0,
	239, 240, 241, 242, 243, 244, 245, 247, 0, 249,
	250, 251, 415, 252, 253, 254, 255, 0, 256, 257,
	258, 259, 260, 262, 265, 266, 267, 268, 0, 271,
	272, 273, 274, 275, 276, 277, 279, 280, 281, 283,
	284, 285, 286, 287, 288, 289, 290, 418, 292, 293,
	295, 296, 297, 299, 300, 301, 302, 303, 304, 305,
	0, 307, 419, 308, 309, 310, 311, 312, 0, 314,
	315, 316, 317, 318, 319, 322, 323, 324, 326, 327,
	421, 328, 329, 0, 331, 332, 0, 334, 335, 336,
	337, 338, 0, 339, 340, 424, 341, 425, 342, 343,
	344, 345, 346, 347, 348, 350, 0, 0, 352, 353,
	354, 356, 357, 358, 359, 362, 363, 364, 365, 366,
	0, 367, 369, 371, 372, 428, 429, 430, 431, 432,
	434, 435, 436, 437, 373, 374, 390, 236, 230, 184,
	228, 229, 233, 234, 237, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 22, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 962, 76, 0, 17, 126, 163,
	385, 0, 0, 225, 0, 278, 282, 0, 376, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 64, 422, 375, 194,
	0, 0, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 202, 0, 426,
	298, 71, 118, 105, 147, 189, 306, 0, 0, 179,
	355, 114, 204, 0, 93, 238, 0, 330, 201, 0,
	313, 333, 0, 222, 99, 261, 320, 321, 0, 0,
	0, 0, 0, 103, 104, 227, 85, 235, 438, 403,
	291, 248, 246, 0, 213, 270, 433, 0, 0, 133,
	0, 128, 226, 370, 91, 349, 264, 231, 183, 294,
	325, 130, 115, 116, 159, 263, 149, 101, 360, 400,
	404, 402, 398, 395, 399, 396, 397, 401, 150, 394,
	0, 368, 378, 412, 392, 420, 377, 417, 387, 125,
	416, 381, 380, 427, 407, 408, 361, 423, 393, 391,
	384, 383, 379, 0, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 60, 0, 61, 62, 63, 65,
	66, 67, 0, 68, 69, 70, 73, 74, 75, 77,
	78, 79, 80, 81, 82, 83, 84, 382, 0, 86,
	87, 88, 89, 90, 92, 94, 95, 96, 97, 98,
	100, 102, 0, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 110, 111, 0, 112, 113, 117, 119,
	120, 121, 122, 123, 124, 127, 0, 129, 131, 0,
	132, 135, 0, 136, 137, 138, 139, 140, 141, 142,
	143, 386, 144, 0, 145, 146, 148, 0, 151, 152,
	153, 154, 155, 0, 156, 388, 389, 157, 158, 160,
	161, 162, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 0, 176, 177, 178, 180, 0,
	181, 182, 185, 186, 187, 188, 0, 190, 405, 0,
	191, 192, 193, 0, 0, 195, 196, 197, 198, 199,
	200, 203, 406, 205, 206, 207, 208, 209, 210, 211,
	212, 214, 215, 216, 217, 218, 219, 220, 409, 410,
	221, 223, 224, 411, 413, 414, 0, 239, 240, 241,
	242, 243, 244, 245, 247, 0, 249, 250, 251, 415,
	252, 253, 254, 255, 0, 256, 257, 258, 259, 260,
	262, 265, 266, 267, 268, 0, 271, 272, 273, 274,
	275, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 418, 292, 293, 295, 296, 297,
	299, 300, 301, 302, 303, 304, 305, 0, 307, 419,
	308, 309, 310, 311, 312, 0, 314, 315, 316, 317,
	318, 319, 322, 323, 324, 326, 327, 421, 328, 329,
	0, 331, 332, 0, 334, 335, 336, 337, 338, 0,
	339, 340, 424, 341, 425, 342, 343, 344, 345, 346,
	347, 348, 350, 0, 0, 352, 353, 354, 356, 357,
	358, 359, 362, 363, 364, 365, 366, 0, 367, 369,
	371, 372, 428, 429, 430, 431, 432, 434, 435, 436,
	437, 373, 374, 390, 236, 230, 184, 228, 229, 233,
	234, 237, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 76, 492, 457, 126, 163, 385, 0,
	0, 225, 0, 278, 282, 0, 376, 0, 0, 0,
	0, 134, 0, 497, 0, 503, 0, 509, 0, 351,
	0, 499, 500, 505, 64, 735, 375, 194, 0, 0,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 501, 498, 502, 508, 496,
	506, 493, 504, 0, 269, 202, 0, 426, 298, 71,
	118, 105, 147, 189, 306, 0, 0, 179, 355, 114,
	204, 0, 93, 238, 0, 330, 201, 0, 313, 333,
	0, 222, 99, 261, 320, 321, 490, 495, 0, 511,
	0, 103, 104, 227, 85, 235, 438, 403, 291, 248,
	246, 1434, 213, 270, 433, 0, 0, 133, 0, 128,
	226, 370, 91, 349, 264, 231, 183, 294, 325, 130,
	115, 116, 159, 263, 149, 101, 360, 400, 404, 402,
	398, 395, 399, 396, 397, 401, 150, 394, 0, 368,
	737, 728, 720, 721, 722, 723, 724, 725, 416, 739,
	740, 741, 742, 743, 361, 734, 393, 719, 726, 727,
	729, 0, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 60, 0, 61, 62, 63, 65, 66, 67,
	489, 68, 69, 70, 73, 74, 75, 77, 78, 79,
	80, 81, 82, 83, 84, 382, 491, 86, 87, 88,
	89, 90, 92, 94, 95, 96, 97, 98, 100, 102,
	0, 0, 0, 494, 0, 0, 0, 106, 107, 108,
	109, 110, 111, 0, 112, 113, 117, 119, 120, 121,
	122, 123, 124, 127, 0, 129, 131, 0, 132, 135,
	0, 136, 137, 138, 139, 140, 141, 142, 143, 386,
	144, 0, 145, 146, 148, 0, 151, 152, 153, 154,
	155, 0, 156, 388, 389, 157, 158, 160, 161, 162,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 0, 176, 177, 178, 180, 0, 181, 182,
	185, 186, 187, 188, 0, 190, 405, 0, 191, 192,
	193, 0, 0, 195, 196, 197, 198, 199, 200, 203,
	406, 205, 206, 207, 208, 209, 210, 211, 212, 214,
	215, 216, 217, 218, 219, 220, 409, 410, 221, 223,
	224, 411, 413, 414, 507, 239, 240, 241, 242, 243,
	244, 245, 247, 0, 249, 250, 251, 415, 252, 253,
	254, 255, 0, 256, 257, 258, 259, 260, 262, 265,
	266, 267, 268, 0, 271, 272, 273, 274, 275, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 418, 292, 293, 295, 296, 297, 299, 300,
	301, 302, 303, 304, 305, 0, 307, 419, 308, 309,
	310, 311, 312, 0, 314, 315, 316, 317, 318, 319,
	322, 323, 324, 326, 327, 421, 328, 329, 0, 331,
	332, 510, 334, 335, 336, 337, 338, 0, 339, 340,
	424, 341, 425, 342, 343, 344, 345, 346, 347, 348,
	350, 0, 0, 352, 353, 354, 356, 357, 358, 359,
	362, 363, 364, 365, 366, 0, 367, 369, 371, 372,
	428, 429, 430, 431, 432, 434, 435, 436, 437, 373,
	374, 390, 236, 230, 184, 228, 229, 233, 234, 237,
	46, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	76, 0, 0, 126, 163, 385, 0, 0, 225, 0,
	278, 282, 0, 376, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 64, 422, 375, 194, 0, 0, 0, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 202, 0, 426, 298, 71, 118, 105, 147,
	189, 306, 0, 0, 179, 355, 114, 204, 0, 93,
	238, 0, 330, 201, 0, 313, 333, 0, 222, 99,
	261, 320, 321, 0, 0, 0, 0, 0, 103, 104,
	227, 85, 235, 438, 403, 291, 248, 246, 0, 213,
	270, 433, 0, 0, 133, 0, 128, 226, 370, 91,
	349, 264, 231, 183, 294, 325, 130, 115, 116, 159,
	263, 149, 101, 360, 400, 404, 402, 398, 395, 399,
	396, 397, 401, 150, 394, 0, 368, 378, 412, 392,
	420, 377, 417, 387, 125, 416, 381, 380, 427, 407,
	408, 361, 423, 393, 391, 384, 383, 379, 0, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 60,
	0, 61, 62, 63, 65, 66, 67, 0, 68, 69,
	70, 73, 74, 75, 77, 78, 79, 80, 81, 82,
	83, 84, 382, 0, 86, 87, 88, 89, 90, 92,
	94, 95, 96, 97, 98, 100, 102, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 110, 111,
	0, 112, 113, 117, 119, 120, 121, 122, 123, 124,
	127, 0, 129, 131, 0, 132, 135, 0, 136, 137,
	138, 139, 140, 141, 142, 143, 386, 144, 0, 145,
	146, 148, 0, 151, 152, 153, 154, 155, 0, 156,
	388, 389, 157, 158, 160, 161, 162, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 0,
	176, 177, 178, 180, 0, 181, 182, 185, 186, 187,
	188, 0, 190, 405, 0, 191, 192, 193, 0, 0,
	195, 196, 197, 198, 199, 200, 203, 406, 205, 206,
	207, 208, 209, 210, 211, 212, 214, 215, 216, 217,
	218, 219, 220, 409, 410, 221, 223, 224, 411, 413,
	414, 0, 239, 240, 241, 242, 243, 244, 245, 247,
	0, 249, 250, 251, 415, 252, 253, 254, 255, 0,
	256, 257, 258, 259, 260, 262, 265, 266, 267, 268,
	0, 271, 272, 273, 274, 275, 276, 277, 279, 280,
	281, 283, 284, 285, 286, 287, 288, 289, 290, 418,
	292, 293, 295, 296, 297, 299, 300, 301, 302, 303,
	304, 305, 0, 307, 419, 308, 309, 310, 311, 312,
	0, 314, 315, 316, 317, 318, 319, 322, 323, 324,
	326, 327, 421, 328, 329, 0, 331, 332, 0, 334,
	335, 336, 337, 338, 0, 339, 340, 424, 341, 425,
	342, 343, 344, 345, 346, 347, 348, 350, 0, 0,
	352, 353, 354, 356, 357, 358, 359, 362, 363, 364,
	365, 366, 0, 367, 369, 371, 372, 428, 429, 430,
	431, 432, 434, 435, 436, 437, 373, 374, 390, 236,
	230, 184, 228, 229, 233, 234, 237, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 76, 492, 696,
	126, 163, 385, 0, 0, 225, 0, 278, 282, 0,
	376, 0, 0, 0, 0, 134, 0, 497, 0, 503,
	0, 509, 0, 351, 0, 499, 500, 505, 64, 735,
	375, 194, 0, 0, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 501,
	498, 502, 508, 496, 506, 493, 504, 0, 269, 202,
	0, 426, 298, 71, 118, 105, 147, 189, 306, 0,
	0, 179, 355, 114, 204, 0, 93, 238, 0, 330,
	201, 0, 313, 333, 0, 222, 99, 261, 320, 321,
	490, 495, 0, 511, 0, 103, 104, 227, 85, 235,
	438, 403, 291, 248, 246, 1311, 213, 270, 433, 0,
	0, 133, 0, 128, 226, 370, 91, 349, 264, 231,
	183, 294, 325, 130, 115, 116, 159, 263, 149, 101,
	360, 400, 404, 402, 398, 395, 399, 396, 397, 401,
	150, 394, 0, 368, 737, 728, 720, 721, 722, 723,
	724, 725, 416, 739, 740, 741, 742, 743, 361, 734,
	393, 719, 726, 727, 729, 0, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 60, 0, 61, 62,
	63, 65, 66, 67, 489, 68, 69, 70, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 83, 84, 382,
	491, 86, 87, 88, 89, 90, 92, 94, 95, 96,
	97, 98, 100, 102, 0, 0, 0, 494, 0, 0,
	0, 106, 107, 108, 109, 110, 111, 0, 112, 113,
	117, 119, 120, 121, 122, 123, 124, 127, 0, 129,
	131, 0, 132, 135, 0, 136, 137, 138, 139, 140,
	141, 142, 143, 386, 144, 0, 145, 146, 148, 0,
	151, 152, 153, 154, 155, 0, 156, 388, 389, 157,
	158, 160, 161, 162, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 0, 176, 177, 178,
	180, 0, 181, 182, 185, 186, 187, 188, 0, 190,
	405, 0, 191, 192, 193, 0, 0, 195, 196, 197,
	198, 199, 200, 203, 406, 205, 206, 207, 208, 209,
	210, 211, 212, 214, 215, 216, 217, 218, 219, 220,
	409, 410, 221, 223, 224, 411, 413, 414, 507, 239,
	240, 241, 242, 243, 244, 245, 247, 0, 249, 250,
	251, 415, 252, 253, 254, 255, 0, 256, 257, 258,
	259, 260, 262, 265, 266, 267, 268, 0, 271, 272,
	273, 274, 275, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 418, 292, 293, 295,
	296, 297, 299, 300, 301, 302, 303, 304, 305, 0,
	307, 419, 308, 309, 310, 311, 312, 0, 314, 315,
	316, 317, 318, 319, 322, 323, 324, 326, 327, 421,
	328, 329, 0, 331, 332, 510, 334, 335, 336, 337,
	338, 0, 339, 340, 424, 341, 425, 342, 343, 344,
	345, 346, 347, 348, 350, 0, 0, 352, 353, 354,
	356, 357, 358, 359, 362, 363, 364, 365, 366, 0,
	367, 369, 371, 372, 428, 429, 430, 431, 432, 434,
	435, 436, 437, 373, 374, 390, 236, 230, 184, 228,
	229, 233, 234, 237, 46, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 76, 0, 0, 126, 163, 385,
	0, 0, 225, 0, 278, 282, 0, 376, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 64, 422, 375, 194, 0,
	0, 0, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 202, 0, 426, 298,
	71, 118, 105, 147, 189, 306, 0, 0, 179, 355,
	114, 204, 0, 93, 238, 0, 330, 201, 0, 313,
	333, 0, 222, 99, 261, 320, 321, 0, 0, 0,
	0, 0, 103, 104, 227, 85, 235, 438, 403, 291,
	248, 246, 0, 213, 270, 433, 0, 0, 133, 0,
	128, 226, 370, 91, 349, 264, 231, 183, 294, 325,
	130, 115, 116, 159, 263, 149, 101, 360, 400, 404,
	402, 398, 395, 399, 396, 397, 401, 150, 394, 0,
	368, 378, 412, 392, 420, 377, 417, 387, 125, 416,
	381, 380, 427, 407, 408, 361, 423, 393, 391, 384,
	383, 379, 0, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 60, 0, 61, 62, 63, 65, 66,
	67, 0, 68, 69, 70, 73, 74, 75, 77, 78,
	79, 80, 81, 82, 83, 84, 382, 0, 86, 87,
	88, 89, 90, 92, 94, 95, 96, 97, 98, 100,
	102, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 0, 112, 113, 117, 119, 120,
	121, 122, 123, 124, 127, 0, 129, 131, 0, 132,
	135, 0, 136, 137, 138, 139, 140, 141, 142, 143,
	386, 144, 0, 145, 146, 148, 0, 151, 152, 153,
	154, 155, 0, 156, 388, 389, 157, 158, 160, 161,
	162, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 0, 176, 177, 178, 180, 0, 181,
	182, 185, 186, 187, 188, 0, 190, 405, 0, 191,
	192, 193, 0, 0, 195, 196, 197, 198, 199, 200,
	203, 406, 205, 206, 207, 208, 209, 210, 211, 212,
	214, 215, 216, 217, 218, 219, 220, 409, 410, 221,
	223, 224, 411, 413, 414, 0, 239, 240, 241, 242,
	243, 244, 245, 247, 0, 249, 250, 251, 415, 252,
	253, 254, 255, 0, 256, 257, 258, 259, 260, 262,
	265, 266, 267, 268, 0, 271, 272, 273, 274, 275,
	276, 277, 279, 280, 281, 283, 284, 285, 286, 287,
	288, 289, 290, 418, 292, 293, 295, 296, 297, 299,
	300, 301, 302, 303, 304, 305, 0, 307, 419, 308,
	309, 310, 311, 312, 0, 314, 315, 316, 317, 318,
	319, 322, 323, 324, 326, 327, 421, 328, 329, 0,
	331, 332, 0, 334, 335, 336, 337, 338, 0, 339,
	340, 424, 341, 425, 342, 343, 344, 345, 346, 347,
	348, 350, 0, 0, 352, 353, 354, 356, 357, 358,
	359, 362, 363, 364, 365, 366, 0, 367, 369, 371,
	372, 428, 429, 430, 431, 432, 434, 435, 436, 437,
	373, 374, 390, 236, 230, 184, 228, 229, 233, 234,
	237, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 76, 492, 520, 126, 163, 385, 0, 0, 225,
	0, 278, 282, 0, 376, 0, 0, 0, 0, 134,
	0, 497, 0, 503, 0, 509, 0, 351, 0, 499,
	500, 505, 64, 735, 375, 194, 0, 0, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 501, 498, 502, 508, 496, 506, 493,
	504, 0, 269, 202, 0, 426, 298, 71, 118, 105,
	147, 189, 306, 0, 0, 179, 355, 114, 204, 0,
	93, 238, 0, 330, 201, 0, 313, 333, 0, 222,
	99, 261, 320, 321, 490, 495, 0, 511, 0, 103,
	104, 227, 85, 235, 438, 403, 291, 248, 246, 0,
	213, 270, 433, 0, 0, 133, 0, 128, 226, 370,
	91, 349, 264, 231, 183, 294, 325, 130, 115, 116,
	159, 263, 149, 101, 360, 400, 404, 402, 398, 395,
	399, 396, 397, 401, 150, 394, 0, 368, 737, 728,
	720, 721, 722, 723, 724, 725, 416, 739, 740, 741,
	742, 743, 361, 734, 393, 719, 726, 727, 729, 0,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	60, 0, 61, 62, 63, 65, 66, 67, 489, 68,
	69, 70, 73, 74, 75, 77, 78, 79, 80, 81,
	82, 83, 84, 382, 491, 86, 87, 88, 89, 90,
	92, 94, 95, 96, 97, 98, 100, 102, 0, 0,
	0, 494, 0, 0, 0, 106, 107, 108, 109, 110,
	111, 0, 112, 113, 117, 119, 120, 121, 122, 123,
	124, 127, 0, 129, 131, 0, 132, 135, 0, 136,
	137, 138, 139, 140, 141, 142, 143, 386, 144, 0,
	145, 146, 148, 0, 151, 152, 153, 154, 155, 0,
	156, 388, 389, 157, 158, 160, 161, 162, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	0, 176, 177, 178, 180, 0, 181, 182, 185, 186,
	187, 188, 0, 190, 405, 0, 191, 192, 193, 0,
	0, 195, 196, 197, 198, 199, 200, 203, 406, 205,
	206, 207, 208, 209, 210, 211, 212, 214, 215, 216,
	217, 218, 219, 220, 409, 410, 221, 223, 224, 411,
	413, 414, 507, 239, 240, 241, 242, 243, 244, 245,
	247, 0, 249, 250, 251, 415, 252, 253, 254, 255,
	0, 256, 257, 258, 259, 260, 262, 265, 266, 267,
	268, 0, 271, 272, 273, 274, 275, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	418, 292, 293, 295, 296, 297, 299, 300, 301, 302,
	303, 304, 305, 0, 307, 419, 308, 309, 310, 311,
	312, 0, 314, 315, 316, 317, 318, 319, 322, 323,
	324, 326, 327, 421, 328, 329, 0, 331, 332, 510,
	334, 335, 336, 337, 338, 0, 339, 340, 424, 341,
	425, 342, 343, 344, 345, 346, 347, 348, 350, 0,
	0, 352, 353, 354, 356, 357, 358, 359, 362, 363,
	364, 365, 366, 0, 367, 369, 371, 372, 428, 429,
	430, 431, 432, 434, 435, 436, 437, 373, 374, 390,
	236, 230, 184, 228, 229, 233, 234, 237, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 76, 492,
	0, 126, 163, 385, 0, 0, 225, 0, 278, 282,
	0, 376, 0, 0, 0, 0, 134, 0, 497, 0,
	503, 0, 509, 0, 351, 0, 499, 500, 505, 64,
	422, 375, 194, 0, 0, 0, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	501, 498, 502, 508, 496, 506, 493, 504, 0, 269,
	202, 0, 426, 298, 71, 118, 105, 147, 189, 306,
	0, 0, 179, 355, 114, 204, 0, 93, 238, 0,
	330, 201, 0, 313, 333, 0, 222, 99, 261, 320,
	321, 490, 495, 0, 511, 0, 103, 104, 227, 85,
	235, 438, 403, 291, 248, 246, 0, 213, 270, 433,
	0, 0, 133, 0, 128, 226, 370, 91, 349, 264,
	231, 183, 294, 325, 130, 115, 116, 159, 263, 149,
	101, 360, 400, 404, 402, 398, 395, 399, 396, 397,
	401, 150, 394, 0, 368, 378, 412, 392, 420, 377,
	417, 387, 125, 416, 381, 380, 427, 407, 408, 361,
	423, 393, 391, 384, 383, 379, 0, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 60, 0, 61,
	62, 63, 65, 66, 67, 489, 68, 69, 70, 73,
	74, 75, 77, 78, 79, 80, 81, 82, 83, 84,
	382, 491, 86, 87, 88, 89, 90, 92, 94, 95,
	96, 97, 98, 100, 102, 0, 0, 0, 494, 0,
	0, 0, 106, 107, 108, 109, 110, 111, 0, 112,
	113, 117, 119, 120, 121, 122, 123, 124, 127, 0,
	129, 131, 0, 132, 135, 0, 136, 137, 138, 139,
	140, 141, 142, 143, 386, 144, 0, 145, 146, 148,
	0, 151, 152, 153, 154, 155, 0, 156, 388, 389,
	157, 158, 160, 161, 162, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 0, 176, 177,
	178, 180, 0, 181, 182, 185, 186, 187, 188, 0,
	190, 405, 0, 191, 192, 193, 0, 0, 195, 196,
	197, 198, 199, 200, 203, 406, 205, 206, 207, 208,
	209, 210, 211, 212, 214, 215, 216, 217, 218, 219,
	220, 409, 410, 221, 223, 224, 411, 413, 414, 507,
	239, 240, 241, 242, 243, 244, 245, 247, 0, 249,
	250, 251, 415, 252, 253, 254, 255, 0, 256, 257,
	258, 259, 260, 262, 265, 266, 267, 268, 0, 271,
	272, 273, 274, 275, 276, 277, 279, 280, 281, 283,
	284, 285, 286, 287, 288, 289, 290, 418, 292, 293,
	295, 296, 297, 299, 300, 301, 302, 303, 304, 305,
	0, 307, 419, 308, 309, 310, 311, 312, 0, 314,
	315, 316, 317, 318, 319, 322, 323, 324, 326, 327,
	421, 328, 329, 0, 331, 332, 510, 334, 335, 336,
	337, 338, 0, 339, 340, 424, 341, 425, 342, 343,
	344, 345, 346, 347, 348, 350, 0, 0, 352, 353,
	354, 356, 357, 358, 359, 362, 363, 364, 365, 366,
	0, 367, 369, 371, 372, 428, 429, 430, 431, 432,
	434, 435, 436, 437, 373, 374, 390, 236, 230, 184,
	228, 229, 233, 234, 237, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 962, 76, 0, 0, 126, 163,
	385, 0, 0, 225, 0, 278, 282, 0, 376, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 64, 422, 375, 194,
	0, 0, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 202, 0, 426,
	298, 71, 118, 105, 147, 189, 306, 0, 0, 179,
	355, 114, 204, 0, 93, 238, 0, 330, 201, 0,
	313, 333, 0, 222, 99, 261, 320, 321, 0, 0,
	0, 0, 0, 103, 104, 227, 85, 235, 438, 403,
	291, 248, 246, 0, 213, 270, 433, 0, 0, 133,
	0, 128, 226, 370, 91, 349, 264, 231, 183, 294,
	325, 130, 115, 116, 159, 263, 149, 101, 360, 400,
	404, 402, 398, 395, 399, 396, 397, 401, 150, 394,
	0, 368, 378, 412, 392, 420, 377, 417, 387, 125,
	416, 381, 380, 427, 407, 408, 361, 423, 393, 391,
	384, 383, 379, 0, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 60, 0, 61, 62, 63, 65,
	66, 67, 0, 68, 69, 70, 73, 74, 75, 77,
	78, 79, 80, 81, 82, 83, 84, 382, 0, 86,
	87, 88, 89, 90, 92, 94, 95, 96, 97, 98,
	100, 102, 0, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 110, 111, 0, 112, 113, 117, 119,
	120, 121, 122, 123, 124, 127, 0, 129, 131, 0,
	132, 135, 0, 136, 137, 138, 139, 140, 141, 142,
	143, 386, 144, 0, 145, 146, 148, 0, 151, 152,
	153, 154, 155, 0, 156, 388, 389, 157, 158, 160,
	161, 162, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 0, 176, 177, 178, 180, 0,
	181, 182, 185, 186, 187, 188, 0, 190, 405, 0,
	191, 192, 193, 0, 0, 195, 196, 197, 198, 199,
	200, 203, 406, 205, 206, 207, 208, 209, 210, 211,
	212, 214, 215, 216, 217, 218, 219, 220, 409, 410,
	221, 223, 224, 411, 413, 414, 0, 239, 240, 241,
	242, 243, 244, 245, 247, 0, 249, 250, 251, 415,
	252, 253, 254, 255, 0, 256, 257, 258, 259, 260,
	262, 265, 266, 267, 268, 0, 271, 272, 273, 274,
	275, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 418, 292, 293, 295, 296, 297,
	299, 300, 301, 302, 303, 304, 305, 0, 307, 419,
	308, 309, 310, 311, 312, 0, 314, 315, 316, 317,
	318, 319, 322, 323, 324, 326, 327, 421, 328, 329,
	0, 331, 332, 0, 334, 335, 336, 337, 338, 0,
	339, 340, 424, 341, 425, 342, 343, 344, 345, 346,
	347, 348, 350, 0, 0, 352, 353, 354, 356, 357,
	358, 359, 362, 363, 364, 365, 366, 0, 367, 369,
	371, 372, 428, 429, 430, 431, 432, 434, 435, 436,
	437, 373, 374, 390, 236, 230, 184, 228, 229, 233,
	234, 237, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 76, 0, 0, 126, 163, 385, 0, 0,
	225, 0, 278, 282, 0, 376, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 64, 422, 375, 194, 0, 0, 0,
	232, 0, 0, 0, 45, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 202, 0, 426, 298, 71, 118,
	105, 147, 189, 306, 0, 0, 179, 355, 114, 204,
	0, 93, 238, 0, 330, 201, 0, 313, 333, 0,
	222, 99, 261, 320, 321, 0, 0, 0, 0, 0,
	103, 104, 227, 85, 235, 438, 403, 291, 248, 246,
	0, 213, 270, 433, 0, 0, 133, 0, 128, 226,
	370, 91, 349, 264, 231, 183, 294, 325, 130, 115,
	116, 159, 263, 149, 101, 360, 400, 404, 402, 398,
	395, 399, 396, 397, 401, 150, 394, 0, 368, 378,
	412, 392, 420, 377, 417, 387, 125, 416, 381, 380,
	427, 407, 408, 361, 423, 393, 391, 384, 383, 379,
	0, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 60, 0, 61, 62, 63, 65, 66, 67, 0,
	68, 69, 70, 73, 74, 75, 77, 78, 79, 80,
	81, 82, 83, 84, 382, 0, 86, 87, 88, 89,
	90, 92, 94, 95, 96, 97, 98, 100, 102, 0,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	110, 111, 0, 112, 113, 117, 119, 120, 121, 122,
	123, 124, 127, 0, 129, 131, 0, 132, 135, 0,
	136, 137, 138, 139, 140, 141, 142, 143, 386, 144,
	0, 145, 146, 148, 0, 151, 152, 153, 154, 155,
	0, 156, 388, 389, 157, 158, 160, 161, 162, 164,
	165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 0, 176, 177, 178, 180, 0, 181, 182, 185,
	186, 187, 188, 0, 190, 405, 0, 191, 192, 193,
	0, 0, 195, 196, 197, 198, 199, 200, 203, 406,
	205, 206, 207, 208, 209, 210, 211, 212, 214, 215,
	216, 217, 218, 219, 220, 409, 410, 221, 223, 224,
	411, 413, 414, 0, 239, 240, 241, 242, 243, 244,
	245, 247, 0, 249, 250, 251, 415, 252, 253, 254,
	255, 0, 256, 257, 258, 259, 260, 262, 265, 266,
	267, 268, 0, 271, 272, 273, 274, 275, 276, 277,
	279, 280, 281, 283, 284, 285, 286, 287, 288, 289,
	290, 418, 292, 293, 295, 296, 297, 299, 300, 301,
	302, 303, 304, 305, 0, 307, 419, 308, 309, 310,
	311, 312, 0, 314, 315, 316, 317, 318, 319, 322,
	323, 324, 326, 327, 421, 328, 329, 0, 331, 332,
	0, 334, 335, 336, 337, 338, 0, 339, 340, 424,
	341, 425, 342, 343, 344, 345, 346, 347, 348, 350,
	0, 0, 352, 353, 354, 356, 357, 358, 359, 362,
	363, 364, 365, 366, 0, 367, 369, 371, 372, 428,
	429, 430, 431, 432, 434, 435, 436, 437, 373, 374,
	390, 236, 230, 184, 228, 229, 233, 234, 237, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 76,
	0, 0, 126, 163, 385, 0, 0, 225, 0, 278,
	282, 0, 376, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 351, 0, 0, 0, 0,
	64, 422, 375, 194, 0, 0, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 202, 0, 426, 298, 71, 118, 105, 147, 189,
	306, 0, 0, 179, 355, 114, 204, 0, 93, 238,
	0, 330, 201, 0, 313, 333, 0, 222, 99, 261,
	320, 321, 0, 0, 0, 0, 0, 103, 104, 227,
	85, 235, 438, 403, 291, 248, 246, 0, 1421, 270,
	433, 0, 0, 133, 0, 128, 226, 370, 91, 349,
	264, 231, 183, 294, 325, 130, 115, 116, 159, 263,
	149, 101, 360, 400, 404, 402, 398, 395, 399, 396,
	397, 401, 150, 394, 0, 368, 378, 412, 392, 420,
	377, 417, 387, 125, 416, 381, 380, 427, 407, 408,
	361, 423, 393, 391, 384, 383, 379, 0, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 60, 0,
	61, 62, 63, 65, 66, 67, 0, 68, 69, 70,
	73, 74, 75, 77, 78, 79, 80, 81, 82, 83,
	84, 382, 0, 86, 87, 88, 89, 90, 92, 94,
	95, 96, 97, 98, 100, 102, 0, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 110, 111, 0,
	112, 113, 117, 119, 120, 121, 122, 123, 124, 127,
	0, 129, 131, 0, 132, 135, 0, 136, 137, 138,
	139, 140, 141, 142, 143, 386, 144, 0, 145, 146,
	148, 0, 151, 152, 153, 154, 155, 0, 156, 388,
	389, 157, 158, 160, 161, 162, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 0, 176,
	177, 178, 180, 0, 181, 182, 185, 186, 187, 188,
	0, 190, 405, 0, 191, 192, 193, 0, 0, 195,
	196, 197, 198, 199, 200, 203, 406, 205, 206, 207,
	208, 209, 210, 211, 212, 214, 215, 216, 217, 218,
	219, 220, 409, 410, 221, 223, 224, 411, 413, 414,
	0, 239, 240, 241, 242, 243, 244, 245, 247, 0,
	249, 250, 251, 415, 252, 253, 254, 255, 0, 256,
	257, 258, 259, 260, 262, 265, 266, 267, 268, 0,
	271, 272, 273, 274, 275, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 418, 292,
	293, 295, 296, 297, 299, 300, 301, 302, 303, 304,
	305, 0, 307, 419, 308, 309, 310, 311, 312, 0,
	314, 315, 316, 317, 318, 319, 322, 323, 324, 326,
	327, 421, 328, 329, 0, 331, 332, 0, 334, 335,
	336, 337, 338, 0, 339, 340, 424, 341, 425, 342,
	343, 344, 345, 346, 347, 348, 350, 0, 0, 352,
	353, 354, 356, 357, 358, 359, 362, 363, 364, 365,
	366, 0, 367, 369, 371, 372, 428, 429, 430, 431,
	432, 434, 435, 436, 437, 373, 374, 390, 236, 230,
	184, 228, 229, 233, 234, 237, 46, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 76, 0, 0, 126,
	163, 385, 0, 0, 225, 0, 278, 282, 0, 376,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 64, 422, 375,
	194, 0, 0, 0, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 202, 0,
	426, 298, 71, 118, 105, 147, 189, 306, 0, 0,
	179, 355, 114, 204, 0, 93, 238, 0, 330, 201,
	0, 313, 333, 0, 222, 99, 261, 320, 321, 0,
	0, 0, 0, 0, 103, 104, 227, 85, 235, 438,
	403, 291, 248, 246, 0, 213, 270, 433, 0, 0,
	133, 0, 128, 226, 370, 91, 349, 264, 231, 183,
	294, 325, 130, 115, 116, 159, 263, 149, 101, 360,
	400, 404, 402, 398, 395, 399, 396, 397, 401, 150,
	394, 0, 368, 378, 412, 392, 420, 377, 417, 387,
	125, 416, 381, 380, 427, 407, 408, 361, 423, 393,
	391, 384, 383, 379, 0, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 60, 0, 61, 62, 63,
	65, 66, 67, 0, 68, 69, 70, 73, 74, 75,
	77, 78, 79, 80, 81, 82, 83, 84, 382, 0,
	86, 87, 88, 89, 90, 92, 94, 95, 96, 97,
	98, 100, 102, 0, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 110, 111, 0, 112, 113, 117,
	119, 120, 121, 122, 123, 124, 127, 0, 129, 131,
	0, 132, 135, 0, 136, 137, 138, 139, 140, 141,
	142, 143, 386, 144, 0, 145, 146, 148, 0, 151,
	152, 153, 154, 155, 0, 156, 388, 389, 157, 158,
	160, 161, 162, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 0, 176, 177, 178, 180,
	0, 181, 182, 185, 186, 187, 188, 0, 190, 405,
	0, 191, 192, 193, 0, 0, 195, 196, 197, 198,
	199, 200, 203, 406, 205, 206, 207, 208, 209, 210,
	211, 212, 214, 215, 216, 217, 218, 219, 220, 409,
	410, 221, 223, 224, 411, 413, 414, 0, 239, 240,
	241, 242, 243, 244, 245, 247, 0, 249, 250, 251,
	415, 252, 253, 254, 255, 0, 256, 257, 258, 259,
	260, 262, 265, 266, 267, 268, 0, 271, 272, 273,
	274, 275, 276, 277, 279, 280, 281, 283, 284, 285,
	286, 287, 288, 289, 290, 418, 292, 293, 295, 296,
	297, 299, 300, 301, 302, 303, 304, 305, 0, 307,
	419, 308, 309, 310, 311, 312, 0, 314, 315, 316,
	317, 318, 319, 322, 323, 324, 326, 327, 421, 328,
	329, 0, 331, 332, 0, 334, 335, 336, 337, 338,
	0, 339, 340, 424, 341, 425, 342, 343, 344, 345,
	346, 347, 348, 350, 0, 0, 352, 353, 354, 356,
	357, 358, 359, 362, 363, 364, 365, 366, 0, 367,
	369, 371, 372, 428, 429, 430, 431, 432, 434, 435,
	436, 437, 373, 374, 390, 236, 230, 184, 228, 229,
	233, 234, 237, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 532, 76, 0, 0, 126, 163, 385, 0,
	0, 225, 0, 278, 282, 0, 376, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 64, 422, 375, 194, 0, 0,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 202, 0, 426, 298, 71,
	118, 105, 147, 189, 0, 0, 0, 179, 355, 114,
	204, 0, 93, 238, 0, 330, 201, 0, 313, 333,
	0, 222, 99, 261, 320, 321, 0, 0, 0, 0,
	0, 103, 104, 227, 85, 235, 438, 403, 291, 248,
	246, 0, 213, 270, 433, 0, 0, 133, 0, 128,
	226, 370, 91, 349, 264, 231, 183, 294, 325, 130,
	115, 116, 159, 263, 149, 101, 360, 400, 404, 402,
	398, 395, 399, 396, 397, 401, 150, 394, 0, 368,
	378, 412, 392, 420, 377, 417, 387, 125, 416, 381,
	380, 427, 407, 408, 361, 423, 393, 391, 384, 383,
	379, 0, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 60, 0, 61, 62, 63, 65, 66, 67,
	0, 68, 69, 70, 73, 74, 75, 77, 78, 79,
	80, 81, 82, 83, 84, 382, 0, 86, 87, 88,
	89, 90, 92, 94, 95, 96, 97, 98, 100, 102,
	0, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 110, 111, 0, 112, 113, 117, 119, 120, 121,
	122, 123, 124, 127, 0, 129, 131, 0, 132, 135,
	0, 136, 137, 138, 139, 140, 141, 142, 143, 386,
	144, 0, 145, 146, 148, 0, 151, 152, 153, 154,
	155, 0, 156, 388, 389, 157, 158, 160, 161, 162,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 0, 176, 177, 178, 180, 0, 181, 182,
	185, 186, 187, 188, 0, 190, 405, 0, 191, 192,
	193, 0, 0, 195, 196, 197, 198, 199, 200, 203,
	406, 205, 206, 207, 208, 209, 210, 211, 212, 214,
	215, 216, 217, 218, 219, 220, 409, 410, 221, 223,
	224, 411, 413, 414, 0, 239, 240, 241, 242, 243,
	244, 245, 247, 0, 249, 250, 251, 415, 252, 253,
	254, 255, 0, 256, 257, 258, 259, 260, 262, 265,
	266, 267, 268, 0, 271, 272, 273, 274, 275, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 418, 292, 293, 295, 296, 297, 299, 300,
	301, 302, 303, 304, 305, 0, 307, 419, 308, 309,
	310, 311, 312, 0, 314, 315, 316, 317, 318, 319,
	322, 323, 324, 326, 327, 421, 328, 329, 0, 331,
	332, 0, 334, 335, 336, 337, 338, 0, 339, 340,
	424, 341, 425, 342, 343, 344, 345, 346, 347, 348,
	350, 0, 0, 352, 353, 354, 356, 357, 358, 359,
	362, 363, 364, 365, 366, 0, 367, 369, 371, 372,
	428, 429, 430, 431, 432, 434, 435, 436, 437, 373,
	374, 390, 236, 230, 184, 228, 229, 233, 234, 237,
	46, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	76, 0, 0, 126, 163, 385, 0, 0, 225, 0,
	278, 282, 0, 376, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 64, 422, 375, 194, 0, 0, 0, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 441, 202, 0, 426, 298, 71, 118, 105, 147,
	189, 306, 0, 0, 179, 355, 114, 204, 0, 93,
	238, 0, 330, 201, 0, 313, 333, 0, 222, 99,
	261, 320, 321, 0, 0, 0, 0, 0, 103, 104,
	227, 85, 235, 438, 403, 291, 248, 246, 0, 213,
	270, 433, 0, 0, 133, 0, 128, 226, 370, 91,
	349, 264, 231, 183, 294, 325, 130, 115, 116, 159,
	263, 149, 101, 360, 400, 404, 402, 398, 395, 399,
	396, 397, 401, 150, 394, 0, 368, 378, 412, 392,
	420, 377, 417, 387, 125, 416, 381, 380, 427, 407,
	408, 361, 423, 393, 391, 384, 383, 379, 0, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 60,
	0, 61, 62, 63, 65, 66, 67, 0, 68, 69,
	70, 73, 74, 75, 77, 78, 79, 80, 81, 82,
	83, 84, 382, 0, 86, 87, 88, 89, 90, 92,
	94, 95, 96, 97, 98, 100, 102, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 110, 111,
	0, 112, 113, 117, 119, 120, 121, 122, 123, 124,
	127, 0, 129, 131, 0, 132, 135, 0, 136, 137,
	138, 139, 140, 141, 142, 143, 386, 144, 0, 145,
	146, 148, 0, 151, 152, 153, 154, 155, 0, 156,
	388, 389, 157, 158, 160, 161, 162, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 0,
	176, 177, 178, 180, 0, 181, 182, 185, 186, 187,
	188, 0, 190, 405, 0, 191, 192, 193, 0, 0,
	195, 196, 197, 198, 199, 200, 203, 406, 205, 206,
	207, 208, 209, 210, 211, 212, 214, 215, 216, 217,
	218, 219, 220, 409, 410, 221, 223, 224, 411, 413,
	414, 0, 239, 240, 241, 242, 243, 244, 245, 247,
	0, 249, 250, 251, 415, 252, 253, 254, 255, 0,
	256, 257, 258, 259, 260, 262, 265, 266, 267, 268,
	0, 271, 272, 273, 274, 275, 276, 277, 279, 280,
	281, 283, 284, 285, 286, 287, 288, 289, 290, 418,
	292, 293, 295, 296, 297, 299, 300, 301, 302, 303,
	304, 305, 0, 307, 419, 308, 309, 310, 311, 312,
	0, 314, 315, 316, 317, 318, 319, 322, 323, 324,
	326, 327, 421, 328, 329, 0, 331, 332, 0, 334,
	335, 336, 337, 338, 0, 339, 340, 424, 341, 425,
	342, 343, 344, 345, 346, 347, 348, 350, 0, 0,
	352, 353, 354, 356, 357, 358, 359, 362, 363, 364,
	365, 366, 0, 367, 369, 371, 372, 428, 429, 430,
	431, 432, 434, 435, 436, 437, 373, 374, 390, 236,
	230, 184, 228, 229, 233, 234, 237, 1287, 485, 0,
	0, 0, 0, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 76, 0, 0, 126, 163,
	0, 0, 0, 225, 0, 278, 282, 0, 0, 0,
	0, 1281, 0, 134, 1284, 0, 0, 0, 0, 0,
	1283, 351, 0, 0, 0, 0, 64, 0, 375, 194,
	0, 0, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 202, 0, 0,
	298, 71, 118, 105, 147, 189, 306, 0, 0, 179,
	355, 114, 204, 0, 93, 238, 0, 330, 201, 0,
	313, 333, 0, 222, 99, 261, 320, 321, 0, 0,
	0, 0, 0, 103, 104, 227, 85, 235, 0, 0,
	291, 248, 246, 0, 213, 270, 0, 0, 0, 133,
	0, 128, 226, 370, 91, 349, 264, 231, 183, 294,
	325, 130, 115, 116, 159, 263, 149, 101, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 0,
	0, 368, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 60, 0, 61, 62, 63, 65,
	66, 67, 0, 68, 69, 70, 73, 74, 75, 77,
	78, 79, 80, 81, 82, 83, 84, 0, 0, 86,
	87, 88, 89, 90, 92, 94, 95, 96, 97, 98,
	100, 102, 0, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 110, 111, 0, 112, 113, 117, 119,
	120, 121, 122, 123, 124, 127, 0, 129, 131, 0,
	132, 135, 0, 136, 137, 138, 139, 140, 141, 142,
	143, 0, 144, 0, 145, 146, 148, 0, 151, 152,
	153, 154, 155, 0, 156, 0, 0, 157, 158, 160,
	161, 162, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 0, 176, 177, 178, 180, 0,
	181, 182, 185, 186, 187, 188, 0, 190, 0, 0,
	191, 192, 193, 0, 0, 195, 196, 197, 198, 199,
	200, 203, 0, 205, 206, 207, 208, 209, 210, 211,
	212, 214, 215, 216, 217, 218, 219, 220, 0, 0,
	221, 223, 224, 0, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 245, 247, 0, 249, 250, 251, 0,
	252, 253, 254, 255, 0, 256, 257, 258, 259, 260,
	262, 265, 266, 267, 268, 0, 271, 272, 273, 274,
	275, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 0, 292, 293, 295, 296, 297,
	299, 300, 301, 302, 303, 304, 305, 0, 307, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 316, 317,
	318, 319, 322, 323, 324, 326, 327, 0, 328, 329,
	0, 331, 332, 0, 334, 335, 336, 337, 338, 0,
	339, 340, 0, 341, 0, 342, 343, 344, 345, 346,
	347, 348, 350, 0, 0, 352, 353, 354, 356, 357,
	358, 359, 362, 363, 364, 365, 366, 0, 367, 369,
	371, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	485, 373, 374, 0, 236, 230, 184, 228, 229, 233,
	234, 237, 0, 0, 0, 59, 0, 76, 0, 0,
	126, 163, 0, 0, 0, 225, 0, 278, 282, 0,
	0, 0, 0, 0, 1282, 134, 1284, 1288, 1289, 1280,
	0, 0, 1283, 351, 0, 0, 0, 0, 64, 0,
	375, 194, 0, 0, 0, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 202,
	0, 0, 298, 71, 118, 105, 147, 189, 306, 0,
	0, 179, 355, 114, 204, 0, 93, 238, 0, 330,
	201, 0, 313, 333, 0, 222, 99, 261, 320, 321,
	0, 0, 0, 0, 0, 103, 104, 227, 85, 235,
	0, 0, 291, 248, 246, 0, 213, 270, 0, 0,
	0, 133, 0, 128, 226, 370, 91, 349, 264, 231,
	183, 294, 325, 130, 115, 116, 159, 263, 149, 101,
	360, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 0, 0, 368, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 0, 0, 0, 0, 361, 0,
	0, 0, 0, 0, 0, 0, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 60, 0, 61, 62,
	63, 65, 66, 67, 0, 68, 69, 70, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 83, 84, 0,
	0, 86, 87, 88, 89, 90, 92, 94, 95, 96,
	97, 98, 100, 102, 0, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 110, 111, 0, 112, 113,
	117, 119, 120, 121, 122, 123, 124, 127, 0, 129,
	131, 0, 132, 135, 0, 136, 137, 138, 139, 140,
	141, 142, 143, 0, 144, 0, 145, 146, 148, 0,
	151, 152, 153, 154, 155, 0, 156, 0, 0, 157,
	158, 160, 161, 162, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 0, 176, 177, 178,
	180, 0, 181, 182, 185, 186, 187, 188, 0, 190,
	0, 0, 191, 192, 193, 0, 0, 195, 196, 197,
	198, 199, 200, 203, 0, 205, 206, 207, 208, 209,
	210, 211, 212, 214, 215, 216, 217, 218, 219, 220,
	0, 0, 221, 223, 224, 0, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 245, 247, 0, 249, 250,
	251, 0, 252, 253, 254, 255, 0, 256, 257, 258,
	259, 260, 262, 265, 266, 267, 268, 0, 271, 272,
	273, 274, 275, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 0, 292, 293, 295,
	296, 297, 299, 300, 301, 302, 303, 304, 305, 0,
	307, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	316, 317, 318, 319, 322, 323, 324, 326, 327, 0,
	328, 329, 0, 331, 332, 0, 334, 335, 336, 337,
	338, 0, 339, 340, 0, 341, 0, 342, 343, 344,
	345, 346, 347, 348, 350, 0, 0, 352, 353, 354,
	356, 357, 358, 359, 362, 363, 364, 365, 366, 0,
	367, 369, 371, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 373, 374, 0, 236, 230, 184, 228,
	229, 233, 234, 237, 473, 0, 0, 541, 0, 0,
	0, 551, 552, 553, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 674, 0, 0, 675, 0, 0, 0,
	683, 0, 681, 0, 0, 0, 0, 680, 684, 679,
	0, 685, 0, 0, 0, 676, 677, 678, 682, 473,
	0, 0, 541, 0, 0, 686, 551, 552, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 683, 0, 681, 0, 0,
	0, 0, 680, 684, 679, 0, 685, 0, 0, 0,
	676, 677, 678, 682, 0, 0, 0, 0, 0, 0,
	686, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 549, 550, 0, 0, 0, 0, 0, 0, 542,
	543, 544, 545, 546, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 549, 550, 0, 0,
	0, 0, 0, 0, 542, 543, 544, 545, 546, 547,
}

var yyPact = [...]int16{
	265, -1000, -309, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 377, 208, -1000, 492, 305, 658, 19438,
	-324, 21466, 20452, -197, 265, 512, 19438, 552, 510, 20452,
	305, -1000, -1000, -224, -225, 492, 5173, 5173, -1000, -1000,
	495, -1000, -290, -1000, -272, 17410, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -181,
	-328, 20452, -1000, -183, -1000, -328, 6206, -1000, 20452, 397,
	20959, 19438, 19438, -184, -226, -1000, -1000, -1000, 498, -359,
	-1000, 2592, -1000, -1000, 6206, 6206, 6206, 6206, -1000, -1000,
	-1000, 6206, -1000, -1000, -187, -274, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -185, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 498, -186, -1000, 14367, -274, -1000, 6206, -1000,
	20452, 6206, 20452, -328, 688, 20452, -294, 22963, 263, 677,
	16396, -1000, 20452, 441, 440, 550, 20452, 562, 551, 20452,
	5173, 17917, 6206, 6206, 6206, 6206, 6206, 6206, 6206, 6206,
	6206, 6206, 6206, 6206, 6206, 6206, 623, -1000, -1000, 6206,
	621, 6206, 20452, 575, 6206, 570, -193, 561, 3631, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 218, 218,
	23008, 149, -274, 1964, 12326, -274, 14367, -1000, 4657, 551,
	6206, -1000, -1000, -1000, 1883, -416, -227, -296, -1000, 526,
	-313, -1000, 6206, -1000, 6206, 6206, 623, -1000, -1000, 6206,
	6206, 20452, 575, 570, -193, 561, -187, 493, -1000, 362,
	14874, 427, 20452, 63, -1000, -173, 20452, -1000, -1000, 545,
	10805, 10298, 326, -1000, -1000, -314, 326, 544, 10298, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -260, -1000,
	-1000, -1000, -1000, -1000, -188, 186, -190, -190, -190, -1000,
	-1000, -1000, -1000, -1000, -216, -239, -1000, 177, -191, 177,
	177, -1000, 183, 177, -315, -315, -300, -300, -300, -1000,
	123, 123, 123, 123, 123, 123, 23008, 2052, -1000, 605,
	1738, 6206, 6206, 560, -193, 557, 1507, -1000, -270, 577,
	-1000, 149, 7754, 7754, -1000, -1000, 6206, 6206, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -228, -1000, -273, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -340, 6206, 6206, 6206,
	-1000, 22963, 698, -1000, 544, -321, -1000, 6206, -1000, -1000,
	-194, -1000, 432, 20452, -1000, 22963, 380, 378, 222, -1000,
	-1000, -329, -1000, -1000, -197, -1000, -1000, 545, 16396, 6206,
	-332, -1000, -274, 380, 6722, 9791, -356, 514, 18931, 18931,
	11819, -1000, 18931, 18931, 18931, -161, 549, -198, -199, -272,
	-1000, 468, 9791, 438, -1000, -1000, 438, -1000, 6206, -356,
	-1000, -264, 6206, 3631, -1000, 710, -1000, -1000, -1000, -1000,
	710, -1000, 592, 576, 710, -1000, -200, -1000, 710, -1000,
	-1000, 177, 177, -1000, -1000, 6206, 1497, 451, 7754, 7754,
	-1000, 6206, 6206, 4144, -279, 6206, 1621, -1000, 7754, 7754,
	1591, -333, 225, -274, -1000, 12326, -1000, -232, 5690, -1000,
	-357, -357, 6206, 6206, -1000, -1000, -178, 22963, 305, -1000,
	-1000, -1000, 5173, 195, 305, 209, 20452, -274, 380, -1000,
	22963, -174, 20452, -1000, 22963, 314, 15381, -234, -335, 514,
	-272, 10298, 463, 456, 10298, 522, 446, 446, 446, -1000,
	-1000, -1000, 20452, -202, -1000, 18931, 18931, 18931, 18931, -274,
	-1000, -1000, -1000, -1000, 308, -204, 9284, 6206, -274, 6206,
	436, -1000, -1000, -1000, 645, 22963, 3631, -1000, -336, -1000,
	-1000, -242, -245, 568, 564, -248, 6206, -249, -1000, -1000,
	282, 6206, 6206, 1513, 1139, 135, 282, -1000, -1000, -1000,
	-1000, 167, 6206, 17917, 7754, 7754, 7754, 7754, 7754, 7754,
	7754, 7754, 7754, 7754, 7754, 7754, 106, 106, 6206, -1000,
	6206, -1000, -1000, 6206, -1000, -250, -251, 6206, -255, 22963,
	22963, -1000, -256, -359, 345, 11312, 320, -1000, -1000, 362,
	-1000, -1000, 6206, -1000, 20452, 18931, -1000, 514, 10298, 10298,
	499, 452, 10298, -1000, -1000, -1000, -1000, -206, 20452, -1000,
	-1000, -1000, -1000, -274, -1000, 18424, 291, -210, -367, 1834,
	1778, 645, 223, -1000, -214, 767, -1000, -1000, -1000, -163,
	-1000, -1000, -163, -343, -1000, 282, 282, 6206, 6206, 6206,
	282, -1000, -345, -345, -307, -307, -307, -1000, 106, 106,
	106, 106, 106, 106, 282, 282, -1000, -1000, -1000, -1000,
	412, 342, -351, -1000, 216, 629, 6206, 20452, 220, 22963,
	-1000, -1000, -1000, -1000, 499, -1000, -213, 6206, 10298, -1000,
	20452, -354, -361, -1000, 675, 312, 8777, 7238, 6206, -1000,
	-1000, 202, 428, -1000, 654, 654, 429, -214, 763, -1000,
	354, 3631, -1000, -1000, -1000, -1000, 282, 282, 282, -257,
	407, 405, 396, -1000, 544, 11312, -1000, 20452, 20452, -1000,
	198, -1000, 305, -1000, 20452, 22963, -1000, -364, -1000, -161,
	18424, -1000, -215, 20452, 536, 8270, 237, -368, -1000, 1059,
	7754, 99, 231, -1000, -1000, 356, 6206, 353, -1000, 367,
	544, -1000, -1000, -1000, -1000, 673, 673, -1000, -1000, 673,
	673, 357, 763, -378, -1000, 21971, -1000, -1000, 20452, 401,
	395, 16396, -1000, -1000, 387, -1000, -1000, -277, -1000, 629,
	-1000, -379, -1000, -1000, -1000, 20452, -386, -1000, 16903, -1000,
	237, 536, -1000, -1000, 7238, -371, 3631, 1642, 295, 20452,
	20452, 344, 22963, 352, 532, -1000, 763, -1000, 763, 763,
	763, 13860, 603, 13353, -1000, -1000, 3631, -1000, -1000, -1000,
	-1000, -1000, 22463, -1000, -1000, -1000, -1000, -1000, 794, 780,
	-1000, -1000, -1000, -1000, 17, -1000, 524, 496, 46, 651,
	-1000, -1000, 3113, -1000, 671, -393, -1000, 17917, -1000, 20452,
	426, 307, -1000, -1000, 8270, -1000, 311, 6206, -1000, -1000,
	-1000, -1000, 335, 394, -1000, -1000, 334, 234, 349, -1000,
	-1000, -1000, -1000, -385, -1000, 12846, -385, -1000, -1000, -403,
	-1000, -1000, -1000, -1000, -1000, -1000, 20452, 20452, 20452, 20452,
	-1000, -1000, 393, -1000, -1000, 20452, -1000, 20452, 617, -1000,
	426, -1000, 7754, 7754, 602, -1000, 7754, -1000, 291, -217,
	-384, -1000, 669, -1000, 16396, -1000, -1000, 362, 20452, 415,
	-218, -1000, -1000, -385, -1000, -1000, 22463, -1000, 474, 9,
	6, -1000, -1000, -1000, -1000, -1000, 20452, -1000, 1642, 1642,
	-1000, 1642, 310, 19945, 6206, 3631, -401, 219, -404, -1000,
	6206, -1000, 1089, 20452, 20452, 20452, -1000, 20452, -408, -1000,
	15889, 298, -1000, -1000, 414, 381, -410, 613, -1000, -1000,
	-1000, -418, 374, 19945, 303, 340, 743, -1000, -1000, -1000,
	362, -1000, 1089, -1000, -268, 491, 6206, -1000, -1000, -1000,
	-1000, -1000, -1000, 284, -1000, -1000, 330, 297, 297, 738,
	409, 217, 435, -1000, 281, 22963, -1000, -1000, 244, 270,
	266, 330, 374, -1000, -221, 20452, 414, 20452, -1000, 374,
	250, 247, -1000, 273, -1000, 271, 269, 261, 244, -1000,
	19945, 306, -1000, -1000, -1000, 490, 487, 466, -1000, -1000,
	257, -1000, 256, -1000, 374, -428, -222, 278, 241, 235,
	-1000, -1000, -1000, -1000, 19945, 374, -1000, 238, 236, -429,
	447, -1000, -1000, -1000, 248, -1000,
}

var yyPgo = [...]int16{
	0, 1052, 1050, 744, 1048, 0, 55, 6, 71, 70,
	48, 31, 1048, 1048, 1048, 268, 36, 18, 1047, 1047,
	1045, 1043, 1043, 1043, 1043, 1043, 1043, 61, 1043, 1162,
	749, 713, 9, 1042, 54, 1041, 102, 74, 88, 99,
	87, 85, 39, 1040, 93, 14, 1038, 1037, 1035, 1034,
	1032, 1029, 19, 1027, 62, 1019, 1018, 1016, 1015, 1012,
	96, 84, 59, 103, 1011, 16, 64, 51, 1008, 1007,
	1004, 123, 82, 1000, 999, 95, 97, 44, 81, 90,
	42, 695, 997, 994, 983, 982, 981, 972, 964, 26,
	25, 962, 954, 80, 79, 92, 945, 89, 63, 65,
	52, 941, 939, 934, 932, 7, 57, 40, 926, 15,
	921, 919, 918, 913, 909, 109, 909, 909, 909, 909,
	908, 77, 906, 901, 900, 56, 899, 898, 896, 894,
	894, 891, 34, 887, 24, 867, 38, 866, 76, 680,
	227, 86, 98, 324, 380, 865, 382, 47, 865, 69,
	121, 864, 859, 858, 856, 373, 83, 68, 72, 58,
	852, 723, 848, 361, 360, 845, 842, 841, 840, 107,
	37, 836, 836, 33, 826, 50, 817, 817, 817, 817,
	53, 100, 13, 35, 814, 17, 810, 32, 45, 809,
	41, 91, 4, 11, 8, 804, 66, 802, 21, 790,
	10, 1, 787, 2, 5, 3, 12, 782, 779, 778,
	49,
}

var yyR1 = [...]uint8{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 14, 14, 20, 20, 22, 22, 22, 23,
	23, 24, 24, 25, 25, 26, 26, 27, 27, 28,
	28, 28, 28, 5, 5, 5, 6, 6, 6, 6,
	6, 7, 8, 8, 9, 9, 10, 10, 10, 21,
	21, 12, 12, 11, 11, 11, 13, 13, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 31, 31, 31, 31, 31, 32, 32,
	32, 32, 32, 32, 65, 65, 42, 44, 43, 43,
	43, 33, 33, 38, 38, 41, 41, 40, 40, 40,
	40, 39, 39, 34, 170, 35, 35, 67, 67, 67,
	67, 67, 67, 36, 36, 37, 37, 37, 65, 65,
	45, 46, 46, 46, 46, 46, 52, 52, 52, 54,
	55, 179, 60, 60, 61, 61, 47, 47, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 49,
	49, 50, 50, 53, 53, 53, 53, 53, 53, 56,
	57, 58, 59, 51, 51, 51, 51, 62, 62, 62,
	63, 63, 64, 64, 71, 71, 73, 73, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	72, 72, 66, 68, 69, 70, 76, 76, 75, 77,
	77, 78, 80, 80, 79, 79, 81, 81, 81, 81,
	139, 139, 138, 138, 140, 140, 140, 140, 141, 141,
	142, 142, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 144, 144, 145, 145, 145, 146, 146,
	146, 156, 156, 156, 156, 156, 156, 157, 157, 157,
	157, 158, 158, 159, 159, 160, 161, 161, 161, 162,
	162, 163, 163, 164, 165, 165, 165, 166, 166, 166,
	167, 167, 167, 168, 168, 147, 147, 148, 97, 97,
	97, 120, 150, 150, 149, 149, 149, 149, 151, 151,
	152, 152, 153, 153, 154, 154, 155, 155, 169, 169,
	180, 180, 174, 174, 175, 176, 176, 177, 177, 178,
	172, 172, 171, 171, 173, 186, 186, 188, 188, 187,
	187, 187, 187, 189, 189, 190, 190, 181, 181, 182,
	182, 183, 183, 183, 184, 184, 185, 185, 185, 185,
	185, 191, 196, 195, 195, 199, 199, 197, 197, 198,
	201, 201, 202, 202, 202, 202, 202, 202, 202, 202,
	203, 203, 203, 203, 200, 200, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 205, 205, 205, 205, 205,
	206, 206, 207, 207, 208, 208, 192, 192, 193, 193,
	193, 193, 193, 193, 194, 194, 82, 87, 87, 88,
	88, 88, 88, 88, 109, 109, 89, 89, 93, 129,
	129, 83, 90, 90, 95, 95, 94, 91, 91, 84,
	160, 160, 85, 92, 92, 86, 86, 114, 114, 115,
	115, 121, 121, 121, 122, 122, 123, 123, 125, 125,
	126, 126, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 127, 127, 132,
	133, 133, 133, 133, 133, 133, 128, 128, 134, 136,
	136, 136, 136, 137, 137, 135, 135, 135, 135, 209,
	209, 210, 210, 78, 116, 116, 117, 117, 118, 118,
	119, 119, 99, 99, 99, 99, 99, 110, 110, 111,
	111, 100, 100, 102, 103, 104, 104, 104, 104, 104,
	105, 96, 96, 96, 101, 101, 101, 130, 130, 131,
	131, 106, 106, 106, 107, 108, 108, 20, 20, 112,
	112, 112, 113, 113, 113, 98, 98,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 2,
	0, 3, 0, 2, 0, 1, 0, 2, 0, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 3, 2, 3,
	0, 1, 3, 1, 3, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 2, 4, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 3, 5, 3, 3, 2, 6, 7, 6,
	7, 3, 4, 4, 6, 5, 7, 1, 3, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 0, 2, 2, 3,
	5, 0, 2, 4, 1, 1, 2, 3, 5, 6,
	8, 6, 6, 1, 3, 1, 3, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 0, 2, 3, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 3, 3, 2, 4,
	1, 5, 2, 5, 2, 5, 2, 3, 3, 0,
	1, 0, 3, 0, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 0, 0, 0, 0, 1, 3, 1,
	1, 1, 3, 3, 1, 2, 6, 6, 2, 1,
	1, 0, 1, 3, 3, 2, 1, 1, 2, 0,
	1, 3, 2, 2, 3, 1, 4, 2, 3, 2,
	3, 2, 3, 1, 1, 2, 2, 4, 1, 2,
	3, 3, 4, 5, 4, 5, 4, 2, 2, 2,
	1, 1, 0, 5, 2, 4, 2, 2, 3, 1,
	0, 1, 3, 9, 1, 2, 0, 7, 7, 0,
	10, 6, 0, 4, 5, 2, 0, 1, 2, 4,
	0, 1, 1, 0, 5, 2, 4, 1, 2, 0,
	1, 0, 1, 5, 1, 0, 2, 0, 2, 6,
	2, 0, 1, 3, 2, 4, 0, 1, 3, 2,
	4, 0, 1, 3, 3, 2, 0, 2, 2, 2,
	3, 3, 4, 1, 3, 3, 2, 7, 12, 1,
	3, 2, 3, 3, 1, 2, 2, 2, 2, 1,
	2, 13, 2, 2, 0, 2, 0, 1, 3, 3,
	2, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	3, 3, 6, 0, 3, 0, 2, 3, 2, 3,
	4, 4, 3, 3, 0, 5, 2, 5, 2, 0,
	4, 2, 1, 0, 1, 0, 1, 3, 3, 6,
	7, 5, 7, 9, 2, 0, 7, 1, 3, 1,
	4, 4, 7, 2, 1, 1, 1, 3, 2, 3,
	0, 8, 1, 3, 3, 5, 2, 1, 3, 7,
	2, 0, 10, 1, 2, 11, 9, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 3, 0, 1, 3,
	2, 0, 1, 1, 3, 3, 1, 1, 3, 3,
	3, 3, 4, 4, 3, 3, 2, 1, 3, 2,
	1, 1, 1, 1, 3, 0, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 0, 4, 4, 4, 5, 5, 2, 5, 3,
	5, 2, 0, 3, 1, 2, 5, 5, 8, 3,
	4, 8, 5, 0, 4, 3, 0, 1, 3, 1,
	3, 2, 2, 4, 4, 2, 0, 1, 0, 1,
	1, 0, 2, 2, 0, 2, 0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -77, -82, -83, -84, -85,
	-86, -79, -80, -162, 113, -81, -161, 533, 63, 67,
	-168, 36, 520, 88, 542, 98, 99, 100, 101, -122,
	533, 117, -81, -79, -80, -161, -152, -154, 21, -153,
	41, -144, -10, -145, -5, 66, 4, -15, -16, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 22,
	203, 205, 206, 207, 55, 208, 209, 210, 212, 213,
	214, 90, 71, 215, 216, 217, 24, 218, 219, 220,
	221, 222, 223, 224, 225, 125, 228, 229, 230, 231,
	232, 143, 233, 103, 234, 235, 236, 237, 238, 113,
	239, 156, 240, 122, 123, 92, 248, 249, 250, 251,
	252, 253, 255, 256, 100, 151, 152, 257, 91, 258,
	259, 260, 261, 262, 263, 178, 27, 264, 140, 266,
	150, 267, 269, 138, 42, 270, 272, 273, 274, 275,
	276, 277, 278, 279, 281, 283, 284, 93, 285, 155,
	167, 287, 288, 289, 290, 291, 293, 296, 297, 153,
	298, 299, 300, 28, 301, 302, 303, 304, 305, 306,
	307, 308, 309, 310, 311, 312, 314, 315, 316, 98,
	317, 319, 320, 147, 505, 321, 322, 323, 324, 94,
	326, 329, 330, 331, 58, 334, 335, 336, 337, 338,
	339, 107, 86, 340, 101, 342, 343, 344, 345, 346,
	347, 348, 349, 133, 350, 351, 352, 353, 354, 355,
	356, 359, 112, 360, 361, 32, 141, 124, 506, 507,
	504, 146, 62, 508, 509, 126, 503, 510, 104, 366,
	367, 368, 369, 370, 371, 372, 131, 373, 130, 375,
	376, 377, 379, 380, 381, 382, 384, 385, 386, 387,
	388, 114, 389, 154, 145, 390, 391, 392, 393, 85,
	134, 395, 396, 397, 398, 399, 400, 401, 34, 402,
	403, 404, 35, 405, 406, 407, 408, 409, 410, 411,
	412, 129, 414, 415, 148, 416, 417, 418, 89, 419,
	420, 421, 422, 423, 424, 425, 95, 427, 429, 430,
	431, 432, 433, 109, 435, 436, 437, 438, 439, 440,
	115, 116, 441, 442, 443, 149, 444, 445, 447, 448,
	106, 450, 451, 110, 453, 454, 455, 456, 457, 459,
	460, 462, 464, 465, 466, 467, 468, 469, 470, 144,
	471, 50, 474, 475, 476, 99, 477, 478, 479, 480,
	157, 185, 481, 482, 483, 484, 485, 487, 170, 488,
	142, 489, 490, 500, 501, 57, 37, 175, 171, 191,
	181, 180, 226, 190, 189, 29, 280, 177, 294, 295,
	502, 188, 173, 187, 168, 162, 164, 165, 161, 163,
	158, 166, 160, 128, 159, 327, 341, 183, 184, 357,
	358, 362, 172, 363, 364, 378, 179, 176, 413, 428,
	174, 446, 56, 186, 461, 463, 88, 182, 491, 492,
	493, 494, 495, 135, 496, 497, 498, 499, 127, 543,
	-163, 85, -164, -7, -5, -163, 533, -3, 74, -146,
	-144, 64, 74, -10, -78, -77, 534, 534, -139, -138,
	-140, -29, 538, -31, 536, 537, 31, -71, -33, -32,
	13, 533, -34, 11, 62, -5, -42, 6, -44, 49,
	43, 47, -67, -15, 12, 7, -35, -52, -17, 211,
	117, 227, 25, 82, 244, 118, 80, 44, 77, 52,
	53, 76, 78, 46, 83, 54, 81, 365, 79, 48,
	452, 120, -139, 75, 538, 535, -38, -40, 531, -10,
	533, 533, 543, -163, -21, 533, -65, -29, -87, -10,
	95, -5, 23, -146, -146, -129, 533, 534, -155, 74,
	543, 14, 536, 537, 538, 539, 540, 541, 527, 528,
	529, 18, 19, 20, 30, 33, 52, 53, 54, 46,
	518, 44, 39, 55, -71, 37, 45, 48, 23, -6,
	4, -15, -16, -17, -18, 21, 204, 121, 512, 136,
	96, 60, 513, 38, 514, 515, 516, 119, 26, 241,
	242, 243, 245, 246, 247, 40, 254, 97, 41, 111,
	265, 268, 271, 43, 282, 132, 286, 64, 292, 72,
	73, 313, 318, 74, 325, 328, 68, 332, 333, 31,
	47, 69, 75, 66, 511, 374, 383, 394, 102, 63,
	426, 434, 59, 449, 67, 108, 61, 458, 49, 472,
	473, 105, 84, 192, 51, 65, 486, 36, -29, -29,
	-29, -29, -39, -29, 533, -38, 535, -68, 533, -155,
	533, -5, 538, -40, -29, -41, -10, -65, -164, 23,
	-8, -7, 543, 534, 30, 33, 52, 53, 54, 46,
	44, 39, 55, 37, 45, 48, 62, -88, -77, 104,
	533, 40, 23, -90, -95, -94, 533, -5, -5, -160,
	84, 84, -114, 64, 61, -8, 61, -141, 64, -10,
	-140, -45, -46, -47, -48, -49, -50, -51, -52, 188,
	173, 174, 175, 176, 177, 178, 189, 190, 172, 191,
	-58, -59, -56, -57, 186, 56, -5, 171, -53, 180,
	181, 182, 183, 184, -29, -29, -29, -29, -29, -29,
	-29, -29, -29, -29, -29, -29, -29, -29, 47, 31,
	-29, 46, 44, 37, 45, 48, -29, -11, -5, 56,
	58, -29, -76, 59, 60, -75, 533, 61, -6, 30,
	23, 39, 45, 33, -40, 534, -72, -73, -5, 11,
	-74, 536, 537, 538, 539, 540, 541, 527, 528, 529,
	18, 19, 20, -5, -69, 534, -36, 192, 21, 41,
	-37, -29, -55, -52, -141, -65, 532, 544, 534, 534,
	-165, 86, 31, 543, 534, -29, -96, 75, -109, 105,
	106, -89, -93, -5, 88, 88, -5, -141, 543, 529,
	-91, -94, -39, -97, 65, 533, -142, -143, -144, -80,
	87, -156, -169, -181, -191, -170, 129, 127, 128, -5,
	-67, -143, 533, -115, 114, 534, -115, -147, 65, -142,
	-61, -60, 533, 535, -64, 533, 179, -61, -61, -61,
	533, -62, 520, 521, 533, -62, -63, 185, 533, -63,
	-63, 180, 181, -63, 47, 42, -29, -29, -76, 59,
	-75, 61, 42, 535, -60, 57, -30, -31, 536, 537,
	-30, -65, -29, -39, 534, 535, -70, -66, 543, -37,
	-36, -36, 16, 17, -147, 534, -41, -29, 533, 86,
	-7, -98, 102, 103, 157, 534, 543, -39, -97, -95,
	-29, 534, 543, -98, -29, 122, -80, -156, -8, -143,
	-5, 543, 82, -157, 76, 83, 80, 78, 79, 77,
	-150, -149, 23, -5, -150, -80, -169, -181, -191, -5,
	-150, -150, -150, -180, 520, 64, 533, 533, -38, 75,
	-121, -44, 115, 116, -121, -29, 535, -61, -65, -54,
	-6, -42, -42, 56, 56, -42, 533, -42, -63, -63,
	-29, 42, 42, -30, -30, -29, -29, -5, 4, -15,
	-16, -29, 30, 14, 536, 537, 538, 539, 540, 541,
	527, 528, 529, 18, 19, 20, -30, -30, 30, 534,
	42, -72, 534, 192, -37, -66, -66, 543, -66, -29,
	-29, 532, -78, -138, -101, 533, 75, -77, -77, 104,
	-93, -98, 529, -94, 124, 534, 534, -143, 76, 76,
	-143, -157, 76, -158, 81, -158, -158, -5, 533, -150,
	-150, -150, -150, -38, 126, 533, -31, 135, -196, -29,
	-29, -123, -209, 84, -27, 36, -54, 534, 534, 534,
	57, 57, 534, -65, 534, -29, -29, 30, 30, 42,
	-29, -45, -30, -30, -30, -30, -30, -30, -30, -30,
	-30, -30, -30, -30, -29, -29, -37, 534, 534, 534,
	534, 111, -131, -106, -5, -34, 533, 119, -109, -29,
	-120, -7, -149, -143, -143, -159, 84, 75, 76, -143,
	533, -8, -174, -175, -170, -187, 131, 533, 543, -207,
	-206, 517, -92, -99, -110, -111, 51, -27, 152, -125,
	-126, 533, 4, -62, -62, 534, -29, -29, -29, -66,
	-166, 89, 99, 112, 534, 543, -107, -108, 39, -107,
	-29, -7, 157, -159, 533, -29, -143, -8, 534, 534,
	543, -176, 23, 125, -31, -188, 71, -189, -190, -30,
	40, -29, 168, -98, -99, -100, 30, -100, 107, 31,
	-125, -44, -124, 117, 118, 151, 47, 156, 153, 154,
	42, 155, 150, -127, -132, -6, 534, -167, 92, 91,
	90, 95, -147, -106, -20, -10, -11, -5, -11, 534,
	-77, -8, 534, -180, -175, 533, -182, -183, -5, -188,
	71, -31, 134, 157, 543, 534, 23, -30, -195, 23,
	150, 108, -29, 108, 107, -147, -210, 23, -210, -210,
	-210, 154, 31, 47, -44, 534, 543, -133, -136, -135,
	538, 40, 533, 49, 43, 75, -137, 6, 536, 537,
	-43, -15, -44, -42, -9, -5, 93, 93, -90, -112,
	96, 97, 535, -107, 534, -171, -173, -5, 534, 543,
	-45, 132, -188, -190, 543, -6, -199, 131, -5, -7,
	-102, -103, 111, 99, 100, -104, 111, 98, 71, -44,
	-44, -44, -44, -9, 538, 47, -9, 538, -132, -128,
	-134, -136, -42, 6, -42, 6, 543, 95, 71, 71,
	-147, -113, 32, -5, -151, 23, 534, 543, -45, -183,
	-184, -185, 4, 40, 31, 47, 130, 126, -31, 125,
	-197, -198, -196, 112, 95, 112, -105, 104, 533, 40,
	88, 109, 110, -9, 538, 534, 543, -5, -5, -9,
	-9, 93, 94, -5, -173, -186, 39, -185, -30, -30,
	47, -30, -187, 533, 543, 23, -90, -109, -89, 88,
	533, -134, 61, 84, 95, 95, -11, 125, -192, -193,
	-5, 133, -198, -6, 157, 534, -65, -32, -5, -5,
	-5, -182, 534, 543, 132, -45, -208, 130, -105, -105,
	104, 534, 40, 534, -200, -201, 40, -202, 138, 47,
	49, 43, 50, 140, -193, 126, -194, -206, 29, 130,
	7, -109, -32, 534, 75, -29, 136, 141, -204, 170,
	36, -194, -194, 7, 125, 23, 157, 84, 138, -205,
	147, 146, 142, 136, 142, 136, 143, 144, -204, -200,
	533, -7, -105, -5, -203, -201, 145, 145, 142, 142,
	136, 142, 136, 142, -205, -192, 125, 75, 75, 75,
	142, 142, -203, 534, 533, 140, 138, 148, 148, -192,
	-201, 149, 149, 534, 75, 138,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 1189, 1190, 0, 1425, 1194, 1249, 0, 1281, 0,
	1199, 0, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 1424, 1195, 0, 0, 0, 1201, 1201, 1280, 1284,
	1282, 1198, 1223, 1224, 46, 0, 33, 34, 35, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 360, 361, 362, 363, 364, 365, 366, 367, 368,
	369, 370, 371, 372, 373, 374, 375, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 404, 405, 406, 407, 408,
	409, 410, 411, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 0,
	1246, 278, 1251, 50, 41, 1247, 0, 2, 0, 0,
	1228, 0, 0, 1400, 0, 1191, 1192, 1193, 1287, 1200,
	1202, 1206, 1207, 1001, 0, 0, 0, 0, 1063, 1064,
	1091, 0, 1067, 1164, 241, -2, 1068, 1069, 1070, 1071,
	1072, 1073, 1183, 34, 1076, 1077, 0, 1095, 1118, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 457, 458,
	459, 460, 461, 462, 463, 464, 465, 466, 467, 468,
	469, 470, 1287, 0, 1225, 0, 48, 1083, 1086, 1226,
	0, 0, 0, 1248, 0, 0, 0, 1074, 0, 1387,
	0, 1229, 0, 1411, 0, 0, 0, 0, 1209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 474, 524, 458, -2, -2, 462,
	0, 456, 484, 73, 0, -2, 510, 468, 477, 1205,
	36, 37, 38, 39, 40, 471, 472, 473, 475, 476,
	478, 479, 480, 481, 482, 483, 485, 486, 487, 488,
	489, 490, 491, 492, 493, 494, 495, 496, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 506, 507, 508,
	509, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 1002, 1003,
	1019, 1036, 1065, 0, 0, -2, 0, 1184, 0, 1209,
	0, -2, 1088, 1084, 1085, 0, 0, 0, 1252, 1256,
	0, 42, 0, 1263, 0, 0, 0, 1021, 1023, 0,
	0, 0, 0, 1186, 0, 0, 0, 1503, 1389, 0,
	0, 0, 0, 1209, 1402, 0, 0, 1091, 1230, 1270,
	0, 0, 1420, 1417, 1418, 0, 1420, 1266, 0, 1286,
	1203, 1004, 1110, 1111, 1112, 1113, 1114, 1115, 1125, 400,
	401, 429, 386, 426, 396, 134, 393, 392, 421, 388,
	1139, 1140, 1141, 1142, 432, 431, 1116, 387, 1150, 390,
	389, 436, 416, 417, 1005, 1006, 1007, 1008, 1009, 1010,
	-2, -2, -2, -2, -2, -2, 1017, 1018, 1020, 0,
	-2, 0, 0, 1186, 0, 0, -2, 1032, 53, 0,
	1034, 1035, 0, 0, 1187, 1041, 0, 0, 1204, 474,
	477, 484, 510, 524, 1092, 1091, 0, 1180, 0, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1087, 1185, 1097, 1182, 0, 0, 0,
	1103, 1105, 0, -2, 1266, 0, 1089, 1086, 1227, 1264,
	0, 1254, 0, 0, 49, 1075, 1526, 0, 0, 1394,
	1395, 0, 1396, 1091, 435, 1393, 1388, 1270, 0, 0,
	0, 1407, 1406, 1526, 0, 0, 1410, 1210, 1273, 1273,
	0, 1215, 1273, 1273, 1273, 1291, 300, 447, 412, -2,
	1094, 0, 0, 0, 1419, 1399, 0, 1196, 0, 1208,
	1126, 1125, 0, 0, 1133, 0, 1134, 1135, 1136, 1137,
	0, 1154, 0, 0, 0, 1156, 1152, 1160, 0, 1143,
	1144, 1161, 1161, 1148, 1022, 0, -2, -2, 0, 0,
	1042, 0, 0, 0, 55, 0, 0, 1047, 0, 0,
	0, 0, -2, 1066, 1165, 0, 1093, 0, 0, 1182,
	1182, 1182, 0, 0, 1197, 1283, 0, 1085, 0, 1255,
	43, 1386, 0, 1506, 0, 0, 0, 1398, 1526, 1403,
	1404, 0, 0, 1409, 1268, 112, 1273, 1215, 0, 0,
	-2, 0, 0, 0, 0, 0, 1242, 1242, 1242, 1240,
	1212, 1272, 0, 1277, 1213, 1273, 1273, 1273, 1273, 1116,
	1217, 1219, 1221, 1288, 0, 0, 0, 0, -2, 0,
	-2, 1421, 1422, 1423, 28, 1265, 0, 1127, 0, 1122,
	1119, 0, 0, 0, 0, 0, 0, 0, 1146, 1147,
	-2, 0, 0, 0, 0, -2, -2, 54, 33, 34,
	35, 1033, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1049, 1050, 0, 1188,
	0, 1181, 1098, 0, 1104, 0, 0, 0, 0, 1106,
	1107, 1090, 0, 1525, 0, 0, 0, 1390, 1391, 0,
	1397, 1401, 0, 1408, 0, 1231, 1245, 1211, 0, 0,
	0, 0, 0, 1237, 1241, 1238, 1239, 1275, 0, 1214,
	1218, 1220, 1222, 1096, 1290, 0, 0, 442, 0, 1373,
	0, 28, 0, 1469, 1431, 0, 1123, 1124, 1162, 1159,
	1157, 1158, 1159, 0, 1149, -2, -2, 0, 0, 0,
	-2, 1048, 1051, 1052, 1053, 1054, 1055, 1056, -2, -2,
	-2, -2, -2, -2, -2, -2, 1182, 1099, 1101, 1102,
	1259, 0, 0, 1509, -2, 1516, 0, 0, 0, 1405,
	1269, 1271, 1216, 1232, 0, 1234, 0, 0, 0, 1236,
	0, 0, 0, 1292, 1296, 0, 0, 0, 0, 1332,
	1372, 0, 1526, 1413, 1492, 1492, 0, 1431, 0, 1416,
	1428, 0, 27, 1153, 1155, 1151, -2, -2, -2, 0,
	1262, 0, 0, 1502, 1266, 0, 1511, 15, 0, 1512,
	0, 1505, 0, 1233, 0, 1244, 1235, 0, 1276, 1291,
	0, 1294, 0, 0, 1309, 0, 81, 0, 1313, 0,
	0, 1334, 1371, 1412, 1414, 0, 0, 0, 1487, 0,
	1266, 1426, 1430, 1432, 1433, 1472, 1472, 1436, 1437, 1472,
	1472, 0, 0, 0, 1447, 1455, 1100, 1253, 0, 0,
	0, 0, 1504, 1510, 1521, 14, 1517, 46, 1515, 1516,
	1392, 0, 1274, 1289, 1293, 0, 0, 1319, 0, 1310,
	0, 1311, 1307, 1308, 0, 0, 0, 1316, 1336, 0,
	0, 0, 1491, 0, 1489, 1415, 0, 1471, 0, 0,
	0, 0, 0, 0, 1446, 1429, 0, 1449, 1450, 1451,
	1452, 1453, 0, 1459, 1460, 1461, 1462, 1465, 0, 0,
	1468, 1463, 1464, 1078, 0, 44, 0, 0, 1266, 1524,
	1519, 1520, 0, 1513, 1279, 0, 1302, 0, 1317, 0,
	1321, 0, 1312, 1314, 0, 1315, 0, 0, 1333, 1370,
	1482, 1483, 0, 0, 1494, 1484, 0, 0, 0, 1434,
	1435, 1438, 1439, 1440, 1441, 0, 1444, 1445, 1448, 0,
	1456, 1458, 1079, 1466, 1080, 1467, 0, 0, 0, 0,
	1501, 1514, 0, -2, 1243, 0, 1295, 0, 1306, 1320,
	1323, 1324, 0, 0, 0, 1329, 0, 1322, 0, 0,
	1335, 1337, 0, 1485, 0, 1486, 1495, 0, 0, 0,
	0, 1488, 1490, 1442, 1443, 1454, 0, 45, 0, 0,
	0, 1522, 1523, 1278, 1303, 1304, 0, 1325, 1326, 1327,
	1328, 1330, 0, 0, 0, 0, 1493, 0, 0, 1499,
	0, 1457, 0, 0, 0, 0, 1305, 0, 0, 1376,
	0, -2, 1338, 1339, 0, 0, 0, 0, 1261, 1257,
	1258, 0, 1355, 0, 0, 1385, 0, 1374, 1496, 1497,
	0, 1500, 0, 1318, 0, 0, 0, 1341, 1342, 1343,
	1344, 1345, 1346, 1349, 1377, 1378, 1364, 1385, 1385, 0,
	0, 0, 0, 1331, 0, 1340, 1347, 1348, 1369, 0,
	0, 1364, 1355, 1384, 0, 0, 0, 0, 1354, 1353,
	0, 0, 1356, 0, 1358, 0, 0, 0, 1369, 1381,
	0, 0, 1498, 1260, 1379, 0, 1366, 1368, 1357, 1359,
	0, 1362, 0, 1363, 1353, 0, 0, 0, 0, 0,
	1360, 1361, 1380, 1382, 0, 1350, 1351, 0, 0, 0,
	0, 1365, 1367, 1383, 0, 1352,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 540, 3, 3,
	533, 534, 538, 536, 543, 537, 535, 539, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 544, 542,
	527, 529, 528, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 531, 3, 532, 541,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 525, 57868, 526, 57869, 530,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:317
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:332
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:340
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:355
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:366
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:367
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:368
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:369
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:370
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:371
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:373
		{
			yyVAL.stmt = nil
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:384
		{
			yyVAL.str = yyDollar[1].str
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:385
		{
			yyVAL.str = ""
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:389
		{
			yyVAL.node = yyDollar[1].node
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:390
		{
			yyVAL.node = nil
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:394
		{
			yyVAL.ival = int(ast.DropCascade)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:395
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 18:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:396
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:400
		{
			yyVAL.ival = 1
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:401
		{
			yyVAL.ival = 0
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:405
		{
			yyVAL.ival = 1
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:406
		{
			yyVAL.ival = 0
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:410
		{
			yyVAL.ival = 1
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:411
		{
			yyVAL.ival = 0
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:415
		{
			yyVAL.ival = 1
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:416
		{
			yyVAL.ival = 0
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:420
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:421
		{
			yyVAL.node = nil
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:425
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:426
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:427
		{
			yyVAL.node = nil
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:428
		{
			yyVAL.node = nil
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:437
		{
			yyVAL.str = yyDollar[1].str
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:438
		{
			yyVAL.str = yyDollar[1].str
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:439
		{
			yyVAL.str = yyDollar[1].str
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:443
		{
			yyVAL.str = yyDollar[1].str
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:444
		{
			yyVAL.str = yyDollar[1].str
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:445
		{
			yyVAL.str = yyDollar[1].str
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:446
		{
			yyVAL.str = yyDollar[1].str
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:447
		{
			yyVAL.str = yyDollar[1].str
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:451
		{
			yyVAL.str = yyDollar[1].str
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:456
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:460
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:469
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:473
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:482
		{
			yyVAL.node = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:489
		{
			yyVAL.node = &ast.RangeVar{
				SchemaName: yyDollar[1].str,
				RelName:    yyDollar[3].str,
				Inh:        true, // inheritance enabled by default
			}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:497
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.node = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.node = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.node = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:526
		{
			yyVAL.node = yyDollar[2].node
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:527
		{
			yyVAL.node = nil
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:532
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:536
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:545
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:549
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str), ast.NewString(yyDollar[3].str))
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:553
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.node = nodes
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:565
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:569
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:579
		{
			yyVAL.str = "abort"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:580
		{
			yyVAL.str = "absent"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:581
		{
			yyVAL.str = "absolute"
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:582
		{
			yyVAL.str = "access"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:583
		{
			yyVAL.str = "action"
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:584
		{
			yyVAL.str = "add"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:585
		{
			yyVAL.str = "admin"
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:586
		{
			yyVAL.str = "after"
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:587
		{
			yyVAL.str = "aggregate"
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:588
		{
			yyVAL.str = "also"
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:589
		{
			yyVAL.str = "alter"
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:590
		{
			yyVAL.str = "always"
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:591
		{
			yyVAL.str = "asensitive"
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:592
		{
			yyVAL.str = "assertion"
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:593
		{
			yyVAL.str = "assignment"
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:594
		{
			yyVAL.str = "at"
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:595
		{
			yyVAL.str = "atomic"
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:596
		{
			yyVAL.str = "attach"
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:597
		{
			yyVAL.str = "attribute"
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:598
		{
			yyVAL.str = "backward"
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:599
		{
			yyVAL.str = "before"
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:600
		{
			yyVAL.str = "begin"
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:601
		{
			yyVAL.str = "breadth"
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:602
		{
			yyVAL.str = "by"
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:603
		{
			yyVAL.str = "cache"
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:604
		{
			yyVAL.str = "call"
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:605
		{
			yyVAL.str = "called"
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:606
		{
			yyVAL.str = "cascade"
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:607
		{
			yyVAL.str = "cascaded"
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:608
		{
			yyVAL.str = "catalog"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:609
		{
			yyVAL.str = "chain"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:610
		{
			yyVAL.str = "characteristics"
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:611
		{
			yyVAL.str = "checkpoint"
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:612
		{
			yyVAL.str = "class"
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:613
		{
			yyVAL.str = "close"
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:614
		{
			yyVAL.str = "cluster"
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:615
		{
			yyVAL.str = "columns"
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			yyVAL.str = "comment"
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:617
		{
			yyVAL.str = "comments"
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:618
		{
			yyVAL.str = "commit"
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:619
		{
			yyVAL.str = "committed"
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:620
		{
			yyVAL.str = "compression"
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:621
		{
			yyVAL.str = "conditional"
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.str = "configuration"
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:623
		{
			yyVAL.str = "conflict"
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:624
		{
			yyVAL.str = "connection"
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:625
		{
			yyVAL.str = "constraints"
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:626
		{
			yyVAL.str = "content"
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:627
		{
			yyVAL.str = "continue"
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:628
		{
			yyVAL.str = "conversion"
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:629
		{
			yyVAL.str = "copy"
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:630
		{
			yyVAL.str = "cost"
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.str = "csv"
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:632
		{
			yyVAL.str = "cube"
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:633
		{
			yyVAL.str = "current"
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			yyVAL.str = "cursor"
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:635
		{
			yyVAL.str = "cycle"
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.str = "data"
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:637
		{
			yyVAL.str = "database"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.str = "day"
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:639
		{
			yyVAL.str = "deallocate"
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:640
		{
			yyVAL.str = "declare"
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:641
		{
			yyVAL.str = "defaults"
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:642
		{
			yyVAL.str = "deferred"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.str = "definer"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.str = "delete"
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.str = "delimiter"
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.str = "delimiters"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.str = "depends"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.str = "depth"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.str = "detach"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.str = "dictionary"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.str = "disable"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.str = "discard"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.str = "document"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.str = "domain"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:655
		{
			yyVAL.str = "double"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.str = "drop"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.str = "each"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.str = "empty"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.str = "enable"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.str = "encoding"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.str = "encrypted"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.str = "enum"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.str = "error"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.str = "escape"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.str = "event"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.str = "exclude"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.str = "excluding"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.str = "exclusive"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.str = "execute"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.str = "explain"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.str = "expression"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.str = "extension"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.str = "external"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.str = "family"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.str = "filter"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.str = "finalize"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.str = "first"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.str = "following"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.str = "force"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.str = "format"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.str = "forward"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.str = "function"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.str = "functions"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.str = "generated"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.str = "global"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.str = "granted"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.str = "groups"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.str = "handler"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.str = "header"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.str = "hold"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.str = "hour"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.str = "identity"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.str = "if"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.str = "immediate"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.str = "immutable"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.str = "implicit"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.str = "import"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.str = "include"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.str = "including"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.str = "increment"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:701
		{
			yyVAL.str = "indent"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.str = "index"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.str = "indexes"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.str = "inherit"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:705
		{
			yyVAL.str = "inherits"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:706
		{
			yyVAL.str = "inline"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.str = "input"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:708
		{
			yyVAL.str = "insensitive"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			yyVAL.str = "insert"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:710
		{
			yyVAL.str = "instead"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.str = "invoker"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:712
		{
			yyVAL.str = "isolation"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:713
		{
			yyVAL.str = "keep"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:714
		{
			yyVAL.str = "key"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:715
		{
			yyVAL.str = "keys"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.str = "label"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.str = "language"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:718
		{
			yyVAL.str = "large"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:719
		{
			yyVAL.str = "last"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:720
		{
			yyVAL.str = "leakproof"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:721
		{
			yyVAL.str = "level"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:722
		{
			yyVAL.str = "listen"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:723
		{
			yyVAL.str = "load"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:724
		{
			yyVAL.str = "local"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:725
		{
			yyVAL.str = "location"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			yyVAL.str = "lock"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:727
		{
			yyVAL.str = "locked"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:728
		{
			yyVAL.str = "logged"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.str = "mapping"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:730
		{
			yyVAL.str = "match"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:731
		{
			yyVAL.str = "matched"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:732
		{
			yyVAL.str = "materialized"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:733
		{
			yyVAL.str = "maxvalue"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:734
		{
			yyVAL.str = "merge"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:735
		{
			yyVAL.str = "method"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:736
		{
			yyVAL.str = "minute"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:737
		{
			yyVAL.str = "minvalue"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:738
		{
			yyVAL.str = "mode"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:739
		{
			yyVAL.str = "month"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:740
		{
			yyVAL.str = "move"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:741
		{
			yyVAL.str = "name"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:742
		{
			yyVAL.str = "names"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:743
		{
			yyVAL.str = "nested"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:744
		{
			yyVAL.str = "new"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:745
		{
			yyVAL.str = "next"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:746
		{
			yyVAL.str = "nfc"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:747
		{
			yyVAL.str = "nfd"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:748
		{
			yyVAL.str = "nfkc"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:749
		{
			yyVAL.str = "nfkd"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:750
		{
			yyVAL.str = "no"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:751
		{
			yyVAL.str = "normalized"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:752
		{
			yyVAL.str = "nothing"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:753
		{
			yyVAL.str = "notify"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:754
		{
			yyVAL.str = "nowait"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:755
		{
			yyVAL.str = "nulls"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:756
		{
			yyVAL.str = "object"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:757
		{
			yyVAL.str = "of"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:758
		{
			yyVAL.str = "off"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:759
		{
			yyVAL.str = "oids"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:760
		{
			yyVAL.str = "old"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:761
		{
			yyVAL.str = "omit"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:762
		{
			yyVAL.str = "operator"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:763
		{
			yyVAL.str = "option"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:764
		{
			yyVAL.str = "options"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:765
		{
			yyVAL.str = "ordinality"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:766
		{
			yyVAL.str = "others"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:767
		{
			yyVAL.str = "over"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:768
		{
			yyVAL.str = "overriding"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:769
		{
			yyVAL.str = "owned"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:770
		{
			yyVAL.str = "owner"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:771
		{
			yyVAL.str = "parallel"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:772
		{
			yyVAL.str = "parameter"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:773
		{
			yyVAL.str = "parser"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:774
		{
			yyVAL.str = "partial"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:775
		{
			yyVAL.str = "partition"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:776
		{
			yyVAL.str = "passing"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:777
		{
			yyVAL.str = "password"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:778
		{
			yyVAL.str = "path"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:779
		{
			yyVAL.str = "plan"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:780
		{
			yyVAL.str = "plans"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:781
		{
			yyVAL.str = "policy"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:782
		{
			yyVAL.str = "preceding"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:783
		{
			yyVAL.str = "prepare"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:784
		{
			yyVAL.str = "prepared"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:785
		{
			yyVAL.str = "preserve"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:786
		{
			yyVAL.str = "prior"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:787
		{
			yyVAL.str = "privileges"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:788
		{
			yyVAL.str = "procedural"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:789
		{
			yyVAL.str = "procedure"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:790
		{
			yyVAL.str = "procedures"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:791
		{
			yyVAL.str = "program"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:792
		{
			yyVAL.str = "publication"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:793
		{
			yyVAL.str = "quote"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:794
		{
			yyVAL.str = "quotes"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:795
		{
			yyVAL.str = "range"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:796
		{
			yyVAL.str = "read"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:797
		{
			yyVAL.str = "reassign"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:798
		{
			yyVAL.str = "recheck"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:799
		{
			yyVAL.str = "recursive"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:800
		{
			yyVAL.str = "ref"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:801
		{
			yyVAL.str = "referencing"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:802
		{
			yyVAL.str = "refresh"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:803
		{
			yyVAL.str = "reindex"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:804
		{
			yyVAL.str = "relative"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:805
		{
			yyVAL.str = "release"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:806
		{
			yyVAL.str = "rename"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:807
		{
			yyVAL.str = "repeatable"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:808
		{
			yyVAL.str = "replace"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:809
		{
			yyVAL.str = "replica"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:810
		{
			yyVAL.str = "reset"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:811
		{
			yyVAL.str = "restart"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:812
		{
			yyVAL.str = "restrict"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:813
		{
			yyVAL.str = "return"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:814
		{
			yyVAL.str = "returns"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:815
		{
			yyVAL.str = "revoke"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:816
		{
			yyVAL.str = "role"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:817
		{
			yyVAL.str = "rollback"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:818
		{
			yyVAL.str = "rollup"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:819
		{
			yyVAL.str = "routine"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:820
		{
			yyVAL.str = "routines"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:821
		{
			yyVAL.str = "rows"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:822
		{
			yyVAL.str = "rule"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:823
		{
			yyVAL.str = "savepoint"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:824
		{
			yyVAL.str = "scalar"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:825
		{
			yyVAL.str = "schema"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:826
		{
			yyVAL.str = "schemas"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:827
		{
			yyVAL.str = "scroll"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:828
		{
			yyVAL.str = "search"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:829
		{
			yyVAL.str = "second"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:830
		{
			yyVAL.str = "security"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:831
		{
			yyVAL.str = "sequence"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:832
		{
			yyVAL.str = "sequences"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:833
		{
			yyVAL.str = "serializable"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:834
		{
			yyVAL.str = "server"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:835
		{
			yyVAL.str = "session"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:836
		{
			yyVAL.str = "set"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:837
		{
			yyVAL.str = "sets"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:838
		{
			yyVAL.str = "share"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:839
		{
			yyVAL.str = "show"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:840
		{
			yyVAL.str = "simple"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:841
		{
			yyVAL.str = "skip"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:842
		{
			yyVAL.str = "snapshot"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:843
		{
			yyVAL.str = "source"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:844
		{
			yyVAL.str = "sql"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:845
		{
			yyVAL.str = "stable"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:846
		{
			yyVAL.str = "standalone"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:847
		{
			yyVAL.str = "start"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:848
		{
			yyVAL.str = "statement"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:849
		{
			yyVAL.str = "statistics"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:850
		{
			yyVAL.str = "stdin"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:851
		{
			yyVAL.str = "stdout"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:852
		{
			yyVAL.str = "storage"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:853
		{
			yyVAL.str = "stored"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:854
		{
			yyVAL.str = "strict"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.str = "string"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:856
		{
			yyVAL.str = "strip"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:857
		{
			yyVAL.str = "subscription"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:858
		{
			yyVAL.str = "support"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:859
		{
			yyVAL.str = "sysid"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:860
		{
			yyVAL.str = "system"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:861
		{
			yyVAL.str = "tables"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:862
		{
			yyVAL.str = "tablespace"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:863
		{
			yyVAL.str = "target"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:864
		{
			yyVAL.str = "temp"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:865
		{
			yyVAL.str = "template"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.str = "temporary"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:867
		{
			yyVAL.str = "text"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:868
		{
			yyVAL.str = "ties"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:869
		{
			yyVAL.str = "transaction"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:870
		{
			yyVAL.str = "transform"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:871
		{
			yyVAL.str = "trigger"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:872
		{
			yyVAL.str = "truncate"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:873
		{
			yyVAL.str = "trusted"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:874
		{
			yyVAL.str = "type"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:875
		{
			yyVAL.str = "types"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:876
		{
			yyVAL.str = "uescape"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:877
		{
			yyVAL.str = "unbounded"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:878
		{
			yyVAL.str = "uncommitted"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:879
		{
			yyVAL.str = "unconditional"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:880
		{
			yyVAL.str = "unencrypted"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:881
		{
			yyVAL.str = "unknown"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:882
		{
			yyVAL.str = "unlisten"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:883
		{
			yyVAL.str = "unlogged"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:884
		{
			yyVAL.str = "until"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:885
		{
			yyVAL.str = "update"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:886
		{
			yyVAL.str = "vacuum"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:887
		{
			yyVAL.str = "valid"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:888
		{
			yyVAL.str = "validate"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:889
		{
			yyVAL.str = "validator"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.str = "value"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:891
		{
			yyVAL.str = "varying"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.str = "version"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:893
		{
			yyVAL.str = "view"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.str = "views"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:895
		{
			yyVAL.str = "volatile"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:896
		{
			yyVAL.str = "whitespace"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.str = "within"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:898
		{
			yyVAL.str = "without"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.str = "work"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:900
		{
			yyVAL.str = "wrapper"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:901
		{
			yyVAL.str = "write"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:902
		{
			yyVAL.str = "xml"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:903
		{
			yyVAL.str = "year"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:904
		{
			yyVAL.str = "yes"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:905
		{
			yyVAL.str = "zone"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "between"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "bigint"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "bit"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "boolean"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "char"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "character"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "coalesce"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "dec"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "decimal"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "exists"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "extract"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "float"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "greatest"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "grouping"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "inout"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "int"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "integer"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "interval"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "json"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "json_array"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "json_arrayagg"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "json_exists"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "json_object"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "json_objectagg"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "json_query"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "json_scalar"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "json_serialize"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "json_table"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "json_value"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "least"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "merge_action"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "national"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "nchar"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "none"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "normalize"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "nullif"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "numeric"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "out"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "overlay"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "position"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "precision"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "real"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "row"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "setof"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "smallint"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "substring"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "time"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "timestamp"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "treat"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "trim"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "values"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "varchar"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "xmlattributes"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "xmlconcat"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "xmlelement"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "xmlexists"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "xmlforest"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "xmlparse"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "xmlpi"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "xmlroot"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "xmlserialize"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "xmltable"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "authorization"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "binary"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "collation"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "concurrently"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "cross"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "current_schema"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "freeze"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "full"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "ilike"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "inner"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "is"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "isnull"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "join"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "left"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "like"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "natural"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "notnull"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "outer"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "overlaps"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "right"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "similar"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "tablesample"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "verbose"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "all"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "analyse"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "analyze"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "and"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "any"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "array"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "as"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "asc"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "asymmetric"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "both"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "case"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "cast"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "check"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "collate"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "column"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "constraint"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "create"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "current_catalog"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "current_date"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "current_role"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "current_time"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "current_timestamp"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "current_user"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "default"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "deferrable"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "desc"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "distinct"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "do"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "else"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "end"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "except"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "false"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "fetch"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "for"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "foreign"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "from"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "grant"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "group"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "having"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "in"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "initially"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "intersect"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "into"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "lateral"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "leading"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "limit"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "localtime"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "localtimestamp"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "not"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "null"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "offset"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "on"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "only"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "or"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "order"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "placing"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "primary"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "references"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "returning"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "select"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "session_user"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "some"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "symmetric"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "system_user"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "table"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "then"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "to"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "trailing"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "true"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "union"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "unique"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "user"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "using"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "variadic"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "when"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "where"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "window"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "with"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "abort"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "absent"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "absolute"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "access"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "action"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "add"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "admin"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "after"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "aggregate"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "all"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "also"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "alter"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "always"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "analyse"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "analyze"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "and"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "any"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "asc"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "asensitive"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "assertion"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "assignment"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "asymmetric"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "at"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "atomic"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "attach"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "attribute"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "authorization"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "backward"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "before"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "begin"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "between"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "bigint"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "binary"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "bit"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "boolean"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "both"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "breadth"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "by"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "cache"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "call"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "called"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "cascade"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "cascaded"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "case"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "cast"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "catalog"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "chain"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "characteristics"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "check"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "checkpoint"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "class"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "close"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "cluster"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "coalesce"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "collate"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "collation"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "column"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "columns"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "comment"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "comments"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "commit"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "committed"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "compression"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "concurrently"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "conditional"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "configuration"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "conflict"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "connection"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "constraint"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "constraints"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "content"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "continue"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "conversion"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "copy"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "cost"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "cross"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "csv"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "cube"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "current"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "current_catalog"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "current_date"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "current_role"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "current_schema"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "current_time"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "current_timestamp"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "current_user"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "cursor"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "cycle"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "data"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "database"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "deallocate"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "dec"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "decimal"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "declare"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "default"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "defaults"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "deferrable"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "deferred"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "definer"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "delete"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "delimiter"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "delimiters"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "depends"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "depth"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "desc"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "detach"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "dictionary"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "disable"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "discard"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "distinct"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "do"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "document"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "domain"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "double"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "drop"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "each"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "else"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "empty"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "enable"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "encoding"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "encrypted"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "end"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "enum"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "error"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "escape"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "event"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "exclude"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "excluding"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "exclusive"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "execute"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "exists"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "explain"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "expression"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "extension"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "external"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "extract"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "false"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "family"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "finalize"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "first"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "float"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "following"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "force"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "foreign"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "format"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "forward"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "freeze"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "full"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "function"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "functions"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "generated"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "global"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "granted"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "greatest"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "grouping"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "groups"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "handler"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "header"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "hold"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "identity"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "if"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "ilike"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "immediate"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "immutable"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "implicit"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "import"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "in"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "include"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "including"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "increment"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "indent"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "index"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "indexes"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "inherit"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "inherits"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "initially"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "inline"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "inner"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "inout"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "input"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "insensitive"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "insert"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "instead"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "int"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "integer"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "interval"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "invoker"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "is"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "isolation"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "join"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "json"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "json_array"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "json_arrayagg"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "json_exists"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "json_object"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "json_objectagg"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "json_query"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "json_scalar"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "json_serialize"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "json_table"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "json_value"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "keep"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "key"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "keys"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "label"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "language"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "large"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "last"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "lateral"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "leading"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "leakproof"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "least"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "left"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "level"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "like"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "listen"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "load"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "local"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "localtime"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "localtimestamp"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "location"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "lock"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "locked"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "logged"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "mapping"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "match"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "matched"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "materialized"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "maxvalue"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "merge"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "merge_action"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "method"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "minvalue"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "mode"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "move"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "name"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "names"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "national"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "natural"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "nchar"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "nested"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "new"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "next"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "nfc"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "nfd"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "nfkc"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "nfkd"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "no"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "none"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "normalize"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "normalized"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "not"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "nothing"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "notify"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "nowait"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "null"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "nullif"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "nulls"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "numeric"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "object"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "of"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "off"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "oids"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "old"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "omit"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "only"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "operator"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "option"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "options"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "or"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "ordinality"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "others"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "out"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "outer"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "overlay"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "overriding"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "owned"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "owner"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "parallel"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "parameter"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "parser"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "partial"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "partition"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "passing"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "password"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "path"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "placing"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "plan"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "plans"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "policy"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "position"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "preceding"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "prepare"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "prepared"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "preserve"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "primary"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "prior"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "privileges"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "procedural"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "procedure"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "procedures"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "program"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "publication"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "quote"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "quotes"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "range"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "read"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "real"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "reassign"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "recheck"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "recursive"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "ref"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "references"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "referencing"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "refresh"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "reindex"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "relative"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "release"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "rename"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "repeatable"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "replace"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "replica"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "reset"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "restart"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "restrict"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "return"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "returns"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "revoke"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "right"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "role"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "rollback"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "rollup"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "routine"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "routines"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "row"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "rows"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "rule"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "savepoint"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "scalar"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "schema"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "schemas"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "scroll"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "search"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "security"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "select"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "sequence"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "sequences"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "serializable"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "server"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "session"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "session_user"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "set"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "setof"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "sets"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "share"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "show"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "similar"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "simple"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "skip"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "smallint"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "snapshot"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "some"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "source"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "sql"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "stable"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "standalone"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "start"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "statement"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "statistics"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "stdin"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "stdout"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "storage"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "stored"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "strict"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "string"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "strip"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "subscription"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "substring"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "support"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "symmetric"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "sysid"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "system"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "system_user"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "table"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "tables"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "tablesample"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "tablespace"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "target"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "temp"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "template"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "temporary"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "text"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "then"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "ties"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "time"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "timestamp"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "trailing"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "transaction"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "transform"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "treat"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "trigger"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "trim"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "true"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "truncate"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "trusted"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "type"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "types"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "uescape"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "unbounded"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "uncommitted"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "unconditional"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "unencrypted"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "unique"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "unknown"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "unlisten"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "unlogged"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "until"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "update"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "user"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "using"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "vacuum"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "valid"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "validate"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "validator"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "value"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "values"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "varchar"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "variadic"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "verbose"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "version"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "view"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "views"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "volatile"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "when"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "whitespace"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "work"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "wrapper"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "write"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "xml"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "xmlattributes"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "xmlconcat"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "xmlelement"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "xmlexists"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "xmlforest"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "xmlparse"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "xmlpi"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "xmlroot"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "xmlserialize"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "xmltable"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "yes"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "zone"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1585
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1003:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1590
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1599
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1604
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1609
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1614
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1619
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1010:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1624
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1629
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1634
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1639
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1644
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1649
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1654
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1019:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1022:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1687
		{
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1025:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1692
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1026:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1700
		{
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1027:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1705
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1713
		{
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1029:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1718
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1030:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1726
		{
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1031:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1731
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1739
		{
			// Pass the NodeList directly to NewCollateClause
			nodeList := yyDollar[3].node.(*ast.NodeList)
			collateClause := ast.NewCollateClause(nodeList)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1033:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1747
		{
			// Create timezone function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1753
		{
			// Create timezone function call with no argument
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].astStrList, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1036:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].astStrList, nil, yyDollar[2].node, 0)
		}
	case 1037:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1767
		{
			name := []*ast.String{ast.NewString("BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1038:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1772
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1039:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1777
		{
			name := []*ast.String{ast.NewString("BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1040:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1782
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1787
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1792
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1043:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1797
		{
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1044:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1802
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1045:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1810
		{
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1046:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1815
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1830
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1835
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1840
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1845
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1850
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1855
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1055:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1860
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1865
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1870
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1058:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1875
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1059:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1880
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1885
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1890
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1062:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1895
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1904
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1066:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1913
		{
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(parenExpr, yyDollar[4].list, 0)
			} else {
				yyVAL.node = parenExpr
			}
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1938
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1953
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1957
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1964
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1967
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1970
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1971
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1972
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1977
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1981
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1991
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1084:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1995
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2001
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2002
		{
			yyVAL.node = nil
		}
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2006
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2010
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2014
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1090:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2018
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2023
		{
			yyVAL.list = nil
		}
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2025
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1093:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2037
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2046
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2050
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2054
		{
			// Create function name from ColId + indirection
			result := []*ast.String{ast.NewString(yyDollar[1].str)}
			for _, node := range yyDollar[2].list.Items {
				if str, ok := node.(*ast.String); ok {
					result = append(result, str)
				}
			}
			yyVAL.astStrList = result
		}
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2067
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].astStrList, nil, 0)
		}
	case 1098:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2071
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1099:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2077
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1100:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2083
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1101:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2091
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1102:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2097
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2105
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2109
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2116
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2120
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2124
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2131
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2135
		{
			nodeList := yyDollar[1].node.(*ast.NodeList)
			nodeList.Append(yyDollar[3].node)
			yyVAL.node = nodeList
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2144
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2149
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2150
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2151
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2152
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2153
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2156
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2157
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2158
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2161
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2164
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2167
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2171
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2175
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2182
		{
			yyVAL.list = yyDollar[2].node.(*ast.NodeList)
		}
	case 1125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2186
		{
			yyVAL.list = nil
		}
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2192
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2198
		{
			// Create qualified type name from name + attrs
			names := []string{yyDollar[1].str}
			for _, attr := range yyDollar[2].list.Items {
				names = append(names, attr.(*ast.String).SVal)
			}
			typeName := ast.NewTypeName(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2211
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2215
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2219
		{
			yyVAL.node = ast.NewTypeName([]string{"int2"})
		}
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2223
		{
			yyVAL.node = ast.NewTypeName([]string{"int8"})
		}
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2227
		{
			yyVAL.node = ast.NewTypeName([]string{"float4"})
		}
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2231
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2235
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2239
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2243
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2247
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2251
		{
			yyVAL.node = ast.NewTypeName([]string{"bool"})
		}
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2257
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2261
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2267
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2271
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2277
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2285
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2293
		{
			yyVAL.str = "varchar"
		}
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2297
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2305
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2313
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2323
		{
			yyVAL.node = ast.NewTypeName([]string{yyDollar[1].str})
		}
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2329
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// Note: In full implementation, would set typmods to list with 1
			}
			yyVAL.node = typeName
		}
	case 1151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2340
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2352
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 1153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2364
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2374
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 1155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2384
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 1156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2394
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2405
		{
			yyVAL.ival = 1
		}
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2406
		{
			yyVAL.ival = 0
		}
	case 1159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2407
		{
			yyVAL.ival = 0
		}
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2410
		{
			yyVAL.ival = 1
		}
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2411
		{
			yyVAL.ival = 0
		}
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2415
		{
			if yyDollar[2].ival < 1 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else if yyDollar[2].ival <= 7 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else {
				yyVAL.node = ast.NewTypeName([]string{"float8"})
			}
		}
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2425
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2432
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 1165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2436
		{
			yyVAL.astStrList = yyDollar[3].astStrList
		}
	case 1166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2441
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2442
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2445
		{
			yyVAL.str = "+"
		}
	case 1169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2446
		{
			yyVAL.str = "-"
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2447
		{
			yyVAL.str = "*"
		}
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2448
		{
			yyVAL.str = "/"
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2449
		{
			yyVAL.str = "%"
		}
	case 1173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2450
		{
			yyVAL.str = "^"
		}
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2451
		{
			yyVAL.str = "<"
		}
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2452
		{
			yyVAL.str = ">"
		}
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2453
		{
			yyVAL.str = "="
		}
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2454
		{
			yyVAL.str = "<="
		}
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2455
		{
			yyVAL.str = ">="
		}
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2456
		{
			yyVAL.str = "<>"
		}
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2460
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2464
		{
			yyVAL.astStrList = append([]*ast.String{ast.NewString(yyDollar[1].str)}, yyDollar[3].astStrList...)
		}
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2470
		{
			yyVAL.list = nil
		}
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2473
		{
			yyVAL.node = nil
		}
	case 1184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2476
		{
			yyVAL.node = nil
		}
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2479
		{
			yyVAL.node = nil
		}
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2482
		{
			yyVAL.ival = 0
		}
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2483
		{
			yyVAL.ival = 0
		}
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2487
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2502
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2503
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2507
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2512
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2513
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2521
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2523
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			yyVAL.stmt = selectStmt
		}
	case 1196:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2537
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = convertToResTargetList(yyDollar[3].list.Items)
			}
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2549
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = convertToResTargetList(yyDollar[3].list.Items)
			}
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2561
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = []*ast.ResTarget{starTarget}
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].node)
			yyVAL.stmt = selectStmt
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2571
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2582
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2583
		{
			yyVAL.list = nil
		}
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2587
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2588
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2593
		{
			yyVAL.node = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2597
		{
			// Implicit alias (no AS keyword)
			yyVAL.node = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2602
		{
			// No alias - use default naming
			yyVAL.node = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2607
		{
			// SELECT * - all columns
			yyVAL.node = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2618
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2619
		{
			yyVAL.list = nil
		}
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2623
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2624
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2633
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			if yyDollar[2].node != nil {
				rangeVar.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeVar
		}
	case 1213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2641
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].node != nil {
				alias = yyDollar[2].node.(*ast.Alias)
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2652
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].node != nil {
				alias = yyDollar[3].node.(*ast.Alias)
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2663
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2667
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].node.(*ast.Alias)
			yyVAL.node = joinExpr
		}
	case 1217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2673
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].node != nil {
				rangeFunc.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeFunc
		}
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2681
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].node != nil {
				rangeFunc.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = rangeFunc
		}
	case 1219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2690
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].node != nil {
				rangeTableFunc.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeTableFunc
		}
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2698
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].node != nil {
				rangeTableFunc.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = rangeTableFunc
		}
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2707
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].node != nil {
				jsonTable.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = jsonTable
		}
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2715
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].node != nil {
				jsonTable.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = jsonTable
		}
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2727
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.node = rangeVar
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2733
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2740
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.node = rangeVar
		}
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2746
		{
			rangeVar := yyDollar[2].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 1227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2752
		{
			rangeVar := yyDollar[3].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2762
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2766
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.node = rangeVar
		}
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2772
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.node = rangeVar
		}
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2789
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2793
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2802
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2828
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2854
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2862
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2872
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2873
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2874
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2875
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2880
		{
			yyVAL.ival = 1
		}
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2881
		{
			yyVAL.ival = 0
		}
	case 1243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2891
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].node
			var aliasNode ast.Node = nil
			if yyDollar[5].node != nil {
				aliasNode = yyDollar[5].node
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2902
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2909
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2920
		{
			yyVAL.node = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2924
		{
			yyVAL.node = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2928
		{
			yyVAL.node = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2934
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2935
		{
			yyVAL.node = nil
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2940
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2944
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1253:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:2952
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].node != nil {
				cte.Aliascolnames = yyDollar[2].node.(*ast.NodeList)
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2980
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2981
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2982
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2987
		{
			searchColList := yyDollar[5].node.(*ast.NodeList)
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2993
		{
			searchColList := yyDollar[5].node.(*ast.NodeList)
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2999
		{
			yyVAL.node = nil
		}
	case 1260:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3006
		{
			cycleColList := yyDollar[2].node.(*ast.NodeList)
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3015
		{
			cycleColList := yyDollar[2].node.(*ast.NodeList)
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3023
		{
			yyVAL.node = nil
		}
	case 1263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3034
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].node.(*ast.NodeList)
			selectStmt.ValuesLists = []*ast.NodeList{exprList}
			yyVAL.stmt = selectStmt
		}
	case 1264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3042
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].node.(*ast.NodeList)
			selectStmt.ValuesLists = append(selectStmt.ValuesLists, exprList)
			yyVAL.stmt = selectStmt
		}
	case 1265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3056
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3057
		{
			yyVAL.node = nil
		}
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3061
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3069
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3071
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3075
		{
			yyVAL.node = nil
		}
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3079
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3087
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3088
		{
			yyVAL.node = nil
		}
	case 1274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3093
		{
			nameList := yyDollar[4].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3098
		{
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3102
		{
			nameList := yyDollar[3].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3107
		{
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3115
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.node = alias
		}
	case 1279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3119
		{
			yyVAL.node = nil
		}
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3127
		{
			yyVAL.ival = 1
		}
	case 1281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3128
		{
			yyVAL.ival = 0
		}
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3132
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3133
		{
			yyVAL.list = yyDollar[4].node.(*ast.NodeList)
		}
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3137
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3138
		{
			yyVAL.list = nil
		}
	case 1286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3148
		{
			yyVAL.node = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3151
		{
			yyVAL.node = nil
		}
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3162
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1289:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3171
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3181
		{
			yyVAL.ival = 1
		}
	case 1291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3182
		{
			yyVAL.ival = 0
		}
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3188
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3192
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3199
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].node != nil {
				funcList.Append(yyDollar[2].node)
			}
			yyVAL.list = funcList
		}
	case 1295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3208
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3209
		{
			yyVAL.node = nil
		}
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3219
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3223
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3235
		{
			name := yyDollar[1].str
			fp := &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     &name,
				ArgType:  yyDollar[2].node.(*ast.TypeName),
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
			yyVAL.node = fp
		}
	case 1300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3250
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3251
		{
			yyVAL.list = nil
		}
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3257
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3261
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3270
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3281
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].node.(*ast.NodeList)
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3286
		{
			yyVAL.node = nil
		}
	case 1307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3291
		{
			yyVAL.str = "BY REF"
		}
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3292
		{
			yyVAL.str = "BY VALUE"
		}
	case 1309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3298
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3302
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3306
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3310
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3318
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3322
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3330
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3335
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3344
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, nil, nil, 0)
			// Convert column list to RangeTableFuncCol
			if yyDollar[6].list != nil {
				columns := make([]*ast.RangeTableFuncCol, 0)
				for _, col := range yyDollar[6].list.Items {
					columns = append(columns, col.(*ast.RangeTableFuncCol))
				}
				rangeTableFunc.Columns = columns
			}
			yyVAL.node = rangeTableFunc
		}
	case 1318:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:3360
		{
			// Convert namespace list to []*ResTarget
			var namespaces []*ast.ResTarget
			if yyDollar[5].list != nil {
				namespaces = make([]*ast.ResTarget, len(yyDollar[5].list.Items))
				for i, item := range yyDollar[5].list.Items {
					namespaces[i] = item.(*ast.ResTarget)
				}
			}
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), namespaces, nil, nil, 0)
			// Convert column list to RangeTableFuncCol
			if yyDollar[11].list != nil {
				columns := make([]*ast.RangeTableFuncCol, 0)
				for _, col := range yyDollar[11].list.Items {
					columns = append(columns, col.(*ast.RangeTableFuncCol))
				}
				rangeTableFunc.Columns = columns
			}
			yyVAL.node = rangeTableFunc
		}
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3387
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3391
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3400
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3405
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3410
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3420
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3424
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3433
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3437
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3441
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3445
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3449
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1331:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:3462
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3486
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3497
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3498
		{
			yyVAL.node = nil
		}
	case 1335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3503
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3504
		{
			yyVAL.node = nil
		}
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3508
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3509
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3514
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3522
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3530
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3541
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3542
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3543
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3544
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3545
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3546
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3547
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3548
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3553
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3557
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1352:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3561
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3565
		{
			yyVAL.node = nil
		}
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3570
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3571
		{
			yyVAL.node = nil
		}
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3576
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3577
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3578
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3579
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3580
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3581
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3582
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3583
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3584
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1365:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3589
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3590
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3591
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3592
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3593
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3599
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3619
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3629
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3630
		{
			yyVAL.node = nil
		}
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3635
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3636
		{
			yyVAL.node = nil
		}
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3642
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3646
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3655
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1379:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3664
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1380:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3678
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3692
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1382:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3703
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1383:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3712
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3723
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3724
		{
			yyVAL.node = nil
		}
	case 1386:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3740
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].node.(*ast.RangeVar)
			if yyDollar[1].node != nil {
				insertStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			if yyDollar[6].onconflict != nil {
				insertStmt.OnConflictClause = yyDollar[6].onconflict
			}
			if yyDollar[7].list != nil {
				insertStmt.ReturningList = convertToResTargetList(convertToNodeList(yyDollar[7].list))
			}
			yyVAL.stmt = insertStmt
		}
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3758
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3762
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.node = rangeVar
		}
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3771
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3777
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3784
		{
			insertStmt := ast.NewInsertStmt(nil)
			if yyDollar[2].list != nil {
				insertStmt.Cols = convertToResTargetList(yyDollar[2].list.Items)
			}
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1392:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3793
		{
			insertStmt := ast.NewInsertStmt(nil)
			if yyDollar[2].list != nil {
				insertStmt.Cols = convertToResTargetList(yyDollar[2].list.Items)
			}
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3803
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3812
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3813
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3818
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3822
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3830
		{
			yyVAL.node = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3839
		{
			yyVAL.list = yyDollar[2].node.(*ast.NodeList)
		}
	case 1400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3840
		{
			yyVAL.list = nil
		}
	case 1401:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3850
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].node.(*ast.RangeVar))
			if yyDollar[1].node != nil {
				updateStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			updateStmt.TargetList = convertToResTargetList(yyDollar[5].list.Items)
			if yyDollar[6].list != nil {
				updateStmt.FromClause = yyDollar[6].list
			}
			updateStmt.WhereClause = yyDollar[7].node
			if yyDollar[8].list != nil {
				updateStmt.ReturningList = convertToResTargetList(convertToNodeList(yyDollar[8].list))
			}
			yyVAL.stmt = updateStmt
		}
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3869
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3873
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3884
		{
			target := yyDollar[1].node.(*ast.ResTarget)
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3890
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3910
		{
			yyVAL.node = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3916
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3917
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1409:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3927
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].node.(*ast.RangeVar))
			if yyDollar[1].node != nil {
				deleteStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			if yyDollar[5].node != nil {
				deleteStmt.UsingClause = yyDollar[5].node.(*ast.NodeList)
			}
			deleteStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].list != nil {
				deleteStmt.ReturningList = convertToResTargetList(convertToNodeList(yyDollar[7].list))
			}
			yyVAL.stmt = deleteStmt
		}
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3945
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3949
		{
			yyVAL.node = nil
		}
	case 1412:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3964
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			if yyDollar[1].node != nil {
				mergeStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			mergeStmt.Relation = yyDollar[4].node.(*ast.RangeVar)
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			if yyDollar[9].list != nil {
				// Convert NodeList to slice of MergeWhenClause
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					mergeStmt.MergeWhenClauses = append(mergeStmt.MergeWhenClauses, node.(*ast.MergeWhenClause))
				}
			}
			if yyDollar[10].list != nil {
				mergeStmt.ReturningList = yyDollar[10].list
			}
			yyVAL.stmt = mergeStmt
		}
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3991
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3995
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1415:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:4008
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].node.(*ast.RangeVar),
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Convert column list NodeList to []string
			if yyDollar[4].list != nil {
				nodeList := yyDollar[4].list
				for _, node := range nodeList.Items {
					copyStmt.Attlist = append(copyStmt.Attlist, node.(*ast.String).SVal)
				}
			}
			// Handle legacy options - convert to []*DefElem
			if yyDollar[2].node != nil {
				copyStmt.Options = append(copyStmt.Options, yyDollar[2].node.(*ast.DefElem))
			}
			if yyDollar[8].node != nil {
				copyStmt.Options = append(copyStmt.Options, yyDollar[8].node.(*ast.DefElem))
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options = append(copyStmt.Options, node.(*ast.DefElem))
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1416:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4042
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			if yyDollar[8].node != nil {
				copyStmt.Options = append(copyStmt.Options, yyDollar[8].node.(*ast.DefElem))
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options = append(copyStmt.Options, node.(*ast.DefElem))
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4067
		{
			yyVAL.ival = 1
		}
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4068
		{
			yyVAL.ival = 0
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4072
		{
			yyVAL.ival = 1
		}
	case 1420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4073
		{
			yyVAL.ival = 0
		}
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4077
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4078
		{
			yyVAL.str = ""
		}
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4079
		{
			yyVAL.str = ""
		}
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4084
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "format",
				Arg:      ast.NewString("binary"),
			}
		}
	case 1425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4091
		{
			yyVAL.node = nil
		}
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4096
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "delimiter",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 1427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4103
		{
			yyVAL.node = nil
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4107
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4108
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4113
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4121
		{
			yyVAL.list = nil
		}
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4128
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "format",
				Arg:      ast.NewString("binary"),
			}
		}
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4136
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "freeze",
				Arg:      ast.NewString("true"),
			}
		}
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4144
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "delimiter",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4152
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "null",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4160
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "format",
				Arg:      ast.NewString("csv"),
			}
		}
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4168
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "header",
				Arg:      ast.NewString("true"),
			}
		}
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4176
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "quote",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4184
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "escape",
				Arg:      ast.NewString(yyDollar[3].str),
			}
		}
	case 1440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4192
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_quote",
				Arg:      yyDollar[3].node,
			}
		}
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4200
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_quote",
				Arg:      &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}},
			}
		}
	case 1442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4208
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_not_null",
				Arg:      yyDollar[4].node,
			}
		}
	case 1443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4216
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_not_null",
				Arg:      &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}},
			}
		}
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4224
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_null",
				Arg:      yyDollar[3].node,
			}
		}
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4232
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "force_null",
				Arg:      &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}},
			}
		}
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4240
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  "encoding",
				Arg:      ast.NewString(yyDollar[2].str),
			}
		}
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4252
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4256
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4263
		{
			yyVAL.node = &ast.DefElem{
				BaseNode: ast.BaseNode{Tag: ast.T_DefElem},
				Defname:  yyDollar[1].str,
				Arg:      yyDollar[2].node,
			}
		}
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4273
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4274
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4275
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4276
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4277
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4278
		{
			yyVAL.node = nil
		}
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4283
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4287
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4293
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4297
		{
			yyVAL.str = "true"
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4298
		{
			yyVAL.str = "false"
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4299
		{
			yyVAL.str = "on"
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4300
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4304
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4305
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4309
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4310
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4312
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4317
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4341
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4349
		{
			yyVAL.ival = 1
		}
	case 1475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4350
		{
			yyVAL.ival = 0
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4354
		{
			yyVAL.ival = 1
		}
	case 1477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4355
		{
			yyVAL.ival = 0
		}
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4359
		{
			yyVAL.ival = 1
		}
	case 1479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4360
		{
			yyVAL.ival = 0
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4364
		{
			yyVAL.ival = 1
		}
	case 1481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4365
		{
			yyVAL.ival = 0
		}
	case 1482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4374
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4380
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4386
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4392
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4398
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4406
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1488:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4407
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4411
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1490:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4412
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4416
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4417
		{
			yyVAL.node = nil
		}
	case 1493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4422
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4437
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4446
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].node.(*ast.NodeList)
			yyVAL.node = mergeWhen
		}
	case 1496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4453
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].node.(*ast.NodeList)
			yyVAL.node = mergeWhen
		}
	case 1497:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4460
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].node.(*ast.NodeList)
			yyVAL.node = mergeWhen
		}
	case 1498:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4473
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].node.(*ast.NodeList)
			yyVAL.node = mergeWhen
		}
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4486
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4495
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1501:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4510
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			// Convert NodeList to []*ResTarget for SET clause
			if yyDollar[7].list != nil {
				nodeList := yyDollar[7].list
				for _, node := range nodeList.Items {
					onConflict.TargetList = append(onConflict.TargetList, node.(*ast.ResTarget))
				}
			}
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4526
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4534
		{
			yyVAL.onconflict = nil
		}
	case 1504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4545
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Convert NodeList to []*IndexElem
			if yyDollar[2].list != nil {
				nodeList := yyDollar[2].list
				for _, node := range nodeList.Items {
					indexElem := node.(*ast.IndexElem)
					infer.IndexElems = append(infer.IndexElems, indexElem)
				}
			}
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4560
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4567
		{
			yyVAL.node = nil
		}
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4578
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4582
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4589
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4593
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4600
		{
			indexElem := yyDollar[2].node.(*ast.IndexElem)
			indexElem.Name = yyDollar[1].str
			yyVAL.node = indexElem
		}
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4606
		{
			indexElem := yyDollar[2].node.(*ast.IndexElem)
			indexElem.Expr = yyDollar[1].node
			yyVAL.node = indexElem
		}
	case 1513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4612
		{
			indexElem := yyDollar[4].node.(*ast.IndexElem)
			indexElem.Expr = yyDollar[2].node
			yyVAL.node = indexElem
		}
	case 1514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4621
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			if yyDollar[1].node != nil {
				nodeList := yyDollar[1].node.(*ast.NodeList)
				for _, node := range nodeList.Items {
					indexElem.Collation = append(indexElem.Collation, node.(*ast.String).SVal)
				}
			}
			if yyDollar[2].node != nil {
				nodeList := yyDollar[2].node.(*ast.NodeList)
				for _, node := range nodeList.Items {
					indexElem.Opclass = append(indexElem.Opclass, node.(*ast.String).SVal)
				}
			}
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4644
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4645
		{
			yyVAL.node = nil
		}
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4649
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4650
		{
			yyVAL.node = nil
		}
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4654
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4655
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4656
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4660
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4661
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4662
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4667
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4671
		{
			yyVAL.list = nil
		}
	}
	goto yystack /* stack new state and value */
}
