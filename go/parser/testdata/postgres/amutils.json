[
  {
    "comment": "amutils - Statement 1",
    "query": "select prop, pg_indexam_has_property(a.oid, prop) as \"AM\", pg_index_has_property('onek_hundred'::regclass, prop) as \"Index\", pg_index_column_has_property('onek_hundred'::regclass, 1, prop) as \"Column\" from pg_am a, unnest(array['asc', 'desc', 'nulls_first', 'nulls_last', 'orderable', 'distance_orderable', 'returnable', 'search_array', 'search_nulls', 'clusterable', 'index_scan', 'bitmap_scan', 'backward_scan', 'can_order', 'can_unique', 'can_multi_col', 'can_exclude', 'can_include', 'bogus']::text[]) with ordinality as u(prop,ord) where a.amname = 'btree' order by ord",
    "expected": "SELECT prop, pg_indexam_has_property(a.oid, prop) AS \"AM\", pg_index_has_property(CAST('onek_hundred' AS regclass), prop) AS \"Index\", pg_index_column_has_property(CAST('onek_hundred' AS regclass), 1, prop) AS \"Column\" FROM pg_am AS a, unnest(CAST(ARRAY['asc','desc','nulls_first','nulls_last','orderable','distance_orderable','returnable','search_array','search_nulls','clusterable','index_scan','bitmap_scan','backward_scan','can_order','can_unique','can_multi_col','can_exclude','can_include','bogus'] AS TEXT[])) WITH ORDINALITY AS u(prop, ord) WHERE a.amname = 'btree' ORDER BY ord"
  },
  {
    "comment": "amutils - Statement 2",
    "query": "select prop, pg_indexam_has_property(a.oid, prop) as \"AM\", pg_index_has_property('gcircleind'::regclass, prop) as \"Index\", pg_index_column_has_property('gcircleind'::regclass, 1, prop) as \"Column\" from pg_am a, unnest(array['asc', 'desc', 'nulls_first', 'nulls_last', 'orderable', 'distance_orderable', 'returnable', 'search_array', 'search_nulls', 'clusterable', 'index_scan', 'bitmap_scan', 'backward_scan', 'can_order', 'can_unique', 'can_multi_col', 'can_exclude', 'can_include', 'bogus']::text[]) with ordinality as u(prop,ord) where a.amname = 'gist' order by ord",
    "expected": "SELECT prop, pg_indexam_has_property(a.oid, prop) AS \"AM\", pg_index_has_property(CAST('gcircleind' AS regclass), prop) AS \"Index\", pg_index_column_has_property(CAST('gcircleind' AS regclass), 1, prop) AS \"Column\" FROM pg_am AS a, unnest(CAST(ARRAY['asc','desc','nulls_first','nulls_last','orderable','distance_orderable','returnable','search_array','search_nulls','clusterable','index_scan','bitmap_scan','backward_scan','can_order','can_unique','can_multi_col','can_exclude','can_include','bogus'] AS TEXT[])) WITH ORDINALITY AS u(prop, ord) WHERE a.amname = 'gist' ORDER BY ord"
  },
  {
    "comment": "amutils - Statement 3",
    "query": "select prop, pg_index_column_has_property('onek_hundred'::regclass, 1, prop) as btree, pg_index_column_has_property('hash_i4_index'::regclass, 1, prop) as hash, pg_index_column_has_property('gcircleind'::regclass, 1, prop) as gist, pg_index_column_has_property('sp_radix_ind'::regclass, 1, prop) as spgist_radix, pg_index_column_has_property('sp_quad_ind'::regclass, 1, prop) as spgist_quad, pg_index_column_has_property('botharrayidx'::regclass, 1, prop) as gin, pg_index_column_has_property('brinidx'::regclass, 1, prop) as brin from unnest(array['asc', 'desc', 'nulls_first', 'nulls_last', 'orderable', 'distance_orderable', 'returnable', 'search_array', 'search_nulls', 'bogus']::text[]) with ordinality as u(prop,ord) order by ord",
    "expected": "SELECT prop, pg_index_column_has_property(CAST('onek_hundred' AS regclass), 1, prop) AS btree, pg_index_column_has_property(CAST('hash_i4_index' AS regclass), 1, prop) AS hash, pg_index_column_has_property(CAST('gcircleind' AS regclass), 1, prop) AS gist, pg_index_column_has_property(CAST('sp_radix_ind' AS regclass), 1, prop) AS spgist_radix, pg_index_column_has_property(CAST('sp_quad_ind' AS regclass), 1, prop) AS spgist_quad, pg_index_column_has_property(CAST('botharrayidx' AS regclass), 1, prop) AS gin, pg_index_column_has_property(CAST('brinidx' AS regclass), 1, prop) AS brin FROM unnest(CAST(ARRAY['asc','desc','nulls_first','nulls_last','orderable','distance_orderable','returnable','search_array','search_nulls','bogus'] AS TEXT[])) WITH ORDINALITY AS u(prop, ord) ORDER BY ord"
  },
  {
    "comment": "amutils - Statement 4",
    "query": "select prop, pg_index_has_property('onek_hundred'::regclass, prop) as btree, pg_index_has_property('hash_i4_index'::regclass, prop) as hash, pg_index_has_property('gcircleind'::regclass, prop) as gist, pg_index_has_property('sp_radix_ind'::regclass, prop) as spgist, pg_index_has_property('botharrayidx'::regclass, prop) as gin, pg_index_has_property('brinidx'::regclass, prop) as brin from unnest(array['clusterable', 'index_scan', 'bitmap_scan', 'backward_scan', 'bogus']::text[]) with ordinality as u(prop,ord) order by ord",
    "expected": "SELECT prop, pg_index_has_property(CAST('onek_hundred' AS regclass), prop) AS btree, pg_index_has_property(CAST('hash_i4_index' AS regclass), prop) AS hash, pg_index_has_property(CAST('gcircleind' AS regclass), prop) AS gist, pg_index_has_property(CAST('sp_radix_ind' AS regclass), prop) AS spgist, pg_index_has_property(CAST('botharrayidx' AS regclass), prop) AS gin, pg_index_has_property(CAST('brinidx' AS regclass), prop) AS brin FROM unnest(CAST(ARRAY['clusterable','index_scan','bitmap_scan','backward_scan','bogus'] AS TEXT[])) WITH ORDINALITY AS u(prop, ord) ORDER BY ord"
  },
  {
    "comment": "amutils - Statement 5",
    "query": "select amname, prop, pg_indexam_has_property(a.oid, prop) as p from pg_am a, unnest(array['can_order', 'can_unique', 'can_multi_col', 'can_exclude', 'can_include', 'bogus']::text[]) with ordinality as u(prop,ord) where amtype = 'i' order by amname, ord",
    "expected": "SELECT amname, prop, pg_indexam_has_property(a.oid, prop) AS p FROM pg_am AS a, unnest(CAST(ARRAY['can_order','can_unique','can_multi_col','can_exclude','can_include','bogus'] AS TEXT[])) WITH ORDINALITY AS u(prop, ord) WHERE amtype = 'i' ORDER BY amname, ord"
  },
  {
    "comment": "amutils - Statement 6",
    "query": "CREATE TEMP TABLE foo (f1 int, f2 int, f3 int, f4 int)",
    "expected": "CREATE TEMPORARY TABLE foo (f1 INT, f2 INT, f3 INT, f4 INT)"
  },
  {
    "comment": "amutils - Statement 7",
    "query": "CREATE INDEX fooindex ON foo (f1 desc, f2 asc, f3 nulls first, f4 nulls last)",
    "expected": "CREATE INDEX fooindex ON foo USING btree ( f1 desc, f2 asc, f3 nulls first, f4 nulls last )"
  },
  {
    "comment": "amutils - Statement 8",
    "query": "select col, prop, pg_index_column_has_property(o, col, prop) from (values ('fooindex'::regclass)) v1(o), (values (1,'orderable'),(2,'asc'),(3,'desc'), (4,'nulls_first'),(5,'nulls_last'), (6, 'bogus')) v2(idx,prop), generate_series(1,4) col order by col, idx",
    "expected": "SELECT col, prop, pg_index_column_has_property(o, col, prop) FROM (VALUES (CAST('fooindex' AS regclass))) AS v1(o), (VALUES (1, 'orderable'), (2, 'asc'), (3, 'desc'), (4, 'nulls_first'), (5, 'nulls_last'), (6, 'bogus')) AS v2(idx, prop), generate_series(1, 4) AS col ORDER BY col, idx"
  },
  {
    "comment": "amutils - Statement 9",
    "query": "CREATE INDEX foocover ON foo (f1) INCLUDE (f2,f3)",
    "expected": "CREATE INDEX foocover ON foo USING btree ( f1 ) INCLUDE (f2, f3)"
  },
  {
    "comment": "amutils - Statement 10",
    "query": "select col, prop, pg_index_column_has_property(o, col, prop) from (values ('foocover'::regclass)) v1(o), (values (1,'orderable'),(2,'asc'),(3,'desc'), (4,'nulls_first'),(5,'nulls_last'), (6,'distance_orderable'),(7,'returnable'), (8, 'bogus')) v2(idx,prop), generate_series(1,3) col order by col, idx",
    "expected": "SELECT col, prop, pg_index_column_has_property(o, col, prop) FROM (VALUES (CAST('foocover' AS regclass))) AS v1(o), (VALUES (1, 'orderable'), (2, 'asc'), (3, 'desc'), (4, 'nulls_first'), (5, 'nulls_last'), (6, 'distance_orderable'), (7, 'returnable'), (8, 'bogus')) AS v2(idx, prop), generate_series(1, 3) AS col ORDER BY col, idx"
  }
]
