[
  {
    "comment": "insert - Statement 1",
    "query": "create table inserttest (col1 int4, col2 int4 NOT NULL, col3 text default 'testing')"
  },
  {
    "comment": "insert - Statement 2",
    "query": "insert into inserttest (col1, col2, col3) values (DEFAULT, DEFAULT, DEFAULT)"
  },
  {
    "comment": "insert - Statement 3",
    "query": "insert into inserttest (col2, col3) values (3, DEFAULT)"
  },
  {
    "comment": "insert - Statement 4",
    "query": "insert into inserttest (col1, col2, col3) values (DEFAULT, 5, DEFAULT)"
  },
  {
    "comment": "insert - Statement 5",
    "query": "insert into inserttest values (DEFAULT, 5, 'test')"
  },
  {
    "comment": "insert - Statement 6",
    "query": "insert into inserttest values (DEFAULT, 7)"
  },
  {
    "comment": "insert - Statement 7",
    "query": "select * from inserttest"
  },
  {
    "comment": "insert - Statement 8",
    "query": "insert into inserttest (col1, col2, col3) values (DEFAULT, DEFAULT)"
  },
  {
    "comment": "insert - Statement 9",
    "query": "insert into inserttest (col1, col2, col3) values (1, 2)"
  },
  {
    "comment": "insert - Statement 10",
    "query": "insert into inserttest (col1) values (1, 2)"
  },
  {
    "comment": "insert - Statement 11",
    "query": "insert into inserttest (col1) values (DEFAULT, DEFAULT)"
  },
  {
    "comment": "insert - Statement 12",
    "query": "insert into inserttest values(10, 20, '40'), (-1, 2, DEFAULT), ((select 2), (select i from (values(3)) as foo (i)), 'values are fun!')"
  },
  {
    "comment": "insert - Statement 13",
    "query": "insert into inserttest values(30, 50, repeat('x', 10000))"
  },
  {
    "comment": "insert - Statement 14",
    "query": "select col1, col2, char_length(col3) from inserttest"
  },
  {
    "comment": "insert - Statement 15",
    "query": "drop table inserttest"
  },
  {
    "comment": "insert - Statement 16",
    "query": "CREATE TABLE large_tuple_test (a int, b text) WITH (fillfactor = 10)"
  },
  {
    "comment": "insert - Statement 17",
    "query": "ALTER TABLE large_tuple_test ALTER COLUMN b SET STORAGE plain"
  },
  {
    "comment": "insert - Statement 18",
    "query": "INSERT INTO large_tuple_test (select 1, NULL)"
  },
  {
    "comment": "insert - Statement 19",
    "query": "INSERT INTO large_tuple_test (select 2, repeat('a', 1000))"
  },
  {
    "comment": "insert - Statement 20",
    "query": "SELECT pg_size_pretty(pg_relation_size('large_tuple_test'::regclass, 'main'))"
  },
  {
    "comment": "insert - Statement 21",
    "query": "INSERT INTO large_tuple_test (select 3, NULL)"
  },
  {
    "comment": "insert - Statement 22",
    "query": "INSERT INTO large_tuple_test (select 4, repeat('a', 8126))"
  },
  {
    "comment": "insert - Statement 23",
    "query": "DROP TABLE large_tuple_test"
  },
  {
    "comment": "insert - Statement 24",
    "query": "create type insert_test_type as (if1 int, if2 text[])"
  },
  {
    "comment": "insert - Statement 25",
    "query": "create table inserttest (f1 int, f2 int[], f3 insert_test_type, f4 insert_test_type[])"
  },
  {
    "comment": "insert - Statement 26",
    "query": "insert into inserttest (f2[1], f2[2]) values (1,2)"
  },
  {
    "comment": "insert - Statement 27",
    "query": "insert into inserttest (f2[1], f2[2]) values (3,4), (5,6)"
  },
  {
    "comment": "insert - Statement 28",
    "query": "insert into inserttest (f2[1], f2[2]) select 7,8"
  },
  {
    "comment": "insert - Statement 29",
    "query": "insert into inserttest (f2[1], f2[2]) values (1,default)"
  },
  {
    "comment": "insert - Statement 30",
    "query": "insert into inserttest (f3.if1, f3.if2) values (1,array['foo'])"
  },
  {
    "comment": "insert - Statement 31",
    "query": "insert into inserttest (f3.if1, f3.if2) values (1,'{foo}'), (2,'{bar}')"
  },
  {
    "comment": "insert - Statement 32",
    "query": "insert into inserttest (f3.if1, f3.if2) select 3, '{baz,quux}'"
  },
  {
    "comment": "insert - Statement 33",
    "query": "insert into inserttest (f3.if1, f3.if2) values (1,default)"
  },
  {
    "comment": "insert - Statement 34",
    "query": "insert into inserttest (f3.if2[1], f3.if2[2]) values ('foo', 'bar')"
  },
  {
    "comment": "insert - Statement 35",
    "query": "insert into inserttest (f3.if2[1], f3.if2[2]) values ('foo', 'bar'), ('baz', 'quux')"
  },
  {
    "comment": "insert - Statement 36",
    "query": "insert into inserttest (f3.if2[1], f3.if2[2]) select 'bear', 'beer'"
  },
  {
    "comment": "insert - Statement 37",
    "query": "insert into inserttest (f4[1].if2[1], f4[1].if2[2]) values ('foo', 'bar')"
  },
  {
    "comment": "insert - Statement 38",
    "query": "insert into inserttest (f4[1].if2[1], f4[1].if2[2]) values ('foo', 'bar'), ('baz', 'quux')"
  },
  {
    "comment": "insert - Statement 39",
    "query": "insert into inserttest (f4[1].if2[1], f4[1].if2[2]) select 'bear', 'beer'"
  },
  {
    "comment": "insert - Statement 40",
    "query": "create table inserttest2 (f1 bigint, f2 text)"
  },
  {
    "comment": "insert - Statement 41",
    "query": "create rule irule1 as on insert to inserttest2 do also insert into inserttest (f3.if2[1], f3.if2[2]) values (new.f1,new.f2)"
  },
  {
    "comment": "insert - Statement 42",
    "query": "create rule irule2 as on insert to inserttest2 do also insert into inserttest (f4[1].if1, f4[1].if2[2]) values (1,'fool'),(new.f1,new.f2)"
  },
  {
    "comment": "insert - Statement 43",
    "query": "create rule irule3 as on insert to inserttest2 do also insert into inserttest (f4[1].if1, f4[1].if2[2]) select new.f1, new.f2"
  },
  {
    "comment": "insert - Statement 44",
    "query": "create domain insert_pos_ints as int[] check (value[1] > 0)"
  },
  {
    "comment": "insert - Statement 45",
    "query": "create domain insert_test_domain as insert_test_type check ((value).if2[1] is not null)"
  },
  {
    "comment": "insert - Statement 46",
    "query": "create table inserttesta (f1 int, f2 insert_pos_ints)"
  },
  {
    "comment": "insert - Statement 47",
    "query": "create table inserttestb (f3 insert_test_domain, f4 insert_test_domain[])"
  },
  {
    "comment": "insert - Statement 48",
    "query": "insert into inserttesta (f2[1], f2[2]) values (1,2)"
  },
  {
    "comment": "insert - Statement 49",
    "query": "insert into inserttesta (f2[1], f2[2]) values (3,4), (5,6)"
  },
  {
    "comment": "insert - Statement 50",
    "query": "insert into inserttesta (f2[1], f2[2]) select 7,8"
  },
  {
    "comment": "insert - Statement 51",
    "query": "insert into inserttesta (f2[1], f2[2]) values (1,default)"
  },
  {
    "comment": "insert - Statement 52",
    "query": "insert into inserttesta (f2[1], f2[2]) values (0,2)"
  },
  {
    "comment": "insert - Statement 53",
    "query": "insert into inserttesta (f2[1], f2[2]) values (3,4), (0,6)"
  },
  {
    "comment": "insert - Statement 54",
    "query": "insert into inserttesta (f2[1], f2[2]) select 0,8"
  },
  {
    "comment": "insert - Statement 55",
    "query": "insert into inserttestb (f3.if1, f3.if2) values (1,array['foo'])"
  },
  {
    "comment": "insert - Statement 56",
    "query": "insert into inserttestb (f3.if1, f3.if2) values (1,'{foo}'), (2,'{bar}')"
  },
  {
    "comment": "insert - Statement 57",
    "query": "insert into inserttestb (f3.if1, f3.if2) select 3, '{baz,quux}'"
  },
  {
    "comment": "insert - Statement 58",
    "query": "insert into inserttestb (f3.if1, f3.if2) values (1,default)"
  },
  {
    "comment": "insert - Statement 59",
    "query": "insert into inserttestb (f3.if1, f3.if2) values (1,array[null])"
  },
  {
    "comment": "insert - Statement 60",
    "query": "insert into inserttestb (f3.if1, f3.if2) values (1,'{null}'), (2,'{bar}')"
  },
  {
    "comment": "insert - Statement 61",
    "query": "insert into inserttestb (f3.if1, f3.if2) select 3, '{null,quux}'"
  },
  {
    "comment": "insert - Statement 62",
    "query": "insert into inserttestb (f3.if2[1], f3.if2[2]) values ('foo', 'bar')"
  },
  {
    "comment": "insert - Statement 63",
    "query": "insert into inserttestb (f3.if2[1], f3.if2[2]) values ('foo', 'bar'), ('baz', 'quux')"
  },
  {
    "comment": "insert - Statement 64",
    "query": "insert into inserttestb (f3.if2[1], f3.if2[2]) select 'bear', 'beer'"
  },
  {
    "comment": "insert - Statement 65",
    "query": "insert into inserttestb (f3, f4[1].if2[1], f4[1].if2[2]) values (row(1,'{x}'), 'foo', 'bar')"
  },
  {
    "comment": "insert - Statement 66",
    "query": "insert into inserttestb (f3, f4[1].if2[1], f4[1].if2[2]) values (row(1,'{x}'), 'foo', 'bar'), (row(2,'{y}'), 'baz', 'quux')"
  },
  {
    "comment": "insert - Statement 67",
    "query": "insert into inserttestb (f3, f4[1].if2[1], f4[1].if2[2]) select row(1,'{x}')::insert_test_domain, 'bear', 'beer'"
  },
  {
    "comment": "insert - Statement 68",
    "query": "select * from inserttesta"
  },
  {
    "comment": "insert - Statement 69",
    "query": "select * from inserttestb"
  },
  {
    "comment": "insert - Statement 70",
    "query": "create rule irule1 as on insert to inserttest2 do also insert into inserttestb (f3.if2[1], f3.if2[2]) values (new.f1,new.f2)"
  },
  {
    "comment": "insert - Statement 71",
    "query": "create rule irule2 as on insert to inserttest2 do also insert into inserttestb (f4[1].if1, f4[1].if2[2]) values (1,'fool'),(new.f1,new.f2)"
  },
  {
    "comment": "insert - Statement 72",
    "query": "create rule irule3 as on insert to inserttest2 do also insert into inserttestb (f4[1].if1, f4[1].if2[2]) select new.f1, new.f2"
  },
  {
    "comment": "insert - Statement 73",
    "query": "drop table inserttesta"
  },
  {
    "comment": "insert - Statement 74",
    "query": "drop table inserttestb"
  },
  {
    "comment": "insert - Statement 75",
    "query": "drop domain insert_pos_ints"
  },
  {
    "comment": "insert - Statement 76",
    "query": "drop domain insert_test_domain"
  },
  {
    "comment": "insert - Statement 77",
    "query": "create domain insert_nnarray as int[] check (value[1] is not null and value[2] is not null)"
  },
  {
    "comment": "insert - Statement 78",
    "query": "create domain insert_test_domain as insert_test_type check ((value).if1 is not null and (value).if2 is not null)"
  },
  {
    "comment": "insert - Statement 79",
    "query": "create table inserttesta (f1 insert_nnarray)"
  },
  {
    "comment": "insert - Statement 80",
    "query": "insert into inserttesta (f1[1]) values (1)"
  },
  {
    "comment": "insert - Statement 81",
    "query": "insert into inserttesta (f1[1], f1[2]) values (1, 2)"
  },
  {
    "comment": "insert - Statement 82",
    "query": "create table inserttestb (f1 insert_test_domain)"
  },
  {
    "comment": "insert - Statement 83",
    "query": "insert into inserttestb (f1.if1) values (1)"
  },
  {
    "comment": "insert - Statement 84",
    "query": "insert into inserttestb (f1.if1, f1.if2) values (1, '{foo}')"
  },
  {
    "comment": "insert - Statement 85",
    "query": "drop domain insert_nnarray"
  },
  {
    "comment": "insert - Statement 86",
    "query": "drop type insert_test_type cascade"
  },
  {
    "comment": "insert - Statement 87",
    "query": "create table range_parted ( a text, b int ) partition by range (a, (b+0))"
  },
  {
    "comment": "insert - Statement 88",
    "query": "insert into range_parted values ('a', 11)"
  },
  {
    "comment": "insert - Statement 89",
    "query": "create table part1 partition of range_parted for values from ('a', 1) to ('a', 10)"
  },
  {
    "comment": "insert - Statement 90",
    "query": "create table part2 partition of range_parted for values from ('a', 10) to ('a', 20)"
  },
  {
    "comment": "insert - Statement 91",
    "query": "create table part3 partition of range_parted for values from ('b', 1) to ('b', 10)"
  },
  {
    "comment": "insert - Statement 92",
    "query": "create table part4 partition of range_parted for values from ('b', 10) to ('b', 20)"
  },
  {
    "comment": "insert - Statement 93",
    "query": "insert into part1 values ('a', 11)"
  },
  {
    "comment": "insert - Statement 94",
    "query": "insert into part1 values ('b', 1)"
  },
  {
    "comment": "insert - Statement 95",
    "query": "insert into part1 values ('a', 1)"
  },
  {
    "comment": "insert - Statement 96",
    "query": "insert into part4 values ('b', 21)"
  },
  {
    "comment": "insert - Statement 97",
    "query": "insert into part4 values ('a', 10)"
  },
  {
    "comment": "insert - Statement 98",
    "query": "insert into part4 values ('b', 10)"
  },
  {
    "comment": "insert - Statement 99",
    "query": "insert into part1 values (null)"
  },
  {
    "comment": "insert - Statement 100",
    "query": "insert into part1 values (1)"
  },
  {
    "comment": "insert - Statement 101",
    "query": "create table list_parted ( a text, b int ) partition by list (lower(a))"
  },
  {
    "comment": "insert - Statement 102",
    "query": "create table part_aa_bb partition of list_parted FOR VALUES IN ('aa', 'bb')"
  },
  {
    "comment": "insert - Statement 103",
    "query": "create table part_cc_dd partition of list_parted FOR VALUES IN ('cc', 'dd')"
  },
  {
    "comment": "insert - Statement 104",
    "query": "create table part_null partition of list_parted FOR VALUES IN (null)"
  },
  {
    "comment": "insert - Statement 105",
    "query": "insert into part_aa_bb values ('cc', 1)"
  },
  {
    "comment": "insert - Statement 106",
    "query": "insert into part_aa_bb values ('AAa', 1)"
  },
  {
    "comment": "insert - Statement 107",
    "query": "insert into part_aa_bb values (null)"
  },
  {
    "comment": "insert - Statement 108",
    "query": "insert into part_cc_dd values ('cC', 1)"
  },
  {
    "comment": "insert - Statement 109",
    "query": "insert into part_null values (null, 0)"
  },
  {
    "comment": "insert - Statement 110",
    "query": "create table part_ee_ff partition of list_parted for values in ('ee', 'ff') partition by range (b)"
  },
  {
    "comment": "insert - Statement 111",
    "query": "create table part_ee_ff1 partition of part_ee_ff for values from (1) to (10)"
  },
  {
    "comment": "insert - Statement 112",
    "query": "create table part_ee_ff2 partition of part_ee_ff for values from (10) to (20)"
  },
  {
    "comment": "insert - Statement 113",
    "query": "create table part_default partition of list_parted default"
  },
  {
    "comment": "insert - Statement 114",
    "query": "insert into part_default values ('aa', 2)"
  },
  {
    "comment": "insert - Statement 115",
    "query": "insert into part_default values (null, 2)"
  },
  {
    "comment": "insert - Statement 116",
    "query": "insert into part_default values ('Zz', 2)"
  },
  {
    "comment": "insert - Statement 117",
    "query": "drop table part_default"
  },
  {
    "comment": "insert - Statement 118",
    "query": "create table part_xx_yy partition of list_parted for values in ('xx', 'yy') partition by list (a)"
  },
  {
    "comment": "insert - Statement 119",
    "query": "create table part_xx_yy_p1 partition of part_xx_yy for values in ('xx')"
  },
  {
    "comment": "insert - Statement 120",
    "query": "create table part_xx_yy_defpart partition of part_xx_yy default"
  },
  {
    "comment": "insert - Statement 121",
    "query": "create table part_default partition of list_parted default partition by range(b)"
  },
  {
    "comment": "insert - Statement 122",
    "query": "create table part_default_p1 partition of part_default for values from (20) to (30)"
  },
  {
    "comment": "insert - Statement 123",
    "query": "create table part_default_p2 partition of part_default for values from (30) to (40)"
  },
  {
    "comment": "insert - Statement 124",
    "query": "insert into part_ee_ff1 values ('EE', 11)"
  },
  {
    "comment": "insert - Statement 125",
    "query": "insert into part_default_p2 values ('gg', 43)"
  },
  {
    "comment": "insert - Statement 126",
    "query": "insert into part_ee_ff1 values ('cc', 1)"
  },
  {
    "comment": "insert - Statement 127",
    "query": "insert into part_default values ('gg', 43)"
  },
  {
    "comment": "insert - Statement 128",
    "query": "insert into part_ee_ff1 values ('ff', 1)"
  },
  {
    "comment": "insert - Statement 129",
    "query": "insert into part_ee_ff2 values ('ff', 11)"
  },
  {
    "comment": "insert - Statement 130",
    "query": "insert into part_default_p1 values ('cd', 25)"
  },
  {
    "comment": "insert - Statement 131",
    "query": "insert into part_default_p2 values ('de', 35)"
  },
  {
    "comment": "insert - Statement 132",
    "query": "insert into list_parted values ('ab', 21)"
  },
  {
    "comment": "insert - Statement 133",
    "query": "insert into list_parted values ('xx', 1)"
  },
  {
    "comment": "insert - Statement 134",
    "query": "insert into list_parted values ('yy', 2)"
  },
  {
    "comment": "insert - Statement 135",
    "query": "select tableoid::regclass, * from list_parted"
  },
  {
    "comment": "insert - Statement 136",
    "query": "insert into range_parted values ('a', 0)"
  },
  {
    "comment": "insert - Statement 137",
    "query": "insert into range_parted values ('a', 1)"
  },
  {
    "comment": "insert - Statement 138",
    "query": "insert into range_parted values ('a', 10)"
  },
  {
    "comment": "insert - Statement 139",
    "query": "insert into range_parted values ('a', 20)"
  },
  {
    "comment": "insert - Statement 140",
    "query": "insert into range_parted values ('b', 1)"
  },
  {
    "comment": "insert - Statement 141",
    "query": "insert into range_parted values ('b', 10)"
  },
  {
    "comment": "insert - Statement 142",
    "query": "insert into range_parted values ('a')"
  },
  {
    "comment": "insert - Statement 143",
    "query": "create table part_def partition of range_parted default"
  },
  {
    "comment": "insert - Statement 144",
    "query": "insert into part_def values ('b', 10)"
  },
  {
    "comment": "insert - Statement 145",
    "query": "insert into part_def values ('c', 10)"
  },
  {
    "comment": "insert - Statement 146",
    "query": "insert into range_parted values (null, null)"
  },
  {
    "comment": "insert - Statement 147",
    "query": "insert into range_parted values ('a', null)"
  },
  {
    "comment": "insert - Statement 148",
    "query": "insert into range_parted values (null, 19)"
  },
  {
    "comment": "insert - Statement 149",
    "query": "insert into range_parted values ('b', 20)"
  },
  {
    "comment": "insert - Statement 150",
    "query": "select tableoid::regclass, * from range_parted"
  },
  {
    "comment": "insert - Statement 151",
    "query": "insert into list_parted values (null, 1)"
  },
  {
    "comment": "insert - Statement 152",
    "query": "insert into list_parted (a) values ('aA')"
  },
  {
    "comment": "insert - Statement 153",
    "query": "insert into list_parted values ('EE', 0)"
  },
  {
    "comment": "insert - Statement 154",
    "query": "insert into part_ee_ff values ('EE', 0)"
  },
  {
    "comment": "insert - Statement 155",
    "query": "insert into list_parted values ('EE', 1)"
  },
  {
    "comment": "insert - Statement 156",
    "query": "insert into part_ee_ff values ('EE', 10)"
  },
  {
    "comment": "insert - Statement 157",
    "query": "create table part_gg partition of list_parted for values in ('gg') partition by range (b)"
  },
  {
    "comment": "insert - Statement 158",
    "query": "create table part_gg1 partition of part_gg for values from (minvalue) to (1)"
  },
  {
    "comment": "insert - Statement 159",
    "query": "create table part_gg2 partition of part_gg for values from (1) to (10) partition by range (b)"
  },
  {
    "comment": "insert - Statement 160",
    "query": "create table part_gg2_1 partition of part_gg2 for values from (1) to (5)"
  },
  {
    "comment": "insert - Statement 161",
    "query": "create table part_gg2_2 partition of part_gg2 for values from (5) to (10)"
  },
  {
    "comment": "insert - Statement 162",
    "query": "create table part_ee_ff3 partition of part_ee_ff for values from (20) to (30) partition by range (b)"
  },
  {
    "comment": "insert - Statement 163",
    "query": "create table part_ee_ff3_1 partition of part_ee_ff3 for values from (20) to (25)"
  },
  {
    "comment": "insert - Statement 164",
    "query": "create table part_ee_ff3_2 partition of part_ee_ff3 for values from (25) to (30)"
  },
  {
    "comment": "insert - Statement 165",
    "query": "truncate list_parted"
  },
  {
    "comment": "insert - Statement 166",
    "query": "insert into list_parted values ('aa'), ('cc')"
  },
  {
    "comment": "insert - Statement 167",
    "query": "insert into list_parted select 'Ff', s.a from generate_series(1, 29) s(a)"
  },
  {
    "comment": "insert - Statement 168",
    "query": "insert into list_parted select 'gg', s.a from generate_series(1, 9) s(a)"
  },
  {
    "comment": "insert - Statement 169",
    "query": "insert into list_parted (b) values (1)"
  },
  {
    "comment": "insert - Statement 170",
    "query": "select tableoid::regclass::text, a, min(b) as min_b, max(b) as max_b from list_parted group by 1, 2 order by 1"
  },
  {
    "comment": "insert - Statement 171",
    "query": "create table hash_parted ( a int ) partition by hash (a part_test_int4_ops)"
  },
  {
    "comment": "insert - Statement 172",
    "query": "create table hpart0 partition of hash_parted for values with (modulus 4, remainder 0)"
  },
  {
    "comment": "insert - Statement 173",
    "query": "create table hpart1 partition of hash_parted for values with (modulus 4, remainder 1)"
  },
  {
    "comment": "insert - Statement 174",
    "query": "create table hpart2 partition of hash_parted for values with (modulus 4, remainder 2)"
  },
  {
    "comment": "insert - Statement 175",
    "query": "create table hpart3 partition of hash_parted for values with (modulus 4, remainder 3)"
  },
  {
    "comment": "insert - Statement 176",
    "query": "insert into hash_parted values(generate_series(1,10))"
  },
  {
    "comment": "insert - Statement 177",
    "query": "insert into hpart0 values(12),(16)"
  },
  {
    "comment": "insert - Statement 178",
    "query": "insert into hpart0 values(11)"
  },
  {
    "comment": "insert - Statement 179",
    "query": "insert into hpart3 values(11)"
  },
  {
    "comment": "insert - Statement 180",
    "query": "select tableoid::regclass as part, a, a%4 as \"remainder = a % 4\" from hash_parted order by part"
  },
  {
    "comment": "insert - Statement 181",
    "query": "drop table hash_parted"
  },
  {
    "comment": "insert - Statement 182",
    "query": "create table list_parted (a int) partition by list (a)"
  },
  {
    "comment": "insert - Statement 183",
    "query": "insert into part_default values (1)"
  },
  {
    "comment": "insert - Statement 184",
    "query": "insert into part_default values (-1)"
  },
  {
    "comment": "insert - Statement 185",
    "query": "select tableoid::regclass, a from list_parted"
  },
  {
    "comment": "insert - Statement 186",
    "query": "drop table list_parted"
  },
  {
    "comment": "insert - Statement 187",
    "query": "create table mlparted (a int, b int) partition by range (a, b)"
  },
  {
    "comment": "insert - Statement 188",
    "query": "create table mlparted1 (b int not null, a int not null) partition by range ((b+0))"
  },
  {
    "comment": "insert - Statement 189",
    "query": "create table mlparted11 (like mlparted1)"
  },
  {
    "comment": "insert - Statement 190",
    "query": "alter table mlparted11 drop a"
  },
  {
    "comment": "insert - Statement 191",
    "query": "alter table mlparted11 add a int"
  },
  {
    "comment": "insert - Statement 192",
    "query": "alter table mlparted11 add a int not null"
  },
  {
    "comment": "insert - Statement 193",
    "query": "select attrelid::regclass, attname, attnum from pg_attribute where attname = 'a' and (attrelid = 'mlparted'::regclass or attrelid = 'mlparted1'::regclass or attrelid = 'mlparted11'::regclass) order by attrelid::regclass::text"
  },
  {
    "comment": "insert - Statement 194",
    "query": "alter table mlparted1 attach partition mlparted11 for values from (2) to (5)"
  },
  {
    "comment": "insert - Statement 195",
    "query": "alter table mlparted attach partition mlparted1 for values from (1, 2) to (1, 10)"
  },
  {
    "comment": "insert - Statement 196",
    "query": "insert into mlparted values (1, 2)"
  },
  {
    "comment": "insert - Statement 197",
    "query": "select tableoid::regclass, * from mlparted"
  },
  {
    "comment": "insert - Statement 198",
    "query": "insert into mlparted (a, b) values (1, 5)"
  },
  {
    "comment": "insert - Statement 199",
    "query": "truncate mlparted"
  },
  {
    "comment": "insert - Statement 200",
    "query": "alter table mlparted add constraint check_b check (b = 3)"
  },
  {
    "comment": "insert - Statement 201",
    "query": "create function mlparted11_trig_fn() returns trigger AS $$ begin NEW.b := 4"
  },
  {
    "comment": "insert - Statement 202",
    "query": "return NEW"
  },
  {
    "comment": "insert - Statement 203",
    "query": "end"
  },
  {
    "comment": "insert - Statement 204",
    "query": "$$ language plpgsql"
  },
  {
    "comment": "insert - Statement 205",
    "query": "create trigger mlparted11_trig before insert ON mlparted11 for each row execute procedure mlparted11_trig_fn()"
  },
  {
    "comment": "insert - Statement 206",
    "query": "drop trigger mlparted11_trig on mlparted11"
  },
  {
    "comment": "insert - Statement 207",
    "query": "drop function mlparted11_trig_fn()"
  },
  {
    "comment": "insert - Statement 208",
    "query": "insert into mlparted1 (a, b) values (2, 3)"
  },
  {
    "comment": "insert - Statement 209",
    "query": "create table lparted_nonullpart (a int, b char) partition by list (b)"
  },
  {
    "comment": "insert - Statement 210",
    "query": "create table lparted_nonullpart_a partition of lparted_nonullpart for values in ('a')"
  },
  {
    "comment": "insert - Statement 211",
    "query": "insert into lparted_nonullpart values (1)"
  },
  {
    "comment": "insert - Statement 212",
    "query": "drop table lparted_nonullpart"
  },
  {
    "comment": "insert - Statement 213",
    "query": "alter table mlparted drop constraint check_b"
  },
  {
    "comment": "insert - Statement 214",
    "query": "create table mlparted12 partition of mlparted1 for values from (5) to (10)"
  },
  {
    "comment": "insert - Statement 215",
    "query": "create table mlparted2 (b int not null, a int not null)"
  },
  {
    "comment": "insert - Statement 216",
    "query": "alter table mlparted attach partition mlparted2 for values from (1, 10) to (1, 20)"
  },
  {
    "comment": "insert - Statement 217",
    "query": "create table mlparted3 partition of mlparted for values from (1, 20) to (1, 30)"
  },
  {
    "comment": "insert - Statement 218",
    "query": "create table mlparted4 (like mlparted)"
  },
  {
    "comment": "insert - Statement 219",
    "query": "alter table mlparted4 drop a"
  },
  {
    "comment": "insert - Statement 220",
    "query": "alter table mlparted4 add a int not null"
  },
  {
    "comment": "insert - Statement 221",
    "query": "alter table mlparted attach partition mlparted4 for values from (1, 30) to (1, 40)"
  },
  {
    "comment": "insert - Statement 222",
    "query": "with ins (a, b, c) as (insert into mlparted (b, a) select s.a, 1 from generate_series(2, 39) s(a) returning tableoid::regclass, *) select a, b, min(c), max(c) from ins group by a, b order by 1"
  },
  {
    "comment": "insert - Statement 223",
    "query": "alter table mlparted add c text"
  },
  {
    "comment": "insert - Statement 224",
    "query": "create table mlparted5 (c text, a int not null, b int not null) partition by list (c)"
  },
  {
    "comment": "insert - Statement 225",
    "query": "create table mlparted5a (a int not null, c text, b int not null)"
  },
  {
    "comment": "insert - Statement 226",
    "query": "alter table mlparted5 attach partition mlparted5a for values in ('a')"
  },
  {
    "comment": "insert - Statement 227",
    "query": "alter table mlparted attach partition mlparted5 for values from (1, 40) to (1, 50)"
  },
  {
    "comment": "insert - Statement 228",
    "query": "alter table mlparted add constraint check_b check (a = 1 and b < 45)"
  },
  {
    "comment": "insert - Statement 229",
    "query": "insert into mlparted values (1, 45, 'a')"
  },
  {
    "comment": "insert - Statement 230",
    "query": "create function mlparted5abrtrig_func() returns trigger as $$ begin new.c = 'b'; return new; end; $$ language plpgsql"
  },
  {
    "comment": "insert - Statement 231",
    "query": "create trigger mlparted5abrtrig before insert on mlparted5a for each row execute procedure mlparted5abrtrig_func()"
  },
  {
    "comment": "insert - Statement 232",
    "query": "insert into mlparted5 (a, b, c) values (1, 40, 'a')"
  },
  {
    "comment": "insert - Statement 233",
    "query": "drop table mlparted5"
  },
  {
    "comment": "insert - Statement 234",
    "query": "create table mlparted_def partition of mlparted default partition by range(a)"
  },
  {
    "comment": "insert - Statement 235",
    "query": "create table mlparted_def1 partition of mlparted_def for values from (40) to (50)"
  },
  {
    "comment": "insert - Statement 236",
    "query": "create table mlparted_def2 partition of mlparted_def for values from (50) to (60)"
  },
  {
    "comment": "insert - Statement 237",
    "query": "insert into mlparted values (40, 100)"
  },
  {
    "comment": "insert - Statement 238",
    "query": "insert into mlparted_def1 values (42, 100)"
  },
  {
    "comment": "insert - Statement 239",
    "query": "insert into mlparted_def2 values (54, 50)"
  },
  {
    "comment": "insert - Statement 240",
    "query": "insert into mlparted values (70, 100)"
  },
  {
    "comment": "insert - Statement 241",
    "query": "insert into mlparted_def1 values (52, 50)"
  },
  {
    "comment": "insert - Statement 242",
    "query": "insert into mlparted_def2 values (34, 50)"
  },
  {
    "comment": "insert - Statement 243",
    "query": "create table mlparted_defd partition of mlparted_def default"
  },
  {
    "comment": "insert - Statement 244",
    "query": "select tableoid::regclass, * from mlparted_def"
  },
  {
    "comment": "insert - Statement 245",
    "query": "alter table mlparted add d int, add e int"
  },
  {
    "comment": "insert - Statement 246",
    "query": "alter table mlparted drop e"
  },
  {
    "comment": "insert - Statement 247",
    "query": "create table mlparted5 partition of mlparted for values from (1, 40) to (1, 50) partition by range (c)"
  },
  {
    "comment": "insert - Statement 248",
    "query": "create table mlparted5_ab partition of mlparted5 for values from ('a') to ('c') partition by list (c)"
  },
  {
    "comment": "insert - Statement 249",
    "query": "create table mlparted5_cd partition of mlparted5 for values from ('c') to ('e') partition by list (c)"
  },
  {
    "comment": "insert - Statement 250",
    "query": "create table mlparted5_a partition of mlparted5_ab for values in ('a')"
  },
  {
    "comment": "insert - Statement 251",
    "query": "create table mlparted5_b (d int, b int, c text, a int)"
  },
  {
    "comment": "insert - Statement 252",
    "query": "alter table mlparted5_ab attach partition mlparted5_b for values in ('b')"
  },
  {
    "comment": "insert - Statement 253",
    "query": "insert into mlparted values (1, 2, 'a', 1)"
  },
  {
    "comment": "insert - Statement 254",
    "query": "insert into mlparted values (1, 40, 'a', 1)"
  },
  {
    "comment": "insert - Statement 255",
    "query": "insert into mlparted values (1, 45, 'b', 1)"
  },
  {
    "comment": "insert - Statement 256",
    "query": "insert into mlparted values (1, 45, 'c', 1)"
  },
  {
    "comment": "insert - Statement 257",
    "query": "insert into mlparted values (1, 45, 'f', 1)"
  },
  {
    "comment": "insert - Statement 258",
    "query": "select tableoid::regclass, * from mlparted order by a, b, c, d"
  },
  {
    "comment": "insert - Statement 259",
    "query": "alter table mlparted drop d"
  },
  {
    "comment": "insert - Statement 260",
    "query": "alter table mlparted add e int, add d int"
  },
  {
    "comment": "insert - Statement 261",
    "query": "create table key_desc (a int, b int) partition by list ((a+0))"
  },
  {
    "comment": "insert - Statement 262",
    "query": "create table key_desc_1 partition of key_desc for values in (1) partition by range (b)"
  },
  {
    "comment": "insert - Statement 263",
    "query": "create user regress_insert_other_user"
  },
  {
    "comment": "insert - Statement 264",
    "query": "grant select (a) on key_desc_1 to regress_insert_other_user"
  },
  {
    "comment": "insert - Statement 265",
    "query": "grant insert on key_desc to regress_insert_other_user"
  },
  {
    "comment": "insert - Statement 266",
    "query": "set role regress_insert_other_user"
  },
  {
    "comment": "insert - Statement 267",
    "query": "insert into key_desc values (1, 1)"
  },
  {
    "comment": "insert - Statement 268",
    "query": "reset role"
  },
  {
    "comment": "insert - Statement 269",
    "query": "grant select (b) on key_desc_1 to regress_insert_other_user"
  },
  {
    "comment": "insert - Statement 270",
    "query": "insert into key_desc values (2, 1)"
  },
  {
    "comment": "insert - Statement 271",
    "query": "revoke all on key_desc from regress_insert_other_user"
  },
  {
    "comment": "insert - Statement 272",
    "query": "revoke all on key_desc_1 from regress_insert_other_user"
  },
  {
    "comment": "insert - Statement 273",
    "query": "drop role regress_insert_other_user"
  },
  {
    "comment": "insert - Statement 274",
    "query": "drop table key_desc, key_desc_1"
  },
  {
    "comment": "insert - Statement 275",
    "query": "create table mcrparted (a int, b int, c int) partition by range (a, abs(b), c)"
  },
  {
    "comment": "insert - Statement 276",
    "query": "create table mcrparted0 partition of mcrparted for values from (minvalue, 0, 0) to (1, maxvalue, maxvalue)"
  },
  {
    "comment": "insert - Statement 277",
    "query": "create table mcrparted2 partition of mcrparted for values from (10, 6, minvalue) to (10, maxvalue, minvalue)"
  },
  {
    "comment": "insert - Statement 278",
    "query": "create table mcrparted4 partition of mcrparted for values from (21, minvalue, 0) to (30, 20, minvalue)"
  },
  {
    "comment": "insert - Statement 279",
    "query": "create table mcrparted0 partition of mcrparted for values from (minvalue, minvalue, minvalue) to (1, maxvalue, maxvalue)"
  },
  {
    "comment": "insert - Statement 280",
    "query": "create table mcrparted1 partition of mcrparted for values from (2, 1, minvalue) to (10, 5, 10)"
  },
  {
    "comment": "insert - Statement 281",
    "query": "create table mcrparted2 partition of mcrparted for values from (10, 6, minvalue) to (10, maxvalue, maxvalue)"
  },
  {
    "comment": "insert - Statement 282",
    "query": "create table mcrparted3 partition of mcrparted for values from (11, 1, 1) to (20, 10, 10)"
  },
  {
    "comment": "insert - Statement 283",
    "query": "create table mcrparted4 partition of mcrparted for values from (21, minvalue, minvalue) to (30, 20, maxvalue)"
  },
  {
    "comment": "insert - Statement 284",
    "query": "create table mcrparted5 partition of mcrparted for values from (30, 21, 20) to (maxvalue, maxvalue, maxvalue)"
  },
  {
    "comment": "insert - Statement 285",
    "query": "insert into mcrparted values (null, null, null)"
  },
  {
    "comment": "insert - Statement 286",
    "query": "insert into mcrparted values (0, 1, 1)"
  },
  {
    "comment": "insert - Statement 287",
    "query": "insert into mcrparted0 values (0, 1, 1)"
  },
  {
    "comment": "insert - Statement 288",
    "query": "insert into mcrparted values (9, 1000, 1)"
  },
  {
    "comment": "insert - Statement 289",
    "query": "insert into mcrparted1 values (9, 1000, 1)"
  },
  {
    "comment": "insert - Statement 290",
    "query": "insert into mcrparted values (10, 5, -1)"
  },
  {
    "comment": "insert - Statement 291",
    "query": "insert into mcrparted1 values (10, 5, -1)"
  },
  {
    "comment": "insert - Statement 292",
    "query": "insert into mcrparted values (2, 1, 0)"
  },
  {
    "comment": "insert - Statement 293",
    "query": "insert into mcrparted1 values (2, 1, 0)"
  },
  {
    "comment": "insert - Statement 294",
    "query": "insert into mcrparted values (10, 6, 1000)"
  },
  {
    "comment": "insert - Statement 295",
    "query": "insert into mcrparted2 values (10, 6, 1000)"
  },
  {
    "comment": "insert - Statement 296",
    "query": "insert into mcrparted values (10, 1000, 1000)"
  },
  {
    "comment": "insert - Statement 297",
    "query": "insert into mcrparted2 values (10, 1000, 1000)"
  },
  {
    "comment": "insert - Statement 298",
    "query": "insert into mcrparted values (11, 1, -1)"
  },
  {
    "comment": "insert - Statement 299",
    "query": "insert into mcrparted3 values (11, 1, -1)"
  },
  {
    "comment": "insert - Statement 300",
    "query": "insert into mcrparted values (30, 21, 20)"
  },
  {
    "comment": "insert - Statement 301",
    "query": "insert into mcrparted5 values (30, 21, 20)"
  },
  {
    "comment": "insert - Statement 302",
    "query": "insert into mcrparted4 values (30, 21, 20)"
  },
  {
    "comment": "insert - Statement 303",
    "query": "select tableoid::regclass::text, * from mcrparted order by 1"
  },
  {
    "comment": "insert - Statement 304",
    "query": "drop table mcrparted"
  },
  {
    "comment": "insert - Statement 305",
    "query": "create table brtrigpartcon (a int, b text) partition by list (a)"
  },
  {
    "comment": "insert - Statement 306",
    "query": "create table brtrigpartcon1 partition of brtrigpartcon for values in (1)"
  },
  {
    "comment": "insert - Statement 307",
    "query": "create or replace function brtrigpartcon1trigf() returns trigger as $$begin new.a := 2; return new; end$$ language plpgsql"
  },
  {
    "comment": "insert - Statement 308",
    "query": "create trigger brtrigpartcon1trig before insert on brtrigpartcon1 for each row execute procedure brtrigpartcon1trigf()"
  },
  {
    "comment": "insert - Statement 309",
    "query": "insert into brtrigpartcon values (1, 'hi there')"
  },
  {
    "comment": "insert - Statement 310",
    "query": "insert into brtrigpartcon1 values (1, 'hi there')"
  },
  {
    "comment": "insert - Statement 311",
    "query": "create table inserttest3 (f1 text default 'foo', f2 text default 'bar', f3 int)"
  },
  {
    "comment": "insert - Statement 312",
    "query": "create role regress_coldesc_role"
  },
  {
    "comment": "insert - Statement 313",
    "query": "grant insert on inserttest3 to regress_coldesc_role"
  },
  {
    "comment": "insert - Statement 314",
    "query": "grant insert on brtrigpartcon to regress_coldesc_role"
  },
  {
    "comment": "insert - Statement 315",
    "query": "revoke select on brtrigpartcon from regress_coldesc_role"
  },
  {
    "comment": "insert - Statement 316",
    "query": "set role regress_coldesc_role"
  },
  {
    "comment": "insert - Statement 317",
    "query": "with result as (insert into brtrigpartcon values (1, 'hi there') returning 1) insert into inserttest3 (f3) select * from result"
  },
  {
    "comment": "insert - Statement 318",
    "query": "revoke all on inserttest3 from regress_coldesc_role"
  },
  {
    "comment": "insert - Statement 319",
    "query": "revoke all on brtrigpartcon from regress_coldesc_role"
  },
  {
    "comment": "insert - Statement 320",
    "query": "drop role regress_coldesc_role"
  },
  {
    "comment": "insert - Statement 321",
    "query": "drop table inserttest3"
  },
  {
    "comment": "insert - Statement 322",
    "query": "drop table brtrigpartcon"
  },
  {
    "comment": "insert - Statement 323",
    "query": "drop function brtrigpartcon1trigf()"
  },
  {
    "comment": "insert - Statement 324",
    "query": "create table donothingbrtrig_test (a int, b text) partition by list (a)"
  },
  {
    "comment": "insert - Statement 325",
    "query": "create table donothingbrtrig_test1 (b text, a int)"
  },
  {
    "comment": "insert - Statement 326",
    "query": "create table donothingbrtrig_test2 (c text, b text, a int)"
  },
  {
    "comment": "insert - Statement 327",
    "query": "alter table donothingbrtrig_test2 drop column c"
  },
  {
    "comment": "insert - Statement 328",
    "query": "create or replace function donothingbrtrig_func() returns trigger as $$begin raise notice 'b: %', new.b; return NULL; end$$ language plpgsql"
  },
  {
    "comment": "insert - Statement 329",
    "query": "create trigger donothingbrtrig1 before insert on donothingbrtrig_test1 for each row execute procedure donothingbrtrig_func()"
  },
  {
    "comment": "insert - Statement 330",
    "query": "create trigger donothingbrtrig2 before insert on donothingbrtrig_test2 for each row execute procedure donothingbrtrig_func()"
  },
  {
    "comment": "insert - Statement 331",
    "query": "alter table donothingbrtrig_test attach partition donothingbrtrig_test1 for values in (1)"
  },
  {
    "comment": "insert - Statement 332",
    "query": "alter table donothingbrtrig_test attach partition donothingbrtrig_test2 for values in (2)"
  },
  {
    "comment": "insert - Statement 333",
    "query": "insert into donothingbrtrig_test values (1, 'foo'), (2, 'bar')"
  },
  {
    "comment": "insert - Statement 334",
    "query": "copy donothingbrtrig_test from stdout"
  },
  {
    "comment": "insert - Statement 335",
    "query": "1\tbaz 2\tqux \\. select tableoid::regclass, * from donothingbrtrig_test"
  },
  {
    "comment": "insert - Statement 336",
    "query": "drop table donothingbrtrig_test"
  },
  {
    "comment": "insert - Statement 337",
    "query": "drop function donothingbrtrig_func()"
  },
  {
    "comment": "insert - Statement 338",
    "query": "create table mcrparted (a text, b int) partition by range(a, b)"
  },
  {
    "comment": "insert - Statement 339",
    "query": "create table mcrparted1_lt_b partition of mcrparted for values from (minvalue, minvalue) to ('b', minvalue)"
  },
  {
    "comment": "insert - Statement 340",
    "query": "create table mcrparted2_b partition of mcrparted for values from ('b', minvalue) to ('c', minvalue)"
  },
  {
    "comment": "insert - Statement 341",
    "query": "create table mcrparted3_c_to_common partition of mcrparted for values from ('c', minvalue) to ('common', minvalue)"
  },
  {
    "comment": "insert - Statement 342",
    "query": "create table mcrparted4_common_lt_0 partition of mcrparted for values from ('common', minvalue) to ('common', 0)"
  },
  {
    "comment": "insert - Statement 343",
    "query": "create table mcrparted5_common_0_to_10 partition of mcrparted for values from ('common', 0) to ('common', 10)"
  },
  {
    "comment": "insert - Statement 344",
    "query": "create table mcrparted6_common_ge_10 partition of mcrparted for values from ('common', 10) to ('common', maxvalue)"
  },
  {
    "comment": "insert - Statement 345",
    "query": "create table mcrparted7_gt_common_lt_d partition of mcrparted for values from ('common', maxvalue) to ('d', minvalue)"
  },
  {
    "comment": "insert - Statement 346",
    "query": "create table mcrparted8_ge_d partition of mcrparted for values from ('d', minvalue) to (maxvalue, maxvalue)"
  },
  {
    "comment": "insert - Statement 347",
    "query": "select tableoid::regclass, * from mcrparted order by a, b"
  },
  {
    "comment": "insert - Statement 348",
    "query": "create table returningwrtest (a int) partition by list (a)"
  },
  {
    "comment": "insert - Statement 349",
    "query": "create table returningwrtest1 partition of returningwrtest for values in (1)"
  },
  {
    "comment": "insert - Statement 350",
    "query": "insert into returningwrtest values (1) returning returningwrtest"
  },
  {
    "comment": "insert - Statement 351",
    "query": "alter table returningwrtest add b text"
  },
  {
    "comment": "insert - Statement 352",
    "query": "create table returningwrtest2 (b text, c int, a int)"
  },
  {
    "comment": "insert - Statement 353",
    "query": "alter table returningwrtest2 drop c"
  },
  {
    "comment": "insert - Statement 354",
    "query": "alter table returningwrtest attach partition returningwrtest2 for values in (2)"
  },
  {
    "comment": "insert - Statement 355",
    "query": "insert into returningwrtest values (2, 'foo') returning returningwrtest"
  },
  {
    "comment": "insert - Statement 356",
    "query": "drop table returningwrtest"
  }
]