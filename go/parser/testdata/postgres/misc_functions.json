[
  {
    "comment": "misc_functions - Statement 1",
    "query": "SELECT num_nonnulls('1')"
  },
  {
    "comment": "misc_functions - Statement 2",
    "query": "SELECT num_nonnulls(NULL::text)",
    "expected": "SELECT num_nonnulls(CAST(NULL AS TEXT))"
  },
  {
    "comment": "misc_functions - Statement 3",
    "query": "SELECT num_nonnulls(NULL::text, NULL::int)",
    "expected": "SELECT num_nonnulls(CAST(NULL AS TEXT), CAST(NULL AS INT))"
  },
  {
    "comment": "misc_functions - Statement 4",
    "query": "SELECT num_nonnulls(1, 2, NULL::text, NULL::point, '', int8 '9', 1.0 / NULL)",
    "expected": "SELECT num_nonnulls(1, 2, CAST(NULL AS TEXT), CAST(NULL AS point), '', CAST('9' AS BIGINT), 1.0 / NULL)"
  },
  {
    "comment": "misc_functions - Statement 5",
    "query": "SELECT num_nonnulls(VARIADIC '{1,2,NULL,3}'::int[])",
    "expected": "SELECT num_nonnulls(VARIADIC CAST('{1,2,NULL,3}' AS INT[]))"
  },
  {
    "comment": "misc_functions - Statement 6",
    "query": "SELECT num_nonnulls(VARIADIC '{\"1\",\"2\",\"3\",\"4\"}'::text[])",
    "expected": "SELECT num_nonnulls(VARIADIC CAST('{\"1\",\"2\",\"3\",\"4\"}' AS TEXT[]))"
  },
  {
    "comment": "misc_functions - Statement 7",
    "query": "SELECT num_nonnulls(VARIADIC ARRAY(SELECT CASE WHEN i \u003c\u003e 40 THEN i END FROM generate_series(1, 100) i))",
    "expected": "SELECT num_nonnulls(VARIADIC ARRAY(SELECT CASE WHEN i \u003c\u003e 40 THEN i END FROM generate_series(1, 100) AS i))"
  },
  {
    "comment": "misc_functions - Statement 8",
    "query": "SELECT num_nulls(NULL)"
  },
  {
    "comment": "misc_functions - Statement 9",
    "query": "SELECT num_nulls('1')"
  },
  {
    "comment": "misc_functions - Statement 10",
    "query": "SELECT num_nulls(NULL::text)",
    "expected": "SELECT num_nulls(CAST(NULL AS TEXT))"
  },
  {
    "comment": "misc_functions - Statement 11",
    "query": "SELECT num_nulls(NULL::text, NULL::int)",
    "expected": "SELECT num_nulls(CAST(NULL AS TEXT), CAST(NULL AS INT))"
  },
  {
    "comment": "misc_functions - Statement 12",
    "query": "SELECT num_nulls(1, 2, NULL::text, NULL::point, '', int8 '9', 1.0 / NULL)",
    "expected": "SELECT num_nulls(1, 2, CAST(NULL AS TEXT), CAST(NULL AS point), '', CAST('9' AS BIGINT), 1.0 / NULL)"
  },
  {
    "comment": "misc_functions - Statement 13",
    "query": "SELECT num_nulls(VARIADIC '{1,2,NULL,3}'::int[])",
    "expected": "SELECT num_nulls(VARIADIC CAST('{1,2,NULL,3}' AS INT[]))"
  },
  {
    "comment": "misc_functions - Statement 14",
    "query": "SELECT num_nulls(VARIADIC '{\"1\",\"2\",\"3\",\"4\"}'::text[])",
    "expected": "SELECT num_nulls(VARIADIC CAST('{\"1\",\"2\",\"3\",\"4\"}' AS TEXT[]))"
  },
  {
    "comment": "misc_functions - Statement 15",
    "query": "SELECT num_nulls(VARIADIC ARRAY(SELECT CASE WHEN i \u003c\u003e 40 THEN i END FROM generate_series(1, 100) i))",
    "expected": "SELECT num_nulls(VARIADIC ARRAY(SELECT CASE WHEN i \u003c\u003e 40 THEN i END FROM generate_series(1, 100) AS i))"
  },
  {
    "comment": "misc_functions - Statement 16",
    "query": "SELECT num_nonnulls(VARIADIC NULL::text[])",
    "expected": "SELECT num_nonnulls(VARIADIC CAST(NULL AS TEXT[]))"
  },
  {
    "comment": "misc_functions - Statement 17",
    "query": "SELECT num_nonnulls(VARIADIC '{}'::int[])",
    "expected": "SELECT num_nonnulls(VARIADIC CAST('{}' AS INT[]))"
  },
  {
    "comment": "misc_functions - Statement 18",
    "query": "SELECT num_nulls(VARIADIC NULL::text[])",
    "expected": "SELECT num_nulls(VARIADIC CAST(NULL AS TEXT[]))"
  },
  {
    "comment": "misc_functions - Statement 19",
    "query": "SELECT num_nulls(VARIADIC '{}'::int[])",
    "expected": "SELECT num_nulls(VARIADIC CAST('{}' AS INT[]))"
  },
  {
    "comment": "misc_functions - Statement 20",
    "query": "SELECT num_nonnulls()"
  },
  {
    "comment": "misc_functions - Statement 21",
    "query": "SELECT num_nulls()"
  },
  {
    "comment": "misc_functions - Statement 22",
    "query": "CREATE FUNCTION test_canonicalize_path(text) RETURNS text AS 'regresslib' LANGUAGE C STRICT IMMUTABLE",
    "expected": "CREATE FUNCTION test_canonicalize_path (TEXT) RETURNS TEXT AS $$regresslib$$ LANGUAGE c STRICT IMMUTABLE"
  },
  {
    "comment": "misc_functions - Statement 23",
    "query": "SELECT test_canonicalize_path('/')"
  },
  {
    "comment": "misc_functions - Statement 24",
    "query": "SELECT test_canonicalize_path('/./abc/def/')"
  },
  {
    "comment": "misc_functions - Statement 25",
    "query": "SELECT test_canonicalize_path('/./../abc/def')"
  },
  {
    "comment": "misc_functions - Statement 26",
    "query": "SELECT test_canonicalize_path('/./../../abc/def/')"
  },
  {
    "comment": "misc_functions - Statement 27",
    "query": "SELECT test_canonicalize_path('/abc/.././def/ghi')"
  },
  {
    "comment": "misc_functions - Statement 28",
    "query": "SELECT test_canonicalize_path('/abc/./../def/ghi//')"
  },
  {
    "comment": "misc_functions - Statement 29",
    "query": "SELECT test_canonicalize_path('/abc/def/../..')"
  },
  {
    "comment": "misc_functions - Statement 30",
    "query": "SELECT test_canonicalize_path('/abc/def/../../..')"
  },
  {
    "comment": "misc_functions - Statement 31",
    "query": "SELECT test_canonicalize_path('/abc/def/../../../../ghi/jkl')"
  },
  {
    "comment": "misc_functions - Statement 32",
    "query": "SELECT test_canonicalize_path('.')"
  },
  {
    "comment": "misc_functions - Statement 33",
    "query": "SELECT test_canonicalize_path('./')"
  },
  {
    "comment": "misc_functions - Statement 34",
    "query": "SELECT test_canonicalize_path('./abc/..')"
  },
  {
    "comment": "misc_functions - Statement 35",
    "query": "SELECT test_canonicalize_path('abc/../')"
  },
  {
    "comment": "misc_functions - Statement 36",
    "query": "SELECT test_canonicalize_path('abc/../def')"
  },
  {
    "comment": "misc_functions - Statement 37",
    "query": "SELECT test_canonicalize_path('..')"
  },
  {
    "comment": "misc_functions - Statement 38",
    "query": "SELECT test_canonicalize_path('../abc/def')"
  },
  {
    "comment": "misc_functions - Statement 39",
    "query": "SELECT test_canonicalize_path('../abc/..')"
  },
  {
    "comment": "misc_functions - Statement 40",
    "query": "SELECT test_canonicalize_path('../abc/../def')"
  },
  {
    "comment": "misc_functions - Statement 41",
    "query": "SELECT test_canonicalize_path('../abc/../../def/ghi')"
  },
  {
    "comment": "misc_functions - Statement 42",
    "query": "SELECT test_canonicalize_path('./abc/./def/.')"
  },
  {
    "comment": "misc_functions - Statement 43",
    "query": "SELECT test_canonicalize_path('./abc/././def/.')"
  },
  {
    "comment": "misc_functions - Statement 44",
    "query": "SELECT test_canonicalize_path('./abc/./def/.././ghi/../../../jkl/mno')"
  },
  {
    "comment": "misc_functions - Statement 45",
    "query": "SELECT pg_log_backend_memory_contexts(pg_backend_pid())"
  },
  {
    "comment": "misc_functions - Statement 46",
    "query": "SELECT pg_log_backend_memory_contexts(pid) FROM pg_stat_activity WHERE backend_type = 'checkpointer'"
  },
  {
    "comment": "misc_functions - Statement 47",
    "query": "CREATE ROLE regress_log_memory"
  },
  {
    "comment": "misc_functions - Statement 48",
    "query": "SELECT has_function_privilege('regress_log_memory', 'pg_log_backend_memory_contexts(integer)', 'EXECUTE')"
  },
  {
    "comment": "misc_functions - Statement 49",
    "query": "GRANT EXECUTE ON FUNCTION pg_log_backend_memory_contexts(integer) TO regress_log_memory",
    "expected": "GRANT EXECUTE ON FUNCTION pg_log_backend_memory_contexts(INT) TO regress_log_memory"
  },
  {
    "comment": "misc_functions - Statement 50",
    "query": "SET ROLE regress_log_memory",
    "expected": "SET ROLE 'regress_log_memory'"
  },
  {
    "comment": "misc_functions - Statement 51",
    "query": "RESET ROLE",
    "expected": "RESET role"
  },
  {
    "comment": "misc_functions - Statement 52",
    "query": "REVOKE EXECUTE ON FUNCTION pg_log_backend_memory_contexts(integer) FROM regress_log_memory",
    "expected": "REVOKE EXECUTE ON FUNCTION pg_log_backend_memory_contexts(INT) FROM regress_log_memory"
  },
  {
    "comment": "misc_functions - Statement 53",
    "query": "DROP ROLE regress_log_memory"
  },
  {
    "comment": "misc_functions - Statement 54",
    "query": "select setting as segsize from pg_settings where name = 'wal_segment_size'",
    "expected": "SELECT setting AS segsize FROM pg_settings WHERE name = 'wal_segment_size'"
  },
  {
    "comment": "misc_functions - Statement 55",
    "query": "select count(*) \u003e 0 as ok from pg_ls_waldir()",
    "expected": "SELECT COUNT(*) \u003e 0 AS ok FROM pg_ls_waldir()"
  },
  {
    "comment": "misc_functions - Statement 56",
    "query": "select count(*) \u003e 0 as ok from (select pg_ls_waldir()) ss",
    "expected": "SELECT COUNT(*) \u003e 0 AS ok FROM (SELECT pg_ls_waldir()) AS ss"
  },
  {
    "comment": "misc_functions - Statement 57",
    "query": "select * from pg_ls_waldir() limit 0",
    "expected": "SELECT * FROM pg_ls_waldir() LIMIT 0"
  },
  {
    "comment": "misc_functions - Statement 58",
    "query": "select count(*) \u003e 0 as ok from (select * from pg_ls_waldir() limit 1) ss",
    "expected": "SELECT COUNT(*) \u003e 0 AS ok FROM (SELECT * FROM pg_ls_waldir() LIMIT 1) AS ss"
  },
  {
    "comment": "misc_functions - Statement 59",
    "query": "select (w).size = 16777216 as ok from (select pg_ls_waldir() w) ss where length((w).name) = 24 limit 1",
    "expected": "SELECT (w).size = 16777216 AS ok FROM (SELECT pg_ls_waldir() AS w) AS ss WHERE length((w).name) = 24 LIMIT 1"
  },
  {
    "comment": "misc_functions - Statement 60",
    "query": "select count(*) \u003e= 0 as ok from pg_ls_archive_statusdir()",
    "expected": "SELECT COUNT(*) \u003e= 0 AS ok FROM pg_ls_archive_statusdir()"
  },
  {
    "comment": "misc_functions - Statement 61",
    "query": "select length(pg_read_file('postmaster.pid')) \u003e 20",
    "expected": "SELECT length(pg_read_file('postmaster.pid')) \u003e 20"
  },
  {
    "comment": "misc_functions - Statement 62",
    "query": "select length(pg_read_file('postmaster.pid', 1, 20))",
    "expected": "SELECT length(pg_read_file('postmaster.pid', 1, 20))"
  },
  {
    "comment": "misc_functions - Statement 63",
    "query": "select pg_read_file('does not exist')",
    "expected": "SELECT pg_read_file('does not exist')"
  },
  {
    "comment": "misc_functions - Statement 64",
    "query": "select pg_read_file('does not exist', true) IS NULL",
    "expected": "SELECT pg_read_file('does not exist', TRUE) IS NULL"
  },
  {
    "comment": "misc_functions - Statement 65",
    "query": "select pg_read_file('does not exist', 0, -1)",
    "expected": "SELECT pg_read_file('does not exist', 0, -1)"
  },
  {
    "comment": "misc_functions - Statement 66",
    "query": "select pg_read_file('does not exist', 0, -1, true)",
    "expected": "SELECT pg_read_file('does not exist', 0, -1, TRUE)"
  },
  {
    "comment": "misc_functions - Statement 67",
    "query": "select length(pg_read_binary_file('postmaster.pid')) \u003e 20",
    "expected": "SELECT length(pg_read_binary_file('postmaster.pid')) \u003e 20"
  },
  {
    "comment": "misc_functions - Statement 68",
    "query": "select length(pg_read_binary_file('postmaster.pid', 1, 20))",
    "expected": "SELECT length(pg_read_binary_file('postmaster.pid', 1, 20))"
  },
  {
    "comment": "misc_functions - Statement 69",
    "query": "select pg_read_binary_file('does not exist')",
    "expected": "SELECT pg_read_binary_file('does not exist')"
  },
  {
    "comment": "misc_functions - Statement 70",
    "query": "select pg_read_binary_file('does not exist', true) IS NULL",
    "expected": "SELECT pg_read_binary_file('does not exist', TRUE) IS NULL"
  },
  {
    "comment": "misc_functions - Statement 71",
    "query": "select pg_read_binary_file('does not exist', 0, -1)",
    "expected": "SELECT pg_read_binary_file('does not exist', 0, -1)"
  },
  {
    "comment": "misc_functions - Statement 72",
    "query": "select pg_read_binary_file('does not exist', 0, -1, true)",
    "expected": "SELECT pg_read_binary_file('does not exist', 0, -1, TRUE)"
  },
  {
    "comment": "misc_functions - Statement 73",
    "query": "select size \u003e 20, isdir from pg_stat_file('postmaster.pid')",
    "expected": "SELECT size \u003e 20, isdir FROM pg_stat_file('postmaster.pid')"
  },
  {
    "comment": "misc_functions - Statement 74",
    "query": "select * from (select pg_ls_dir('.') a) a where a = 'base' limit 1",
    "expected": "SELECT * FROM (SELECT pg_ls_dir('.') AS a) AS a WHERE a = 'base' LIMIT 1"
  },
  {
    "comment": "misc_functions - Statement 75",
    "query": "select pg_ls_dir('does not exist', false, false)",
    "expected": "SELECT pg_ls_dir('does not exist', FALSE, FALSE)"
  },
  {
    "comment": "misc_functions - Statement 76",
    "query": "select pg_ls_dir('does not exist', true, false)",
    "expected": "SELECT pg_ls_dir('does not exist', TRUE, FALSE)"
  },
  {
    "comment": "misc_functions - Statement 77",
    "query": "select count(*) = 1 as dot_found from pg_ls_dir('.', false, true) as ls where ls = '.'",
    "expected": "SELECT COUNT(*) = 1 AS dot_found FROM pg_ls_dir('.', FALSE, TRUE) AS ls WHERE ls = '.'"
  },
  {
    "comment": "misc_functions - Statement 78",
    "query": "select count(*) = 1 as dot_found from pg_ls_dir('.', false, false) as ls where ls = '.'",
    "expected": "SELECT COUNT(*) = 1 AS dot_found FROM pg_ls_dir('.', FALSE, FALSE) AS ls WHERE ls = '.'"
  },
  {
    "comment": "misc_functions - Statement 79",
    "query": "select * from (select (pg_timezone_names()).name) ptn where name='UTC' limit 1",
    "expected": "SELECT * FROM (SELECT (pg_timezone_names()).name) AS ptn WHERE name = 'UTC' LIMIT 1"
  },
  {
    "comment": "misc_functions - Statement 80",
    "query": "select count(*) \u003e 0 from (select pg_tablespace_databases(oid) as pts from pg_tablespace where spcname = 'pg_default') pts join pg_database db on pts.pts = db.oid",
    "expected": "SELECT COUNT(*) \u003e 0 FROM (SELECT pg_tablespace_databases(oid) AS pts FROM pg_tablespace WHERE spcname = 'pg_default') AS pts INNER JOIN pg_database AS db ON pts.pts = db.oid"
  },
  {
    "comment": "misc_functions - Statement 81",
    "query": "CREATE ROLE regress_slot_dir_funcs"
  },
  {
    "comment": "misc_functions - Statement 82",
    "query": "SELECT has_function_privilege('regress_slot_dir_funcs', 'pg_ls_logicalsnapdir()', 'EXECUTE')"
  },
  {
    "comment": "misc_functions - Statement 83",
    "query": "SELECT has_function_privilege('regress_slot_dir_funcs', 'pg_ls_logicalmapdir()', 'EXECUTE')"
  },
  {
    "comment": "misc_functions - Statement 84",
    "query": "SELECT has_function_privilege('regress_slot_dir_funcs', 'pg_ls_replslotdir(text)', 'EXECUTE')"
  },
  {
    "comment": "misc_functions - Statement 85",
    "query": "GRANT pg_monitor TO regress_slot_dir_funcs"
  },
  {
    "comment": "misc_functions - Statement 86",
    "query": "DROP ROLE regress_slot_dir_funcs"
  },
  {
    "comment": "misc_functions - Statement 87",
    "query": "CREATE FUNCTION my_int_eq(int, int) RETURNS bool LANGUAGE internal STRICT IMMUTABLE PARALLEL SAFE AS $$int4eq$$",
    "expected": "CREATE FUNCTION my_int_eq (INT, INT) RETURNS BOOLEAN LANGUAGE internal STRICT IMMUTABLE PARALLEL SAFE AS $$int4eq$$"
  },
  {
    "comment": "misc_functions - Statement 88",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM tenk1 a JOIN tenk1 b ON a.unique1 = b.unique1 WHERE my_int_eq(a.unique2, 42)",
    "expected": "EXPLAIN (COSTS false) SELECT * FROM tenk1 AS a INNER JOIN tenk1 AS b ON a.unique1 = b.unique1 WHERE my_int_eq(a.unique2, 42)"
  },
  {
    "comment": "misc_functions - Statement 89",
    "query": "CREATE FUNCTION test_support_func(internal) RETURNS internal AS 'regresslib', 'test_support_func' LANGUAGE C STRICT",
    "expected": "CREATE FUNCTION test_support_func (internal) RETURNS internal AS $$regresslib$$ LANGUAGE c STRICT"
  },
  {
    "comment": "misc_functions - Statement 90",
    "query": "ALTER FUNCTION my_int_eq(int, int) SUPPORT test_support_func",
    "expected": "ALTER FUNCTION my_int_eq(INT, INT) SUPPORT test_support_func"
  },
  {
    "comment": "misc_functions - Statement 91",
    "query": "CREATE FUNCTION my_gen_series(int, int) RETURNS SETOF integer LANGUAGE internal STRICT IMMUTABLE PARALLEL SAFE AS $$generate_series_int4$$ SUPPORT test_support_func",
    "expected": "CREATE FUNCTION my_gen_series (INT, INT) RETURNS SETOF INT LANGUAGE internal STRICT IMMUTABLE PARALLEL SAFE AS $$generate_series_int4$$ SUPPORT test_support_func"
  },
  {
    "comment": "misc_functions - Statement 92",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM tenk1 a JOIN my_gen_series(1,1000) g ON a.unique1 = g",
    "expected": "EXPLAIN (COSTS false) SELECT * FROM tenk1 AS a INNER JOIN my_gen_series(1, 1000) AS g ON a.unique1 = g"
  },
  {
    "comment": "misc_functions - Statement 93",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM tenk1 a JOIN my_gen_series(1,10) g ON a.unique1 = g",
    "expected": "EXPLAIN (COSTS false) SELECT * FROM tenk1 AS a INNER JOIN my_gen_series(1, 10) AS g ON a.unique1 = g"
  },
  {
    "comment": "misc_functions - Statement 94",
    "query": "SELECT count(*) \u003e 0 AS ok FROM pg_control_checkpoint()",
    "expected": "SELECT COUNT(*) \u003e 0 AS ok FROM pg_control_checkpoint()"
  },
  {
    "comment": "misc_functions - Statement 95",
    "query": "SELECT count(*) \u003e 0 AS ok FROM pg_control_init()",
    "expected": "SELECT COUNT(*) \u003e 0 AS ok FROM pg_control_init()"
  },
  {
    "comment": "misc_functions - Statement 96",
    "query": "SELECT count(*) \u003e 0 AS ok FROM pg_control_recovery()",
    "expected": "SELECT COUNT(*) \u003e 0 AS ok FROM pg_control_recovery()"
  },
  {
    "comment": "misc_functions - Statement 97",
    "query": "SELECT count(*) \u003e 0 AS ok FROM pg_control_system()",
    "expected": "SELECT COUNT(*) \u003e 0 AS ok FROM pg_control_system()"
  },
  {
    "comment": "misc_functions - Statement 98",
    "query": "SELECT * FROM pg_split_walfile_name(NULL)"
  },
  {
    "comment": "misc_functions - Statement 99",
    "query": "SELECT * FROM pg_split_walfile_name('invalid')"
  },
  {
    "comment": "misc_functions - Statement 100",
    "query": "SELECT segment_number \u003e 0 AS ok_segment_number, timeline_id FROM pg_split_walfile_name('000000010000000100000000')"
  },
  {
    "comment": "misc_functions - Statement 101",
    "query": "SELECT segment_number \u003e 0 AS ok_segment_number, timeline_id FROM pg_split_walfile_name('ffffffFF00000001000000af')"
  },
  {
    "comment": "misc_functions - Statement 102",
    "query": "SELECT setting::int8 AS segment_size FROM pg_settings WHERE name = 'wal_segment_size'",
    "expected": "SELECT CAST(setting AS BIGINT) AS segment_size FROM pg_settings WHERE name = 'wal_segment_size'"
  },
  {
    "comment": "misc_functions - Statement 103",
    "query": "SELECT segment_number, file_offset FROM pg_walfile_name_offset('0/0'::pg_lsn + 16777216), pg_split_walfile_name(file_name)",
    "expected": "SELECT segment_number, file_offset FROM pg_walfile_name_offset(CAST('0/0' AS pg_lsn) + 16777216), pg_split_walfile_name(file_name)"
  },
  {
    "comment": "misc_functions - Statement 104",
    "query": "SELECT segment_number, file_offset FROM pg_walfile_name_offset('0/0'::pg_lsn + 16777216 + 1), pg_split_walfile_name(file_name)",
    "expected": "SELECT segment_number, file_offset FROM pg_walfile_name_offset(CAST('0/0' AS pg_lsn) + 16777216 + 1), pg_split_walfile_name(file_name)"
  },
  {
    "comment": "misc_functions - Statement 105",
    "query": "SELECT segment_number, file_offset = 16777216 - 1 FROM pg_walfile_name_offset('0/0'::pg_lsn + 16777216 - 1), pg_split_walfile_name(file_name)",
    "expected": "SELECT segment_number, file_offset = 16777216 - 1 FROM pg_walfile_name_offset(CAST('0/0' AS pg_lsn) + 16777216 - 1), pg_split_walfile_name(file_name)"
  },
  {
    "comment": "misc_functions - Statement 106",
    "query": "CREATE ROLE regress_current_logfile"
  },
  {
    "comment": "misc_functions - Statement 107",
    "query": "SELECT has_function_privilege('regress_current_logfile', 'pg_current_logfile()', 'EXECUTE')"
  },
  {
    "comment": "misc_functions - Statement 108",
    "query": "GRANT pg_monitor TO regress_current_logfile"
  },
  {
    "comment": "misc_functions - Statement 109",
    "query": "DROP ROLE regress_current_logfile"
  },
  {
    "comment": "misc_functions - Statement 110",
    "query": "CREATE TABLE test_chunk_id (a TEXT, b TEXT STORAGE EXTERNAL)",
    "expected": "CREATE TABLE test_chunk_id (a TEXT, b TEXT STORAGE external)"
  },
  {
    "comment": "misc_functions - Statement 111",
    "query": "INSERT INTO test_chunk_id VALUES ('x', repeat('x', 8192))"
  },
  {
    "comment": "misc_functions - Statement 112",
    "query": "SELECT t.relname AS toastrel FROM pg_class c LEFT JOIN pg_class t ON c.reltoastrelid = t.oid WHERE c.relname = 'test_chunk_id'",
    "expected": "SELECT t.relname AS toastrel FROM pg_class AS c LEFT OUTER JOIN pg_class AS t ON c.reltoastrelid = t.oid WHERE c.relname = 'test_chunk_id'"
  },
  {
    "comment": "misc_functions - Statement 113",
    "query": "SELECT pg_column_toast_chunk_id(a) IS NULL, pg_column_toast_chunk_id(b) IN (SELECT chunk_id FROM pg_toast.toast) FROM test_chunk_id"
  },
  {
    "comment": "misc_functions - Statement 114",
    "query": "DROP TABLE test_chunk_id"
  }
]
