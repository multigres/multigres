[
  {
    "comment": "generated - Statement 1",
    "query": "SELECT attrelid, attname, attgenerated FROM pg_attribute WHERE attgenerated NOT IN ('', 's')"
  },
  {
    "comment": "generated - Statement 2",
    "query": "CREATE TABLE gtest0 (a int PRIMARY KEY, b int GENERATED ALWAYS AS (55) STORED)",
    "expected": "CREATE TABLE gtest0 (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (55) STORED)"
  },
  {
    "comment": "generated - Statement 3",
    "query": "CREATE TABLE gtest1 (a int PRIMARY KEY, b int GENERATED ALWAYS AS (a * 2) STORED)",
    "expected": "CREATE TABLE gtest1 (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 4",
    "query": "SELECT table_name, column_name, column_default, is_nullable, is_generated, generation_expression FROM information_schema.columns WHERE table_name LIKE 'gtest_' ORDER BY 1, 2"
  },
  {
    "comment": "generated - Statement 5",
    "query": "SELECT table_name, column_name, dependent_column FROM information_schema.column_column_usage ORDER BY 1, 2, 3"
  },
  {
    "comment": "generated - Statement 6",
    "query": "CREATE TABLE gtest_err_2a (a int PRIMARY KEY, b int GENERATED ALWAYS AS (b * 2) STORED)",
    "expected": "CREATE TABLE gtest_err_2a (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (b * 2) STORED)"
  },
  {
    "comment": "generated - Statement 7",
    "query": "CREATE TABLE gtest_err_2b (a int PRIMARY KEY, b int GENERATED ALWAYS AS (a * 2) STORED, c int GENERATED ALWAYS AS (b * 3) STORED)",
    "expected": "CREATE TABLE gtest_err_2b (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (a * 2) STORED, c INT GENERATED ALWAYS AS (b * 3) STORED)"
  },
  {
    "comment": "generated - Statement 8",
    "query": "CREATE TABLE gtest_err_2c (a int PRIMARY KEY, b int GENERATED ALWAYS AS (num_nulls(gtest_err_2c)) STORED)",
    "expected": "CREATE TABLE gtest_err_2c (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (num_nulls(gtest_err_2c)) STORED)"
  },
  {
    "comment": "generated - Statement 9",
    "query": "CREATE TABLE gtest_err_3 (a int PRIMARY KEY, b int GENERATED ALWAYS AS (c * 2) STORED)",
    "expected": "CREATE TABLE gtest_err_3 (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (c * 2) STORED)"
  },
  {
    "comment": "generated - Statement 10",
    "query": "CREATE TABLE gtest_err_4 (a int PRIMARY KEY, b double precision GENERATED ALWAYS AS (random()) STORED)",
    "expected": "CREATE TABLE gtest_err_4 (a INT PRIMARY KEY, b FLOAT8 GENERATED ALWAYS AS (random()) STORED)"
  },
  {
    "comment": "generated - Statement 11",
    "query": "CREATE TABLE gtest2 (a int, b text GENERATED ALWAYS AS (a || ' sec') STORED)",
    "expected": "CREATE TABLE gtest2 (a INT, b TEXT GENERATED ALWAYS AS (a || ' sec') STORED)"
  },
  {
    "comment": "generated - Statement 12",
    "query": "DROP TABLE gtest2"
  },
  {
    "comment": "generated - Statement 13",
    "query": "CREATE TABLE gtest_err_5a (a int PRIMARY KEY, b int DEFAULT 5 GENERATED ALWAYS AS (a * 2) STORED)",
    "expected": "CREATE TABLE gtest_err_5a (a INT PRIMARY KEY, b INT DEFAULT 5 GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 14",
    "query": "CREATE TABLE gtest_err_5b (a int PRIMARY KEY, b int GENERATED ALWAYS AS identity GENERATED ALWAYS AS (a * 2) STORED)",
    "expected": "CREATE TABLE gtest_err_5b (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS IDENTITY GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 15",
    "query": "CREATE TABLE gtest_err_6a (a int PRIMARY KEY, b bool GENERATED ALWAYS AS (xmin \u003c\u003e 37) STORED)",
    "expected": "CREATE TABLE gtest_err_6a (a INT PRIMARY KEY, b BOOLEAN GENERATED ALWAYS AS (xmin \u003c\u003e 37) STORED)"
  },
  {
    "comment": "generated - Statement 16",
    "query": "CREATE TABLE gtest_err_7a (a int PRIMARY KEY, b int GENERATED ALWAYS AS (avg(a)) STORED)",
    "expected": "CREATE TABLE gtest_err_7a (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (AVG(a)) STORED)"
  },
  {
    "comment": "generated - Statement 17",
    "query": "CREATE TABLE gtest_err_7b (a int PRIMARY KEY, b int GENERATED ALWAYS AS (row_number() OVER (ORDER BY a)) STORED)",
    "expected": "CREATE TABLE gtest_err_7b (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (ROW_NUMBER() OVER (ORDER BY a)) STORED)"
  },
  {
    "comment": "generated - Statement 18",
    "query": "CREATE TABLE gtest_err_7c (a int PRIMARY KEY, b int GENERATED ALWAYS AS ((SELECT a)) STORED)",
    "expected": "CREATE TABLE gtest_err_7c (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS ((SELECT a)) STORED)"
  },
  {
    "comment": "generated - Statement 19",
    "query": "CREATE TABLE gtest_err_7d (a int PRIMARY KEY, b int GENERATED ALWAYS AS (generate_series(1, a)) STORED)",
    "expected": "CREATE TABLE gtest_err_7d (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (generate_series(1, a)) STORED)"
  },
  {
    "comment": "generated - Statement 20",
    "query": "CREATE TABLE gtest_err_8 (a int PRIMARY KEY, b int GENERATED BY DEFAULT AS (a * 2) STORED)",
    "expected": "CREATE TABLE gtest_err_8 (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 21",
    "query": "INSERT INTO gtest1 VALUES (1)"
  },
  {
    "comment": "generated - Statement 22",
    "query": "INSERT INTO gtest1 VALUES (2, DEFAULT)"
  },
  {
    "comment": "generated - Statement 23",
    "query": "INSERT INTO gtest1 VALUES (3, 33)"
  },
  {
    "comment": "generated - Statement 24",
    "query": "INSERT INTO gtest1 VALUES (3, 33), (4, 44)"
  },
  {
    "comment": "generated - Statement 25",
    "query": "INSERT INTO gtest1 VALUES (3, DEFAULT), (4, 44)"
  },
  {
    "comment": "generated - Statement 26",
    "query": "INSERT INTO gtest1 VALUES (3, 33), (4, DEFAULT)"
  },
  {
    "comment": "generated - Statement 27",
    "query": "INSERT INTO gtest1 VALUES (3, DEFAULT), (4, DEFAULT)"
  },
  {
    "comment": "generated - Statement 28",
    "query": "SELECT * FROM gtest1 ORDER BY a"
  },
  {
    "comment": "generated - Statement 29",
    "query": "DELETE FROM gtest1 WHERE a \u003e= 3"
  },
  {
    "comment": "generated - Statement 30",
    "query": "UPDATE gtest1 SET b = DEFAULT WHERE a = 1"
  },
  {
    "comment": "generated - Statement 31",
    "query": "UPDATE gtest1 SET b = 11 WHERE a = 1"
  },
  {
    "comment": "generated - Statement 32",
    "query": "SELECT a, b, b * 2 AS b2 FROM gtest1 ORDER BY a"
  },
  {
    "comment": "generated - Statement 33",
    "query": "SELECT a, b FROM gtest1 WHERE b = 4 ORDER BY a"
  },
  {
    "comment": "generated - Statement 34",
    "query": "INSERT INTO gtest1 VALUES (2000000000)"
  },
  {
    "comment": "generated - Statement 35",
    "query": "SELECT * FROM gtest1"
  },
  {
    "comment": "generated - Statement 36",
    "query": "DELETE FROM gtest1 WHERE a = 2000000000"
  },
  {
    "comment": "generated - Statement 37",
    "query": "CREATE TABLE gtestx (x int, y int)",
    "expected": "CREATE TABLE gtestx (x INT, y INT)"
  },
  {
    "comment": "generated - Statement 38",
    "query": "INSERT INTO gtestx VALUES (11, 1), (22, 2), (33, 3)"
  },
  {
    "comment": "generated - Statement 39",
    "query": "SELECT * FROM gtestx, gtest1 WHERE gtestx.y = gtest1.a"
  },
  {
    "comment": "generated - Statement 40",
    "query": "DROP TABLE gtestx"
  },
  {
    "comment": "generated - Statement 41",
    "query": "UPDATE gtest1 SET a = 3 WHERE b = 4"
  },
  {
    "comment": "generated - Statement 42",
    "query": "DELETE FROM gtest1 WHERE b = 2"
  },
  {
    "comment": "generated - Statement 43",
    "query": "CREATE TABLE gtestm ( id int PRIMARY KEY, f1 int, f2 int, f3 int GENERATED ALWAYS AS (f1 * 2) STORED, f4 int GENERATED ALWAYS AS (f2 * 2) STORED )",
    "expected": "CREATE TABLE gtestm (id INT PRIMARY KEY, f1 INT, f2 INT, f3 INT GENERATED ALWAYS AS (f1 * 2) STORED, f4 INT GENERATED ALWAYS AS (f2 * 2) STORED)"
  },
  {
    "comment": "generated - Statement 44",
    "query": "INSERT INTO gtestm VALUES (1, 5, 100)"
  },
  {
    "comment": "generated - Statement 45",
    "query": "MERGE INTO gtestm t USING (VALUES (1, 10), (2, 20)) v(id, f1) ON t.id = v.id WHEN MATCHED THEN UPDATE SET f1 = v.f1 WHEN NOT MATCHED THEN INSERT VALUES (v.id, v.f1, 200)",
    "expected": "MERGE INTO gtestm AS t USING (VALUES (1, 10), (2, 20)) AS v(id, f1) ON t.id = v.id WHEN MATCHED THEN UPDATE SET f1 = v.f1 WHEN NOT MATCHED THEN INSERT VALUES (v.id, v.f1, 200)"
  },
  {
    "comment": "generated - Statement 46",
    "query": "SELECT * FROM gtestm ORDER BY id"
  },
  {
    "comment": "generated - Statement 47",
    "query": "DROP TABLE gtestm"
  },
  {
    "comment": "generated - Statement 48",
    "query": "CREATE VIEW gtest1v AS SELECT * FROM gtest1"
  },
  {
    "comment": "generated - Statement 49",
    "query": "SELECT * FROM gtest1v"
  },
  {
    "comment": "generated - Statement 50",
    "query": "INSERT INTO gtest1v VALUES (4, 8)"
  },
  {
    "comment": "generated - Statement 51",
    "query": "INSERT INTO gtest1v VALUES (5, DEFAULT)"
  },
  {
    "comment": "generated - Statement 52",
    "query": "INSERT INTO gtest1v VALUES (6, 66), (7, 77)"
  },
  {
    "comment": "generated - Statement 53",
    "query": "INSERT INTO gtest1v VALUES (6, DEFAULT), (7, 77)"
  },
  {
    "comment": "generated - Statement 54",
    "query": "INSERT INTO gtest1v VALUES (6, 66), (7, DEFAULT)"
  },
  {
    "comment": "generated - Statement 55",
    "query": "INSERT INTO gtest1v VALUES (6, DEFAULT), (7, DEFAULT)"
  },
  {
    "comment": "generated - Statement 56",
    "query": "ALTER VIEW gtest1v ALTER COLUMN b SET DEFAULT 100"
  },
  {
    "comment": "generated - Statement 57",
    "query": "INSERT INTO gtest1v VALUES (8, DEFAULT)"
  },
  {
    "comment": "generated - Statement 58",
    "query": "INSERT INTO gtest1v VALUES (8, DEFAULT), (9, DEFAULT)"
  },
  {
    "comment": "generated - Statement 59",
    "query": "DELETE FROM gtest1v WHERE a \u003e= 5"
  },
  {
    "comment": "generated - Statement 60",
    "query": "DROP VIEW gtest1v"
  },
  {
    "comment": "generated - Statement 61",
    "query": "WITH foo AS (SELECT * FROM gtest1) SELECT * FROM foo"
  },
  {
    "comment": "generated - Statement 62",
    "query": "CREATE TABLE gtest1_1 () INHERITS (gtest1)"
  },
  {
    "comment": "generated - Statement 63",
    "query": "SELECT * FROM gtest1_1"
  },
  {
    "comment": "generated - Statement 64",
    "query": "CREATE TABLE gtest_normal (a int, b int)",
    "expected": "CREATE TABLE gtest_normal (a INT, b INT)"
  },
  {
    "comment": "generated - Statement 65",
    "query": "CREATE TABLE gtest_normal_child (a int, b int GENERATED ALWAYS AS (a * 2) STORED) INHERITS (gtest_normal)",
    "expected": "CREATE TABLE gtest_normal_child (a INT, b INT GENERATED ALWAYS AS (a * 2) STORED) INHERITS (gtest_normal)"
  },
  {
    "comment": "generated - Statement 66",
    "query": "CREATE TABLE gtest_normal_child (a int, b int GENERATED ALWAYS AS (a * 2) STORED)",
    "expected": "CREATE TABLE gtest_normal_child (a INT, b INT GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 67",
    "query": "ALTER TABLE gtest_normal_child INHERIT gtest_normal"
  },
  {
    "comment": "generated - Statement 68",
    "query": "DROP TABLE gtest_normal, gtest_normal_child"
  },
  {
    "comment": "generated - Statement 69",
    "query": "CREATE TABLE gtestx (x int, b int DEFAULT 10) INHERITS (gtest1)",
    "expected": "CREATE TABLE gtestx (x INT, b INT DEFAULT 10) INHERITS (gtest1)"
  },
  {
    "comment": "generated - Statement 70",
    "query": "CREATE TABLE gtestx (x int, b int GENERATED ALWAYS AS IDENTITY) INHERITS (gtest1)",
    "expected": "CREATE TABLE gtestx (x INT, b INT GENERATED ALWAYS AS IDENTITY) INHERITS (gtest1)"
  },
  {
    "comment": "generated - Statement 71",
    "query": "CREATE TABLE gtestx (x int, b int GENERATED ALWAYS AS (a * 22) STORED) INHERITS (gtest1)",
    "expected": "CREATE TABLE gtestx (x INT, b INT GENERATED ALWAYS AS (a * 22) STORED) INHERITS (gtest1)"
  },
  {
    "comment": "generated - Statement 72",
    "query": "ALTER TABLE gtestxx_1 INHERIT gtest1"
  },
  {
    "comment": "generated - Statement 73",
    "query": "CREATE TABLE gtestxx_3 (a int NOT NULL, b int GENERATED ALWAYS AS (a * 2) STORED)",
    "expected": "CREATE TABLE gtestxx_3 (a INT NOT NULL, b INT GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 74",
    "query": "ALTER TABLE gtestxx_3 INHERIT gtest1"
  },
  {
    "comment": "generated - Statement 75",
    "query": "CREATE TABLE gtestxx_4 (b int GENERATED ALWAYS AS (a * 2) STORED, a int NOT NULL)",
    "expected": "CREATE TABLE gtestxx_4 (b INT GENERATED ALWAYS AS (a * 2) STORED, a INT NOT NULL)"
  },
  {
    "comment": "generated - Statement 76",
    "query": "ALTER TABLE gtestxx_4 INHERIT gtest1"
  },
  {
    "comment": "generated - Statement 77",
    "query": "CREATE TABLE gtesty (x int, b int DEFAULT 55)",
    "expected": "CREATE TABLE gtesty (x INT, b INT DEFAULT 55)"
  },
  {
    "comment": "generated - Statement 78",
    "query": "CREATE TABLE gtest1_y () INHERITS (gtest0, gtesty)"
  },
  {
    "comment": "generated - Statement 79",
    "query": "DROP TABLE gtesty"
  },
  {
    "comment": "generated - Statement 80",
    "query": "CREATE TABLE gtesty (x int, b int)",
    "expected": "CREATE TABLE gtesty (x INT, b INT)"
  },
  {
    "comment": "generated - Statement 81",
    "query": "CREATE TABLE gtest1_y () INHERITS (gtest1, gtesty)"
  },
  {
    "comment": "generated - Statement 82",
    "query": "CREATE TABLE gtesty (x int, b int GENERATED ALWAYS AS (x * 22) STORED)",
    "expected": "CREATE TABLE gtesty (x INT, b INT GENERATED ALWAYS AS (x * 22) STORED)"
  },
  {
    "comment": "generated - Statement 83",
    "query": "CREATE TABLE gtest1_y (b int GENERATED ALWAYS AS (x + 1) STORED) INHERITS (gtest1, gtesty)",
    "expected": "CREATE TABLE gtest1_y (b INT GENERATED ALWAYS AS (x + 1) STORED) INHERITS (gtest1, gtesty)"
  },
  {
    "comment": "generated - Statement 84",
    "query": "CREATE TABLE gtestc (f2 int GENERATED ALWAYS AS (f1+1) STORED) INHERITS(gtestp)",
    "expected": "CREATE TABLE gtestc (f2 INT GENERATED ALWAYS AS (f1 + 1) STORED) INHERITS (gtestp)"
  },
  {
    "comment": "generated - Statement 85",
    "query": "INSERT INTO gtestc values(42)",
    "expected": "INSERT INTO gtestc VALUES (42)"
  },
  {
    "comment": "generated - Statement 86",
    "query": "TABLE gtestc",
    "expected": "SELECT * FROM gtestc"
  },
  {
    "comment": "generated - Statement 87",
    "query": "UPDATE gtestp SET f1 = f1 * 10"
  },
  {
    "comment": "generated - Statement 88",
    "query": "DROP TABLE gtestp CASCADE"
  },
  {
    "comment": "generated - Statement 89",
    "query": "CREATE TABLE gtest3 (a int, b int GENERATED ALWAYS AS (a * 3) STORED)",
    "expected": "CREATE TABLE gtest3 (a INT, b INT GENERATED ALWAYS AS (a * 3) STORED)"
  },
  {
    "comment": "generated - Statement 90",
    "query": "INSERT INTO gtest3 (a) VALUES (1), (2), (3), (NULL)"
  },
  {
    "comment": "generated - Statement 91",
    "query": "SELECT * FROM gtest3 ORDER BY a"
  },
  {
    "comment": "generated - Statement 92",
    "query": "UPDATE gtest3 SET a = 22 WHERE a = 2"
  },
  {
    "comment": "generated - Statement 93",
    "query": "CREATE TABLE gtest3a (a text, b text GENERATED ALWAYS AS (a || '+' || a) STORED)",
    "expected": "CREATE TABLE gtest3a (a TEXT, b TEXT GENERATED ALWAYS AS (a || '+' || a) STORED)"
  },
  {
    "comment": "generated - Statement 94",
    "query": "INSERT INTO gtest3a (a) VALUES ('a'), ('b'), ('c'), (NULL)"
  },
  {
    "comment": "generated - Statement 95",
    "query": "SELECT * FROM gtest3a ORDER BY a"
  },
  {
    "comment": "generated - Statement 96",
    "query": "UPDATE gtest3a SET a = 'bb' WHERE a = 'b'"
  },
  {
    "comment": "generated - Statement 97",
    "query": "TRUNCATE gtest1",
    "expected": "TRUNCATE TABLE gtest1 CONTINUE IDENTITY RESTRICT"
  },
  {
    "comment": "generated - Statement 98",
    "query": "INSERT INTO gtest1 (a) VALUES (1), (2)"
  },
  {
    "comment": "generated - Statement 99",
    "query": "COPY gtest1 TO stdout",
    "expected": "COPY gtest1 TO STDOUT"
  },
  {
    "comment": "generated - Statement 100",
    "query": "COPY gtest1 (a, b) TO stdout",
    "expected": "COPY gtest1 (a, b) TO STDOUT"
  },
  {
    "comment": "generated - Statement 101",
    "query": "COPY gtest1 FROM stdin",
    "expected": "COPY gtest1 FROM STDIN"
  },
  {
    "comment": "generated - Statement 102",
    "query": "COPY gtest1 (a, b) FROM stdin",
    "expected": "COPY gtest1 (a, b) FROM STDIN"
  },
  {
    "comment": "generated - Statement 103",
    "query": "TRUNCATE gtest3",
    "expected": "TRUNCATE TABLE gtest3 CONTINUE IDENTITY RESTRICT"
  },
  {
    "comment": "generated - Statement 104",
    "query": "INSERT INTO gtest3 (a) VALUES (1), (2)"
  },
  {
    "comment": "generated - Statement 105",
    "query": "COPY gtest3 TO stdout",
    "expected": "COPY gtest3 TO STDOUT"
  },
  {
    "comment": "generated - Statement 106",
    "query": "COPY gtest3 (a, b) TO stdout",
    "expected": "COPY gtest3 (a, b) TO STDOUT"
  },
  {
    "comment": "generated - Statement 107",
    "query": "COPY gtest3 FROM stdin",
    "expected": "COPY gtest3 FROM STDIN"
  },
  {
    "comment": "generated - Statement 108",
    "query": "COPY gtest3 (a, b) FROM stdin",
    "expected": "COPY gtest3 (a, b) FROM STDIN"
  },
  {
    "comment": "generated - Statement 109",
    "query": "CREATE TABLE gtest2 (a int PRIMARY KEY, b int GENERATED ALWAYS AS (NULL) STORED)",
    "expected": "CREATE TABLE gtest2 (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (NULL) STORED)"
  },
  {
    "comment": "generated - Statement 110",
    "query": "INSERT INTO gtest2 VALUES (1)"
  },
  {
    "comment": "generated - Statement 111",
    "query": "SELECT * FROM gtest2"
  },
  {
    "comment": "generated - Statement 112",
    "query": "CREATE TABLE gtest_varlena (a varchar, b varchar GENERATED ALWAYS AS (a) STORED)",
    "expected": "CREATE TABLE gtest_varlena (a VARCHAR, b VARCHAR GENERATED ALWAYS AS (a) STORED)"
  },
  {
    "comment": "generated - Statement 113",
    "query": "INSERT INTO gtest_varlena (a) VALUES('01234567890123456789')",
    "expected": "INSERT INTO gtest_varlena (a) VALUES ('01234567890123456789')"
  },
  {
    "comment": "generated - Statement 114",
    "query": "INSERT INTO gtest_varlena (a) VALUES(NULL)",
    "expected": "INSERT INTO gtest_varlena (a) VALUES (NULL)"
  },
  {
    "comment": "generated - Statement 115",
    "query": "SELECT * FROM gtest_varlena ORDER BY a"
  },
  {
    "comment": "generated - Statement 116",
    "query": "DROP TABLE gtest_varlena"
  },
  {
    "comment": "generated - Statement 117",
    "query": "CREATE TYPE double_int as (a int, b int)",
    "expected": "CREATE TYPE double_int AS (a INT, b INT)"
  },
  {
    "comment": "generated - Statement 118",
    "query": "CREATE TABLE gtest4 ( a int, b double_int GENERATED ALWAYS AS ((a * 2, a * 3)) STORED )",
    "expected": "CREATE TABLE gtest4 (a INT, b double_int GENERATED ALWAYS AS ((a * 2, a * 3)) STORED)"
  },
  {
    "comment": "generated - Statement 119",
    "query": "INSERT INTO gtest4 VALUES (1), (6)"
  },
  {
    "comment": "generated - Statement 120",
    "query": "SELECT * FROM gtest4"
  },
  {
    "comment": "generated - Statement 121",
    "query": "DROP TABLE gtest4"
  },
  {
    "comment": "generated - Statement 122",
    "query": "DROP TYPE double_int"
  },
  {
    "comment": "generated - Statement 123",
    "query": "CREATE TABLE gtest_tableoid ( a int PRIMARY KEY, b bool GENERATED ALWAYS AS (tableoid = 'gtest_tableoid'::regclass) STORED )",
    "expected": "CREATE TABLE gtest_tableoid (a INT PRIMARY KEY, b BOOLEAN GENERATED ALWAYS AS (tableoid = CAST('gtest_tableoid' AS regclass)) STORED)"
  },
  {
    "comment": "generated - Statement 124",
    "query": "INSERT INTO gtest_tableoid VALUES (1), (2)"
  },
  {
    "comment": "generated - Statement 125",
    "query": "ALTER TABLE gtest_tableoid ADD COLUMN c regclass GENERATED ALWAYS AS (tableoid) STORED"
  },
  {
    "comment": "generated - Statement 126",
    "query": "SELECT * FROM gtest_tableoid"
  },
  {
    "comment": "generated - Statement 127",
    "query": "CREATE TABLE gtest10 (a int PRIMARY KEY, b int, c int GENERATED ALWAYS AS (b * 2) STORED)",
    "expected": "CREATE TABLE gtest10 (a INT PRIMARY KEY, b INT, c INT GENERATED ALWAYS AS (b * 2) STORED)"
  },
  {
    "comment": "generated - Statement 128",
    "query": "ALTER TABLE gtest10 DROP COLUMN b"
  },
  {
    "comment": "generated - Statement 129",
    "query": "ALTER TABLE gtest10 DROP COLUMN b CASCADE"
  },
  {
    "comment": "generated - Statement 130",
    "query": "ALTER TABLE gtest10a DROP COLUMN b"
  },
  {
    "comment": "generated - Statement 131",
    "query": "INSERT INTO gtest10a (a) VALUES (1)"
  },
  {
    "comment": "generated - Statement 132",
    "query": "CREATE USER regress_user11"
  },
  {
    "comment": "generated - Statement 133",
    "query": "CREATE TABLE gtest11s (a int PRIMARY KEY, b int, c int GENERATED ALWAYS AS (b * 2) STORED)",
    "expected": "CREATE TABLE gtest11s (a INT PRIMARY KEY, b INT, c INT GENERATED ALWAYS AS (b * 2) STORED)"
  },
  {
    "comment": "generated - Statement 134",
    "query": "INSERT INTO gtest11s VALUES (1, 10), (2, 20)"
  },
  {
    "comment": "generated - Statement 135",
    "query": "GRANT SELECT (a, c) ON gtest11s TO regress_user11"
  },
  {
    "comment": "generated - Statement 136",
    "query": "CREATE FUNCTION gf1(a int) RETURNS int AS $$ SELECT a * 3 $$ IMMUTABLE LANGUAGE SQL",
    "expected": "CREATE FUNCTION gf1 (a INT) RETURNS INT AS $$ SELECT a * 3 $$ IMMUTABLE LANGUAGE sql"
  },
  {
    "comment": "generated - Statement 137",
    "query": "REVOKE ALL ON FUNCTION gf1(int) FROM PUBLIC",
    "expected": "REVOKE ALL ON FUNCTION gf1(INT) FROM PUBLIC"
  },
  {
    "comment": "generated - Statement 138",
    "query": "CREATE TABLE gtest12s (a int PRIMARY KEY, b int, c int GENERATED ALWAYS AS (gf1(b)) STORED)",
    "expected": "CREATE TABLE gtest12s (a INT PRIMARY KEY, b INT, c INT GENERATED ALWAYS AS (gf1(b)) STORED)"
  },
  {
    "comment": "generated - Statement 139",
    "query": "INSERT INTO gtest12s VALUES (1, 10), (2, 20)"
  },
  {
    "comment": "generated - Statement 140",
    "query": "GRANT SELECT (a, c) ON gtest12s TO regress_user11"
  },
  {
    "comment": "generated - Statement 141",
    "query": "SET ROLE regress_user11",
    "expected": "SET ROLE 'regress_user11'"
  },
  {
    "comment": "generated - Statement 142",
    "query": "SELECT a, b FROM gtest11s"
  },
  {
    "comment": "generated - Statement 143",
    "query": "SELECT a, c FROM gtest11s"
  },
  {
    "comment": "generated - Statement 144",
    "query": "SELECT gf1(10)"
  },
  {
    "comment": "generated - Statement 145",
    "query": "SELECT a, c FROM gtest12s"
  },
  {
    "comment": "generated - Statement 146",
    "query": "RESET ROLE",
    "expected": "RESET role"
  },
  {
    "comment": "generated - Statement 147",
    "query": "DROP FUNCTION gf1(int)",
    "expected": "DROP FUNCTION gf1(INT)"
  },
  {
    "comment": "generated - Statement 148",
    "query": "DROP TABLE gtest11s, gtest12s"
  },
  {
    "comment": "generated - Statement 149",
    "query": "DROP USER regress_user11",
    "expected": "DROP ROLE regress_user11"
  },
  {
    "comment": "generated - Statement 150",
    "query": "CREATE TABLE gtest20 (a int PRIMARY KEY, b int GENERATED ALWAYS AS (a * 2) STORED CHECK (b \u003c 50))",
    "expected": "CREATE TABLE gtest20 (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (a * 2) STORED CHECK (b \u003c 50))"
  },
  {
    "comment": "generated - Statement 151",
    "query": "INSERT INTO gtest20 (a) VALUES (10)"
  },
  {
    "comment": "generated - Statement 152",
    "query": "INSERT INTO gtest20 (a) VALUES (30)"
  },
  {
    "comment": "generated - Statement 153",
    "query": "ALTER TABLE gtest20 ALTER COLUMN b SET EXPRESSION AS (a * 100)",
    "expected": "ALTER TABLE gtest20 ALTER COLUMN b SET EXPRESSION AS ( a * 100 )"
  },
  {
    "comment": "generated - Statement 154",
    "query": "ALTER TABLE gtest20 ALTER COLUMN b SET EXPRESSION AS (a * 3)",
    "expected": "ALTER TABLE gtest20 ALTER COLUMN b SET EXPRESSION AS ( a * 3 )"
  },
  {
    "comment": "generated - Statement 155",
    "query": "CREATE TABLE gtest20a (a int PRIMARY KEY, b int GENERATED ALWAYS AS (a * 2) STORED)",
    "expected": "CREATE TABLE gtest20a (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 156",
    "query": "INSERT INTO gtest20a (a) VALUES (10)"
  },
  {
    "comment": "generated - Statement 157",
    "query": "INSERT INTO gtest20a (a) VALUES (30)"
  },
  {
    "comment": "generated - Statement 158",
    "query": "ALTER TABLE gtest20a ADD CHECK (b \u003c 50)"
  },
  {
    "comment": "generated - Statement 159",
    "query": "CREATE TABLE gtest20b (a int PRIMARY KEY, b int GENERATED ALWAYS AS (a * 2) STORED)",
    "expected": "CREATE TABLE gtest20b (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 160",
    "query": "INSERT INTO gtest20b (a) VALUES (10)"
  },
  {
    "comment": "generated - Statement 161",
    "query": "INSERT INTO gtest20b (a) VALUES (30)"
  },
  {
    "comment": "generated - Statement 162",
    "query": "ALTER TABLE gtest20b ADD CONSTRAINT chk CHECK (b \u003c 50) NOT VALID"
  },
  {
    "comment": "generated - Statement 163",
    "query": "ALTER TABLE gtest20b VALIDATE CONSTRAINT chk"
  },
  {
    "comment": "generated - Statement 164",
    "query": "CREATE TABLE gtest21a (a int PRIMARY KEY, b int GENERATED ALWAYS AS (nullif(a, 0)) STORED NOT NULL)",
    "expected": "CREATE TABLE gtest21a (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (nullif(a, 0)) STORED NOT NULL)"
  },
  {
    "comment": "generated - Statement 165",
    "query": "INSERT INTO gtest21a (a) VALUES (1)"
  },
  {
    "comment": "generated - Statement 166",
    "query": "INSERT INTO gtest21a (a) VALUES (0)"
  },
  {
    "comment": "generated - Statement 167",
    "query": "CREATE TABLE gtest21b (a int PRIMARY KEY, b int GENERATED ALWAYS AS (nullif(a, 0)) STORED)",
    "expected": "CREATE TABLE gtest21b (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (nullif(a, 0)) STORED)"
  },
  {
    "comment": "generated - Statement 168",
    "query": "ALTER TABLE gtest21b ALTER COLUMN b SET NOT NULL"
  },
  {
    "comment": "generated - Statement 169",
    "query": "INSERT INTO gtest21b (a) VALUES (1)"
  },
  {
    "comment": "generated - Statement 170",
    "query": "INSERT INTO gtest21b (a) VALUES (0)"
  },
  {
    "comment": "generated - Statement 171",
    "query": "ALTER TABLE gtest21b ALTER COLUMN b DROP NOT NULL"
  },
  {
    "comment": "generated - Statement 172",
    "query": "CREATE TABLE gtest22a (a int PRIMARY KEY, b int GENERATED ALWAYS AS (a / 2) STORED UNIQUE)",
    "expected": "CREATE TABLE gtest22a (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (a / 2) STORED UNIQUE)"
  },
  {
    "comment": "generated - Statement 173",
    "query": "INSERT INTO gtest22a VALUES (2)"
  },
  {
    "comment": "generated - Statement 174",
    "query": "INSERT INTO gtest22a VALUES (3)"
  },
  {
    "comment": "generated - Statement 175",
    "query": "INSERT INTO gtest22a VALUES (4)"
  },
  {
    "comment": "generated - Statement 176",
    "query": "CREATE TABLE gtest22b (a int, b int GENERATED ALWAYS AS (a / 2) STORED, PRIMARY KEY (a, b))",
    "expected": "CREATE TABLE gtest22b (a INT, b INT GENERATED ALWAYS AS (a / 2) STORED, PRIMARY KEY (a, b))"
  },
  {
    "comment": "generated - Statement 177",
    "query": "INSERT INTO gtest22b VALUES (2)"
  },
  {
    "comment": "generated - Statement 178",
    "query": "CREATE TABLE gtest22c (a int, b int GENERATED ALWAYS AS (a * 2) STORED)",
    "expected": "CREATE TABLE gtest22c (a INT, b INT GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 179",
    "query": "CREATE INDEX gtest22c_b_idx ON gtest22c (b)",
    "expected": "CREATE INDEX gtest22c_b_idx ON gtest22c USING btree ( b )"
  },
  {
    "comment": "generated - Statement 180",
    "query": "CREATE INDEX gtest22c_expr_idx ON gtest22c ((b * 3))",
    "expected": "CREATE INDEX gtest22c_expr_idx ON gtest22c USING btree ( (b * 3) )"
  },
  {
    "comment": "generated - Statement 181",
    "query": "CREATE INDEX gtest22c_pred_idx ON gtest22c (a) WHERE b \u003e 0",
    "expected": "CREATE INDEX gtest22c_pred_idx ON gtest22c USING btree ( a ) WHERE b \u003e 0"
  },
  {
    "comment": "generated - Statement 182",
    "query": "SET enable_seqscan TO off",
    "expected": "SET enable_seqscan = off"
  },
  {
    "comment": "generated - Statement 183",
    "query": "SET enable_bitmapscan TO off",
    "expected": "SET enable_bitmapscan = off"
  },
  {
    "comment": "generated - Statement 184",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE b = 4",
    "expected": "EXPLAIN (COSTS false) SELECT * FROM gtest22c WHERE b = 4"
  },
  {
    "comment": "generated - Statement 185",
    "query": "SELECT * FROM gtest22c WHERE b = 4"
  },
  {
    "comment": "generated - Statement 186",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE b * 3 = 6",
    "expected": "EXPLAIN (COSTS false) SELECT * FROM gtest22c WHERE b * 3 = 6"
  },
  {
    "comment": "generated - Statement 187",
    "query": "SELECT * FROM gtest22c WHERE b * 3 = 6"
  },
  {
    "comment": "generated - Statement 188",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE a = 1 AND b \u003e 0",
    "expected": "EXPLAIN (COSTS false) SELECT * FROM gtest22c WHERE a = 1 AND b \u003e 0"
  },
  {
    "comment": "generated - Statement 189",
    "query": "SELECT * FROM gtest22c WHERE a = 1 AND b \u003e 0"
  },
  {
    "comment": "generated - Statement 190",
    "query": "ALTER TABLE gtest22c ALTER COLUMN b SET EXPRESSION AS (a * 4)",
    "expected": "ALTER TABLE gtest22c ALTER COLUMN b SET EXPRESSION AS ( a * 4 )"
  },
  {
    "comment": "generated - Statement 191",
    "query": "ANALYZE gtest22c"
  },
  {
    "comment": "generated - Statement 192",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE b = 8",
    "expected": "EXPLAIN (COSTS false) SELECT * FROM gtest22c WHERE b = 8"
  },
  {
    "comment": "generated - Statement 193",
    "query": "SELECT * FROM gtest22c WHERE b = 8"
  },
  {
    "comment": "generated - Statement 194",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM gtest22c WHERE b * 3 = 12",
    "expected": "EXPLAIN (COSTS false) SELECT * FROM gtest22c WHERE b * 3 = 12"
  },
  {
    "comment": "generated - Statement 195",
    "query": "SELECT * FROM gtest22c WHERE b * 3 = 12"
  },
  {
    "comment": "generated - Statement 196",
    "query": "RESET enable_seqscan"
  },
  {
    "comment": "generated - Statement 197",
    "query": "RESET enable_bitmapscan"
  },
  {
    "comment": "generated - Statement 198",
    "query": "CREATE TABLE gtest23a (x int PRIMARY KEY, y int)",
    "expected": "CREATE TABLE gtest23a (x INT PRIMARY KEY, y INT)"
  },
  {
    "comment": "generated - Statement 199",
    "query": "INSERT INTO gtest23a VALUES (1, 11), (2, 22), (3, 33)"
  },
  {
    "comment": "generated - Statement 200",
    "query": "CREATE TABLE gtest23x (a int PRIMARY KEY, b int GENERATED ALWAYS AS (a * 2) STORED REFERENCES gtest23a (x) ON UPDATE CASCADE)",
    "expected": "CREATE TABLE gtest23x (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (a * 2) STORED REFERENCES gtest23a(x) ON UPDATE CASCADE)"
  },
  {
    "comment": "generated - Statement 201",
    "query": "CREATE TABLE gtest23x (a int PRIMARY KEY, b int GENERATED ALWAYS AS (a * 2) STORED REFERENCES gtest23a (x) ON DELETE SET NULL)",
    "expected": "CREATE TABLE gtest23x (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (a * 2) STORED REFERENCES gtest23a(x) ON DELETE SET NULL)"
  },
  {
    "comment": "generated - Statement 202",
    "query": "CREATE TABLE gtest23b (a int PRIMARY KEY, b int GENERATED ALWAYS AS (a * 2) STORED REFERENCES gtest23a (x))",
    "expected": "CREATE TABLE gtest23b (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (a * 2) STORED REFERENCES gtest23a(x))"
  },
  {
    "comment": "generated - Statement 203",
    "query": "INSERT INTO gtest23b VALUES (5)"
  },
  {
    "comment": "generated - Statement 204",
    "query": "ALTER TABLE gtest23b ALTER COLUMN b SET EXPRESSION AS (a * 5)",
    "expected": "ALTER TABLE gtest23b ALTER COLUMN b SET EXPRESSION AS ( a * 5 )"
  },
  {
    "comment": "generated - Statement 205",
    "query": "ALTER TABLE gtest23b ALTER COLUMN b SET EXPRESSION AS (a * 1)",
    "expected": "ALTER TABLE gtest23b ALTER COLUMN b SET EXPRESSION AS ( a * 1 )"
  },
  {
    "comment": "generated - Statement 206",
    "query": "DROP TABLE gtest23b"
  },
  {
    "comment": "generated - Statement 207",
    "query": "DROP TABLE gtest23a"
  },
  {
    "comment": "generated - Statement 208",
    "query": "CREATE TABLE gtest23p (x int, y int GENERATED ALWAYS AS (x * 2) STORED, PRIMARY KEY (y))",
    "expected": "CREATE TABLE gtest23p (x INT, y INT GENERATED ALWAYS AS (x * 2) STORED, PRIMARY KEY (y))"
  },
  {
    "comment": "generated - Statement 209",
    "query": "INSERT INTO gtest23p VALUES (1), (2), (3)"
  },
  {
    "comment": "generated - Statement 210",
    "query": "CREATE TABLE gtest23q (a int PRIMARY KEY, b int REFERENCES gtest23p (y))",
    "expected": "CREATE TABLE gtest23q (a INT PRIMARY KEY, b INT REFERENCES gtest23p(y))"
  },
  {
    "comment": "generated - Statement 211",
    "query": "INSERT INTO gtest23q VALUES (1, 2)"
  },
  {
    "comment": "generated - Statement 212",
    "query": "INSERT INTO gtest23q VALUES (2, 5)"
  },
  {
    "comment": "generated - Statement 213",
    "query": "CREATE DOMAIN gtestdomain1 AS int CHECK (VALUE \u003c 10)",
    "expected": "CREATE DOMAIN gtestdomain1 AS INT CHECK (value \u003c 10)"
  },
  {
    "comment": "generated - Statement 214",
    "query": "CREATE TABLE gtest24 (a int PRIMARY KEY, b gtestdomain1 GENERATED ALWAYS AS (a * 2) STORED)",
    "expected": "CREATE TABLE gtest24 (a INT PRIMARY KEY, b gtestdomain1 GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 215",
    "query": "INSERT INTO gtest24 (a) VALUES (4)"
  },
  {
    "comment": "generated - Statement 216",
    "query": "INSERT INTO gtest24 (a) VALUES (6)"
  },
  {
    "comment": "generated - Statement 217",
    "query": "CREATE DOMAIN gtestdomainnn AS int CHECK (VALUE IS NOT NULL)",
    "expected": "CREATE DOMAIN gtestdomainnn AS INT CHECK (value IS NOT NULL)"
  },
  {
    "comment": "generated - Statement 218",
    "query": "CREATE TABLE gtest24nn (a int, b gtestdomainnn GENERATED ALWAYS AS (a * 2) STORED)",
    "expected": "CREATE TABLE gtest24nn (a INT, b gtestdomainnn GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 219",
    "query": "INSERT INTO gtest24nn (a) VALUES (4)"
  },
  {
    "comment": "generated - Statement 220",
    "query": "INSERT INTO gtest24nn (a) VALUES (NULL)"
  },
  {
    "comment": "generated - Statement 221",
    "query": "CREATE TYPE gtest_type AS (f1 integer, f2 text, f3 bigint)",
    "expected": "CREATE TYPE gtest_type AS (f1 INT, f2 TEXT, f3 BIGINT)"
  },
  {
    "comment": "generated - Statement 222",
    "query": "CREATE TABLE gtest28 OF gtest_type (f1 WITH OPTIONS GENERATED ALWAYS AS (f2 *2) STORED)",
    "expected": "CREATE TABLE gtest28 OF gtest_type"
  },
  {
    "comment": "generated - Statement 223",
    "query": "DROP TYPE gtest_type CASCADE"
  },
  {
    "comment": "generated - Statement 224",
    "query": "CREATE TABLE gtest_parent (f1 date NOT NULL, f2 bigint, f3 bigint) PARTITION BY RANGE (f1)",
    "expected": "CREATE TABLE gtest_parent (f1 DATE NOT NULL, f2 BIGINT, f3 BIGINT) PARTITION BY range (f1)"
  },
  {
    "comment": "generated - Statement 225",
    "query": "CREATE TABLE gtest_child PARTITION OF gtest_parent ( f3 WITH OPTIONS GENERATED ALWAYS AS (f2 * 2) STORED ) FOR VALUES FROM ('2016-07-01') TO ('2016-08-01')",
    "expected": "CREATE TABLE gtest_child PARTITION OF gtest_parent ( f3 GENERATED ALWAYS AS (f2 * 2) STORED ) FOR VALUES FROM ('2016-07-01') TO ('2016-08-01')"
  },
  {
    "comment": "generated - Statement 226",
    "query": "CREATE TABLE gtest_child (f1 date NOT NULL, f2 bigint, f3 bigint GENERATED ALWAYS AS (f2 * 2) STORED)",
    "expected": "CREATE TABLE gtest_child (f1 DATE NOT NULL, f2 BIGINT, f3 BIGINT GENERATED ALWAYS AS (f2 * 2) STORED)"
  },
  {
    "comment": "generated - Statement 227",
    "query": "ALTER TABLE gtest_parent ATTACH PARTITION gtest_child FOR VALUES FROM ('2016-07-01') TO ('2016-08-01')"
  },
  {
    "comment": "generated - Statement 228",
    "query": "DROP TABLE gtest_parent, gtest_child"
  },
  {
    "comment": "generated - Statement 229",
    "query": "CREATE TABLE gtest_parent (f1 date NOT NULL, f2 bigint, f3 bigint GENERATED ALWAYS AS (f2 * 2) STORED) PARTITION BY RANGE (f1)",
    "expected": "CREATE TABLE gtest_parent (f1 DATE NOT NULL, f2 BIGINT, f3 BIGINT GENERATED ALWAYS AS (f2 * 2) STORED) PARTITION BY range (f1)"
  },
  {
    "comment": "generated - Statement 230",
    "query": "CREATE TABLE gtest_child PARTITION OF gtest_parent FOR VALUES FROM ('2016-07-01') TO ('2016-08-01')"
  },
  {
    "comment": "generated - Statement 231",
    "query": "CREATE TABLE gtest_child2 PARTITION OF gtest_parent ( f3 WITH OPTIONS GENERATED ALWAYS AS (f2 * 22) STORED ) FOR VALUES FROM ('2016-08-01') TO ('2016-09-01')",
    "expected": "CREATE TABLE gtest_child2 PARTITION OF gtest_parent ( f3 GENERATED ALWAYS AS (f2 * 22) STORED ) FOR VALUES FROM ('2016-08-01') TO ('2016-09-01')"
  },
  {
    "comment": "generated - Statement 232",
    "query": "CREATE TABLE gtest_child3 PARTITION OF gtest_parent ( f3 DEFAULT 42 ) FOR VALUES FROM ('2016-09-01') TO ('2016-10-01')"
  },
  {
    "comment": "generated - Statement 233",
    "query": "CREATE TABLE gtest_child3 PARTITION OF gtest_parent ( f3 WITH OPTIONS GENERATED ALWAYS AS IDENTITY ) FOR VALUES FROM ('2016-09-01') TO ('2016-10-01')",
    "expected": "CREATE TABLE gtest_child3 PARTITION OF gtest_parent ( f3 GENERATED ALWAYS AS IDENTITY ) FOR VALUES FROM ('2016-09-01') TO ('2016-10-01')"
  },
  {
    "comment": "generated - Statement 234",
    "query": "CREATE TABLE gtest_child3 (f1 date NOT NULL, f2 bigint, f3 bigint)",
    "expected": "CREATE TABLE gtest_child3 (f1 DATE NOT NULL, f2 BIGINT, f3 BIGINT)"
  },
  {
    "comment": "generated - Statement 235",
    "query": "ALTER TABLE gtest_parent ATTACH PARTITION gtest_child3 FOR VALUES FROM ('2016-09-01') TO ('2016-10-01')"
  },
  {
    "comment": "generated - Statement 236",
    "query": "DROP TABLE gtest_child3"
  },
  {
    "comment": "generated - Statement 237",
    "query": "CREATE TABLE gtest_child3 (f1 date NOT NULL, f2 bigint, f3 bigint DEFAULT 42)",
    "expected": "CREATE TABLE gtest_child3 (f1 DATE NOT NULL, f2 BIGINT, f3 BIGINT DEFAULT 42)"
  },
  {
    "comment": "generated - Statement 238",
    "query": "CREATE TABLE gtest_child3 (f1 date NOT NULL, f2 bigint, f3 bigint GENERATED ALWAYS AS IDENTITY)",
    "expected": "CREATE TABLE gtest_child3 (f1 DATE NOT NULL, f2 BIGINT, f3 BIGINT GENERATED ALWAYS AS IDENTITY)"
  },
  {
    "comment": "generated - Statement 239",
    "query": "CREATE TABLE gtest_child3 (f1 date NOT NULL, f2 bigint, f3 bigint GENERATED ALWAYS AS (f2 * 33) STORED)",
    "expected": "CREATE TABLE gtest_child3 (f1 DATE NOT NULL, f2 BIGINT, f3 BIGINT GENERATED ALWAYS AS (f2 * 33) STORED)"
  },
  {
    "comment": "generated - Statement 240",
    "query": "INSERT INTO gtest_parent (f1, f2) VALUES ('2016-07-15', 2)"
  },
  {
    "comment": "generated - Statement 241",
    "query": "INSERT INTO gtest_parent (f1, f2) VALUES ('2016-08-15', 3)"
  },
  {
    "comment": "generated - Statement 242",
    "query": "SELECT tableoid::regclass, * FROM gtest_parent ORDER BY 1, 2, 3",
    "expected": "SELECT CAST(tableoid AS regclass), * FROM gtest_parent ORDER BY 1, 2, 3"
  },
  {
    "comment": "generated - Statement 243",
    "query": "UPDATE gtest_parent SET f1 = f1 + 60 WHERE f2 = 1"
  },
  {
    "comment": "generated - Statement 244",
    "query": "ALTER TABLE ONLY gtest_parent ALTER COLUMN f3 SET EXPRESSION AS (f2 * 4)",
    "expected": "ALTER TABLE ONLY gtest_parent ALTER COLUMN f3 SET EXPRESSION AS ( f2 * 4 )"
  },
  {
    "comment": "generated - Statement 245",
    "query": "ALTER TABLE gtest_child ALTER COLUMN f3 SET EXPRESSION AS (f2 * 10)",
    "expected": "ALTER TABLE gtest_child ALTER COLUMN f3 SET EXPRESSION AS ( f2 * 10 )"
  },
  {
    "comment": "generated - Statement 246",
    "query": "ALTER TABLE gtest_parent ALTER COLUMN f3 SET EXPRESSION AS (f2 * 2)",
    "expected": "ALTER TABLE gtest_parent ALTER COLUMN f3 SET EXPRESSION AS ( f2 * 2 )"
  },
  {
    "comment": "generated - Statement 247",
    "query": "CREATE TABLE gtest_part_key (f1 date NOT NULL, f2 bigint, f3 bigint GENERATED ALWAYS AS (f2 * 2) STORED) PARTITION BY RANGE (f3)",
    "expected": "CREATE TABLE gtest_part_key (f1 DATE NOT NULL, f2 BIGINT, f3 BIGINT GENERATED ALWAYS AS (f2 * 2) STORED) PARTITION BY range (f3)"
  },
  {
    "comment": "generated - Statement 248",
    "query": "CREATE TABLE gtest_part_key (f1 date NOT NULL, f2 bigint, f3 bigint GENERATED ALWAYS AS (f2 * 2) STORED) PARTITION BY RANGE ((f3 * 3))",
    "expected": "CREATE TABLE gtest_part_key (f1 DATE NOT NULL, f2 BIGINT, f3 BIGINT GENERATED ALWAYS AS (f2 * 2) STORED) PARTITION BY range ((f3 * 3))"
  },
  {
    "comment": "generated - Statement 249",
    "query": "CREATE TABLE gtest25 (a int PRIMARY KEY)",
    "expected": "CREATE TABLE gtest25 (a INT PRIMARY KEY)"
  },
  {
    "comment": "generated - Statement 250",
    "query": "INSERT INTO gtest25 VALUES (3), (4)"
  },
  {
    "comment": "generated - Statement 251",
    "query": "ALTER TABLE gtest25 ADD COLUMN b int GENERATED ALWAYS AS (a * 2) STORED, ALTER COLUMN b SET EXPRESSION AS (a * 3)",
    "expected": "ALTER TABLE gtest25 ADD COLUMN b INT GENERATED ALWAYS AS (a * 2) STORED, ALTER COLUMN b SET EXPRESSION AS ( a * 3 )"
  },
  {
    "comment": "generated - Statement 252",
    "query": "SELECT * FROM gtest25 ORDER BY a"
  },
  {
    "comment": "generated - Statement 253",
    "query": "ALTER TABLE gtest25 ADD COLUMN x int GENERATED ALWAYS AS (b * 4) STORED",
    "expected": "ALTER TABLE gtest25 ADD COLUMN x INT GENERATED ALWAYS AS (b * 4) STORED"
  },
  {
    "comment": "generated - Statement 254",
    "query": "ALTER TABLE gtest25 ADD COLUMN x int GENERATED ALWAYS AS (z * 4) STORED",
    "expected": "ALTER TABLE gtest25 ADD COLUMN x INT GENERATED ALWAYS AS (z * 4) STORED"
  },
  {
    "comment": "generated - Statement 255",
    "query": "ALTER TABLE gtest25 ADD COLUMN c int DEFAULT 42, ADD COLUMN x int GENERATED ALWAYS AS (c * 4) STORED",
    "expected": "ALTER TABLE gtest25 ADD COLUMN c INT DEFAULT 42, ADD COLUMN x INT GENERATED ALWAYS AS (c * 4) STORED"
  },
  {
    "comment": "generated - Statement 256",
    "query": "ALTER TABLE gtest25 ADD COLUMN d int DEFAULT 101",
    "expected": "ALTER TABLE gtest25 ADD COLUMN d INT DEFAULT 101"
  },
  {
    "comment": "generated - Statement 257",
    "query": "ALTER TABLE gtest25 ALTER COLUMN d SET DATA TYPE float8, ADD COLUMN y float8 GENERATED ALWAYS AS (d * 4) STORED",
    "expected": "ALTER TABLE gtest25 ALTER COLUMN d TYPE FLOAT8, ADD COLUMN y FLOAT8 GENERATED ALWAYS AS (d * 4) STORED"
  },
  {
    "comment": "generated - Statement 258",
    "query": "INSERT INTO gtest27 (a, b) VALUES (3, 7), (4, 11)"
  },
  {
    "comment": "generated - Statement 259",
    "query": "ALTER TABLE gtest27 ALTER COLUMN a TYPE text",
    "expected": "ALTER TABLE gtest27 ALTER COLUMN a TYPE TEXT"
  },
  {
    "comment": "generated - Statement 260",
    "query": "ALTER TABLE gtest27 ALTER COLUMN x TYPE numeric",
    "expected": "ALTER TABLE gtest27 ALTER COLUMN x TYPE NUMERIC"
  },
  {
    "comment": "generated - Statement 261",
    "query": "ALTER TABLE gtest27 ALTER COLUMN x TYPE boolean USING x \u003c\u003e 0",
    "expected": "ALTER TABLE gtest27 ALTER COLUMN x TYPE BOOLEAN USING x \u003c\u003e 0"
  },
  {
    "comment": "generated - Statement 262",
    "query": "ALTER TABLE gtest27 ALTER COLUMN x DROP DEFAULT"
  },
  {
    "comment": "generated - Statement 263",
    "query": "ALTER TABLE gtest27 DROP COLUMN x, ALTER COLUMN a TYPE bigint, ALTER COLUMN b TYPE bigint, ADD COLUMN x bigint GENERATED ALWAYS AS ((a + b) * 2) STORED",
    "expected": "ALTER TABLE gtest27 DROP COLUMN x, ALTER COLUMN a TYPE BIGINT, ALTER COLUMN b TYPE BIGINT, ADD COLUMN x BIGINT GENERATED ALWAYS AS ((a + b) * 2) STORED"
  },
  {
    "comment": "generated - Statement 264",
    "query": "CREATE TABLE gtest29 ( a int, b int GENERATED ALWAYS AS (a * 2) STORED )",
    "expected": "CREATE TABLE gtest29 (a INT, b INT GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 265",
    "query": "INSERT INTO gtest29 (a) VALUES (3), (4)"
  },
  {
    "comment": "generated - Statement 266",
    "query": "SELECT * FROM gtest29"
  },
  {
    "comment": "generated - Statement 267",
    "query": "ALTER TABLE gtest29 ALTER COLUMN a DROP EXPRESSION"
  },
  {
    "comment": "generated - Statement 268",
    "query": "ALTER TABLE gtest29 ALTER COLUMN a DROP EXPRESSION IF EXISTS"
  },
  {
    "comment": "generated - Statement 269",
    "query": "ALTER TABLE gtest29 ALTER COLUMN b SET EXPRESSION AS (a * 3)",
    "expected": "ALTER TABLE gtest29 ALTER COLUMN b SET EXPRESSION AS ( a * 3 )"
  },
  {
    "comment": "generated - Statement 270",
    "query": "INSERT INTO gtest29 (a) VALUES (5)"
  },
  {
    "comment": "generated - Statement 271",
    "query": "INSERT INTO gtest29 (a, b) VALUES (6, 66)"
  },
  {
    "comment": "generated - Statement 272",
    "query": "CREATE TABLE gtest30_1 () INHERITS (gtest30)"
  },
  {
    "comment": "generated - Statement 273",
    "query": "ALTER TABLE gtest30 ALTER COLUMN b DROP EXPRESSION"
  },
  {
    "comment": "generated - Statement 274",
    "query": "CREATE TABLE gtest30 ( a int, b int GENERATED ALWAYS AS (a * 2) STORED )",
    "expected": "CREATE TABLE gtest30 (a INT, b INT GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 275",
    "query": "ALTER TABLE ONLY gtest30 ALTER COLUMN b DROP EXPRESSION"
  },
  {
    "comment": "generated - Statement 276",
    "query": "CREATE TABLE gtest26 ( a int PRIMARY KEY, b int GENERATED ALWAYS AS (a * 2) STORED )",
    "expected": "CREATE TABLE gtest26 (a INT PRIMARY KEY, b INT GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "generated - Statement 277",
    "query": "CREATE FUNCTION gtest_trigger_func() RETURNS trigger   LANGUAGE plpgsql AS $$ BEGIN   IF tg_op IN ('DELETE', 'UPDATE') THEN     RAISE INFO '%: %: old = %', TG_NAME, TG_WHEN, OLD;   END IF;   IF tg_op IN ('INSERT', 'UPDATE') THEN     RAISE INFO '%: %: new = %', TG_NAME, TG_WHEN, NEW;   END IF;   IF tg_op = 'DELETE' THEN     RETURN OLD;   ELSE     RETURN NEW;   END IF; END $$;",
    "expected": "CREATE FUNCTION gtest_trigger_func () RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN   IF tg_op IN ('DELETE', 'UPDATE') THEN     RAISE INFO '%: %: old = %', TG_NAME, TG_WHEN, OLD;   END IF;   IF tg_op IN ('INSERT', 'UPDATE') THEN     RAISE INFO '%: %: new = %', TG_NAME, TG_WHEN, NEW;   END IF;   IF tg_op = 'DELETE' THEN     RETURN OLD;   ELSE     RETURN NEW;   END IF; END $$"
  },
  {
    "comment": "generated - Statement 283",
    "query": "CREATE TRIGGER gtest1 BEFORE DELETE OR UPDATE ON gtest26 FOR EACH ROW WHEN (OLD.b \u003c 0) EXECUTE PROCEDURE gtest_trigger_func()",
    "expected": "CREATE TRIGGER gtest1 BEFORE UPDATE OR DELETE ON gtest26 FOR EACH ROW WHEN (old.b \u003c 0) EXECUTE FUNCTION gtest_trigger_func()"
  },
  {
    "comment": "generated - Statement 284",
    "query": "CREATE TRIGGER gtest2a BEFORE INSERT OR UPDATE ON gtest26 FOR EACH ROW WHEN (NEW.b \u003c 0) EXECUTE PROCEDURE gtest_trigger_func()",
    "expected": "CREATE TRIGGER gtest2a BEFORE INSERT OR UPDATE ON gtest26 FOR EACH ROW WHEN (new.b \u003c 0) EXECUTE FUNCTION gtest_trigger_func()"
  },
  {
    "comment": "generated - Statement 285",
    "query": "CREATE TRIGGER gtest2b BEFORE INSERT OR UPDATE ON gtest26 FOR EACH ROW WHEN (NEW.* IS NOT NULL) EXECUTE PROCEDURE gtest_trigger_func()",
    "expected": "CREATE TRIGGER gtest2b BEFORE INSERT OR UPDATE ON gtest26 FOR EACH ROW WHEN (new.* IS NOT NULL) EXECUTE FUNCTION gtest_trigger_func()"
  },
  {
    "comment": "generated - Statement 286",
    "query": "CREATE TRIGGER gtest2 BEFORE INSERT ON gtest26 FOR EACH ROW WHEN (NEW.a \u003c 0) EXECUTE PROCEDURE gtest_trigger_func()",
    "expected": "CREATE TRIGGER gtest2 BEFORE INSERT ON gtest26 FOR EACH ROW WHEN (new.a \u003c 0) EXECUTE FUNCTION gtest_trigger_func()"
  },
  {
    "comment": "generated - Statement 287",
    "query": "CREATE TRIGGER gtest3 AFTER DELETE OR UPDATE ON gtest26 FOR EACH ROW WHEN (OLD.b \u003c 0) EXECUTE PROCEDURE gtest_trigger_func()",
    "expected": "CREATE TRIGGER gtest3 AFTER UPDATE OR DELETE ON gtest26 FOR EACH ROW WHEN (old.b \u003c 0) EXECUTE FUNCTION gtest_trigger_func()"
  },
  {
    "comment": "generated - Statement 288",
    "query": "CREATE TRIGGER gtest4 AFTER INSERT OR UPDATE ON gtest26 FOR EACH ROW WHEN (NEW.b \u003c 0) EXECUTE PROCEDURE gtest_trigger_func()",
    "expected": "CREATE TRIGGER gtest4 AFTER INSERT OR UPDATE ON gtest26 FOR EACH ROW WHEN (new.b \u003c 0) EXECUTE FUNCTION gtest_trigger_func()"
  },
  {
    "comment": "generated - Statement 289",
    "query": "INSERT INTO gtest26 (a) VALUES (-2), (0), (3)"
  },
  {
    "comment": "generated - Statement 290",
    "query": "SELECT * FROM gtest26 ORDER BY a"
  },
  {
    "comment": "generated - Statement 291",
    "query": "UPDATE gtest26 SET a = a * -2"
  },
  {
    "comment": "generated - Statement 292",
    "query": "DELETE FROM gtest26 WHERE a = -6"
  },
  {
    "comment": "generated - Statement 293",
    "query": "DROP TRIGGER gtest1 ON gtest26"
  },
  {
    "comment": "generated - Statement 294",
    "query": "DROP TRIGGER gtest2 ON gtest26"
  },
  {
    "comment": "generated - Statement 295",
    "query": "DROP TRIGGER gtest3 ON gtest26"
  },
  {
    "comment": "generated - Statement 296",
    "query": "CREATE FUNCTION gtest_trigger_func3() RETURNS trigger   LANGUAGE plpgsql AS $$ BEGIN   RAISE NOTICE 'OK';   RETURN NEW; END $$;",
    "expected": "CREATE FUNCTION gtest_trigger_func3 () RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN   RAISE NOTICE 'OK';   RETURN NEW; END $$"
  },
  {
    "comment": "generated - Statement 298",
    "query": "CREATE TRIGGER gtest11 BEFORE UPDATE OF b ON gtest26 FOR EACH ROW EXECUTE PROCEDURE gtest_trigger_func3()",
    "expected": "CREATE TRIGGER gtest11 BEFORE UPDATE OF b ON gtest26 FOR EACH ROW EXECUTE FUNCTION gtest_trigger_func3()"
  },
  {
    "comment": "generated - Statement 299",
    "query": "UPDATE gtest26 SET a = 1 WHERE a = 0"
  },
  {
    "comment": "generated - Statement 300",
    "query": "DROP TRIGGER gtest11 ON gtest26"
  },
  {
    "comment": "generated - Statement 301",
    "query": "TRUNCATE gtest26",
    "expected": "TRUNCATE TABLE gtest26 CONTINUE IDENTITY RESTRICT"
  },
  {
    "comment": "generated - Statement 302",
    "query": "CREATE FUNCTION gtest_trigger_func4() RETURNS trigger   LANGUAGE plpgsql AS $$ BEGIN   NEW.a = 10;   NEW.b = 300;   RETURN NEW; END; $$;",
    "expected": "CREATE FUNCTION gtest_trigger_func4 () RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN   NEW.a = 10;   NEW.b = 300;   RETURN NEW; END; $$"
  },
  {
    "comment": "generated - Statement 306",
    "query": "CREATE TRIGGER gtest12_01 BEFORE UPDATE ON gtest26 FOR EACH ROW EXECUTE PROCEDURE gtest_trigger_func()",
    "expected": "CREATE TRIGGER gtest12_01 BEFORE UPDATE ON gtest26 FOR EACH ROW EXECUTE FUNCTION gtest_trigger_func()"
  },
  {
    "comment": "generated - Statement 307",
    "query": "CREATE TRIGGER gtest12_02 BEFORE UPDATE ON gtest26 FOR EACH ROW EXECUTE PROCEDURE gtest_trigger_func4()",
    "expected": "CREATE TRIGGER gtest12_02 BEFORE UPDATE ON gtest26 FOR EACH ROW EXECUTE FUNCTION gtest_trigger_func4()"
  },
  {
    "comment": "generated - Statement 308",
    "query": "CREATE TRIGGER gtest12_03 BEFORE UPDATE ON gtest26 FOR EACH ROW EXECUTE PROCEDURE gtest_trigger_func()",
    "expected": "CREATE TRIGGER gtest12_03 BEFORE UPDATE ON gtest26 FOR EACH ROW EXECUTE FUNCTION gtest_trigger_func()"
  },
  {
    "comment": "generated - Statement 309",
    "query": "INSERT INTO gtest26 (a) VALUES (1)"
  },
  {
    "comment": "generated - Statement 310",
    "query": "UPDATE gtest26 SET a = 11 WHERE a = 1"
  },
  {
    "comment": "generated - Statement 311",
    "query": "CREATE TABLE gtest28a ( a int, b int, c int, x int GENERATED ALWAYS AS (b * 2) STORED )",
    "expected": "CREATE TABLE gtest28a (a INT, b INT, c INT, x INT GENERATED ALWAYS AS (b * 2) STORED)"
  },
  {
    "comment": "generated - Statement 312",
    "query": "ALTER TABLE gtest28a DROP COLUMN a"
  },
  {
    "comment": "generated - Statement 313",
    "query": "CREATE TABLE gtest28b (LIKE gtest28a INCLUDING GENERATED)"
  }
]
