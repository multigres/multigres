[
  {
    "comment": "subselect - Statement 1",
    "query": "SELECT 1 AS one WHERE 1 IN (SELECT 1)"
  },
  {
    "comment": "subselect - Statement 2",
    "query": "SELECT 1 AS zero WHERE 1 NOT IN (SELECT 1)"
  },
  {
    "comment": "subselect - Statement 3",
    "query": "SELECT 1 AS zero WHERE 1 IN (SELECT 2)"
  },
  {
    "comment": "subselect - Statement 4",
    "query": "SELECT * FROM (SELECT 1 AS x) ss"
  },
  {
    "comment": "subselect - Statement 5",
    "query": "SELECT * FROM ((SELECT 1 AS x)) ss"
  },
  {
    "comment": "subselect - Statement 6",
    "query": "SELECT * FROM ((SELECT 1 AS x)), ((SELECT * FROM ((SELECT 2 AS y))))"
  },
  {
    "comment": "subselect - Statement 7",
    "query": "(SELECT 2) UNION SELECT 2"
  },
  {
    "comment": "subselect - Statement 8",
    "query": "((SELECT 2)) UNION SELECT 2"
  },
  {
    "comment": "subselect - Statement 9",
    "query": "SELECT ((SELECT 2) UNION SELECT 2)"
  },
  {
    "comment": "subselect - Statement 10",
    "query": "SELECT (((SELECT 2)) UNION SELECT 2)"
  },
  {
    "comment": "subselect - Statement 11",
    "query": "SELECT (SELECT ARRAY[1,2,3])[1]"
  },
  {
    "comment": "subselect - Statement 12",
    "query": "SELECT ((SELECT ARRAY[1,2,3]))[2]"
  },
  {
    "comment": "subselect - Statement 13",
    "query": "SELECT (((SELECT ARRAY[1,2,3])))[3]"
  },
  {
    "comment": "subselect - Statement 14",
    "query": "CREATE TABLE SUBSELECT_TBL ( f1 integer, f2 integer, f3 float )"
  },
  {
    "comment": "subselect - Statement 15",
    "query": "INSERT INTO SUBSELECT_TBL VALUES (1, 2, 3)"
  },
  {
    "comment": "subselect - Statement 16",
    "query": "INSERT INTO SUBSELECT_TBL VALUES (2, 3, 4)"
  },
  {
    "comment": "subselect - Statement 17",
    "query": "INSERT INTO SUBSELECT_TBL VALUES (3, 4, 5)"
  },
  {
    "comment": "subselect - Statement 18",
    "query": "INSERT INTO SUBSELECT_TBL VALUES (1, 1, 1)"
  },
  {
    "comment": "subselect - Statement 19",
    "query": "INSERT INTO SUBSELECT_TBL VALUES (2, 2, 2)"
  },
  {
    "comment": "subselect - Statement 20",
    "query": "INSERT INTO SUBSELECT_TBL VALUES (3, 3, 3)"
  },
  {
    "comment": "subselect - Statement 21",
    "query": "INSERT INTO SUBSELECT_TBL VALUES (6, 7, 8)"
  },
  {
    "comment": "subselect - Statement 22",
    "query": "INSERT INTO SUBSELECT_TBL VALUES (8, 9, NULL)"
  },
  {
    "comment": "subselect - Statement 23",
    "query": "SELECT * FROM SUBSELECT_TBL"
  },
  {
    "comment": "subselect - Statement 24",
    "query": "SELECT f1 AS \"Constant Select\" FROM SUBSELECT_TBL WHERE f1 IN (SELECT 1)"
  },
  {
    "comment": "subselect - Statement 25",
    "query": "SELECT f1 AS \"Uncorrelated Field\" FROM SUBSELECT_TBL WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL)"
  },
  {
    "comment": "subselect - Statement 26",
    "query": "SELECT f1 AS \"Uncorrelated Field\" FROM SUBSELECT_TBL WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL WHERE f2 IN (SELECT f1 FROM SUBSELECT_TBL))"
  },
  {
    "comment": "subselect - Statement 27",
    "query": "SELECT f1, f2 FROM SUBSELECT_TBL WHERE (f1, f2) NOT IN (SELECT f2, CAST(f3 AS int4) FROM SUBSELECT_TBL WHERE f3 IS NOT NULL)"
  },
  {
    "comment": "subselect - Statement 28",
    "query": "SELECT f1 AS \"Correlated Field\", f2 AS \"Second Field\" FROM SUBSELECT_TBL upper WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL WHERE f1 = upper.f1)"
  },
  {
    "comment": "subselect - Statement 29",
    "query": "SELECT f1 AS \"Correlated Field\", f3 AS \"Second Field\" FROM SUBSELECT_TBL upper WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL WHERE CAST(upper.f2 AS float) = f3)"
  },
  {
    "comment": "subselect - Statement 30",
    "query": "SELECT f1 AS \"Correlated Field\", f3 AS \"Second Field\" FROM SUBSELECT_TBL upper WHERE f3 IN (SELECT upper.f1 + f2 FROM SUBSELECT_TBL WHERE f2 = CAST(f3 AS integer))"
  },
  {
    "comment": "subselect - Statement 31",
    "query": "SELECT f1 AS \"Correlated Field\" FROM SUBSELECT_TBL WHERE (f1, f2) IN (SELECT f2, CAST(f3 AS int4) FROM SUBSELECT_TBL WHERE f3 IS NOT NULL)"
  },
  {
    "comment": "subselect - Statement 32",
    "query": "EXPLAIN (VERBOSE, COSTS OFF) SELECT ROW(1, 2) = (SELECT f1, f2) AS eq FROM SUBSELECT_TBL"
  },
  {
    "comment": "subselect - Statement 33",
    "query": "SELECT ROW(1, 2) = (SELECT f1, f2) AS eq FROM SUBSELECT_TBL"
  },
  {
    "comment": "subselect - Statement 34",
    "query": "EXPLAIN (VERBOSE, COSTS OFF) SELECT ROW(1, 2) = (SELECT 3, 4) AS eq FROM SUBSELECT_TBL"
  },
  {
    "comment": "subselect - Statement 35",
    "query": "SELECT ROW(1, 2) = (SELECT 3, 4) AS eq FROM SUBSELECT_TBL"
  },
  {
    "comment": "subselect - Statement 36",
    "query": "SELECT ROW(1, 2) = (SELECT f1, f2 FROM SUBSELECT_TBL)"
  },
  {
    "comment": "subselect - Statement 37",
    "query": "SELECT count FROM (SELECT COUNT(DISTINCT name) FROM road)"
  },
  {
    "comment": "subselect - Statement 38",
    "query": "SELECT COUNT(*) FROM (SELECT DISTINCT name FROM road)"
  },
  {
    "comment": "subselect - Statement 39",
    "query": "SELECT * FROM (SELECT * FROM int4_tbl), (VALUES (123456)) WHERE f1 = column1"
  },
  {
    "comment": "subselect - Statement 40",
    "query": "CREATE VIEW view_unnamed_ss AS SELECT * FROM (SELECT * FROM (SELECT abs(f1) AS a1 FROM int4_tbl)), (SELECT * FROM int8_tbl) WHERE a1 < 10 AND q1 > a1 ORDER BY q1, q2"
  },
  {
    "comment": "subselect - Statement 41",
    "query": "SELECT * FROM view_unnamed_ss"
  },
  {
    "comment": "subselect - Statement 42",
    "query": "CREATE VIEW view_unnamed_ss_locking AS SELECT * FROM (SELECT * FROM int4_tbl), int8_tbl AS unnamed_subquery WHERE f1 = q1 FOR UPDATE OF unnamed_subquery"
  },
  {
    "comment": "subselect - Statement 43",
    "query": "SELECT ss.f1 AS \"Correlated Field\", ss.f3 AS \"Second Field\" FROM SUBSELECT_TBL ss WHERE f1 NOT IN (SELECT f1+1 FROM INT4_TBL WHERE f1 != ss.f1 AND f1 < 2147483647)"
  },
  {
    "comment": "subselect - Statement 44",
    "query": "select q1, float8(count(*)) / (select count(*) from int8_tbl) from int8_tbl group by q1 order by q1"
  },
  {
    "comment": "subselect - Statement 45",
    "query": "SELECT *, pg_typeof(f1) FROM (SELECT 'foo' AS f1 FROM generate_series(1,3)) ss ORDER BY 1"
  },
  {
    "comment": "subselect - Statement 46",
    "query": "explain (verbose, costs off) select '42' union all select '43'"
  },
  {
    "comment": "subselect - Statement 47",
    "query": "explain (verbose, costs off) select '42' union all select 43"
  },
  {
    "comment": "subselect - Statement 48",
    "query": "explain (verbose, costs off) select 1 = all (select (select 1))"
  },
  {
    "comment": "subselect - Statement 49",
    "query": "select 1 = all (select (select 1))"
  },
  {
    "comment": "subselect - Statement 50",
    "query": "explain (costs off) select * from int4_tbl o where exists (select 1 from int4_tbl i where i.f1=o.f1 limit null)"
  },
  {
    "comment": "subselect - Statement 51",
    "query": "explain (costs off) select * from int4_tbl o where not exists (select 1 from int4_tbl i where i.f1=o.f1 limit 1)"
  },
  {
    "comment": "subselect - Statement 52",
    "query": "explain (costs off) select * from int4_tbl o where exists (select 1 from int4_tbl i where i.f1=o.f1 limit 0)"
  },
  {
    "comment": "subselect - Statement 53",
    "query": "select count(*) from (select 1 from tenk1 a where unique1 IN (select hundred from tenk1 b)) ss"
  },
  {
    "comment": "subselect - Statement 54",
    "query": "select count(distinct ss.ten) from (select ten from tenk1 a where unique1 IN (select hundred from tenk1 b)) ss"
  },
  {
    "comment": "subselect - Statement 55",
    "query": "select count(*) from (select 1 from tenk1 a where unique1 IN (select distinct hundred from tenk1 b)) ss"
  },
  {
    "comment": "subselect - Statement 56",
    "query": "select count(distinct ss.ten) from (select ten from tenk1 a where unique1 IN (select distinct hundred from tenk1 b)) ss"
  },
  {
    "comment": "subselect - Statement 57",
    "query": "CREATE TEMP TABLE foo (id integer)"
  },
  {
    "comment": "subselect - Statement 58",
    "query": "CREATE TEMP TABLE bar (id1 integer, id2 integer)"
  },
  {
    "comment": "subselect - Statement 59",
    "query": "INSERT INTO foo VALUES (1)"
  },
  {
    "comment": "subselect - Statement 60",
    "query": "INSERT INTO bar VALUES (1, 1)"
  },
  {
    "comment": "subselect - Statement 61",
    "query": "INSERT INTO bar VALUES (2, 2)"
  },
  {
    "comment": "subselect - Statement 62",
    "query": "INSERT INTO bar VALUES (3, 1)"
  },
  {
    "comment": "subselect - Statement 63",
    "query": "SELECT * FROM foo WHERE id IN (SELECT id2 FROM (SELECT DISTINCT id1, id2 FROM bar) AS s)"
  },
  {
    "comment": "subselect - Statement 64",
    "query": "SELECT * FROM foo WHERE id IN (SELECT id2 FROM (SELECT id1,id2 FROM bar GROUP BY id1,id2) AS s)"
  },
  {
    "comment": "subselect - Statement 65",
    "query": "SELECT * FROM foo WHERE id IN (SELECT id2 FROM (SELECT id1, id2 FROM bar UNION SELECT id1, id2 FROM bar) AS s)"
  },
  {
    "comment": "subselect - Statement 66",
    "query": "SELECT * FROM foo WHERE id IN (SELECT id2 FROM (SELECT DISTINCT ON (id2) id1, id2 FROM bar) AS s)"
  },
  {
    "comment": "subselect - Statement 67",
    "query": "SELECT * FROM foo WHERE id IN (SELECT id2 FROM (SELECT id2 FROM bar GROUP BY id2) AS s)"
  },
  {
    "comment": "subselect - Statement 68",
    "query": "SELECT * FROM foo WHERE id IN (SELECT id2 FROM (SELECT id2 FROM bar UNION SELECT id2 FROM bar) AS s)"
  },
  {
    "comment": "subselect - Statement 69",
    "query": "CREATE TABLE orderstest ( approver_ref integer, po_ref integer, ordercanceled boolean )"
  },
  {
    "comment": "subselect - Statement 70",
    "query": "INSERT INTO orderstest VALUES (1, 1, false)"
  },
  {
    "comment": "subselect - Statement 71",
    "query": "INSERT INTO orderstest VALUES (66, 5, false)"
  },
  {
    "comment": "subselect - Statement 72",
    "query": "INSERT INTO orderstest VALUES (66, 6, false)"
  },
  {
    "comment": "subselect - Statement 73",
    "query": "INSERT INTO orderstest VALUES (66, 7, false)"
  },
  {
    "comment": "subselect - Statement 74",
    "query": "INSERT INTO orderstest VALUES (66, 1, true)"
  },
  {
    "comment": "subselect - Statement 75",
    "query": "INSERT INTO orderstest VALUES (66, 8, false)"
  },
  {
    "comment": "subselect - Statement 76",
    "query": "INSERT INTO orderstest VALUES (66, 1, false)"
  },
  {
    "comment": "subselect - Statement 77",
    "query": "INSERT INTO orderstest VALUES (77, 1, false)"
  },
  {
    "comment": "subselect - Statement 78",
    "query": "CREATE VIEW orders_view AS SELECT *, (SELECT CASE WHEN ord.approver_ref=1 THEN '---' ELSE 'Approved' END) AS \"Approved\", (SELECT CASE WHEN ord.ordercanceled THEN 'Canceled' ELSE (SELECT CASE WHEN ord.po_ref=1 THEN (SELECT CASE WHEN ord.approver_ref=1 THEN '---' ELSE 'Approved' END) ELSE 'PO' END) END) AS \"Status\", (CASE WHEN ord.ordercanceled THEN 'Canceled' ELSE (CASE WHEN ord.po_ref=1 THEN (CASE WHEN ord.approver_ref=1 THEN '---' ELSE 'Approved' END) ELSE 'PO' END) END) AS \"Status_OK\" FROM orderstest ord"
  },
  {
    "comment": "subselect - Statement 79",
    "query": "SELECT * FROM orders_view"
  },
  {
    "comment": "subselect - Statement 80",
    "query": "DROP TABLE orderstest cascade"
  },
  {
    "comment": "subselect - Statement 81",
    "query": "create temp table parts ( partnum     text, cost        float8 )"
  },
  {
    "comment": "subselect - Statement 82",
    "query": "create temp table shipped ( ttype       char(2), ordnum      int4, partnum     text, value       float8 )"
  },
  {
    "comment": "subselect - Statement 83",
    "query": "create temp view shipped_view as select * from shipped where ttype = 'wt'"
  },
  {
    "comment": "subselect - Statement 84",
    "query": "create rule shipped_view_insert as on insert to shipped_view do instead insert into shipped values('wt', new.ordnum, new.partnum, new.value)"
  },
  {
    "comment": "subselect - Statement 85",
    "query": "insert into parts (partnum, cost) values (1, 1234.56)"
  },
  {
    "comment": "subselect - Statement 86",
    "query": "insert into shipped_view (ordnum, partnum, value) values (0, 1, (select cost from parts where partnum = '1'))"
  },
  {
    "comment": "subselect - Statement 87",
    "query": "select * from shipped_view"
  },
  {
    "comment": "subselect - Statement 88",
    "query": "create rule shipped_view_update as on update to shipped_view do instead update shipped set partnum = new.partnum, value = new.value where ttype = new.ttype and ordnum = new.ordnum"
  },
  {
    "comment": "subselect - Statement 89",
    "query": "update shipped_view set value = 11 from int4_tbl a join int4_tbl b on (a.f1 = (select f1 from int4_tbl c where c.f1=b.f1)) where ordnum = a.f1"
  },
  {
    "comment": "subselect - Statement 90",
    "query": "select f1, ss1 as relabel from (select *, (select sum(f1) from int4_tbl b where f1 >= a.f1) as ss1 from int4_tbl a) ss"
  },
  {
    "comment": "subselect - Statement 91",
    "query": "select * from ( select max(unique1) from tenk1 as a where exists (select 1 from tenk1 as b where b.thousand = a.unique2) ) ss"
  },
  {
    "comment": "subselect - Statement 92",
    "query": "select * from ( select min(unique1) from tenk1 as a where not exists (select 1 from tenk1 as b where b.unique2 = 10000) ) ss"
  },
  {
    "comment": "subselect - Statement 93",
    "query": "create temp table numeric_table (num_col numeric)"
  },
  {
    "comment": "subselect - Statement 94",
    "query": "insert into numeric_table values (1), (1.000000000000000000001), (2), (3)"
  },
  {
    "comment": "subselect - Statement 95",
    "query": "create temp table float_table (float_col float8)"
  },
  {
    "comment": "subselect - Statement 96",
    "query": "insert into float_table values (1), (2), (3)"
  },
  {
    "comment": "subselect - Statement 97",
    "query": "select * from float_table where float_col in (select num_col from numeric_table)"
  },
  {
    "comment": "subselect - Statement 98",
    "query": "select * from numeric_table where num_col in (select float_col from float_table)"
  },
  {
    "comment": "subselect - Statement 99",
    "query": "create temp table ta (id int primary key, val int)"
  },
  {
    "comment": "subselect - Statement 100",
    "query": "insert into ta values(1,1)"
  },
  {
    "comment": "subselect - Statement 101",
    "query": "insert into ta values(2,2)"
  },
  {
    "comment": "subselect - Statement 102",
    "query": "create temp table tb (id int primary key, aval int)"
  },
  {
    "comment": "subselect - Statement 103",
    "query": "insert into tb values(1,1)"
  },
  {
    "comment": "subselect - Statement 104",
    "query": "insert into tb values(2,1)"
  },
  {
    "comment": "subselect - Statement 105",
    "query": "insert into tb values(3,2)"
  },
  {
    "comment": "subselect - Statement 106",
    "query": "insert into tb values(4,2)"
  },
  {
    "comment": "subselect - Statement 107",
    "query": "create temp table tc (id int primary key, aid int)"
  },
  {
    "comment": "subselect - Statement 108",
    "query": "insert into tc values(1,1)"
  },
  {
    "comment": "subselect - Statement 109",
    "query": "insert into tc values(2,2)"
  },
  {
    "comment": "subselect - Statement 110",
    "query": "select ( select min(tb.id) from tb where tb.aval = (select ta.val from ta where ta.id = tc.aid) ) as min_tb_id from tc"
  },
  {
    "comment": "subselect - Statement 111",
    "query": "create temp table t1 (f1 numeric(14,0), f2 varchar(30))"
  },
  {
    "comment": "subselect - Statement 112",
    "query": "select * from (select distinct f1, f2, (select f2 from t1 x where x.f1 = up.f1) as fs from t1 up) ss group by f1,f2,fs"
  },
  {
    "comment": "subselect - Statement 113",
    "query": "create temp table table_a(id integer)"
  },
  {
    "comment": "subselect - Statement 114",
    "query": "insert into table_a values (42)"
  },
  {
    "comment": "subselect - Statement 115",
    "query": "create temp view view_a as select * from table_a"
  },
  {
    "comment": "subselect - Statement 116",
    "query": "select view_a from view_a"
  },
  {
    "comment": "subselect - Statement 117",
    "query": "select (select view_a) from view_a"
  },
  {
    "comment": "subselect - Statement 118",
    "query": "select (select (select view_a)) from view_a"
  },
  {
    "comment": "subselect - Statement 119",
    "query": "select (select (a.*)::text) from view_a a"
  },
  {
    "comment": "subselect - Statement 120",
    "query": "select q from (select max(f1) from int4_tbl group by f1 order by f1) q"
  },
  {
    "comment": "subselect - Statement 121",
    "query": "with q as (select max(f1) from int4_tbl group by f1 order by f1) select q from q"
  },
  {
    "comment": "subselect - Statement 122",
    "query": "begin"
  },
  {
    "comment": "subselect - Statement 123",
    "query": "delete from road where exists ( select 1 from int4_tbl cross join ( select f1, array(select q1 from int8_tbl) as arr from text_tbl ) ss where road.name = ss.f1 )"
  },
  {
    "comment": "subselect - Statement 124",
    "query": "rollback"
  },
  {
    "comment": "subselect - Statement 125",
    "query": "select (select sq1) as qq1 from (select exists(select 1 from int4_tbl where f1 = q2) as sq1, 42 as dummy from int8_tbl) sq0 join int4_tbl i4 on dummy = i4.f1"
  },
  {
    "comment": "subselect - Statement 126",
    "query": "create temp table upsert(key int4 primary key, val text)"
  },
  {
    "comment": "subselect - Statement 127",
    "query": "insert into upsert values(1, 'val') on conflict (key) do update set val = 'not seen'"
  },
  {
    "comment": "subselect - Statement 128",
    "query": "insert into upsert values(1, 'val') on conflict (key) do update set val = 'seen with subselect ' || (select f1 from int4_tbl where f1 != 0 limit 1)::text"
  },
  {
    "comment": "subselect - Statement 129",
    "query": "select * from upsert"
  },
  {
    "comment": "subselect - Statement 130",
    "query": "with aa as (select 'int4_tbl' u from int4_tbl limit 1) insert into upsert values (1, 'x'), (999, 'y') on conflict (key) do update set val = (select u from aa) returning *"
  },
  {
    "comment": "subselect - Statement 131",
    "query": "create temp table outer_7597 (f1 int4, f2 int4)"
  },
  {
    "comment": "subselect - Statement 132",
    "query": "insert into outer_7597 values (0, 0)"
  },
  {
    "comment": "subselect - Statement 133",
    "query": "insert into outer_7597 values (1, 0)"
  },
  {
    "comment": "subselect - Statement 134",
    "query": "insert into outer_7597 values (0, null)"
  },
  {
    "comment": "subselect - Statement 135",
    "query": "insert into outer_7597 values (1, null)"
  },
  {
    "comment": "subselect - Statement 136",
    "query": "create temp table inner_7597(c1 int8, c2 int8)"
  },
  {
    "comment": "subselect - Statement 137",
    "query": "insert into inner_7597 values(0, null)"
  },
  {
    "comment": "subselect - Statement 138",
    "query": "select * from outer_7597 where (f1, f2) not in (select * from inner_7597)"
  },
  {
    "comment": "subselect - Statement 139",
    "query": "create temp table outer_text (f1 text, f2 text)"
  },
  {
    "comment": "subselect - Statement 140",
    "query": "insert into outer_text values ('a', 'a')"
  },
  {
    "comment": "subselect - Statement 141",
    "query": "insert into outer_text values ('b', 'a')"
  },
  {
    "comment": "subselect - Statement 142",
    "query": "insert into outer_text values ('a', null)"
  },
  {
    "comment": "subselect - Statement 143",
    "query": "insert into outer_text values ('b', null)"
  },
  {
    "comment": "subselect - Statement 144",
    "query": "create temp table inner_text (c1 text, c2 text)"
  },
  {
    "comment": "subselect - Statement 145",
    "query": "insert into inner_text values ('a', null)"
  },
  {
    "comment": "subselect - Statement 146",
    "query": "insert into inner_text values ('123', '456')"
  },
  {
    "comment": "subselect - Statement 147",
    "query": "select * from outer_text where (f1, f2) not in (select * from inner_text)"
  },
  {
    "comment": "subselect - Statement 148",
    "query": "explain (verbose, costs off) select 'foo'::text in (select 'bar'::name union all select 'bar'::name)"
  },
  {
    "comment": "subselect - Statement 149",
    "query": "select 'foo'::text in (select 'bar'::name union all select 'bar'::name)"
  },
  {
    "comment": "subselect - Statement 150",
    "query": "explain (verbose, costs off) select row(row(row(1))) = any (select row(row(1)))"
  },
  {
    "comment": "subselect - Statement 151",
    "query": "select row(row(row(1))) = any (select row(row(1)))"
  },
  {
    "comment": "subselect - Statement 152",
    "query": "select '1'::text in (select '1'::name union all select '1'::name)"
  },
  {
    "comment": "subselect - Statement 153",
    "query": "select * from int8_tbl where q1 in (select c1 from inner_text)"
  },
  {
    "comment": "subselect - Statement 154",
    "query": "create function bogus_int8_text_eq(int8, text) returns boolean language sql as 'select $1::text = $2'"
  },
  {
    "comment": "subselect - Statement 155",
    "query": "create operator = (procedure=bogus_int8_text_eq, leftarg=int8, rightarg=text)"
  },
  {
    "comment": "subselect - Statement 156",
    "query": "explain (costs off) select * from int8_tbl where q1 in (select c1 from inner_text)"
  },
  {
    "comment": "subselect - Statement 157",
    "query": "create or replace function bogus_int8_text_eq(int8, text) returns boolean language sql as 'select $1::text = $2 and $1::text = $2'"
  },
  {
    "comment": "subselect - Statement 158",
    "query": "create or replace function bogus_int8_text_eq(int8, text) returns boolean language sql as 'select $2 = $1::text'"
  },
  {
    "comment": "subselect - Statement 159",
    "query": "explain (costs off) select count(*) from tenk1 t where (exists(select 1 from tenk1 k where k.unique1 = t.unique2) or ten < 0)"
  },
  {
    "comment": "subselect - Statement 160",
    "query": "select count(*) from tenk1 t where (exists(select 1 from tenk1 k where k.unique1 = t.unique2) or ten < 0)"
  },
  {
    "comment": "subselect - Statement 161",
    "query": "explain (costs off) select count(*) from tenk1 t where (exists(select 1 from tenk1 k where k.unique1 = t.unique2) or ten < 0) and thousand = 1"
  },
  {
    "comment": "subselect - Statement 162",
    "query": "select count(*) from tenk1 t where (exists(select 1 from tenk1 k where k.unique1 = t.unique2) or ten < 0) and thousand = 1"
  },
  {
    "comment": "subselect - Statement 163",
    "query": "create temp table exists_tbl (c1 int, c2 int, c3 int) partition by list (c1)"
  },
  {
    "comment": "subselect - Statement 164",
    "query": "create temp table exists_tbl_null partition of exists_tbl for values in (null)"
  },
  {
    "comment": "subselect - Statement 165",
    "query": "create temp table exists_tbl_def partition of exists_tbl default"
  },
  {
    "comment": "subselect - Statement 166",
    "query": "insert into exists_tbl select x, x/2, x+1 from generate_series(0,10) x"
  },
  {
    "comment": "subselect - Statement 167",
    "query": "analyze exists_tbl"
  },
  {
    "comment": "subselect - Statement 168",
    "query": "explain (costs off) select * from exists_tbl t1 where (exists(select 1 from exists_tbl t2 where t1.c1 = t2.c2) or c3 < 0)"
  },
  {
    "comment": "subselect - Statement 169",
    "query": "select * from exists_tbl t1 where (exists(select 1 from exists_tbl t2 where t1.c1 = t2.c2) or c3 < 0)"
  },
  {
    "comment": "subselect - Statement 170",
    "query": "select a.thousand from tenk1 a, tenk1 b where a.thousand = b.thousand and exists ( select 1 from tenk1 c where b.hundred = c.hundred and not exists ( select 1 from tenk1 d where a.thousand = d.thousand ) )"
  },
  {
    "comment": "subselect - Statement 171",
    "query": "explain (verbose, costs off) select x, x from (select (select now()) as x from (values(1),(2)) v(y)) ss"
  },
  {
    "comment": "subselect - Statement 172",
    "query": "explain (verbose, costs off) select x, x from (select (select random()) as x from (values(1),(2)) v(y)) ss"
  },
  {
    "comment": "subselect - Statement 173",
    "query": "explain (verbose, costs off) select x, x from (select (select now() where y=y) as x from (values(1),(2)) v(y)) ss"
  },
  {
    "comment": "subselect - Statement 174",
    "query": "explain (verbose, costs off) select x, x from (select (select random() where y=y) as x from (values(1),(2)) v(y)) ss"
  },
  {
    "comment": "subselect - Statement 175",
    "query": "explain (verbose, costs off) select sum(ss.tst::int) from onek o cross join lateral ( select i.ten in (select f1 from int4_tbl where f1 <= o.hundred) as tst, random() as r from onek i where i.unique1 = o.unique1 ) ss where o.ten = 0"
  },
  {
    "comment": "subselect - Statement 176",
    "query": "select sum(ss.tst::int) from onek o cross join lateral ( select i.ten in (select f1 from int4_tbl where f1 <= o.hundred) as tst, random() as r from onek i where i.unique1 = o.unique1 ) ss where o.ten = 0"
  },
  {
    "comment": "subselect - Statement 177",
    "query": "explain (costs off) select count(*) from onek o cross join lateral ( select * from onek i1 where i1.unique1 = o.unique1 except select * from onek i2 where i2.unique1 = o.unique2 ) ss where o.ten = 1"
  },
  {
    "comment": "subselect - Statement 178",
    "query": "select count(*) from onek o cross join lateral ( select * from onek i1 where i1.unique1 = o.unique1 except select * from onek i2 where i2.unique1 = o.unique2 ) ss where o.ten = 1"
  },
  {
    "comment": "subselect - Statement 179",
    "query": "explain (costs off) select sum(o.four), sum(ss.a) from onek o cross join lateral ( with recursive x(a) as (select o.four as a union select a + 1 from x where a < 10) select * from x ) ss where o.ten = 1"
  },
  {
    "comment": "subselect - Statement 180",
    "query": "select sum(o.four), sum(ss.a) from onek o cross join lateral ( with recursive x(a) as (select o.four as a union select a + 1 from x where a < 10) select * from x ) ss where o.ten = 1"
  },
  {
    "comment": "subselect - Statement 181",
    "query": "create temp table notinouter (a int)"
  },
  {
    "comment": "subselect - Statement 182",
    "query": "create temp table notininner (b int not null)"
  },
  {
    "comment": "subselect - Statement 183",
    "query": "insert into notinouter values (null), (1)"
  },
  {
    "comment": "subselect - Statement 184",
    "query": "select * from notinouter where a not in (select b from notininner)"
  },
  {
    "comment": "subselect - Statement 185",
    "query": "create temp table nocolumns()"
  },
  {
    "comment": "subselect - Statement 186",
    "query": "select exists(select * from nocolumns)"
  },
  {
    "comment": "subselect - Statement 187",
    "query": "select val.x from generate_series(1,10) as s(i), lateral ( values ((select s.i + 1)), (s.i + 101) ) as val(x) where s.i < 10 and (select val.x) < 110"
  },
  {
    "comment": "subselect - Statement 188",
    "query": "explain (verbose, costs off) select * from (values (3 not in (select * from (values (1), (2)) ss1)), (false) ) ss"
  },
  {
    "comment": "subselect - Statement 189",
    "query": "select * from (values (3 not in (select * from (values (1), (2)) ss1)), (false) ) ss"
  },
  {
    "comment": "subselect - Statement 190",
    "query": "explain (verbose, costs off) select * from int4_tbl where (case when f1 in (select unique1 from tenk1 a) then f1 else null end) in (select ten from tenk1 b)"
  },
  {
    "comment": "subselect - Statement 191",
    "query": "select * from int4_tbl where (case when f1 in (select unique1 from tenk1 a) then f1 else null end) in (select ten from tenk1 b)"
  },
  {
    "comment": "subselect - Statement 192",
    "query": "explain (verbose, costs off) select * from int4_tbl o where (f1, f1) in (select f1, generate_series(1,50) / 10 g from int4_tbl i group by f1)"
  },
  {
    "comment": "subselect - Statement 193",
    "query": "select * from int4_tbl o where (f1, f1) in (select f1, generate_series(1,50) / 10 g from int4_tbl i group by f1)"
  },
  {
    "comment": "subselect - Statement 194",
    "query": "select (select q from (select 1,2,3 where f1 > 0 union all select 4,5,6.0 where f1 <= 0 ) q ) from int4_tbl"
  },
  {
    "comment": "subselect - Statement 195",
    "query": "explain (verbose, costs off) select * from int4_tbl i4, lateral ( select i4.f1 > 1 as b, 1 as id from (select random() order by 1) as t1 union all select true as b, 2 as id ) as t2 where b and f1 >= 0"
  },
  {
    "comment": "subselect - Statement 196",
    "query": "select * from int4_tbl i4, lateral ( select i4.f1 > 1 as b, 1 as id from (select random() order by 1) as t1 union all select true as b, 2 as id ) as t2 where b and f1 >= 0"
  },
  {
    "comment": "subselect - Statement 197",
    "query": "create temp sequence ts1"
  },
  {
    "comment": "subselect - Statement 198",
    "query": "select * from (select distinct ten from tenk1) ss where ten < 10 + nextval('ts1') order by 1"
  },
  {
    "comment": "subselect - Statement 199",
    "query": "select nextval('ts1')"
  },
  {
    "comment": "subselect - Statement 200",
    "query": "create function tattle(x int, y int) returns bool volatile language plpgsql as $$ begin raise notice 'x = %, y = %', x, y"
  },
  {
    "comment": "subselect - Statement 201",
    "query": "return x > y"
  },
  {
    "comment": "subselect - Statement 202",
    "query": "end$$"
  },
  {
    "comment": "subselect - Statement 203",
    "query": "explain (verbose, costs off) select * from (select 9 as x, unnest(array[1,2,3,11,12,13]) as u) ss where tattle(x, 8)"
  },
  {
    "comment": "subselect - Statement 204",
    "query": "select * from (select 9 as x, unnest(array[1,2,3,11,12,13]) as u) ss where tattle(x, 8)"
  },
  {
    "comment": "subselect - Statement 205",
    "query": "alter function tattle(x int, y int) stable"
  },
  {
    "comment": "subselect - Statement 206",
    "query": "explain (verbose, costs off) select * from (select 9 as x, unnest(array[1,2,3,11,12,13]) as u) ss where tattle(x, u)"
  },
  {
    "comment": "subselect - Statement 207",
    "query": "select * from (select 9 as x, unnest(array[1,2,3,11,12,13]) as u) ss where tattle(x, u)"
  },
  {
    "comment": "subselect - Statement 208",
    "query": "drop function tattle(x int, y int)"
  },
  {
    "comment": "subselect - Statement 209",
    "query": "create table sq_limit (pk int primary key, c1 int, c2 int)"
  },
  {
    "comment": "subselect - Statement 210",
    "query": "insert into sq_limit values (1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4), (5, 1, 1), (6, 2, 2), (7, 3, 3), (8, 4, 4)"
  },
  {
    "comment": "subselect - Statement 211",
    "query": "create function explain_sq_limit() returns setof text language plpgsql as $$ declare ln text"
  },
  {
    "comment": "subselect - Statement 212",
    "query": "begin for ln in explain (analyze, summary off, timing off, costs off) select * from (select pk,c2 from sq_limit order by c1,pk) as x limit 3 loop ln := regexp_replace(ln, 'Memory: \\S*',  'Memory: xxx')"
  },
  {
    "comment": "subselect - Statement 213",
    "query": "return next ln"
  },
  {
    "comment": "subselect - Statement 214",
    "query": "end loop"
  },
  {
    "comment": "subselect - Statement 215",
    "query": "end"
  },
  {
    "comment": "subselect - Statement 216",
    "query": "$$"
  },
  {
    "comment": "subselect - Statement 217",
    "query": "select * from explain_sq_limit()"
  },
  {
    "comment": "subselect - Statement 218",
    "query": "select * from (select pk,c2 from sq_limit order by c1,pk) as x limit 3"
  },
  {
    "comment": "subselect - Statement 219",
    "query": "drop function explain_sq_limit()"
  },
  {
    "comment": "subselect - Statement 220",
    "query": "drop table sq_limit"
  },
  {
    "comment": "subselect - Statement 221",
    "query": "declare c1 scroll cursor for select * from generate_series(1,4) i where i <> all (values (2),(3))"
  },
  {
    "comment": "subselect - Statement 222",
    "query": "move forward all in c1"
  },
  {
    "comment": "subselect - Statement 223",
    "query": "fetch backward all in c1"
  },
  {
    "comment": "subselect - Statement 224",
    "query": "commit"
  },
  {
    "comment": "subselect - Statement 225",
    "query": "explain (costs off) select tname, attname from ( select relname::information_schema.sql_identifier as tname, * from (select * from pg_class c) ss1) ss2 right join pg_attribute a on a.attrelid = ss2.oid where tname = 'tenk1' and attnum = 1"
  },
  {
    "comment": "subselect - Statement 226",
    "query": "select tname, attname from ( select relname::information_schema.sql_identifier as tname, * from (select * from pg_class c) ss1) ss2 right join pg_attribute a on a.attrelid = ss2.oid where tname = 'tenk1' and attnum = 1"
  },
  {
    "comment": "subselect - Statement 227",
    "query": "explain (verbose, costs off) select t1.ten, sum(x) from tenk1 t1 left join lateral ( select t1.ten + t2.ten as x, t2.fivethous from tenk1 t2 ) ss on t1.unique1 = ss.fivethous group by t1.ten order by t1.ten"
  },
  {
    "comment": "subselect - Statement 228",
    "query": "select t1.ten, sum(x) from tenk1 t1 left join lateral ( select t1.ten + t2.ten as x, t2.fivethous from tenk1 t2 ) ss on t1.unique1 = ss.fivethous group by t1.ten order by t1.ten"
  },
  {
    "comment": "subselect - Statement 229",
    "query": "explain (verbose, costs off) select t1.q1, x from int8_tbl t1 left join (int8_tbl t2 left join lateral (select t2.q1+t3.q1 as x, * from int8_tbl t3) t3 on t2.q2 = t3.q2) on t1.q2 = t2.q2 order by 1, 2"
  },
  {
    "comment": "subselect - Statement 230",
    "query": "select t1.q1, x from int8_tbl t1 left join (int8_tbl t2 left join lateral (select t2.q1+t3.q1 as x, * from int8_tbl t3) t3 on t2.q2 = t3.q2) on t1.q2 = t2.q2 order by 1, 2"
  },
  {
    "comment": "subselect - Statement 231",
    "query": "explain (verbose, costs off) with x as (select * from (select f1 from subselect_tbl) ss) select * from x where f1 = 1"
  },
  {
    "comment": "subselect - Statement 232",
    "query": "explain (verbose, costs off) with x as materialized (select * from (select f1 from subselect_tbl) ss) select * from x where f1 = 1"
  },
  {
    "comment": "subselect - Statement 233",
    "query": "explain (verbose, costs off) with x as (select * from (select f1, now() from subselect_tbl) ss) select * from x where f1 = 1"
  },
  {
    "comment": "subselect - Statement 234",
    "query": "explain (verbose, costs off) with x as (select * from (select f1, random() from subselect_tbl) ss) select * from x where f1 = 1"
  },
  {
    "comment": "subselect - Statement 235",
    "query": "explain (verbose, costs off) with x as (select * from (select f1 from subselect_tbl for update) ss) select * from x where f1 = 1"
  },
  {
    "comment": "subselect - Statement 236",
    "query": "explain (verbose, costs off) with x as (select * from (select f1, now() as n from subselect_tbl) ss) select * from x, x x2 where x.n = x2.n"
  },
  {
    "comment": "subselect - Statement 237",
    "query": "explain (verbose, costs off) with x as not materialized (select * from (select f1, now() as n from subselect_tbl) ss) select * from x, x x2 where x.n = x2.n"
  },
  {
    "comment": "subselect - Statement 238",
    "query": "explain (verbose, costs off) with recursive x(a) as ((values ('a'), ('b')) union all (with z as not materialized (select * from x) select z.a || z1.a as a from z cross join z as z1 where length(z.a || z1.a) < 5)) select * from x"
  },
  {
    "comment": "subselect - Statement 239",
    "query": "with recursive x(a) as ((values ('a'), ('b')) union all (with z as not materialized (select * from x) select z.a || z1.a as a from z cross join z as z1 where length(z.a || z1.a) < 5)) select * from x"
  },
  {
    "comment": "subselect - Statement 240",
    "query": "explain (verbose, costs off) with recursive x(a) as ((values ('a'), ('b')) union all (with z as not materialized (select * from x) select z.a || z.a as a from z where length(z.a || z.a) < 5)) select * from x"
  },
  {
    "comment": "subselect - Statement 241",
    "query": "with recursive x(a) as ((values ('a'), ('b')) union all (with z as not materialized (select * from x) select z.a || z.a as a from z where length(z.a || z.a) < 5)) select * from x"
  },
  {
    "comment": "subselect - Statement 242",
    "query": "explain (verbose, costs off) with x as (select * from int4_tbl) select * from (with y as (select * from x) select * from y) ss"
  },
  {
    "comment": "subselect - Statement 243",
    "query": "explain (verbose, costs off) with x as materialized (select * from int4_tbl) select * from (with y as (select * from x) select * from y) ss"
  },
  {
    "comment": "subselect - Statement 244",
    "query": "explain (verbose, costs off) with x as (select 1 as y) select * from (with x as (select 2 as y) select * from x) ss"
  },
  {
    "comment": "subselect - Statement 245",
    "query": "explain (verbose, costs off) with x as (select * from subselect_tbl) select * from x for update"
  },
  {
    "comment": "subselect - Statement 246",
    "query": "explain (costs off) select * from tenk1 A where hundred in (select hundred from tenk2 B where B.odd = A.odd)"
  },
  {
    "comment": "subselect - Statement 247",
    "query": "explain (costs off) select * from tenk1 A where exists (select 1 from tenk2 B where A.hundred in (select C.hundred FROM tenk2 C WHERE c.odd = b.odd))"
  },
  {
    "comment": "subselect - Statement 248",
    "query": "explain (costs off) SELECT * FROM tenk1 A LEFT JOIN tenk2 B ON A.hundred in (SELECT c.hundred FROM tenk2 C WHERE c.odd = b.odd)"
  },
  {
    "comment": "subselect - Statement 249",
    "query": "explain (costs off) SELECT * FROM tenk1 A LEFT JOIN tenk2 B ON B.hundred in (SELECT c.hundred FROM tenk2 C WHERE c.odd = a.odd)"
  },
  {
    "comment": "subselect - Statement 250",
    "query": "explain (costs off) SELECT * FROM tenk1 A LEFT JOIN tenk2 B ON B.hundred in (SELECT c.hundred FROM tenk2 C WHERE c.odd = b.odd)"
  },
  {
    "comment": "subselect - Statement 251",
    "query": "explain (costs off) SELECT * FROM tenk1 A INNER JOIN tenk2 B ON A.hundred in (SELECT c.hundred FROM tenk2 C WHERE c.odd = b.odd) WHERE a.thousand < 750"
  },
  {
    "comment": "subselect - Statement 252",
    "query": "explain (costs off) SELECT * FROM tenk1 A LEFT JOIN tenk2 B ON B.hundred in (SELECT min(c.hundred) FROM tenk2 C WHERE c.odd = b.odd)"
  }
]