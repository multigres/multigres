[
  {
    "comment": "window - Statement 1",
    "query": "CREATE TEMPORARY TABLE empsalary ( depname varchar, empno bigint, salary int, enroll_date date )"
  },
  {
    "comment": "window - Statement 2",
    "query": "INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15')"
  },
  {
    "comment": "window - Statement 3",
    "query": "SELECT depname, empno, salary, sum(salary) OVER (PARTITION BY depname) FROM empsalary ORDER BY depname, salary"
  },
  {
    "comment": "window - Statement 4",
    "query": "SELECT depname, empno, salary, rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary"
  },
  {
    "comment": "window - Statement 5",
    "query": "SELECT four, ten, SUM(SUM(four)) OVER (PARTITION BY four), AVG(ten) FROM tenk1 GROUP BY four, ten ORDER BY four, ten"
  },
  {
    "comment": "window - Statement 6",
    "query": "SELECT depname, empno, salary, sum(salary) OVER w FROM empsalary WINDOW w AS (PARTITION BY depname)"
  },
  {
    "comment": "window - Statement 7",
    "query": "SELECT depname, empno, salary, rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary) ORDER BY rank() OVER w"
  },
  {
    "comment": "window - Statement 8",
    "query": "SELECT COUNT(*) OVER () FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 9",
    "query": "SELECT COUNT(*) OVER w FROM tenk1 WHERE unique2 < 10 WINDOW w AS ()"
  },
  {
    "comment": "window - Statement 10",
    "query": "SELECT four FROM tenk1 WHERE FALSE WINDOW w AS (PARTITION BY ten)"
  },
  {
    "comment": "window - Statement 11",
    "query": "SELECT sum(four) OVER (PARTITION BY ten ORDER BY unique2) AS sum_1, ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 12",
    "query": "SELECT row_number() OVER (ORDER BY unique2) FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 13",
    "query": "SELECT rank() OVER (PARTITION BY four ORDER BY ten) AS rank_1, ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 14",
    "query": "SELECT dense_rank() OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 15",
    "query": "SELECT percent_rank() OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 16",
    "query": "SELECT cume_dist() OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 17",
    "query": "SELECT ntile(3) OVER (ORDER BY ten, four), ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 18",
    "query": "SELECT ntile(NULL) OVER (ORDER BY ten, four), ten, four FROM tenk1 LIMIT 2"
  },
  {
    "comment": "window - Statement 19",
    "query": "SELECT lag(ten) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 20",
    "query": "SELECT lag(ten, four) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 21",
    "query": "SELECT lag(ten, four, 0) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 22",
    "query": "SELECT lag(ten, four, 0.7) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten"
  },
  {
    "comment": "window - Statement 23",
    "query": "SELECT lead(ten) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 24",
    "query": "SELECT lead(ten * 2, 1) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 25",
    "query": "SELECT lead(ten * 2, 1, -1) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 26",
    "query": "SELECT lead(ten * 2, 1, -1.4) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten"
  },
  {
    "comment": "window - Statement 27",
    "query": "SELECT first_value(ten) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 28",
    "query": "SELECT last_value(four) OVER (ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 29",
    "query": "SELECT last_value(ten) OVER (PARTITION BY four), ten, four FROM (SELECT * FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten)s ORDER BY four, ten"
  },
  {
    "comment": "window - Statement 30",
    "query": "SELECT nth_value(ten, four + 1) OVER (PARTITION BY four), ten, four FROM (SELECT * FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten)s"
  },
  {
    "comment": "window - Statement 31",
    "query": "SELECT ten, two, sum(hundred) AS gsum, sum(sum(hundred)) OVER (PARTITION BY two ORDER BY ten) AS wsum FROM tenk1 GROUP BY ten, two"
  },
  {
    "comment": "window - Statement 32",
    "query": "SELECT count(*) OVER (PARTITION BY four), four FROM (SELECT * FROM tenk1 WHERE two = 1)s WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 33",
    "query": "SELECT (count(*) OVER (PARTITION BY four ORDER BY ten) + sum(hundred) OVER (PARTITION BY four ORDER BY ten))::varchar AS cntsum FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 34",
    "query": "SELECT * FROM( SELECT count(*) OVER (PARTITION BY four ORDER BY ten) + sum(hundred) OVER (PARTITION BY two ORDER BY ten) AS total, count(*) OVER (PARTITION BY four ORDER BY ten) AS fourcount, sum(hundred) OVER (PARTITION BY two ORDER BY ten) AS twosum FROM tenk1 )sub WHERE total <> fourcount + twosum"
  },
  {
    "comment": "window - Statement 35",
    "query": "SELECT avg(four) OVER (PARTITION BY four ORDER BY thousand / 100) FROM tenk1 WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 36",
    "query": "SELECT ten, two, sum(hundred) AS gsum, sum(sum(hundred)) OVER win AS wsum FROM tenk1 GROUP BY ten, two WINDOW win AS (PARTITION BY two ORDER BY ten)"
  },
  {
    "comment": "window - Statement 37",
    "query": "SELECT sum(salary), row_number() OVER (ORDER BY depname), sum(sum(salary)) OVER (ORDER BY depname DESC) FROM empsalary GROUP BY depname"
  },
  {
    "comment": "window - Statement 38",
    "query": "SELECT sum(salary) OVER w1, count(*) OVER w2 FROM empsalary WINDOW w1 AS (ORDER BY salary), w2 AS (ORDER BY salary)"
  },
  {
    "comment": "window - Statement 39",
    "query": "SELECT lead(ten, (SELECT two FROM tenk1 WHERE s.unique2 = unique2)) OVER (PARTITION BY four ORDER BY ten) FROM tenk1 s WHERE unique2 < 10"
  },
  {
    "comment": "window - Statement 40",
    "query": "SELECT count(*) OVER (PARTITION BY four) FROM (SELECT * FROM tenk1 WHERE FALSE)s"
  },
  {
    "comment": "window - Statement 41",
    "query": "SELECT sum(salary) OVER w, rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary DESC)"
  },
  {
    "comment": "window - Statement 42",
    "query": "SELECT empno, depname, salary, bonus, depadj, MIN(bonus) OVER (ORDER BY empno), MAX(depadj) OVER () FROM( SELECT *, CASE WHEN enroll_date < '2008-01-01' THEN 2008 - extract(YEAR FROM enroll_date) END * 500 AS bonus, CASE WHEN AVG(salary) OVER (PARTITION BY depname) < salary THEN 200 END AS depadj FROM empsalary )s"
  },
  {
    "comment": "window - Statement 43",
    "query": "SELECT SUM(COUNT(f1)) OVER () FROM int4_tbl WHERE f1=42"
  },
  {
    "comment": "window - Statement 44",
    "query": "select ten, sum(unique1) + sum(unique2) as res, rank() over (order by sum(unique1) + sum(unique2)) as rank from tenk1 group by ten order by ten"
  },
  {
    "comment": "window - Statement 45",
    "query": "explain (costs off) select first_value(max(x)) over (), y from (select unique1 as x, ten+four as y from tenk1) ss group by y"
  },
  {
    "comment": "window - Statement 46",
    "query": "select x, lag(x, 1) over (order by x), lead(x, 3) over (order by x) from (select x::numeric as x from generate_series(1,10) x)"
  },
  {
    "comment": "window - Statement 47",
    "query": "SELECT four, ten, sum(ten) over (partition by four order by ten), last_value(ten) over (partition by four order by ten) FROM (select distinct ten, four from tenk1) ss"
  },
  {
    "comment": "window - Statement 48",
    "query": "SELECT four, ten, sum(ten) over (partition by four order by ten range between unbounded preceding and current row), last_value(ten) over (partition by four order by ten range between unbounded preceding and current row) FROM (select distinct ten, four from tenk1) ss"
  },
  {
    "comment": "window - Statement 49",
    "query": "SELECT four, ten, sum(ten) over (partition by four order by ten range between unbounded preceding and unbounded following), last_value(ten) over (partition by four order by ten range between unbounded preceding and unbounded following) FROM (select distinct ten, four from tenk1) ss"
  },
  {
    "comment": "window - Statement 50",
    "query": "SELECT four, ten/4 as two, sum(ten/4) over (partition by four order by ten/4 range between unbounded preceding and current row), last_value(ten/4) over (partition by four order by ten/4 range between unbounded preceding and current row) FROM (select distinct ten, four from tenk1) ss"
  },
  {
    "comment": "window - Statement 51",
    "query": "SELECT four, ten/4 as two, sum(ten/4) over (partition by four order by ten/4 rows between unbounded preceding and current row), last_value(ten/4) over (partition by four order by ten/4 rows between unbounded preceding and current row) FROM (select distinct ten, four from tenk1) ss"
  },
  {
    "comment": "window - Statement 52",
    "query": "SELECT sum(unique1) over (order by four range between current row and unbounded following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 53",
    "query": "SELECT sum(unique1) over (rows between current row and unbounded following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 54",
    "query": "SELECT sum(unique1) over (rows between 2 preceding and 2 following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 55",
    "query": "SELECT sum(unique1) over (rows between 2 preceding and 2 following exclude no others), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 56",
    "query": "SELECT sum(unique1) over (rows between 2 preceding and 2 following exclude current row), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 57",
    "query": "SELECT sum(unique1) over (rows between 2 preceding and 2 following exclude group), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 58",
    "query": "SELECT sum(unique1) over (rows between 2 preceding and 2 following exclude ties), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 59",
    "query": "SELECT first_value(unique1) over (ORDER BY four rows between current row and 2 following exclude current row), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 60",
    "query": "SELECT first_value(unique1) over (ORDER BY four rows between current row and 2 following exclude group), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 61",
    "query": "SELECT first_value(unique1) over (ORDER BY four rows between current row and 2 following exclude ties), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 62",
    "query": "SELECT last_value(unique1) over (ORDER BY four rows between current row and 2 following exclude current row), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 63",
    "query": "SELECT last_value(unique1) over (ORDER BY four rows between current row and 2 following exclude group), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 64",
    "query": "SELECT last_value(unique1) over (ORDER BY four rows between current row and 2 following exclude ties), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 65",
    "query": "SELECT sum(unique1) over (rows between 2 preceding and 1 preceding), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 66",
    "query": "SELECT sum(unique1) over (rows between 1 following and 3 following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 67",
    "query": "SELECT sum(unique1) over (rows between unbounded preceding and 1 following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 68",
    "query": "SELECT sum(unique1) over (w range between current row and unbounded following), unique1, four FROM tenk1 WHERE unique1 < 10 WINDOW w AS (order by four)"
  },
  {
    "comment": "window - Statement 69",
    "query": "SELECT sum(unique1) over (w range between unbounded preceding and current row exclude current row), unique1, four FROM tenk1 WHERE unique1 < 10 WINDOW w AS (order by four)"
  },
  {
    "comment": "window - Statement 70",
    "query": "SELECT sum(unique1) over (w range between unbounded preceding and current row exclude group), unique1, four FROM tenk1 WHERE unique1 < 10 WINDOW w AS (order by four)"
  },
  {
    "comment": "window - Statement 71",
    "query": "SELECT sum(unique1) over (w range between unbounded preceding and current row exclude ties), unique1, four FROM tenk1 WHERE unique1 < 10 WINDOW w AS (order by four)"
  },
  {
    "comment": "window - Statement 72",
    "query": "SELECT first_value(unique1) over w, nth_value(unique1, 2) over w AS nth_2, last_value(unique1) over w, unique1, four FROM tenk1 WHERE unique1 < 10 WINDOW w AS (order by four range between current row and unbounded following)"
  },
  {
    "comment": "window - Statement 73",
    "query": "SELECT sum(unique1) over (order by unique1 rows (SELECT unique1 FROM tenk1 ORDER BY unique1 LIMIT 1) + 1 PRECEDING), unique1 FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 74",
    "query": "CREATE TEMP VIEW v_window AS SELECT i, sum(i) over (order by i rows between 1 preceding and 1 following) as sum_rows FROM generate_series(1, 10) i"
  },
  {
    "comment": "window - Statement 75",
    "query": "SELECT * FROM v_window"
  },
  {
    "comment": "window - Statement 76",
    "query": "SELECT pg_get_viewdef('v_window')"
  },
  {
    "comment": "window - Statement 77",
    "query": "CREATE OR REPLACE TEMP VIEW v_window AS SELECT i, sum(i) over (order by i rows between 1 preceding and 1 following exclude current row) as sum_rows FROM generate_series(1, 10) i"
  },
  {
    "comment": "window - Statement 78",
    "query": "CREATE OR REPLACE TEMP VIEW v_window AS SELECT i, sum(i) over (order by i rows between 1 preceding and 1 following exclude group) as sum_rows FROM generate_series(1, 10) i"
  },
  {
    "comment": "window - Statement 79",
    "query": "CREATE OR REPLACE TEMP VIEW v_window AS SELECT i, sum(i) over (order by i rows between 1 preceding and 1 following exclude ties) as sum_rows FROM generate_series(1, 10) i"
  },
  {
    "comment": "window - Statement 80",
    "query": "CREATE OR REPLACE TEMP VIEW v_window AS SELECT i, sum(i) over (order by i rows between 1 preceding and 1 following exclude no others) as sum_rows FROM generate_series(1, 10) i"
  },
  {
    "comment": "window - Statement 81",
    "query": "CREATE OR REPLACE TEMP VIEW v_window AS SELECT i, sum(i) over (order by i groups between 1 preceding and 1 following) as sum_rows FROM generate_series(1, 10) i"
  },
  {
    "comment": "window - Statement 82",
    "query": "DROP VIEW v_window"
  },
  {
    "comment": "window - Statement 83",
    "query": "CREATE TEMP VIEW v_window AS SELECT i, min(i) over (order by i range between '1 day' preceding and '10 days' following) as min_i FROM generate_series(now(), now()+'100 days'::interval, '1 hour') i"
  },
  {
    "comment": "window - Statement 84",
    "query": "SELECT sum(unique1) over (order by four range between 2::int8 preceding and 1::int2 preceding), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 85",
    "query": "SELECT sum(unique1) over (order by four desc range between 2::int8 preceding and 1::int2 preceding), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 86",
    "query": "SELECT sum(unique1) over (order by four range between 2::int8 preceding and 1::int2 preceding exclude no others), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 87",
    "query": "SELECT sum(unique1) over (order by four range between 2::int8 preceding and 1::int2 preceding exclude current row), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 88",
    "query": "SELECT sum(unique1) over (order by four range between 2::int8 preceding and 1::int2 preceding exclude group), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 89",
    "query": "SELECT sum(unique1) over (order by four range between 2::int8 preceding and 1::int2 preceding exclude ties), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 90",
    "query": "SELECT sum(unique1) over (order by four range between 2::int8 preceding and 6::int2 following exclude ties), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 91",
    "query": "SELECT sum(unique1) over (order by four range between 2::int8 preceding and 6::int2 following exclude group), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 92",
    "query": "SELECT sum(unique1) over (partition by four order by unique1 range between 5::int8 preceding and 6::int2 following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 93",
    "query": "SELECT sum(unique1) over (partition by four order by unique1 range between 5::int8 preceding and 6::int2 following exclude current row),unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 94",
    "query": "select sum(salary) over (order by enroll_date range between '1 year'::interval preceding and '1 year'::interval following), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 95",
    "query": "select sum(salary) over (order by enroll_date desc range between '1 year'::interval preceding and '1 year'::interval following), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 96",
    "query": "select sum(salary) over (order by enroll_date desc range between '1 year'::interval following and '1 year'::interval following), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 97",
    "query": "select sum(salary) over (order by enroll_date range between '1 year'::interval preceding and '1 year'::interval following exclude current row), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 98",
    "query": "select sum(salary) over (order by enroll_date range between '1 year'::interval preceding and '1 year'::interval following exclude group), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 99",
    "query": "select sum(salary) over (order by enroll_date range between '1 year'::interval preceding and '1 year'::interval following exclude ties), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 100",
    "query": "select first_value(salary) over(order by salary range between 1000 preceding and 1000 following), lead(salary) over(order by salary range between 1000 preceding and 1000 following), nth_value(salary, 1) over(order by salary range between 1000 preceding and 1000 following), salary from empsalary"
  },
  {
    "comment": "window - Statement 101",
    "query": "select last_value(salary) over(order by salary range between 1000 preceding and 1000 following), lag(salary) over(order by salary range between 1000 preceding and 1000 following), salary from empsalary"
  },
  {
    "comment": "window - Statement 102",
    "query": "select first_value(salary) over(order by salary range between 1000 following and 3000 following exclude current row), lead(salary) over(order by salary range between 1000 following and 3000 following exclude ties), nth_value(salary, 1) over(order by salary range between 1000 following and 3000 following exclude ties), salary from empsalary"
  },
  {
    "comment": "window - Statement 103",
    "query": "select last_value(salary) over(order by salary range between 1000 following and 3000 following exclude group), lag(salary) over(order by salary range between 1000 following and 3000 following exclude group), salary from empsalary"
  },
  {
    "comment": "window - Statement 104",
    "query": "select first_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following exclude ties), last_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 105",
    "query": "select first_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following exclude ties), last_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following exclude ties), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 106",
    "query": "select first_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following exclude group), last_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following exclude group), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 107",
    "query": "select first_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following exclude current row), last_value(salary) over(order by enroll_date range between unbounded preceding and '1 year'::interval following exclude current row), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 108",
    "query": "select x, y, first_value(y) over w, last_value(y) over w from (select x, x as y from generate_series(1,5) as x union all select null, 42 union all select null, 43) ss window w as (order by x asc nulls first range between 2 preceding and 2 following)"
  },
  {
    "comment": "window - Statement 109",
    "query": "select x, y, first_value(y) over w, last_value(y) over w from (select x, x as y from generate_series(1,5) as x union all select null, 42 union all select null, 43) ss window w as (order by x asc nulls last range between 2 preceding and 2 following)"
  },
  {
    "comment": "window - Statement 110",
    "query": "select x, y, first_value(y) over w, last_value(y) over w from (select x, x as y from generate_series(1,5) as x union all select null, 42 union all select null, 43) ss window w as (order by x desc nulls first range between 2 preceding and 2 following)"
  },
  {
    "comment": "window - Statement 111",
    "query": "select x, y, first_value(y) over w, last_value(y) over w from (select x, x as y from generate_series(1,5) as x union all select null, 42 union all select null, 43) ss window w as (order by x desc nulls last range between 2 preceding and 2 following)"
  },
  {
    "comment": "window - Statement 112",
    "query": "CREATE FUNCTION unbounded_syntax_test1a(x int) RETURNS TABLE (a int, b int, c int) LANGUAGE SQL BEGIN ATOMIC SELECT sum(unique1) over (rows between x preceding and x following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 113",
    "query": "END"
  },
  {
    "comment": "window - Statement 114",
    "query": "CREATE FUNCTION unbounded_syntax_test1b(x int) RETURNS TABLE (a int, b int, c int) LANGUAGE SQL AS $$ SELECT sum(unique1) over (rows between x preceding and x following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 115",
    "query": "$$"
  },
  {
    "comment": "window - Statement 116",
    "query": "SELECT * FROM unbounded_syntax_test1a(2)"
  },
  {
    "comment": "window - Statement 117",
    "query": "SELECT * FROM unbounded_syntax_test1b(2)"
  },
  {
    "comment": "window - Statement 118",
    "query": "CREATE FUNCTION unbounded_syntax_test2a(unbounded int) RETURNS TABLE (a int, b int, c int) LANGUAGE SQL BEGIN ATOMIC SELECT sum(unique1) over (rows between unbounded preceding and unbounded following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 119",
    "query": "CREATE FUNCTION unbounded_syntax_test2b(unbounded int) RETURNS TABLE (a int, b int, c int) LANGUAGE SQL AS $$ SELECT sum(unique1) over (rows between unbounded preceding and unbounded following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 120",
    "query": "SELECT * FROM unbounded_syntax_test2a(2)"
  },
  {
    "comment": "window - Statement 121",
    "query": "SELECT * FROM unbounded_syntax_test2b(2)"
  },
  {
    "comment": "window - Statement 122",
    "query": "DROP FUNCTION unbounded_syntax_test1a, unbounded_syntax_test1b, unbounded_syntax_test2a, unbounded_syntax_test2b"
  },
  {
    "comment": "window - Statement 123",
    "query": "CREATE FUNCTION unbounded(x int) RETURNS int LANGUAGE SQL IMMUTABLE RETURN x"
  },
  {
    "comment": "window - Statement 124",
    "query": "SELECT sum(unique1) over (rows between 1 preceding and 1 following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 125",
    "query": "SELECT sum(unique1) over (rows between unbounded(1) preceding and unbounded(1) following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 126",
    "query": "SELECT sum(unique1) over (rows between unbounded.x preceding and unbounded.x following), unique1, four FROM tenk1, (values (1)) as unbounded(x) WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 127",
    "query": "DROP FUNCTION unbounded"
  },
  {
    "comment": "window - Statement 128",
    "query": "select x, last_value(x) over (order by x::smallint range between current row and 2147450884 following) from generate_series(32764, 32766) x"
  },
  {
    "comment": "window - Statement 129",
    "query": "select x, last_value(x) over (order by x::smallint desc range between current row and 2147450885 following) from generate_series(-32766, -32764) x"
  },
  {
    "comment": "window - Statement 130",
    "query": "select x, last_value(x) over (order by x range between current row and 4 following) from generate_series(2147483644, 2147483646) x"
  },
  {
    "comment": "window - Statement 131",
    "query": "select x, last_value(x) over (order by x desc range between current row and 5 following) from generate_series(-2147483646, -2147483644) x"
  },
  {
    "comment": "window - Statement 132",
    "query": "select x, last_value(x) over (order by x range between current row and 4 following) from generate_series(9223372036854775804, 9223372036854775806) x"
  },
  {
    "comment": "window - Statement 133",
    "query": "select x, last_value(x) over (order by x desc range between current row and 5 following) from generate_series(-9223372036854775806, -9223372036854775804) x"
  },
  {
    "comment": "window - Statement 134",
    "query": "create temp table numerics( id int, f_float4 float4, f_float8 float8, f_numeric numeric )"
  },
  {
    "comment": "window - Statement 135",
    "query": "insert into numerics values (0, '-infinity', '-infinity', '-infinity'), (1, -3, -3, -3), (2, -1, -1, -1), (3, 0, 0, 0), (4, 1.1, 1.1, 1.1), (5, 1.12, 1.12, 1.12), (6, 2, 2, 2), (7, 100, 100, 100), (8, 'infinity', 'infinity', 'infinity'), (9, 'NaN', 'NaN', 'NaN')"
  },
  {
    "comment": "window - Statement 136",
    "query": "select id, f_float4, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float4 range between 1 preceding and 1 following)"
  },
  {
    "comment": "window - Statement 137",
    "query": "select id, f_float4, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float4 range between 1 preceding and 1.1::float4 following)"
  },
  {
    "comment": "window - Statement 138",
    "query": "select id, f_float4, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float4 range between 'inf' preceding and 'inf' following)"
  },
  {
    "comment": "window - Statement 139",
    "query": "select id, f_float4, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float4 range between 'inf' preceding and 'inf' preceding)"
  },
  {
    "comment": "window - Statement 140",
    "query": "select id, f_float4, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float4 range between 'inf' following and 'inf' following)"
  },
  {
    "comment": "window - Statement 141",
    "query": "select id, f_float4, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float4 range between 1.1 preceding and 'NaN' following)"
  },
  {
    "comment": "window - Statement 142",
    "query": "select id, f_float8, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float8 range between 1 preceding and 1 following)"
  },
  {
    "comment": "window - Statement 143",
    "query": "select id, f_float8, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float8 range between 1 preceding and 1.1::float8 following)"
  },
  {
    "comment": "window - Statement 144",
    "query": "select id, f_float8, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float8 range between 'inf' preceding and 'inf' following)"
  },
  {
    "comment": "window - Statement 145",
    "query": "select id, f_float8, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float8 range between 'inf' preceding and 'inf' preceding)"
  },
  {
    "comment": "window - Statement 146",
    "query": "select id, f_float8, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float8 range between 'inf' following and 'inf' following)"
  },
  {
    "comment": "window - Statement 147",
    "query": "select id, f_float8, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_float8 range between 1.1 preceding and 'NaN' following)"
  },
  {
    "comment": "window - Statement 148",
    "query": "select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between 1 preceding and 1 following)"
  },
  {
    "comment": "window - Statement 149",
    "query": "select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between 1 preceding and 1.1::numeric following)"
  },
  {
    "comment": "window - Statement 150",
    "query": "select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between 1 preceding and 1.1::float8 following)"
  },
  {
    "comment": "window - Statement 151",
    "query": "select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between 'inf' preceding and 'inf' following)"
  },
  {
    "comment": "window - Statement 152",
    "query": "select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between 'inf' preceding and 'inf' preceding)"
  },
  {
    "comment": "window - Statement 153",
    "query": "select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between 'inf' following and 'inf' following)"
  },
  {
    "comment": "window - Statement 154",
    "query": "select id, f_numeric, first_value(id) over w, last_value(id) over w from numerics window w as (order by f_numeric range between 1.1 preceding and 'NaN' following)"
  },
  {
    "comment": "window - Statement 155",
    "query": "create temp table datetimes( id int, f_time time, f_timetz timetz, f_interval interval, f_timestamptz timestamptz, f_timestamp timestamp )"
  },
  {
    "comment": "window - Statement 156",
    "query": "insert into datetimes values (0, '10:00', '10:00 BST', '-infinity', '-infinity', '-infinity'), (1, '11:00', '11:00 BST', '1 year', '2000-10-19 10:23:54+01', '2000-10-19 10:23:54'), (2, '12:00', '12:00 BST', '2 years', '2001-10-19 10:23:54+01', '2001-10-19 10:23:54'), (3, '13:00', '13:00 BST', '3 years', '2001-10-19 10:23:54+01', '2001-10-19 10:23:54'), (4, '14:00', '14:00 BST', '4 years', '2002-10-19 10:23:54+01', '2002-10-19 10:23:54'), (5, '15:00', '15:00 BST', '5 years', '2003-10-19 10:23:54+01', '2003-10-19 10:23:54'), (6, '15:00', '15:00 BST', '5 years', '2004-10-19 10:23:54+01', '2004-10-19 10:23:54'), (7, '17:00', '17:00 BST', '7 years', '2005-10-19 10:23:54+01', '2005-10-19 10:23:54'), (8, '18:00', '18:00 BST', '8 years', '2006-10-19 10:23:54+01', '2006-10-19 10:23:54'), (9, '19:00', '19:00 BST', '9 years', '2007-10-19 10:23:54+01', '2007-10-19 10:23:54'), (10, '20:00', '20:00 BST', '10 years', '2008-10-19 10:23:54+01', '2008-10-19 10:23:54'), (11, '21:00', '21:00 BST', 'infinity', 'infinity', 'infinity')"
  },
  {
    "comment": "window - Statement 157",
    "query": "select id, f_time, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_time range between '70 min'::interval preceding and '2 hours'::interval following)"
  },
  {
    "comment": "window - Statement 158",
    "query": "select id, f_time, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_time desc range between '70 min' preceding and '2 hours' following)"
  },
  {
    "comment": "window - Statement 159",
    "query": "select id, f_time, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_time desc range between '-70 min' preceding and '2 hours' following)"
  },
  {
    "comment": "window - Statement 160",
    "query": "select id, f_time, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_time range between 'infinity'::interval preceding and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 161",
    "query": "select id, f_time, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_time range between 'infinity'::interval preceding and 'infinity'::interval preceding)"
  },
  {
    "comment": "window - Statement 162",
    "query": "select id, f_time, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_time range between 'infinity'::interval following and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 163",
    "query": "select id, f_time, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_time range between '-infinity'::interval following and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 164",
    "query": "select id, f_timetz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timetz range between '70 min'::interval preceding and '2 hours'::interval following)"
  },
  {
    "comment": "window - Statement 165",
    "query": "select id, f_timetz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timetz desc range between '70 min' preceding and '2 hours' following)"
  },
  {
    "comment": "window - Statement 166",
    "query": "select id, f_timetz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timetz desc range between '70 min' preceding and '-2 hours' following)"
  },
  {
    "comment": "window - Statement 167",
    "query": "select id, f_timetz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timetz range between 'infinity'::interval preceding and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 168",
    "query": "select id, f_timetz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timetz range between 'infinity'::interval preceding and 'infinity'::interval preceding)"
  },
  {
    "comment": "window - Statement 169",
    "query": "select id, f_timetz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timetz range between 'infinity'::interval following and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 170",
    "query": "select id, f_timetz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timetz range between 'infinity'::interval following and '-infinity'::interval following)"
  },
  {
    "comment": "window - Statement 171",
    "query": "select id, f_interval, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_interval range between '1 year'::interval preceding and '1 year'::interval following)"
  },
  {
    "comment": "window - Statement 172",
    "query": "select id, f_interval, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_interval desc range between '1 year' preceding and '1 year' following)"
  },
  {
    "comment": "window - Statement 173",
    "query": "select id, f_interval, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_interval desc range between '-1 year' preceding and '1 year' following)"
  },
  {
    "comment": "window - Statement 174",
    "query": "select id, f_interval, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_interval range between 'infinity'::interval preceding and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 175",
    "query": "select id, f_interval, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_interval range between 'infinity'::interval preceding and 'infinity'::interval preceding)"
  },
  {
    "comment": "window - Statement 176",
    "query": "select id, f_interval, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_interval range between 'infinity'::interval following and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 177",
    "query": "select id, f_interval, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_interval range between '-infinity'::interval following and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 178",
    "query": "select id, f_timestamptz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamptz range between '1 year'::interval preceding and '1 year'::interval following)"
  },
  {
    "comment": "window - Statement 179",
    "query": "select id, f_timestamptz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamptz desc range between '1 year' preceding and '1 year' following)"
  },
  {
    "comment": "window - Statement 180",
    "query": "select id, f_timestamptz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamptz desc range between '1 year' preceding and '-1 year' following)"
  },
  {
    "comment": "window - Statement 181",
    "query": "select id, f_timestamptz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamptz range between 'infinity'::interval preceding and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 182",
    "query": "select id, f_timestamptz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamptz range between 'infinity'::interval preceding and 'infinity'::interval preceding)"
  },
  {
    "comment": "window - Statement 183",
    "query": "select id, f_timestamptz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamptz range between 'infinity'::interval following and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 184",
    "query": "select id, f_timestamptz, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamptz range between '-infinity'::interval following and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 185",
    "query": "select id, f_timestamp, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamp range between '1 year'::interval preceding and '1 year'::interval following)"
  },
  {
    "comment": "window - Statement 186",
    "query": "select id, f_timestamp, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamp desc range between '1 year' preceding and '1 year' following)"
  },
  {
    "comment": "window - Statement 187",
    "query": "select id, f_timestamp, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamp desc range between '-1 year' preceding and '1 year' following)"
  },
  {
    "comment": "window - Statement 188",
    "query": "select id, f_timestamp, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamp range between 'infinity'::interval preceding and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 189",
    "query": "select id, f_timestamp, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamp range between 'infinity'::interval preceding and 'infinity'::interval preceding)"
  },
  {
    "comment": "window - Statement 190",
    "query": "select id, f_timestamp, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamp range between 'infinity'::interval following and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 191",
    "query": "select id, f_timestamp, first_value(id) over w, last_value(id) over w from datetimes window w as (order by f_timestamp range between '-infinity'::interval following and 'infinity'::interval following)"
  },
  {
    "comment": "window - Statement 192",
    "query": "select sum(salary) over (order by enroll_date, salary range between '1 year'::interval preceding and '2 years'::interval following exclude ties), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 193",
    "query": "select sum(salary) over (range between '1 year'::interval preceding and '2 years'::interval following exclude ties), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 194",
    "query": "select sum(salary) over (order by depname range between '1 year'::interval preceding and '2 years'::interval following exclude ties), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 195",
    "query": "select max(enroll_date) over (order by enroll_date range between 1 preceding and 2 following exclude ties), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 196",
    "query": "select max(enroll_date) over (order by salary range between -1 preceding and 2 following exclude ties), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 197",
    "query": "select max(enroll_date) over (order by salary range between 1 preceding and -2 following exclude ties), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 198",
    "query": "select max(enroll_date) over (order by salary range between '1 year'::interval preceding and '2 years'::interval following exclude ties), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 199",
    "query": "select max(enroll_date) over (order by enroll_date range between '1 year'::interval preceding and '-2 years'::interval following exclude ties), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 200",
    "query": "SELECT sum(unique1) over (order by four groups between unbounded preceding and current row), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 201",
    "query": "SELECT sum(unique1) over (order by four groups between unbounded preceding and unbounded following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 202",
    "query": "SELECT sum(unique1) over (order by four groups between current row and unbounded following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 203",
    "query": "SELECT sum(unique1) over (order by four groups between 1 preceding and unbounded following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 204",
    "query": "SELECT sum(unique1) over (order by four groups between 1 following and unbounded following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 205",
    "query": "SELECT sum(unique1) over (order by four groups between unbounded preceding and 2 following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 206",
    "query": "SELECT sum(unique1) over (order by four groups between 2 preceding and 1 preceding), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 207",
    "query": "SELECT sum(unique1) over (order by four groups between 2 preceding and 1 following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 208",
    "query": "SELECT sum(unique1) over (order by four groups between 0 preceding and 0 following), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 209",
    "query": "SELECT sum(unique1) over (order by four groups between 2 preceding and 1 following exclude current row), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 210",
    "query": "SELECT sum(unique1) over (order by four groups between 2 preceding and 1 following exclude group), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 211",
    "query": "SELECT sum(unique1) over (order by four groups between 2 preceding and 1 following exclude ties), unique1, four FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 212",
    "query": "SELECT sum(unique1) over (partition by ten order by four groups between 0 preceding and 0 following),unique1, four, ten FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 213",
    "query": "SELECT sum(unique1) over (partition by ten order by four groups between 0 preceding and 0 following exclude current row), unique1, four, ten FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 214",
    "query": "SELECT sum(unique1) over (partition by ten order by four groups between 0 preceding and 0 following exclude group), unique1, four, ten FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 215",
    "query": "SELECT sum(unique1) over (partition by ten order by four groups between 0 preceding and 0 following exclude ties), unique1, four, ten FROM tenk1 WHERE unique1 < 10"
  },
  {
    "comment": "window - Statement 216",
    "query": "select first_value(salary) over(order by enroll_date groups between 1 preceding and 1 following), lead(salary) over(order by enroll_date groups between 1 preceding and 1 following), nth_value(salary, 1) over(order by enroll_date groups between 1 preceding and 1 following), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 217",
    "query": "select last_value(salary) over(order by enroll_date groups between 1 preceding and 1 following), lag(salary) over(order by enroll_date groups between 1 preceding and 1 following), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 218",
    "query": "select first_value(salary) over(order by enroll_date groups between 1 following and 3 following exclude current row), lead(salary) over(order by enroll_date groups between 1 following and 3 following exclude ties), nth_value(salary, 1) over(order by enroll_date groups between 1 following and 3 following exclude ties), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 219",
    "query": "select last_value(salary) over(order by enroll_date groups between 1 following and 3 following exclude group), lag(salary) over(order by enroll_date groups between 1 following and 3 following exclude group), salary, enroll_date from empsalary"
  },
  {
    "comment": "window - Statement 220",
    "query": "WITH cte (x) AS ( SELECT * FROM generate_series(1, 35, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x rows between 1 preceding and 1 following)"
  },
  {
    "comment": "window - Statement 221",
    "query": "WITH cte (x) AS ( SELECT * FROM generate_series(1, 35, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x range between 1 preceding and 1 following)"
  },
  {
    "comment": "window - Statement 222",
    "query": "WITH cte (x) AS ( SELECT * FROM generate_series(1, 35, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x groups between 1 preceding and 1 following)"
  },
  {
    "comment": "window - Statement 223",
    "query": "WITH cte (x) AS ( select 1 union all select 1 union all select 1 union all SELECT * FROM generate_series(5, 49, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x rows between 1 preceding and 1 following)"
  },
  {
    "comment": "window - Statement 224",
    "query": "WITH cte (x) AS ( select 1 union all select 1 union all select 1 union all SELECT * FROM generate_series(5, 49, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x range between 1 preceding and 1 following)"
  },
  {
    "comment": "window - Statement 225",
    "query": "WITH cte (x) AS ( select 1 union all select 1 union all select 1 union all SELECT * FROM generate_series(5, 49, 2) ) SELECT x, (sum(x) over w) FROM cte WINDOW w AS (ORDER BY x groups between 1 preceding and 1 following)"
  },
  {
    "comment": "window - Statement 226",
    "query": "SELECT count(*) OVER (PARTITION BY four) FROM (SELECT * FROM tenk1 UNION ALL SELECT * FROM tenk2)s LIMIT 0"
  },
  {
    "comment": "window - Statement 227",
    "query": "create temp table t1 (f1 int, f2 int8)"
  },
  {
    "comment": "window - Statement 228",
    "query": "insert into t1 values (1,1),(1,2),(2,2)"
  },
  {
    "comment": "window - Statement 229",
    "query": "select f1, sum(f1) over (partition by f1 range between 1 preceding and 1 following) from t1 where f1 = f2"
  },
  {
    "comment": "window - Statement 230",
    "query": "explain (costs off) select f1, sum(f1) over (partition by f1 order by f2 range between 1 preceding and 1 following) from t1 where f1 = f2"
  },
  {
    "comment": "window - Statement 231",
    "query": "select f1, sum(f1) over (partition by f1 order by f2 range between 1 preceding and 1 following) from t1 where f1 = f2"
  },
  {
    "comment": "window - Statement 232",
    "query": "select f1, sum(f1) over (partition by f1, f1 order by f2 range between 2 preceding and 1 preceding) from t1 where f1 = f2"
  },
  {
    "comment": "window - Statement 233",
    "query": "select f1, sum(f1) over (partition by f1, f2 order by f2 range between 1 following and 2 following) from t1 where f1 = f2"
  },
  {
    "comment": "window - Statement 234",
    "query": "select f1, sum(f1) over (partition by f1 groups between 1 preceding and 1 following) from t1 where f1 = f2"
  },
  {
    "comment": "window - Statement 235",
    "query": "explain (costs off) select f1, sum(f1) over (partition by f1 order by f2 groups between 1 preceding and 1 following) from t1 where f1 = f2"
  },
  {
    "comment": "window - Statement 236",
    "query": "select f1, sum(f1) over (partition by f1 order by f2 groups between 1 preceding and 1 following) from t1 where f1 = f2"
  },
  {
    "comment": "window - Statement 237",
    "query": "select f1, sum(f1) over (partition by f1, f1 order by f2 groups between 2 preceding and 1 preceding) from t1 where f1 = f2"
  },
  {
    "comment": "window - Statement 238",
    "query": "select f1, sum(f1) over (partition by f1, f2 order by f2 groups between 1 following and 2 following) from t1 where f1 = f2"
  },
  {
    "comment": "window - Statement 239",
    "query": "SELECT rank() OVER (ORDER BY length('abc'))"
  },
  {
    "comment": "window - Statement 240",
    "query": "SELECT rank() OVER (ORDER BY rank() OVER (ORDER BY random()))"
  },
  {
    "comment": "window - Statement 241",
    "query": "SELECT * FROM empsalary WHERE row_number() OVER (ORDER BY salary) < 10"
  },
  {
    "comment": "window - Statement 242",
    "query": "SELECT * FROM empsalary INNER JOIN tenk1 ON row_number() OVER (ORDER BY salary) < 10"
  },
  {
    "comment": "window - Statement 243",
    "query": "SELECT rank() OVER (ORDER BY 1), count(*) FROM empsalary GROUP BY 1"
  },
  {
    "comment": "window - Statement 244",
    "query": "SELECT * FROM rank() OVER (ORDER BY random())"
  },
  {
    "comment": "window - Statement 245",
    "query": "DELETE FROM empsalary WHERE (rank() OVER (ORDER BY random())) > 10"
  },
  {
    "comment": "window - Statement 246",
    "query": "DELETE FROM empsalary RETURNING rank() OVER (ORDER BY random())"
  },
  {
    "comment": "window - Statement 247",
    "query": "SELECT count(*) OVER w FROM tenk1 WINDOW w AS (ORDER BY unique1), w AS (ORDER BY unique1)"
  },
  {
    "comment": "window - Statement 248",
    "query": "SELECT rank() OVER (PARTITION BY four, ORDER BY ten) FROM tenk1"
  },
  {
    "comment": "window - Statement 249",
    "query": "SELECT count() OVER () FROM tenk1"
  },
  {
    "comment": "window - Statement 250",
    "query": "SELECT generate_series(1, 100) OVER () FROM empsalary"
  },
  {
    "comment": "window - Statement 251",
    "query": "SELECT ntile(0) OVER (ORDER BY ten), ten, four FROM tenk1"
  },
  {
    "comment": "window - Statement 252",
    "query": "SELECT nth_value(four, 0) OVER (ORDER BY ten), ten, four FROM tenk1"
  },
  {
    "comment": "window - Statement 253",
    "query": "SELECT sum(salary), row_number() OVER (ORDER BY depname), sum( sum(salary) FILTER (WHERE enroll_date > '2007-01-01') ) FILTER (WHERE depname <> 'sales') OVER (ORDER BY depname DESC) AS \"filtered_sum\", depname FROM empsalary GROUP BY depname"
  },
  {
    "comment": "window - Statement 254",
    "query": "EXPLAIN (COSTS OFF) SELECT empno, depname, row_number() OVER (PARTITION BY depname ORDER BY enroll_date) rn, rank() OVER (PARTITION BY depname ORDER BY enroll_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) rnk, dense_rank() OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN CURRENT ROW AND CURRENT ROW) drnk, ntile(10) OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) nt, percent_rank() OVER (PARTITION BY depname ORDER BY enroll_date ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) pr, cume_dist() OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) cd FROM empsalary"
  },
  {
    "comment": "window - Statement 255",
    "query": "EXPLAIN (COSTS OFF, VERBOSE) SELECT empno, depname, row_number() OVER (PARTITION BY depname ORDER BY enroll_date) rn, rank() OVER (PARTITION BY depname ORDER BY enroll_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) rnk, count(*) OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN CURRENT ROW AND CURRENT ROW) cnt FROM empsalary"
  },
  {
    "comment": "window - Statement 256",
    "query": "SELECT empno, depname, row_number() OVER (PARTITION BY depname ORDER BY enroll_date) rn, rank() OVER (PARTITION BY depname ORDER BY enroll_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) rnk, count(*) OVER (PARTITION BY depname ORDER BY enroll_date RANGE BETWEEN CURRENT ROW AND CURRENT ROW) cnt FROM empsalary"
  },
  {
    "comment": "window - Statement 257",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT depname, sum(salary) OVER (PARTITION BY depname) depsalary, min(salary) OVER (PARTITION BY depname || 'A', depname) depminsalary FROM empsalary) emp WHERE depname = 'sales'"
  },
  {
    "comment": "window - Statement 258",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT depname, sum(salary) OVER (PARTITION BY enroll_date) enroll_salary, min(salary) OVER (PARTITION BY depname) depminsalary FROM empsalary) emp WHERE depname = 'sales'"
  },
  {
    "comment": "window - Statement 259",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, row_number() OVER (ORDER BY empno) rn FROM empsalary) emp WHERE rn < 3"
  },
  {
    "comment": "window - Statement 260",
    "query": "SELECT * FROM (SELECT empno, row_number() OVER (ORDER BY empno) rn FROM empsalary) emp WHERE rn < 3"
  },
  {
    "comment": "window - Statement 261",
    "query": "SELECT * FROM (SELECT empno, row_number() OVER (ORDER BY empno) rn FROM empsalary) emp WHERE 3 > rn"
  },
  {
    "comment": "window - Statement 262",
    "query": "SELECT * FROM (SELECT empno, row_number() OVER (ORDER BY empno) rn FROM empsalary) emp WHERE 2 >= rn"
  },
  {
    "comment": "window - Statement 263",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, salary, rank() OVER (ORDER BY salary DESC) r FROM empsalary) emp WHERE r <= 3"
  },
  {
    "comment": "window - Statement 264",
    "query": "SELECT * FROM (SELECT empno, salary, rank() OVER (ORDER BY salary DESC) r FROM empsalary) emp WHERE r <= 3"
  },
  {
    "comment": "window - Statement 265",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, salary, dense_rank() OVER (ORDER BY salary DESC) dr FROM empsalary) emp WHERE dr = 1"
  },
  {
    "comment": "window - Statement 266",
    "query": "SELECT * FROM (SELECT empno, salary, dense_rank() OVER (ORDER BY salary DESC) dr FROM empsalary) emp WHERE dr = 1"
  },
  {
    "comment": "window - Statement 267",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, salary, count(*) OVER (ORDER BY salary DESC) c FROM empsalary) emp WHERE c <= 3"
  },
  {
    "comment": "window - Statement 268",
    "query": "SELECT * FROM (SELECT empno, salary, count(*) OVER (ORDER BY salary DESC) c FROM empsalary) emp WHERE c <= 3"
  },
  {
    "comment": "window - Statement 269",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, salary, count(empno) OVER (ORDER BY salary DESC) c FROM empsalary) emp WHERE c <= 3"
  },
  {
    "comment": "window - Statement 270",
    "query": "SELECT * FROM (SELECT empno, salary, count(empno) OVER (ORDER BY salary DESC) c FROM empsalary) emp WHERE c <= 3"
  },
  {
    "comment": "window - Statement 271",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, salary, count(*) OVER (ORDER BY salary DESC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) c FROM empsalary) emp WHERE c >= 3"
  },
  {
    "comment": "window - Statement 272",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, salary, count(*) OVER () c FROM empsalary) emp WHERE 11 <= c"
  },
  {
    "comment": "window - Statement 273",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, salary, count(*) OVER (ORDER BY salary DESC) c, dense_rank() OVER (ORDER BY salary DESC) dr FROM empsalary) emp WHERE dr = 1"
  },
  {
    "comment": "window - Statement 274",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, depname, row_number() OVER (PARTITION BY depname ORDER BY empno) rn FROM empsalary) emp WHERE rn < 3"
  },
  {
    "comment": "window - Statement 275",
    "query": "SELECT * FROM (SELECT empno, depname, row_number() OVER (PARTITION BY depname ORDER BY empno) rn FROM empsalary) emp WHERE rn < 3"
  },
  {
    "comment": "window - Statement 276",
    "query": "EXPLAIN (COSTS OFF) SELECT empno, depname FROM (SELECT empno, depname, row_number() OVER (PARTITION BY depname ORDER BY empno) rn FROM empsalary) emp WHERE rn < 3"
  },
  {
    "comment": "window - Statement 277",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, depname, salary, count(empno) OVER (PARTITION BY depname ORDER BY salary DESC) c FROM empsalary) emp WHERE c <= 3"
  },
  {
    "comment": "window - Statement 278",
    "query": "SELECT * FROM (SELECT empno, depname, salary, count(empno) OVER (PARTITION BY depname ORDER BY salary DESC) c FROM empsalary) emp WHERE c <= 3"
  },
  {
    "comment": "window - Statement 279",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, depname, salary, count(empno) OVER () c FROM empsalary) emp WHERE c = 1"
  },
  {
    "comment": "window - Statement 280",
    "query": "SELECT * FROM (SELECT row_number() OVER (PARTITION BY salary) AS rn, lead(depname) OVER (PARTITION BY salary) || ' Department' AS n_dep FROM empsalary) emp WHERE rn < 1"
  },
  {
    "comment": "window - Statement 281",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT *, count(salary) OVER (PARTITION BY depname || '') c1, row_number() OVER (PARTITION BY depname) rn, count(*) OVER (PARTITION BY depname) c2, count(*) OVER (PARTITION BY '' || depname) c3, ntile(2) OVER (PARTITION BY depname) nt FROM empsalary ) e WHERE rn <= 1 AND c1 <= 3 AND nt < 2"
  },
  {
    "comment": "window - Statement 282",
    "query": "SELECT * FROM (SELECT *, count(salary) OVER (PARTITION BY depname || '') c1, row_number() OVER (PARTITION BY depname) rn, count(*) OVER (PARTITION BY depname) c2, count(*) OVER (PARTITION BY '' || depname) c3, ntile(2) OVER (PARTITION BY depname) nt FROM empsalary ) e WHERE rn <= 1 AND c1 <= 3 AND nt < 2"
  },
  {
    "comment": "window - Statement 283",
    "query": "EXPLAIN (COSTS OFF) SELECT 1 FROM (SELECT ntile(e2.salary) OVER (PARTITION BY e1.depname) AS c FROM empsalary e1 LEFT JOIN empsalary e2 ON TRUE WHERE e1.empno = e2.empno) s WHERE s.c = 1"
  },
  {
    "comment": "window - Statement 284",
    "query": "EXPLAIN (COSTS OFF) SELECT 1 FROM (SELECT ntile(s1.x) OVER () AS c FROM (SELECT (SELECT 1) AS x) AS s1) s WHERE s.c = 1"
  },
  {
    "comment": "window - Statement 285",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, salary, count(*) OVER (ORDER BY salary DESC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) c FROM empsalary) emp WHERE c <= 3"
  },
  {
    "comment": "window - Statement 286",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, salary, count(*) OVER (ORDER BY salary) c FROM empsalary) emp WHERE 3 <= c"
  },
  {
    "comment": "window - Statement 287",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, salary, count(random()) OVER (ORDER BY empno DESC) c FROM empsalary) emp WHERE c = 1"
  },
  {
    "comment": "window - Statement 288",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT empno, salary, count((SELECT 1)) OVER (ORDER BY empno DESC) c FROM empsalary) emp WHERE c = 1"
  },
  {
    "comment": "window - Statement 289",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT depname, sum(salary) OVER (PARTITION BY depname order by empno) depsalary, min(salary) OVER (PARTITION BY depname, empno order by enroll_date) depminsalary FROM empsalary) emp WHERE depname = 'sales'"
  },
  {
    "comment": "window - Statement 290",
    "query": "EXPLAIN (COSTS OFF) SELECT empno, enroll_date, depname, sum(salary) OVER (PARTITION BY depname order by empno) depsalary, min(salary) OVER (PARTITION BY depname order by enroll_date) depminsalary FROM empsalary ORDER BY depname, empno"
  },
  {
    "comment": "window - Statement 291",
    "query": "EXPLAIN (COSTS OFF) SELECT empno, enroll_date, depname, sum(salary) OVER (PARTITION BY depname order by empno) depsalary, min(salary) OVER (PARTITION BY depname order by enroll_date) depminsalary FROM empsalary ORDER BY depname, enroll_date"
  },
  {
    "comment": "window - Statement 292",
    "query": "SET enable_hashagg TO off"
  },
  {
    "comment": "window - Statement 293",
    "query": "EXPLAIN (COSTS OFF) SELECT DISTINCT empno, enroll_date, depname, sum(salary) OVER (PARTITION BY depname order by empno) depsalary, min(salary) OVER (PARTITION BY depname order by enroll_date) depminsalary FROM empsalary ORDER BY depname, enroll_date"
  },
  {
    "comment": "window - Statement 294",
    "query": "EXPLAIN (COSTS OFF) SELECT DISTINCT empno, enroll_date, depname, sum(salary) OVER (PARTITION BY depname order by empno) depsalary, min(salary) OVER (PARTITION BY depname order by enroll_date) depminsalary FROM empsalary ORDER BY depname, empno"
  },
  {
    "comment": "window - Statement 295",
    "query": "RESET enable_hashagg"
  },
  {
    "comment": "window - Statement 296",
    "query": "EXPLAIN (COSTS OFF) SELECT lead(1) OVER (PARTITION BY depname ORDER BY salary, enroll_date), lag(1) OVER (PARTITION BY depname ORDER BY salary,enroll_date,empno) FROM empsalary"
  },
  {
    "comment": "window - Statement 297",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM (SELECT depname, empno, salary, enroll_date, row_number() OVER (PARTITION BY depname ORDER BY enroll_date) AS first_emp, row_number() OVER (PARTITION BY depname ORDER BY enroll_date DESC) AS last_emp FROM empsalary) emp WHERE first_emp = 1 OR last_emp = 1"
  },
  {
    "comment": "window - Statement 298",
    "query": "SELECT * FROM (SELECT depname, empno, salary, enroll_date, row_number() OVER (PARTITION BY depname ORDER BY enroll_date) AS first_emp, row_number() OVER (PARTITION BY depname ORDER BY enroll_date DESC) AS last_emp FROM empsalary) emp WHERE first_emp = 1 OR last_emp = 1"
  },
  {
    "comment": "window - Statement 299",
    "query": "DROP TABLE empsalary"
  },
  {
    "comment": "window - Statement 300",
    "query": "CREATE FUNCTION nth_value_def(val anyelement, n integer = 1) RETURNS anyelement LANGUAGE internal WINDOW IMMUTABLE STRICT AS 'window_nth_value'"
  },
  {
    "comment": "window - Statement 301",
    "query": "SELECT nth_value_def(n := 2, val := ten) OVER (PARTITION BY four), ten, four FROM (SELECT * FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten) s"
  },
  {
    "comment": "window - Statement 302",
    "query": "SELECT nth_value_def(ten) OVER (PARTITION BY four), ten, four FROM (SELECT * FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten) s"
  },
  {
    "comment": "window - Statement 303",
    "query": "CREATE FUNCTION logging_sfunc_nonstrict(text, anyelement) RETURNS text AS $$ SELECT COALESCE($1, '') || '*' || quote_nullable($2) $$ LANGUAGE SQL IMMUTABLE"
  },
  {
    "comment": "window - Statement 304",
    "query": "CREATE FUNCTION logging_msfunc_nonstrict(text, anyelement) RETURNS text AS $$ SELECT COALESCE($1, '') || '+' || quote_nullable($2) $$ LANGUAGE SQL IMMUTABLE"
  },
  {
    "comment": "window - Statement 305",
    "query": "CREATE FUNCTION logging_minvfunc_nonstrict(text, anyelement) RETURNS text AS $$ SELECT $1 || '-' || quote_nullable($2) $$ LANGUAGE SQL IMMUTABLE"
  },
  {
    "comment": "window - Statement 306",
    "query": "CREATE AGGREGATE logging_agg_nonstrict (anyelement) ( stype = text, sfunc = logging_sfunc_nonstrict, mstype = text, msfunc = logging_msfunc_nonstrict, minvfunc = logging_minvfunc_nonstrict )"
  },
  {
    "comment": "window - Statement 307",
    "query": "CREATE AGGREGATE logging_agg_nonstrict_initcond (anyelement) ( stype = text, sfunc = logging_sfunc_nonstrict, mstype = text, msfunc = logging_msfunc_nonstrict, minvfunc = logging_minvfunc_nonstrict, initcond = 'I', minitcond = 'MI' )"
  },
  {
    "comment": "window - Statement 308",
    "query": "CREATE FUNCTION logging_sfunc_strict(text, anyelement) RETURNS text AS $$ SELECT $1 || '*' || quote_nullable($2) $$ LANGUAGE SQL STRICT IMMUTABLE"
  },
  {
    "comment": "window - Statement 309",
    "query": "CREATE FUNCTION logging_msfunc_strict(text, anyelement) RETURNS text AS $$ SELECT $1 || '+' || quote_nullable($2) $$ LANGUAGE SQL STRICT IMMUTABLE"
  },
  {
    "comment": "window - Statement 310",
    "query": "CREATE FUNCTION logging_minvfunc_strict(text, anyelement) RETURNS text AS $$ SELECT $1 || '-' || quote_nullable($2) $$ LANGUAGE SQL STRICT IMMUTABLE"
  },
  {
    "comment": "window - Statement 311",
    "query": "CREATE AGGREGATE logging_agg_strict (text) ( stype = text, sfunc = logging_sfunc_strict, mstype = text, msfunc = logging_msfunc_strict, minvfunc = logging_minvfunc_strict )"
  },
  {
    "comment": "window - Statement 312",
    "query": "CREATE AGGREGATE logging_agg_strict_initcond (anyelement) ( stype = text, sfunc = logging_sfunc_strict, mstype = text, msfunc = logging_msfunc_strict, minvfunc = logging_minvfunc_strict, initcond = 'I', minitcond = 'MI' )"
  },
  {
    "comment": "window - Statement 313",
    "query": "SELECT p::text || ',' || i::text || ':' || COALESCE(v::text, 'NULL') AS row, logging_agg_nonstrict(v) over wnd as nstrict, logging_agg_nonstrict_initcond(v) over wnd as nstrict_init, logging_agg_strict(v::text) over wnd as strict, logging_agg_strict_initcond(v) over wnd as strict_init FROM (VALUES (1, 1, NULL), (1, 2, 'a'), (1, 3, 'b'), (1, 4, NULL), (1, 5, NULL), (1, 6, 'c'), (2, 1, NULL), (2, 2, 'x'), (3, 1, 'z') ) AS t(p, i, v) WINDOW wnd AS (PARTITION BY P ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY p, i"
  },
  {
    "comment": "window - Statement 314",
    "query": "SELECT p::text || ',' || i::text || ':' || CASE WHEN f THEN COALESCE(v::text, 'NULL') ELSE '-' END as row, logging_agg_nonstrict(v) filter(where f) over wnd as nstrict_filt, logging_agg_nonstrict_initcond(v) filter(where f) over wnd as nstrict_init_filt, logging_agg_strict(v::text) filter(where f) over wnd as strict_filt, logging_agg_strict_initcond(v) filter(where f) over wnd as strict_init_filt FROM (VALUES (1, 1, true,  NULL), (1, 2, false, 'a'), (1, 3, true,  'b'), (1, 4, false, NULL), (1, 5, false, NULL), (1, 6, false, 'c'), (2, 1, false, NULL), (2, 2, true,  'x'), (3, 1, true,  'z') ) AS t(p, i, f, v) WINDOW wnd AS (PARTITION BY p ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY p, i"
  },
  {
    "comment": "window - Statement 315",
    "query": "SELECT i::text || ':' || COALESCE(v::text, 'NULL') as row, logging_agg_strict(v::text) over wnd as inverse, logging_agg_strict(v::text || CASE WHEN random() < 0 then '?' ELSE '' END) over wnd as noinverse FROM (VALUES (1, 'a'), (2, 'b'), (3, 'c') ) AS t(i, v) WINDOW wnd AS (ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY i"
  },
  {
    "comment": "window - Statement 316",
    "query": "SELECT i::text || ':' || COALESCE(v::text, 'NULL') as row, logging_agg_strict(v::text) filter(where true) over wnd as inverse, logging_agg_strict(v::text) filter(where random() >= 0) over wnd as noinverse FROM (VALUES (1, 'a'), (2, 'b'), (3, 'c') ) AS t(i, v) WINDOW wnd AS (ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) ORDER BY i"
  },
  {
    "comment": "window - Statement 317",
    "query": "SELECT logging_agg_strict(v::text) OVER wnd FROM (VALUES (1, 'a'), (2, 'b'), (3, 'c') ) AS t(i, v) WINDOW wnd AS (ORDER BY i ROWS BETWEEN CURRENT ROW AND CURRENT ROW) ORDER BY i"
  },
  {
    "comment": "window - Statement 318",
    "query": "CREATE FUNCTION sum_int_randrestart_minvfunc(int4, int4) RETURNS int4 AS $$ SELECT CASE WHEN random() < 0.2 THEN NULL ELSE $1 - $2 END $$ LANGUAGE SQL STRICT"
  },
  {
    "comment": "window - Statement 319",
    "query": "CREATE AGGREGATE sum_int_randomrestart (int4) ( stype = int4, sfunc = int4pl, mstype = int4, msfunc = int4pl, minvfunc = sum_int_randrestart_minvfunc )"
  },
  {
    "comment": "window - Statement 320",
    "query": "WITH vs AS ( SELECT i, (random() * 100)::int4 AS v FROM generate_series(1, 100) AS i ), sum_following AS ( SELECT i, SUM(v) OVER (ORDER BY i DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS s FROM vs ) SELECT DISTINCT sum_following.s = sum_int_randomrestart(v) OVER fwd AS eq1, -sum_following.s = sum_int_randomrestart(-v) OVER fwd AS eq2, 100*3+(vs.i-1)*3 = length(logging_agg_nonstrict(''::text) OVER fwd) AS eq3 FROM vs JOIN sum_following ON sum_following.i = vs.i WINDOW fwd AS ( ORDER BY vs.i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING )"
  },
  {
    "comment": "window - Statement 321",
    "query": "SELECT i,AVG(v::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 322",
    "query": "SELECT i,AVG(v::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 323",
    "query": "SELECT i,AVG(v::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 324",
    "query": "SELECT i,AVG(v::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,1.5),(2,2.5),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 325",
    "query": "SELECT i,AVG(v::interval) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,'1 sec'),(2,'2 sec'),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 326",
    "query": "SELECT  x ,avg(x) OVER(ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING ) as curr_next_avg ,avg(x) OVER(ROWS BETWEEN 1 PRECEDING AND CURRENT ROW ) as prev_curr_avg ,sum(x) OVER(ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING ) as curr_next_sum ,sum(x) OVER(ROWS BETWEEN 1 PRECEDING AND CURRENT ROW ) as prev_curr_sum FROM (VALUES (NULL::interval), ('infinity'::interval), ('-2147483648 days -2147483648 months -9223372036854775807 usecs'), ('-infinity'::interval), ('2147483647 days 2147483647 months 9223372036854775806 usecs'), ('infinity'::interval), ('6 days'::interval), ('7 days'::interval), (NULL::interval), ('-infinity'::interval)) v(x)"
  },
  {
    "comment": "window - Statement 327",
    "query": "SELECT x, avg(x) OVER(ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) FROM (VALUES (NULL::interval), ('3 days'::interval), ('infinity'::timestamptz - now()), ('6 days'::interval), ('-infinity'::interval)) v(x)"
  },
  {
    "comment": "window - Statement 328",
    "query": "SELECT x, sum(x) OVER(ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) FROM (VALUES (NULL::interval), ('3 days'::interval), ('infinity'::timestamptz - now()), ('6 days'::interval), ('-infinity'::interval)) v(x)"
  },
  {
    "comment": "window - Statement 329",
    "query": "SELECT i,SUM(v::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 330",
    "query": "SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 331",
    "query": "SELECT i,SUM(v::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 332",
    "query": "SELECT i,SUM(v::money) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,'1.10'),(2,'2.20'),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 333",
    "query": "SELECT i,SUM(v::interval) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,'1 sec'),(2,'2 sec'),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 334",
    "query": "SELECT i,SUM(v::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,1.1),(2,2.2),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 335",
    "query": "SELECT SUM(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,1.01),(2,2),(3,3)) v(i,n)"
  },
  {
    "comment": "window - Statement 336",
    "query": "SELECT i,COUNT(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 337",
    "query": "SELECT i,COUNT(*) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 338",
    "query": "SELECT VAR_POP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 339",
    "query": "SELECT VAR_POP(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 340",
    "query": "SELECT VAR_POP(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 341",
    "query": "SELECT VAR_POP(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 342",
    "query": "SELECT VAR_SAMP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 343",
    "query": "SELECT VAR_SAMP(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 344",
    "query": "SELECT VAR_SAMP(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 345",
    "query": "SELECT VAR_SAMP(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 346",
    "query": "SELECT VARIANCE(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 347",
    "query": "SELECT VARIANCE(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 348",
    "query": "SELECT VARIANCE(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 349",
    "query": "SELECT VARIANCE(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 350",
    "query": "SELECT STDDEV_POP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 351",
    "query": "SELECT STDDEV_POP(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 352",
    "query": "SELECT STDDEV_POP(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 353",
    "query": "SELECT STDDEV_POP(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 354",
    "query": "SELECT STDDEV_SAMP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 355",
    "query": "SELECT STDDEV_SAMP(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 356",
    "query": "SELECT STDDEV_SAMP(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 357",
    "query": "SELECT STDDEV_SAMP(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 358",
    "query": "SELECT STDDEV(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 359",
    "query": "SELECT STDDEV(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 360",
    "query": "SELECT STDDEV(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 361",
    "query": "SELECT STDDEV(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n)"
  },
  {
    "comment": "window - Statement 362",
    "query": "SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND CURRENT ROW) FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 363",
    "query": "SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v)"
  },
  {
    "comment": "window - Statement 364",
    "query": "SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM (VALUES(1,1),(2,2),(3,3),(4,4)) t(i,v)"
  },
  {
    "comment": "window - Statement 365",
    "query": "SELECT a, b, SUM(b) OVER(ORDER BY A ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) FROM (VALUES(1,1::numeric),(2,2),(3,'NaN'),(4,3),(5,4)) t(a,b)"
  },
  {
    "comment": "window - Statement 366",
    "query": "SELECT to_char(SUM(n::float8) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING),'999999999999999999999D9') FROM (VALUES(1,1e20),(2,1)) n(i,n)"
  },
  {
    "comment": "window - Statement 367",
    "query": "SELECT i, b, bool_and(b) OVER w, bool_or(b) OVER w FROM (VALUES (1,true), (2,true), (3,false), (4,false), (5,true)) v(i,b) WINDOW w AS (ORDER BY i ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)"
  },
  {
    "comment": "window - Statement 368",
    "query": "EXPLAIN (COSTS OFF) SELECT COUNT(*) OVER (ORDER BY t1.unique1) FROM tenk1 t1 INNER JOIN tenk1 t2 ON t1.unique1 = t2.tenthous LIMIT 1"
  },
  {
    "comment": "window - Statement 369",
    "query": "EXPLAIN (COSTS OFF) SELECT COUNT(*) OVER () FROM tenk1 t1 INNER JOIN tenk1 t2 ON t1.unique1 = t2.tenthous WHERE t2.two = 1 LIMIT 1"
  },
  {
    "comment": "window - Statement 370",
    "query": "EXPLAIN (COSTS OFF) SELECT COUNT(*) OVER (ORDER BY t1.unique1 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) FROM tenk1 t1 INNER JOIN tenk1 t2 ON t1.unique1 = t2.tenthous LIMIT 1"
  },
  {
    "comment": "window - Statement 371",
    "query": "EXPLAIN (COSTS OFF) SELECT COUNT(*) OVER (ORDER BY t1.unique1 ROWS BETWEEN UNBOUNDED PRECEDING AND 10000 FOLLOWING) FROM tenk1 t1 INNER JOIN tenk1 t2 ON t1.unique1 = t2.tenthous LIMIT 1"
  },
  {
    "comment": "window - Statement 372",
    "query": "SELECT array_agg(i) OVER w FROM generate_series(1,5) i WINDOW w AS (ORDER BY i ROWS BETWEEN (('foo' < 'foobar')::integer) PRECEDING AND CURRENT ROW)"
  },
  {
    "comment": "window - Statement 373",
    "query": "CREATE FUNCTION pg_temp.f(group_size BIGINT) RETURNS SETOF integer[] AS $$ SELECT array_agg(s) OVER w FROM generate_series(1,5) s WINDOW w AS (ORDER BY s ROWS BETWEEN CURRENT ROW AND GROUP_SIZE FOLLOWING) $$ LANGUAGE SQL STABLE"
  },
  {
    "comment": "window - Statement 374",
    "query": "EXPLAIN (costs off) SELECT * FROM pg_temp.f(2)"
  },
  {
    "comment": "window - Statement 375",
    "query": "SELECT * FROM pg_temp.f(2)"
  }
]