[
  {
    "comment": "rules - Statement 1",
    "query": "create table rtest_t1 (a int4, b int4)",
    "expected": "CREATE TABLE rtest_t1 (a INT, b INT)"
  },
  {
    "comment": "rules - Statement 2",
    "query": "create table rtest_t2 (a int4, b int4)",
    "expected": "CREATE TABLE rtest_t2 (a INT, b INT)"
  },
  {
    "comment": "rules - Statement 3",
    "query": "create table rtest_t3 (a int4, b int4)",
    "expected": "CREATE TABLE rtest_t3 (a INT, b INT)"
  },
  {
    "comment": "rules - Statement 4",
    "query": "create view rtest_v1 as select * from rtest_t1",
    "expected": "CREATE VIEW rtest_v1 AS SELECT * FROM rtest_t1"
  },
  {
    "comment": "rules - Statement 5",
    "query": "create rule rtest_v1_ins as on insert to rtest_v1 do instead insert into rtest_t1 values (new.a, new.b)",
    "expected": "CREATE RULE rtest_v1_ins AS ON INSERT TO rtest_v1 DO INSTEAD INSERT INTO rtest_t1 VALUES (new.a, new.b)"
  },
  {
    "comment": "rules - Statement 6",
    "query": "create rule rtest_v1_upd as on update to rtest_v1 do instead update rtest_t1 set a = new.a, b = new.b where a = old.a",
    "expected": "CREATE RULE rtest_v1_upd AS ON UPDATE TO rtest_v1 DO INSTEAD UPDATE rtest_t1 SET a = new.a, b = new.b WHERE a = old.a"
  },
  {
    "comment": "rules - Statement 7",
    "query": "create rule rtest_v1_del as on delete to rtest_v1 do instead delete from rtest_t1 where a = old.a",
    "expected": "CREATE RULE rtest_v1_del AS ON DELETE TO rtest_v1 DO INSTEAD DELETE FROM rtest_t1 WHERE a = old.a"
  },
  {
    "comment": "rules - Statement 8",
    "query": "COMMENT ON RULE rtest_v1_bad ON rtest_v1 IS 'bad rule'"
  },
  {
    "comment": "rules - Statement 9",
    "query": "COMMENT ON RULE rtest_v1_del ON rtest_v1 IS 'delete rule'"
  },
  {
    "comment": "rules - Statement 10",
    "query": "COMMENT ON RULE rtest_v1_del ON rtest_v1 IS NULL"
  },
  {
    "comment": "rules - Statement 11",
    "query": "create table rtest_system (sysname text, sysdesc text)",
    "expected": "CREATE TABLE rtest_system (sysname TEXT, sysdesc TEXT)"
  },
  {
    "comment": "rules - Statement 12",
    "query": "create table rtest_interface (sysname text, ifname text)",
    "expected": "CREATE TABLE rtest_interface (sysname TEXT, ifname TEXT)"
  },
  {
    "comment": "rules - Statement 13",
    "query": "create table rtest_person (pname text, pdesc text)",
    "expected": "CREATE TABLE rtest_person (pname TEXT, pdesc TEXT)"
  },
  {
    "comment": "rules - Statement 14",
    "query": "create table rtest_admin (pname text, sysname text)",
    "expected": "CREATE TABLE rtest_admin (pname TEXT, sysname TEXT)"
  },
  {
    "comment": "rules - Statement 15",
    "query": "create rule rtest_sys_upd as on update to rtest_system do also ( update rtest_interface set sysname = new.sysname where sysname = old.sysname",
    "error": "parse error at position 141: syntax error"
  },
  {
    "comment": "rules - Statement 16",
    "query": "update rtest_admin set sysname = new.sysname where sysname = old.sysname )",
    "error": "parse error at position 74: syntax error"
  },
  {
    "comment": "rules - Statement 17",
    "query": "create rule rtest_sys_del as on delete to rtest_system do also ( delete from rtest_interface where sysname = old.sysname",
    "error": "parse error at position 120: syntax error"
  },
  {
    "comment": "rules - Statement 18",
    "query": "delete from rtest_admin where sysname = old.sysname",
    "expected": "DELETE FROM rtest_admin WHERE sysname = old.sysname"
  },
  {
    "comment": "rules - Statement 19",
    "query": ")",
    "error": "parse error at position 1: syntax error"
  },
  {
    "comment": "rules - Statement 20",
    "query": "create rule rtest_pers_upd as on update to rtest_person do also update rtest_admin set pname = new.pname where pname = old.pname",
    "expected": "CREATE RULE rtest_pers_upd AS ON UPDATE TO rtest_person DO UPDATE rtest_admin SET pname = new.pname WHERE pname = old.pname"
  },
  {
    "comment": "rules - Statement 21",
    "query": "create rule rtest_pers_del as on delete to rtest_person do also delete from rtest_admin where pname = old.pname",
    "expected": "CREATE RULE rtest_pers_del AS ON DELETE TO rtest_person DO DELETE FROM rtest_admin WHERE pname = old.pname"
  },
  {
    "comment": "rules - Statement 22",
    "query": "create table rtest_emp (ename char(20), salary numeric)",
    "expected": "CREATE TABLE rtest_emp (ename CHAR(20), salary NUMERIC)"
  },
  {
    "comment": "rules - Statement 23",
    "query": "create table rtest_emplog (ename char(20), who name, action char(10), newsal numeric, oldsal numeric)",
    "expected": "CREATE TABLE rtest_emplog (ename CHAR(20), who name, action CHAR(10), newsal NUMERIC, oldsal NUMERIC)"
  },
  {
    "comment": "rules - Statement 24",
    "query": "create table rtest_empmass (ename char(20), salary numeric)",
    "expected": "CREATE TABLE rtest_empmass (ename CHAR(20), salary NUMERIC)"
  },
  {
    "comment": "rules - Statement 25",
    "query": "create rule rtest_emp_ins as on insert to rtest_emp do insert into rtest_emplog values (new.ename, current_user, 'hired', new.salary, '0.00')",
    "expected": "CREATE RULE rtest_emp_ins AS ON INSERT TO rtest_emp DO INSERT INTO rtest_emplog VALUES (new.ename, CURRENT_USER, 'hired', new.salary, '0.00')"
  },
  {
    "comment": "rules - Statement 26",
    "query": "create rule rtest_emp_upd as on update to rtest_emp where new.salary != old.salary do insert into rtest_emplog values (new.ename, current_user, 'honored', new.salary, old.salary)",
    "expected": "CREATE RULE rtest_emp_upd AS ON UPDATE TO rtest_emp WHERE new.salary \u003c\u003e old.salary DO INSERT INTO rtest_emplog VALUES (new.ename, CURRENT_USER, 'honored', new.salary, old.salary)"
  },
  {
    "comment": "rules - Statement 27",
    "query": "create rule rtest_emp_del as on delete to rtest_emp do insert into rtest_emplog values (old.ename, current_user, 'fired', '0.00', old.salary)",
    "expected": "CREATE RULE rtest_emp_del AS ON DELETE TO rtest_emp DO INSERT INTO rtest_emplog VALUES (old.ename, CURRENT_USER, 'fired', '0.00', old.salary)"
  },
  {
    "comment": "rules - Statement 28",
    "query": "create table rtest_t4 (a int4, b text)",
    "expected": "CREATE TABLE rtest_t4 (a INT, b TEXT)"
  },
  {
    "comment": "rules - Statement 29",
    "query": "create table rtest_t5 (a int4, b text)",
    "expected": "CREATE TABLE rtest_t5 (a INT, b TEXT)"
  },
  {
    "comment": "rules - Statement 30",
    "query": "create table rtest_t6 (a int4, b text)",
    "expected": "CREATE TABLE rtest_t6 (a INT, b TEXT)"
  },
  {
    "comment": "rules - Statement 31",
    "query": "create table rtest_t7 (a int4, b text)",
    "expected": "CREATE TABLE rtest_t7 (a INT, b TEXT)"
  },
  {
    "comment": "rules - Statement 32",
    "query": "create table rtest_t8 (a int4, b text)",
    "expected": "CREATE TABLE rtest_t8 (a INT, b TEXT)"
  },
  {
    "comment": "rules - Statement 33",
    "query": "create table rtest_t9 (a int4, b text)",
    "expected": "CREATE TABLE rtest_t9 (a INT, b TEXT)"
  },
  {
    "comment": "rules - Statement 34",
    "query": "create rule rtest_t4_ins1 as on insert to rtest_t4 where new.a \u003e= 10 and new.a \u003c 20 do instead insert into rtest_t5 values (new.a, new.b)",
    "expected": "CREATE RULE rtest_t4_ins1 AS ON INSERT TO rtest_t4 WHERE new.a \u003e= 10 AND new.a \u003c 20 DO INSTEAD INSERT INTO rtest_t5 VALUES (new.a, new.b)"
  },
  {
    "comment": "rules - Statement 35",
    "query": "create rule rtest_t4_ins2 as on insert to rtest_t4 where new.a \u003e= 20 and new.a \u003c 30 do insert into rtest_t6 values (new.a, new.b)",
    "expected": "CREATE RULE rtest_t4_ins2 AS ON INSERT TO rtest_t4 WHERE new.a \u003e= 20 AND new.a \u003c 30 DO INSERT INTO rtest_t6 VALUES (new.a, new.b)"
  },
  {
    "comment": "rules - Statement 36",
    "query": "create rule rtest_t5_ins as on insert to rtest_t5 where new.a \u003e 15 do insert into rtest_t7 values (new.a, new.b)",
    "expected": "CREATE RULE rtest_t5_ins AS ON INSERT TO rtest_t5 WHERE new.a \u003e 15 DO INSERT INTO rtest_t7 VALUES (new.a, new.b)"
  },
  {
    "comment": "rules - Statement 37",
    "query": "create rule rtest_t6_ins as on insert to rtest_t6 where new.a \u003e 25 do instead insert into rtest_t8 values (new.a, new.b)",
    "expected": "CREATE RULE rtest_t6_ins AS ON INSERT TO rtest_t6 WHERE new.a \u003e 25 DO INSTEAD INSERT INTO rtest_t8 VALUES (new.a, new.b)"
  },
  {
    "comment": "rules - Statement 38",
    "query": "create table rtest_order1 (a int4)",
    "expected": "CREATE TABLE rtest_order1 (a INT)"
  },
  {
    "comment": "rules - Statement 39",
    "query": "create table rtest_order2 (a int4, b int4, c text)",
    "expected": "CREATE TABLE rtest_order2 (a INT, b INT, c TEXT)"
  },
  {
    "comment": "rules - Statement 40",
    "query": "create sequence rtest_seq",
    "expected": "CREATE SEQUENCE rtest_seq"
  },
  {
    "comment": "rules - Statement 41",
    "query": "create rule rtest_order_r3 as on insert to rtest_order1 do instead insert into rtest_order2 values (new.a, nextval('rtest_seq'), 'rule 3 - this should run 3rd')",
    "expected": "CREATE RULE rtest_order_r3 AS ON INSERT TO rtest_order1 DO INSTEAD INSERT INTO rtest_order2 VALUES (new.a, nextval('rtest_seq'), 'rule 3 - this should run 3rd')"
  },
  {
    "comment": "rules - Statement 42",
    "query": "create rule rtest_order_r4 as on insert to rtest_order1 where a \u003c 100 do instead insert into rtest_order2 values (new.a, nextval('rtest_seq'), 'rule 4 - this should run 4th')",
    "expected": "CREATE RULE rtest_order_r4 AS ON INSERT TO rtest_order1 WHERE a \u003c 100 DO INSTEAD INSERT INTO rtest_order2 VALUES (new.a, nextval('rtest_seq'), 'rule 4 - this should run 4th')"
  },
  {
    "comment": "rules - Statement 43",
    "query": "create rule rtest_order_r2 as on insert to rtest_order1 do insert into rtest_order2 values (new.a, nextval('rtest_seq'), 'rule 2 - this should run 2nd')",
    "expected": "CREATE RULE rtest_order_r2 AS ON INSERT TO rtest_order1 DO INSERT INTO rtest_order2 VALUES (new.a, nextval('rtest_seq'), 'rule 2 - this should run 2nd')"
  },
  {
    "comment": "rules - Statement 44",
    "query": "create rule rtest_order_r1 as on insert to rtest_order1 do instead insert into rtest_order2 values (new.a, nextval('rtest_seq'), 'rule 1 - this should run 1st')",
    "expected": "CREATE RULE rtest_order_r1 AS ON INSERT TO rtest_order1 DO INSTEAD INSERT INTO rtest_order2 VALUES (new.a, nextval('rtest_seq'), 'rule 1 - this should run 1st')"
  },
  {
    "comment": "rules - Statement 45",
    "query": "create table rtest_nothn1 (a int4, b text)",
    "expected": "CREATE TABLE rtest_nothn1 (a INT, b TEXT)"
  },
  {
    "comment": "rules - Statement 46",
    "query": "create table rtest_nothn2 (a int4, b text)",
    "expected": "CREATE TABLE rtest_nothn2 (a INT, b TEXT)"
  },
  {
    "comment": "rules - Statement 47",
    "query": "create table rtest_nothn3 (a int4, b text)",
    "expected": "CREATE TABLE rtest_nothn3 (a INT, b TEXT)"
  },
  {
    "comment": "rules - Statement 48",
    "query": "create table rtest_nothn4 (a int4, b text)",
    "expected": "CREATE TABLE rtest_nothn4 (a INT, b TEXT)"
  },
  {
    "comment": "rules - Statement 49",
    "query": "create rule rtest_nothn_r1 as on insert to rtest_nothn1 where new.a \u003e= 10 and new.a \u003c 20 do instead nothing",
    "expected": "CREATE RULE rtest_nothn_r1 AS ON INSERT TO rtest_nothn1 WHERE new.a \u003e= 10 AND new.a \u003c 20 DO INSTEAD NOTHING"
  },
  {
    "comment": "rules - Statement 50",
    "query": "create rule rtest_nothn_r2 as on insert to rtest_nothn1 where new.a \u003e= 30 and new.a \u003c 40 do instead nothing",
    "expected": "CREATE RULE rtest_nothn_r2 AS ON INSERT TO rtest_nothn1 WHERE new.a \u003e= 30 AND new.a \u003c 40 DO INSTEAD NOTHING"
  },
  {
    "comment": "rules - Statement 51",
    "query": "create rule rtest_nothn_r3 as on insert to rtest_nothn2 where new.a \u003e= 100 do instead insert into rtest_nothn3 values (new.a, new.b)",
    "expected": "CREATE RULE rtest_nothn_r3 AS ON INSERT TO rtest_nothn2 WHERE new.a \u003e= 100 DO INSTEAD INSERT INTO rtest_nothn3 VALUES (new.a, new.b)"
  },
  {
    "comment": "rules - Statement 52",
    "query": "create rule rtest_nothn_r4 as on insert to rtest_nothn2 do instead nothing",
    "expected": "CREATE RULE rtest_nothn_r4 AS ON INSERT TO rtest_nothn2 DO INSTEAD NOTHING"
  },
  {
    "comment": "rules - Statement 53",
    "query": "insert into rtest_t2 values (1, 21)",
    "expected": "INSERT INTO rtest_t2 VALUES (1, 21)"
  },
  {
    "comment": "rules - Statement 54",
    "query": "insert into rtest_t2 values (2, 22)",
    "expected": "INSERT INTO rtest_t2 VALUES (2, 22)"
  },
  {
    "comment": "rules - Statement 55",
    "query": "insert into rtest_t2 values (3, 23)",
    "expected": "INSERT INTO rtest_t2 VALUES (3, 23)"
  },
  {
    "comment": "rules - Statement 56",
    "query": "insert into rtest_t3 values (1, 31)",
    "expected": "INSERT INTO rtest_t3 VALUES (1, 31)"
  },
  {
    "comment": "rules - Statement 57",
    "query": "insert into rtest_t3 values (2, 32)",
    "expected": "INSERT INTO rtest_t3 VALUES (2, 32)"
  },
  {
    "comment": "rules - Statement 58",
    "query": "insert into rtest_t3 values (3, 33)",
    "expected": "INSERT INTO rtest_t3 VALUES (3, 33)"
  },
  {
    "comment": "rules - Statement 59",
    "query": "insert into rtest_t3 values (4, 34)",
    "expected": "INSERT INTO rtest_t3 VALUES (4, 34)"
  },
  {
    "comment": "rules - Statement 60",
    "query": "insert into rtest_t3 values (5, 35)",
    "expected": "INSERT INTO rtest_t3 VALUES (5, 35)"
  },
  {
    "comment": "rules - Statement 61",
    "query": "insert into rtest_v1 values (1, 11)",
    "expected": "INSERT INTO rtest_v1 VALUES (1, 11)"
  },
  {
    "comment": "rules - Statement 62",
    "query": "insert into rtest_v1 values (2, 12)",
    "expected": "INSERT INTO rtest_v1 VALUES (2, 12)"
  },
  {
    "comment": "rules - Statement 63",
    "query": "select * from rtest_v1",
    "expected": "SELECT * FROM rtest_v1"
  },
  {
    "comment": "rules - Statement 64",
    "query": "delete from rtest_v1 where a = 1",
    "expected": "DELETE FROM rtest_v1 WHERE a = 1"
  },
  {
    "comment": "rules - Statement 65",
    "query": "delete from rtest_v1 where b = 12",
    "expected": "DELETE FROM rtest_v1 WHERE b = 12"
  },
  {
    "comment": "rules - Statement 66",
    "query": "insert into rtest_v1 values (2, 13)",
    "expected": "INSERT INTO rtest_v1 VALUES (2, 13)"
  },
  {
    "comment": "rules - Statement 67",
    "query": "** Remember the delete rule on rtest_v1: It says ** DO INSTEAD DELETE FROM rtest_t1 WHERE a = old.a ** So this time both rows with a = 2 must get deleted \\p \\r delete from rtest_v1 where b = 12",
    "error": "parse error at position 2: syntax error"
  },
  {
    "comment": "rules - Statement 68",
    "query": "delete from rtest_v1",
    "expected": "DELETE FROM rtest_v1"
  },
  {
    "comment": "rules - Statement 69",
    "query": "insert into rtest_v1 select * from rtest_t2",
    "expected": "INSERT INTO rtest_v1 SELECT * FROM rtest_t2"
  },
  {
    "comment": "rules - Statement 70",
    "query": "insert into rtest_v1 (b, a) select b, a from rtest_t2",
    "expected": "INSERT INTO rtest_v1 (b, a) SELECT b, a FROM rtest_t2"
  },
  {
    "comment": "rules - Statement 71",
    "query": "insert into rtest_v1 (a) select a from rtest_t3",
    "expected": "INSERT INTO rtest_v1 (a) SELECT a FROM rtest_t3"
  },
  {
    "comment": "rules - Statement 72",
    "query": "select * from rtest_v1 where b isnull",
    "expected": "SELECT * FROM rtest_v1 WHERE b IS NULL"
  },
  {
    "comment": "rules - Statement 73",
    "query": "update rtest_t1 set a = a + 10 where b isnull",
    "expected": "UPDATE rtest_t1 SET a = a + 10 WHERE b IS NULL"
  },
  {
    "comment": "rules - Statement 74",
    "query": "delete from rtest_v1 where b isnull",
    "expected": "DELETE FROM rtest_v1 WHERE b IS NULL"
  },
  {
    "comment": "rules - Statement 75",
    "query": "update rtest_v1 set b = 42 where a = 2",
    "expected": "UPDATE rtest_v1 SET b = 42 WHERE a = 2"
  },
  {
    "comment": "rules - Statement 76",
    "query": "update rtest_v1 set b = 99 where b = 42",
    "expected": "UPDATE rtest_v1 SET b = 99 WHERE b = 42"
  },
  {
    "comment": "rules - Statement 77",
    "query": "update rtest_v1 set b = 88 where b \u003c 50",
    "expected": "UPDATE rtest_v1 SET b = 88 WHERE b \u003c 50"
  },
  {
    "comment": "rules - Statement 78",
    "query": "insert into rtest_v1 select rtest_t2.a, rtest_t3.b from rtest_t2, rtest_t3 where rtest_t2.a = rtest_t3.a",
    "expected": "INSERT INTO rtest_v1 (SELECT rtest_t2.a, rtest_t3.b FROM rtest_t2, rtest_t3 WHERE rtest_t2.a = rtest_t3.a)"
  },
  {
    "comment": "rules - Statement 79",
    "query": "update rtest_v1 set b = rtest_t2.b from rtest_t2 where rtest_v1.a = rtest_t2.a",
    "expected": "UPDATE rtest_v1 SET b = rtest_t2.b FROM rtest_t2 WHERE rtest_v1.a = rtest_t2.a"
  },
  {
    "comment": "rules - Statement 80",
    "query": "insert into rtest_v1 select * from rtest_t3",
    "expected": "INSERT INTO rtest_v1 SELECT * FROM rtest_t3"
  },
  {
    "comment": "rules - Statement 81",
    "query": "update rtest_t1 set a = a + 10 where b \u003e 30",
    "expected": "UPDATE rtest_t1 SET a = a + 10 WHERE b \u003e 30"
  },
  {
    "comment": "rules - Statement 82",
    "query": "update rtest_v1 set a = rtest_t3.a + 20 from rtest_t3 where rtest_v1.b = rtest_t3.b",
    "expected": "UPDATE rtest_v1 SET a = rtest_t3.a + 20 FROM rtest_t3 WHERE rtest_v1.b = rtest_t3.b"
  },
  {
    "comment": "rules - Statement 83",
    "query": "insert into rtest_system values ('orion', 'Linux Jan Wieck')",
    "expected": "INSERT INTO rtest_system VALUES ('orion', 'Linux Jan Wieck')"
  },
  {
    "comment": "rules - Statement 84",
    "query": "insert into rtest_system values ('notjw', 'WinNT Jan Wieck (notebook)')",
    "expected": "INSERT INTO rtest_system VALUES ('notjw', 'WinNT Jan Wieck (notebook)')"
  },
  {
    "comment": "rules - Statement 85",
    "query": "insert into rtest_system values ('neptun', 'Fileserver')",
    "expected": "INSERT INTO rtest_system VALUES ('neptun', 'Fileserver')"
  },
  {
    "comment": "rules - Statement 86",
    "query": "insert into rtest_interface values ('orion', 'eth0')",
    "expected": "INSERT INTO rtest_interface VALUES ('orion', 'eth0')"
  },
  {
    "comment": "rules - Statement 87",
    "query": "insert into rtest_interface values ('orion', 'eth1')",
    "expected": "INSERT INTO rtest_interface VALUES ('orion', 'eth1')"
  },
  {
    "comment": "rules - Statement 88",
    "query": "insert into rtest_interface values ('notjw', 'eth0')",
    "expected": "INSERT INTO rtest_interface VALUES ('notjw', 'eth0')"
  },
  {
    "comment": "rules - Statement 89",
    "query": "insert into rtest_interface values ('neptun', 'eth0')",
    "expected": "INSERT INTO rtest_interface VALUES ('neptun', 'eth0')"
  },
  {
    "comment": "rules - Statement 90",
    "query": "insert into rtest_person values ('jw', 'Jan Wieck')",
    "expected": "INSERT INTO rtest_person VALUES ('jw', 'Jan Wieck')"
  },
  {
    "comment": "rules - Statement 91",
    "query": "insert into rtest_person values ('bm', 'Bruce Momjian')",
    "expected": "INSERT INTO rtest_person VALUES ('bm', 'Bruce Momjian')"
  },
  {
    "comment": "rules - Statement 92",
    "query": "insert into rtest_admin values ('jw', 'orion')",
    "expected": "INSERT INTO rtest_admin VALUES ('jw', 'orion')"
  },
  {
    "comment": "rules - Statement 93",
    "query": "insert into rtest_admin values ('jw', 'notjw')",
    "expected": "INSERT INTO rtest_admin VALUES ('jw', 'notjw')"
  },
  {
    "comment": "rules - Statement 94",
    "query": "insert into rtest_admin values ('bm', 'neptun')",
    "expected": "INSERT INTO rtest_admin VALUES ('bm', 'neptun')"
  },
  {
    "comment": "rules - Statement 95",
    "query": "update rtest_system set sysname = 'pluto' where sysname = 'neptun'",
    "expected": "UPDATE rtest_system SET sysname = 'pluto' WHERE sysname = 'neptun'"
  },
  {
    "comment": "rules - Statement 96",
    "query": "select * from rtest_interface",
    "expected": "SELECT * FROM rtest_interface"
  },
  {
    "comment": "rules - Statement 97",
    "query": "select * from rtest_admin",
    "expected": "SELECT * FROM rtest_admin"
  },
  {
    "comment": "rules - Statement 98",
    "query": "update rtest_person set pname = 'jwieck' where pdesc = 'Jan Wieck'",
    "expected": "UPDATE rtest_person SET pname = 'jwieck' WHERE pdesc = 'Jan Wieck'"
  },
  {
    "comment": "rules - Statement 99",
    "query": "select * from rtest_admin order by pname, sysname",
    "expected": "SELECT * FROM rtest_admin ORDER BY pname, sysname"
  },
  {
    "comment": "rules - Statement 100",
    "query": "delete from rtest_system where sysname = 'orion'",
    "expected": "DELETE FROM rtest_system WHERE sysname = 'orion'"
  },
  {
    "comment": "rules - Statement 101",
    "query": "insert into rtest_emp values ('wiecc', '5000.00')",
    "expected": "INSERT INTO rtest_emp VALUES ('wiecc', '5000.00')"
  },
  {
    "comment": "rules - Statement 102",
    "query": "insert into rtest_emp values ('gates', '80000.00')",
    "expected": "INSERT INTO rtest_emp VALUES ('gates', '80000.00')"
  },
  {
    "comment": "rules - Statement 103",
    "query": "update rtest_emp set ename = 'wiecx' where ename = 'wiecc'",
    "expected": "UPDATE rtest_emp SET ename = 'wiecx' WHERE ename = 'wiecc'"
  },
  {
    "comment": "rules - Statement 104",
    "query": "update rtest_emp set ename = 'wieck', salary = '6000.00' where ename = 'wiecx'",
    "expected": "UPDATE rtest_emp SET ename = 'wieck', salary = '6000.00' WHERE ename = 'wiecx'"
  },
  {
    "comment": "rules - Statement 105",
    "query": "update rtest_emp set salary = '7000.00' where ename = 'wieck'",
    "expected": "UPDATE rtest_emp SET salary = '7000.00' WHERE ename = 'wieck'"
  },
  {
    "comment": "rules - Statement 106",
    "query": "delete from rtest_emp where ename = 'gates'",
    "expected": "DELETE FROM rtest_emp WHERE ename = 'gates'"
  },
  {
    "comment": "rules - Statement 107",
    "query": "select ename, who = current_user as \"matches user\", action, newsal, oldsal from rtest_emplog order by ename, action, newsal",
    "expected": "SELECT ename, who = CURRENT_USER AS \"matches user\", action, newsal, oldsal FROM rtest_emplog ORDER BY ename, action, newsal"
  },
  {
    "comment": "rules - Statement 108",
    "query": "insert into rtest_empmass values ('meyer', '4000.00')",
    "expected": "INSERT INTO rtest_empmass VALUES ('meyer', '4000.00')"
  },
  {
    "comment": "rules - Statement 109",
    "query": "insert into rtest_empmass values ('maier', '5000.00')",
    "expected": "INSERT INTO rtest_empmass VALUES ('maier', '5000.00')"
  },
  {
    "comment": "rules - Statement 110",
    "query": "insert into rtest_empmass values ('mayr', '6000.00')",
    "expected": "INSERT INTO rtest_empmass VALUES ('mayr', '6000.00')"
  },
  {
    "comment": "rules - Statement 111",
    "query": "insert into rtest_emp select * from rtest_empmass",
    "expected": "INSERT INTO rtest_emp SELECT * FROM rtest_empmass"
  },
  {
    "comment": "rules - Statement 112",
    "query": "update rtest_empmass set salary = salary + '1000.00'",
    "expected": "UPDATE rtest_empmass SET salary = salary + '1000.00'"
  },
  {
    "comment": "rules - Statement 113",
    "query": "update rtest_emp set salary = rtest_empmass.salary from rtest_empmass where rtest_emp.ename = rtest_empmass.ename",
    "expected": "UPDATE rtest_emp SET salary = rtest_empmass.salary FROM rtest_empmass WHERE rtest_emp.ename = rtest_empmass.ename"
  },
  {
    "comment": "rules - Statement 114",
    "query": "delete from rtest_emp using rtest_empmass where rtest_emp.ename = rtest_empmass.ename",
    "expected": "DELETE FROM rtest_emp USING rtest_empmass WHERE rtest_emp.ename = rtest_empmass.ename"
  },
  {
    "comment": "rules - Statement 115",
    "query": "insert into rtest_t4 values (1, 'Record should go to rtest_t4')",
    "expected": "INSERT INTO rtest_t4 VALUES (1, 'Record should go to rtest_t4')"
  },
  {
    "comment": "rules - Statement 116",
    "query": "insert into rtest_t4 values (2, 'Record should go to rtest_t4')",
    "expected": "INSERT INTO rtest_t4 VALUES (2, 'Record should go to rtest_t4')"
  },
  {
    "comment": "rules - Statement 117",
    "query": "insert into rtest_t4 values (10, 'Record should go to rtest_t5')",
    "expected": "INSERT INTO rtest_t4 VALUES (10, 'Record should go to rtest_t5')"
  },
  {
    "comment": "rules - Statement 118",
    "query": "insert into rtest_t4 values (15, 'Record should go to rtest_t5')",
    "expected": "INSERT INTO rtest_t4 VALUES (15, 'Record should go to rtest_t5')"
  },
  {
    "comment": "rules - Statement 119",
    "query": "insert into rtest_t4 values (19, 'Record should go to rtest_t5 and t7')",
    "expected": "INSERT INTO rtest_t4 VALUES (19, 'Record should go to rtest_t5 and t7')"
  },
  {
    "comment": "rules - Statement 120",
    "query": "insert into rtest_t4 values (20, 'Record should go to rtest_t4 and t6')",
    "expected": "INSERT INTO rtest_t4 VALUES (20, 'Record should go to rtest_t4 and t6')"
  },
  {
    "comment": "rules - Statement 121",
    "query": "insert into rtest_t4 values (26, 'Record should go to rtest_t4 and t8')",
    "expected": "INSERT INTO rtest_t4 VALUES (26, 'Record should go to rtest_t4 and t8')"
  },
  {
    "comment": "rules - Statement 122",
    "query": "insert into rtest_t4 values (28, 'Record should go to rtest_t4 and t8')",
    "expected": "INSERT INTO rtest_t4 VALUES (28, 'Record should go to rtest_t4 and t8')"
  },
  {
    "comment": "rules - Statement 123",
    "query": "insert into rtest_t4 values (30, 'Record should go to rtest_t4')",
    "expected": "INSERT INTO rtest_t4 VALUES (30, 'Record should go to rtest_t4')"
  },
  {
    "comment": "rules - Statement 124",
    "query": "insert into rtest_t4 values (40, 'Record should go to rtest_t4')",
    "expected": "INSERT INTO rtest_t4 VALUES (40, 'Record should go to rtest_t4')"
  },
  {
    "comment": "rules - Statement 125",
    "query": "select * from rtest_t4",
    "expected": "SELECT * FROM rtest_t4"
  },
  {
    "comment": "rules - Statement 126",
    "query": "select * from rtest_t5",
    "expected": "SELECT * FROM rtest_t5"
  },
  {
    "comment": "rules - Statement 127",
    "query": "select * from rtest_t6",
    "expected": "SELECT * FROM rtest_t6"
  },
  {
    "comment": "rules - Statement 128",
    "query": "select * from rtest_t7",
    "expected": "SELECT * FROM rtest_t7"
  },
  {
    "comment": "rules - Statement 129",
    "query": "select * from rtest_t8",
    "expected": "SELECT * FROM rtest_t8"
  },
  {
    "comment": "rules - Statement 130",
    "query": "delete from rtest_t4",
    "expected": "DELETE FROM rtest_t4"
  },
  {
    "comment": "rules - Statement 131",
    "query": "delete from rtest_t5",
    "expected": "DELETE FROM rtest_t5"
  },
  {
    "comment": "rules - Statement 132",
    "query": "delete from rtest_t6",
    "expected": "DELETE FROM rtest_t6"
  },
  {
    "comment": "rules - Statement 133",
    "query": "delete from rtest_t7",
    "expected": "DELETE FROM rtest_t7"
  },
  {
    "comment": "rules - Statement 134",
    "query": "delete from rtest_t8",
    "expected": "DELETE FROM rtest_t8"
  },
  {
    "comment": "rules - Statement 135",
    "query": "insert into rtest_t9 values (1, 'Record should go to rtest_t4')",
    "expected": "INSERT INTO rtest_t9 VALUES (1, 'Record should go to rtest_t4')"
  },
  {
    "comment": "rules - Statement 136",
    "query": "insert into rtest_t9 values (2, 'Record should go to rtest_t4')",
    "expected": "INSERT INTO rtest_t9 VALUES (2, 'Record should go to rtest_t4')"
  },
  {
    "comment": "rules - Statement 137",
    "query": "insert into rtest_t9 values (10, 'Record should go to rtest_t5')",
    "expected": "INSERT INTO rtest_t9 VALUES (10, 'Record should go to rtest_t5')"
  },
  {
    "comment": "rules - Statement 138",
    "query": "insert into rtest_t9 values (15, 'Record should go to rtest_t5')",
    "expected": "INSERT INTO rtest_t9 VALUES (15, 'Record should go to rtest_t5')"
  },
  {
    "comment": "rules - Statement 139",
    "query": "insert into rtest_t9 values (19, 'Record should go to rtest_t5 and t7')",
    "expected": "INSERT INTO rtest_t9 VALUES (19, 'Record should go to rtest_t5 and t7')"
  },
  {
    "comment": "rules - Statement 140",
    "query": "insert into rtest_t9 values (20, 'Record should go to rtest_t4 and t6')",
    "expected": "INSERT INTO rtest_t9 VALUES (20, 'Record should go to rtest_t4 and t6')"
  },
  {
    "comment": "rules - Statement 141",
    "query": "insert into rtest_t9 values (26, 'Record should go to rtest_t4 and t8')",
    "expected": "INSERT INTO rtest_t9 VALUES (26, 'Record should go to rtest_t4 and t8')"
  },
  {
    "comment": "rules - Statement 142",
    "query": "insert into rtest_t9 values (28, 'Record should go to rtest_t4 and t8')",
    "expected": "INSERT INTO rtest_t9 VALUES (28, 'Record should go to rtest_t4 and t8')"
  },
  {
    "comment": "rules - Statement 143",
    "query": "insert into rtest_t9 values (30, 'Record should go to rtest_t4')",
    "expected": "INSERT INTO rtest_t9 VALUES (30, 'Record should go to rtest_t4')"
  },
  {
    "comment": "rules - Statement 144",
    "query": "insert into rtest_t9 values (40, 'Record should go to rtest_t4')",
    "expected": "INSERT INTO rtest_t9 VALUES (40, 'Record should go to rtest_t4')"
  },
  {
    "comment": "rules - Statement 145",
    "query": "insert into rtest_t4 select * from rtest_t9 where a \u003c 20",
    "expected": "INSERT INTO rtest_t4 (SELECT * FROM rtest_t9 WHERE a \u003c 20)"
  },
  {
    "comment": "rules - Statement 146",
    "query": "insert into rtest_t4 select * from rtest_t9 where b ~ 'and t8'",
    "expected": "INSERT INTO rtest_t4 (SELECT * FROM rtest_t9 WHERE b ~ 'and t8')"
  },
  {
    "comment": "rules - Statement 147",
    "query": "insert into rtest_t4 select a + 1, b from rtest_t9 where a in (20, 30, 40)",
    "expected": "INSERT INTO rtest_t4 (SELECT a + 1, b FROM rtest_t9 WHERE a IN (20, 30, 40))"
  },
  {
    "comment": "rules - Statement 148",
    "query": "insert into rtest_order1 values (1)",
    "expected": "INSERT INTO rtest_order1 VALUES (1)"
  },
  {
    "comment": "rules - Statement 149",
    "query": "select * from rtest_order2",
    "expected": "SELECT * FROM rtest_order2"
  },
  {
    "comment": "rules - Statement 150",
    "query": "insert into rtest_nothn1 values (1, 'want this')",
    "expected": "INSERT INTO rtest_nothn1 VALUES (1, 'want this')"
  },
  {
    "comment": "rules - Statement 151",
    "query": "insert into rtest_nothn1 values (2, 'want this')",
    "expected": "INSERT INTO rtest_nothn1 VALUES (2, 'want this')"
  },
  {
    "comment": "rules - Statement 152",
    "query": "insert into rtest_nothn1 values (10, 'don''t want this')",
    "expected": "INSERT INTO rtest_nothn1 VALUES (10, 'don''t want this')"
  },
  {
    "comment": "rules - Statement 153",
    "query": "insert into rtest_nothn1 values (19, 'don''t want this')",
    "expected": "INSERT INTO rtest_nothn1 VALUES (19, 'don''t want this')"
  },
  {
    "comment": "rules - Statement 154",
    "query": "insert into rtest_nothn1 values (20, 'want this')",
    "expected": "INSERT INTO rtest_nothn1 VALUES (20, 'want this')"
  },
  {
    "comment": "rules - Statement 155",
    "query": "insert into rtest_nothn1 values (29, 'want this')",
    "expected": "INSERT INTO rtest_nothn1 VALUES (29, 'want this')"
  },
  {
    "comment": "rules - Statement 156",
    "query": "insert into rtest_nothn1 values (30, 'don''t want this')",
    "expected": "INSERT INTO rtest_nothn1 VALUES (30, 'don''t want this')"
  },
  {
    "comment": "rules - Statement 157",
    "query": "insert into rtest_nothn1 values (39, 'don''t want this')",
    "expected": "INSERT INTO rtest_nothn1 VALUES (39, 'don''t want this')"
  },
  {
    "comment": "rules - Statement 158",
    "query": "insert into rtest_nothn1 values (40, 'want this')",
    "expected": "INSERT INTO rtest_nothn1 VALUES (40, 'want this')"
  },
  {
    "comment": "rules - Statement 159",
    "query": "insert into rtest_nothn1 values (50, 'want this')",
    "expected": "INSERT INTO rtest_nothn1 VALUES (50, 'want this')"
  },
  {
    "comment": "rules - Statement 160",
    "query": "insert into rtest_nothn1 values (60, 'want this')",
    "expected": "INSERT INTO rtest_nothn1 VALUES (60, 'want this')"
  },
  {
    "comment": "rules - Statement 161",
    "query": "select * from rtest_nothn1",
    "expected": "SELECT * FROM rtest_nothn1"
  },
  {
    "comment": "rules - Statement 162",
    "query": "insert into rtest_nothn2 values (10, 'too small')",
    "expected": "INSERT INTO rtest_nothn2 VALUES (10, 'too small')"
  },
  {
    "comment": "rules - Statement 163",
    "query": "insert into rtest_nothn2 values (50, 'too small')",
    "expected": "INSERT INTO rtest_nothn2 VALUES (50, 'too small')"
  },
  {
    "comment": "rules - Statement 164",
    "query": "insert into rtest_nothn2 values (100, 'OK')",
    "expected": "INSERT INTO rtest_nothn2 VALUES (100, 'OK')"
  },
  {
    "comment": "rules - Statement 165",
    "query": "insert into rtest_nothn2 values (200, 'OK')",
    "expected": "INSERT INTO rtest_nothn2 VALUES (200, 'OK')"
  },
  {
    "comment": "rules - Statement 166",
    "query": "select * from rtest_nothn2",
    "expected": "SELECT * FROM rtest_nothn2"
  },
  {
    "comment": "rules - Statement 167",
    "query": "select * from rtest_nothn3",
    "expected": "SELECT * FROM rtest_nothn3"
  },
  {
    "comment": "rules - Statement 168",
    "query": "delete from rtest_nothn1",
    "expected": "DELETE FROM rtest_nothn1"
  },
  {
    "comment": "rules - Statement 169",
    "query": "delete from rtest_nothn2",
    "expected": "DELETE FROM rtest_nothn2"
  },
  {
    "comment": "rules - Statement 170",
    "query": "delete from rtest_nothn3",
    "expected": "DELETE FROM rtest_nothn3"
  },
  {
    "comment": "rules - Statement 171",
    "query": "insert into rtest_nothn4 values (1, 'want this')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (1, 'want this')"
  },
  {
    "comment": "rules - Statement 172",
    "query": "insert into rtest_nothn4 values (2, 'want this')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (2, 'want this')"
  },
  {
    "comment": "rules - Statement 173",
    "query": "insert into rtest_nothn4 values (10, 'don''t want this')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (10, 'don''t want this')"
  },
  {
    "comment": "rules - Statement 174",
    "query": "insert into rtest_nothn4 values (19, 'don''t want this')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (19, 'don''t want this')"
  },
  {
    "comment": "rules - Statement 175",
    "query": "insert into rtest_nothn4 values (20, 'want this')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (20, 'want this')"
  },
  {
    "comment": "rules - Statement 176",
    "query": "insert into rtest_nothn4 values (29, 'want this')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (29, 'want this')"
  },
  {
    "comment": "rules - Statement 177",
    "query": "insert into rtest_nothn4 values (30, 'don''t want this')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (30, 'don''t want this')"
  },
  {
    "comment": "rules - Statement 178",
    "query": "insert into rtest_nothn4 values (39, 'don''t want this')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (39, 'don''t want this')"
  },
  {
    "comment": "rules - Statement 179",
    "query": "insert into rtest_nothn4 values (40, 'want this')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (40, 'want this')"
  },
  {
    "comment": "rules - Statement 180",
    "query": "insert into rtest_nothn4 values (50, 'want this')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (50, 'want this')"
  },
  {
    "comment": "rules - Statement 181",
    "query": "insert into rtest_nothn4 values (60, 'want this')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (60, 'want this')"
  },
  {
    "comment": "rules - Statement 182",
    "query": "insert into rtest_nothn1 select * from rtest_nothn4",
    "expected": "INSERT INTO rtest_nothn1 SELECT * FROM rtest_nothn4"
  },
  {
    "comment": "rules - Statement 183",
    "query": "delete from rtest_nothn4",
    "expected": "DELETE FROM rtest_nothn4"
  },
  {
    "comment": "rules - Statement 184",
    "query": "insert into rtest_nothn4 values (10, 'too small')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (10, 'too small')"
  },
  {
    "comment": "rules - Statement 185",
    "query": "insert into rtest_nothn4 values (50, 'too small')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (50, 'too small')"
  },
  {
    "comment": "rules - Statement 186",
    "query": "insert into rtest_nothn4 values (100, 'OK')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (100, 'OK')"
  },
  {
    "comment": "rules - Statement 187",
    "query": "insert into rtest_nothn4 values (200, 'OK')",
    "expected": "INSERT INTO rtest_nothn4 VALUES (200, 'OK')"
  },
  {
    "comment": "rules - Statement 188",
    "query": "insert into rtest_nothn2 select * from rtest_nothn4",
    "expected": "INSERT INTO rtest_nothn2 SELECT * FROM rtest_nothn4"
  },
  {
    "comment": "rules - Statement 189",
    "query": "create table rtest_view1 (a int4, b text, v bool)",
    "expected": "CREATE TABLE rtest_view1 (a INT, b TEXT, v BOOLEAN)"
  },
  {
    "comment": "rules - Statement 190",
    "query": "create table rtest_view2 (a int4)",
    "expected": "CREATE TABLE rtest_view2 (a INT)"
  },
  {
    "comment": "rules - Statement 191",
    "query": "create table rtest_view3 (a int4, b text)",
    "expected": "CREATE TABLE rtest_view3 (a INT, b TEXT)"
  },
  {
    "comment": "rules - Statement 192",
    "query": "create table rtest_view4 (a int4, b text, c int4)",
    "expected": "CREATE TABLE rtest_view4 (a INT, b TEXT, c INT)"
  },
  {
    "comment": "rules - Statement 193",
    "query": "create view rtest_vview1 as select a, b from rtest_view1 X where 0 \u003c (select count(*) from rtest_view2 Y where Y.a = X.a)",
    "expected": "CREATE VIEW rtest_vview1 AS SELECT a, b FROM rtest_view1 AS x WHERE 0 \u003c (SELECT COUNT(*) FROM rtest_view2 AS y WHERE y.a = x.a)"
  },
  {
    "comment": "rules - Statement 194",
    "query": "create view rtest_vview2 as select a, b from rtest_view1 where v",
    "expected": "CREATE VIEW rtest_vview2 AS SELECT a, b FROM rtest_view1 WHERE v"
  },
  {
    "comment": "rules - Statement 195",
    "query": "create view rtest_vview3 as select a, b from rtest_vview2 X where 0 \u003c (select count(*) from rtest_view2 Y where Y.a = X.a)",
    "expected": "CREATE VIEW rtest_vview3 AS SELECT a, b FROM rtest_vview2 AS x WHERE 0 \u003c (SELECT COUNT(*) FROM rtest_view2 AS y WHERE y.a = x.a)"
  },
  {
    "comment": "rules - Statement 196",
    "query": "create view rtest_vview4 as select X.a, X.b, count(Y.a) as refcount from rtest_view1 X, rtest_view2 Y where X.a = Y.a group by X.a, X.b",
    "expected": "CREATE VIEW rtest_vview4 AS SELECT x.a, x.b, COUNT(y.a) AS refcount FROM rtest_view1 AS x, rtest_view2 AS y WHERE x.a = y.a GROUP BY x.a, x.b"
  },
  {
    "comment": "rules - Statement 197",
    "query": "create function rtest_viewfunc1(int4) returns int4 as 'select count(*)::int4 from rtest_view2 where a = $1' language sql",
    "expected": "CREATE FUNCTION rtest_viewfunc1 (INT) RETURNS INT AS $$select count(*)::int4 from rtest_view2 where a = $1$$ LANGUAGE sql"
  },
  {
    "comment": "rules - Statement 198",
    "query": "create view rtest_vview5 as select a, b, rtest_viewfunc1(a) as refcount from rtest_view1",
    "expected": "CREATE VIEW rtest_vview5 AS SELECT a, b, rtest_viewfunc1(a) AS refcount FROM rtest_view1"
  },
  {
    "comment": "rules - Statement 199",
    "query": "insert into rtest_view1 values (1, 'item 1', 't')",
    "expected": "INSERT INTO rtest_view1 VALUES (1, 'item 1', 't')"
  },
  {
    "comment": "rules - Statement 200",
    "query": "insert into rtest_view1 values (2, 'item 2', 't')",
    "expected": "INSERT INTO rtest_view1 VALUES (2, 'item 2', 't')"
  },
  {
    "comment": "rules - Statement 201",
    "query": "insert into rtest_view1 values (3, 'item 3', 't')",
    "expected": "INSERT INTO rtest_view1 VALUES (3, 'item 3', 't')"
  },
  {
    "comment": "rules - Statement 202",
    "query": "insert into rtest_view1 values (4, 'item 4', 'f')",
    "expected": "INSERT INTO rtest_view1 VALUES (4, 'item 4', 'f')"
  },
  {
    "comment": "rules - Statement 203",
    "query": "insert into rtest_view1 values (5, 'item 5', 't')",
    "expected": "INSERT INTO rtest_view1 VALUES (5, 'item 5', 't')"
  },
  {
    "comment": "rules - Statement 204",
    "query": "insert into rtest_view1 values (6, 'item 6', 'f')",
    "expected": "INSERT INTO rtest_view1 VALUES (6, 'item 6', 'f')"
  },
  {
    "comment": "rules - Statement 205",
    "query": "insert into rtest_view1 values (7, 'item 7', 't')",
    "expected": "INSERT INTO rtest_view1 VALUES (7, 'item 7', 't')"
  },
  {
    "comment": "rules - Statement 206",
    "query": "insert into rtest_view1 values (8, 'item 8', 't')",
    "expected": "INSERT INTO rtest_view1 VALUES (8, 'item 8', 't')"
  },
  {
    "comment": "rules - Statement 207",
    "query": "insert into rtest_view2 values (2)",
    "expected": "INSERT INTO rtest_view2 VALUES (2)"
  },
  {
    "comment": "rules - Statement 208",
    "query": "insert into rtest_view2 values (4)",
    "expected": "INSERT INTO rtest_view2 VALUES (4)"
  },
  {
    "comment": "rules - Statement 209",
    "query": "insert into rtest_view2 values (5)",
    "expected": "INSERT INTO rtest_view2 VALUES (5)"
  },
  {
    "comment": "rules - Statement 210",
    "query": "insert into rtest_view2 values (7)",
    "expected": "INSERT INTO rtest_view2 VALUES (7)"
  },
  {
    "comment": "rules - Statement 211",
    "query": "select * from rtest_vview1",
    "expected": "SELECT * FROM rtest_vview1"
  },
  {
    "comment": "rules - Statement 212",
    "query": "select * from rtest_vview2",
    "expected": "SELECT * FROM rtest_vview2"
  },
  {
    "comment": "rules - Statement 213",
    "query": "select * from rtest_vview3",
    "expected": "SELECT * FROM rtest_vview3"
  },
  {
    "comment": "rules - Statement 214",
    "query": "select * from rtest_vview4 order by a, b",
    "expected": "SELECT * FROM rtest_vview4 ORDER BY a, b"
  },
  {
    "comment": "rules - Statement 215",
    "query": "select * from rtest_vview5",
    "expected": "SELECT * FROM rtest_vview5"
  },
  {
    "comment": "rules - Statement 216",
    "query": "insert into rtest_view3 select * from rtest_vview1 where a \u003c 7",
    "expected": "INSERT INTO rtest_view3 (SELECT * FROM rtest_vview1 WHERE a \u003c 7)"
  },
  {
    "comment": "rules - Statement 217",
    "query": "select * from rtest_view3",
    "expected": "SELECT * FROM rtest_view3"
  },
  {
    "comment": "rules - Statement 218",
    "query": "delete from rtest_view3",
    "expected": "DELETE FROM rtest_view3"
  },
  {
    "comment": "rules - Statement 219",
    "query": "insert into rtest_view3 select * from rtest_vview2 where a != 5 and b !~ '2'",
    "expected": "INSERT INTO rtest_view3 (SELECT * FROM rtest_vview2 WHERE a \u003c\u003e 5 AND b !~ '2')"
  },
  {
    "comment": "rules - Statement 220",
    "query": "insert into rtest_view3 select * from rtest_vview3",
    "expected": "INSERT INTO rtest_view3 SELECT * FROM rtest_vview3"
  },
  {
    "comment": "rules - Statement 221",
    "query": "insert into rtest_view4 select * from rtest_vview4 where 3 \u003e refcount",
    "expected": "INSERT INTO rtest_view4 (SELECT * FROM rtest_vview4 WHERE 3 \u003e refcount)"
  },
  {
    "comment": "rules - Statement 222",
    "query": "select * from rtest_view4 order by a, b",
    "expected": "SELECT * FROM rtest_view4 ORDER BY a, b"
  },
  {
    "comment": "rules - Statement 223",
    "query": "delete from rtest_view4",
    "expected": "DELETE FROM rtest_view4"
  },
  {
    "comment": "rules - Statement 224",
    "query": "insert into rtest_view4 select * from rtest_vview5 where a \u003e 2 and refcount = 0",
    "expected": "INSERT INTO rtest_view4 (SELECT * FROM rtest_vview5 WHERE a \u003e 2 AND refcount = 0)"
  },
  {
    "comment": "rules - Statement 225",
    "query": "select * from rtest_view4",
    "expected": "SELECT * FROM rtest_view4"
  },
  {
    "comment": "rules - Statement 226",
    "query": "create table rtest_comp ( part\ttext, unit\tchar(4), size\tfloat )",
    "expected": "CREATE TABLE rtest_comp (part TEXT, unit CHAR(4), size FLOAT8)"
  },
  {
    "comment": "rules - Statement 227",
    "query": "create table rtest_unitfact ( unit\tchar(4), factor\tfloat )",
    "expected": "CREATE TABLE rtest_unitfact (unit CHAR(4), factor FLOAT8)"
  },
  {
    "comment": "rules - Statement 228",
    "query": "create view rtest_vcomp as select X.part, (X.size * Y.factor) as size_in_cm from rtest_comp X, rtest_unitfact Y where X.unit = Y.unit",
    "expected": "CREATE VIEW rtest_vcomp AS SELECT x.part, (x.size * y.factor) AS size_in_cm FROM rtest_comp AS x, rtest_unitfact AS y WHERE x.unit = y.unit"
  },
  {
    "comment": "rules - Statement 229",
    "query": "insert into rtest_unitfact values ('m', 100.0)",
    "expected": "INSERT INTO rtest_unitfact VALUES ('m', 100.0)"
  },
  {
    "comment": "rules - Statement 230",
    "query": "insert into rtest_unitfact values ('cm', 1.0)",
    "expected": "INSERT INTO rtest_unitfact VALUES ('cm', 1.0)"
  },
  {
    "comment": "rules - Statement 231",
    "query": "insert into rtest_unitfact values ('inch', 2.54)",
    "expected": "INSERT INTO rtest_unitfact VALUES ('inch', 2.54)"
  },
  {
    "comment": "rules - Statement 232",
    "query": "insert into rtest_comp values ('p1', 'm', 5.0)",
    "expected": "INSERT INTO rtest_comp VALUES ('p1', 'm', 5.0)"
  },
  {
    "comment": "rules - Statement 233",
    "query": "insert into rtest_comp values ('p2', 'm', 3.0)",
    "expected": "INSERT INTO rtest_comp VALUES ('p2', 'm', 3.0)"
  },
  {
    "comment": "rules - Statement 234",
    "query": "insert into rtest_comp values ('p3', 'cm', 5.0)",
    "expected": "INSERT INTO rtest_comp VALUES ('p3', 'cm', 5.0)"
  },
  {
    "comment": "rules - Statement 235",
    "query": "insert into rtest_comp values ('p4', 'cm', 15.0)",
    "expected": "INSERT INTO rtest_comp VALUES ('p4', 'cm', 15.0)"
  },
  {
    "comment": "rules - Statement 236",
    "query": "insert into rtest_comp values ('p5', 'inch', 7.0)",
    "expected": "INSERT INTO rtest_comp VALUES ('p5', 'inch', 7.0)"
  },
  {
    "comment": "rules - Statement 237",
    "query": "insert into rtest_comp values ('p6', 'inch', 4.4)",
    "expected": "INSERT INTO rtest_comp VALUES ('p6', 'inch', 4.4)"
  },
  {
    "comment": "rules - Statement 238",
    "query": "select * from rtest_vcomp order by part",
    "expected": "SELECT * FROM rtest_vcomp ORDER BY part"
  },
  {
    "comment": "rules - Statement 239",
    "query": "select * from rtest_vcomp where size_in_cm \u003e 10.0 order by size_in_cm using \u003e",
    "expected": "SELECT * FROM rtest_vcomp WHERE size_in_cm \u003e 10.0 ORDER BY size_in_cm USING \u003e"
  },
  {
    "comment": "rules - Statement 240",
    "query": "CREATE TABLE shoe_data ( shoename   char(10), sh_avail   integer, slcolor    char(10), slminlen   float, slmaxlen   float, slunit     char(8) )",
    "expected": "CREATE TABLE shoe_data (shoename CHAR(10), sh_avail INT, slcolor CHAR(10), slminlen FLOAT8, slmaxlen FLOAT8, slunit CHAR(8))"
  },
  {
    "comment": "rules - Statement 241",
    "query": "CREATE TABLE shoelace_data ( sl_name    char(10), sl_avail   integer, sl_color   char(10), sl_len     float, sl_unit    char(8) )",
    "expected": "CREATE TABLE shoelace_data (sl_name CHAR(10), sl_avail INT, sl_color CHAR(10), sl_len FLOAT8, sl_unit CHAR(8))"
  },
  {
    "comment": "rules - Statement 242",
    "query": "CREATE TABLE unit ( un_name    char(8), un_fact    float )",
    "expected": "CREATE TABLE unit (un_name CHAR(8), un_fact FLOAT8)"
  },
  {
    "comment": "rules - Statement 243",
    "query": "CREATE VIEW shoe AS SELECT sh.shoename, sh.sh_avail, sh.slcolor, sh.slminlen, sh.slminlen * un.un_fact AS slminlen_cm, sh.slmaxlen, sh.slmaxlen * un.un_fact AS slmaxlen_cm, sh.slunit FROM shoe_data sh, unit un WHERE sh.slunit = un.un_name",
    "expected": "CREATE VIEW shoe AS SELECT sh.shoename, sh.sh_avail, sh.slcolor, sh.slminlen, sh.slminlen * un.un_fact AS slminlen_cm, sh.slmaxlen, sh.slmaxlen * un.un_fact AS slmaxlen_cm, sh.slunit FROM shoe_data AS sh, unit AS un WHERE sh.slunit = un.un_name"
  },
  {
    "comment": "rules - Statement 244",
    "query": "CREATE VIEW shoelace AS SELECT s.sl_name, s.sl_avail, s.sl_color, s.sl_len, s.sl_unit, s.sl_len * u.un_fact AS sl_len_cm FROM shoelace_data s, unit u WHERE s.sl_unit = u.un_name",
    "expected": "CREATE VIEW shoelace AS SELECT s.sl_name, s.sl_avail, s.sl_color, s.sl_len, s.sl_unit, s.sl_len * u.un_fact AS sl_len_cm FROM shoelace_data AS s, unit AS u WHERE s.sl_unit = u.un_name"
  },
  {
    "comment": "rules - Statement 245",
    "query": "CREATE VIEW shoe_ready AS SELECT rsh.shoename, rsh.sh_avail, rsl.sl_name, rsl.sl_avail, int4smaller(rsh.sh_avail, rsl.sl_avail) AS total_avail FROM shoe rsh, shoelace rsl WHERE rsl.sl_color = rsh.slcolor AND rsl.sl_len_cm \u003e= rsh.slminlen_cm AND rsl.sl_len_cm \u003c= rsh.slmaxlen_cm",
    "expected": "CREATE VIEW shoe_ready AS SELECT rsh.shoename, rsh.sh_avail, rsl.sl_name, rsl.sl_avail, int4smaller(rsh.sh_avail, rsl.sl_avail) AS total_avail FROM shoe AS rsh, shoelace AS rsl WHERE rsl.sl_color = rsh.slcolor AND rsl.sl_len_cm \u003e= rsh.slminlen_cm AND rsl.sl_len_cm \u003c= rsh.slmaxlen_cm"
  },
  {
    "comment": "rules - Statement 246",
    "query": "INSERT INTO unit VALUES ('cm', 1.0)"
  },
  {
    "comment": "rules - Statement 247",
    "query": "INSERT INTO unit VALUES ('m', 100.0)"
  },
  {
    "comment": "rules - Statement 248",
    "query": "INSERT INTO unit VALUES ('inch', 2.54)"
  },
  {
    "comment": "rules - Statement 249",
    "query": "INSERT INTO shoe_data VALUES ('sh1', 2, 'black', 70.0, 90.0, 'cm')"
  },
  {
    "comment": "rules - Statement 250",
    "query": "INSERT INTO shoe_data VALUES ('sh2', 0, 'black', 30.0, 40.0, 'inch')"
  },
  {
    "comment": "rules - Statement 251",
    "query": "INSERT INTO shoe_data VALUES ('sh3', 4, 'brown', 50.0, 65.0, 'cm')"
  },
  {
    "comment": "rules - Statement 252",
    "query": "INSERT INTO shoe_data VALUES ('sh4', 3, 'brown', 40.0, 50.0, 'inch')"
  },
  {
    "comment": "rules - Statement 253",
    "query": "INSERT INTO shoelace_data VALUES ('sl1', 5, 'black', 80.0, 'cm')"
  },
  {
    "comment": "rules - Statement 254",
    "query": "INSERT INTO shoelace_data VALUES ('sl2', 6, 'black', 100.0, 'cm')"
  },
  {
    "comment": "rules - Statement 255",
    "query": "INSERT INTO shoelace_data VALUES ('sl3', 0, 'black', 35.0 , 'inch')",
    "expected": "INSERT INTO shoelace_data VALUES ('sl3', 0, 'black', 35.0, 'inch')"
  },
  {
    "comment": "rules - Statement 256",
    "query": "INSERT INTO shoelace_data VALUES ('sl4', 8, 'black', 40.0 , 'inch')",
    "expected": "INSERT INTO shoelace_data VALUES ('sl4', 8, 'black', 40.0, 'inch')"
  },
  {
    "comment": "rules - Statement 257",
    "query": "INSERT INTO shoelace_data VALUES ('sl5', 4, 'brown', 1.0 , 'm')",
    "expected": "INSERT INTO shoelace_data VALUES ('sl5', 4, 'brown', 1.0, 'm')"
  },
  {
    "comment": "rules - Statement 258",
    "query": "INSERT INTO shoelace_data VALUES ('sl6', 0, 'brown', 0.9 , 'm')",
    "expected": "INSERT INTO shoelace_data VALUES ('sl6', 0, 'brown', 0.9, 'm')"
  },
  {
    "comment": "rules - Statement 259",
    "query": "INSERT INTO shoelace_data VALUES ('sl7', 7, 'brown', 60 , 'cm')",
    "expected": "INSERT INTO shoelace_data VALUES ('sl7', 7, 'brown', 60, 'cm')"
  },
  {
    "comment": "rules - Statement 260",
    "query": "INSERT INTO shoelace_data VALUES ('sl8', 1, 'brown', 40 , 'inch')",
    "expected": "INSERT INTO shoelace_data VALUES ('sl8', 1, 'brown', 40, 'inch')"
  },
  {
    "comment": "rules - Statement 261",
    "query": "SELECT * FROM shoelace ORDER BY sl_name"
  },
  {
    "comment": "rules - Statement 262",
    "query": "SELECT * FROM shoe_ready WHERE total_avail \u003e= 2 ORDER BY 1"
  },
  {
    "comment": "rules - Statement 263",
    "query": "CREATE TABLE shoelace_log ( sl_name    char(10), sl_avail   integer, log_who    name, log_when   timestamp )",
    "expected": "CREATE TABLE shoelace_log (sl_name CHAR(10), sl_avail INT, log_who name, log_when TIMESTAMP)"
  },
  {
    "comment": "rules - Statement 264",
    "query": "CREATE RULE log_shoelace AS ON UPDATE TO shoelace_data WHERE NEW.sl_avail != OLD.sl_avail DO INSERT INTO shoelace_log VALUES ( NEW.sl_name, NEW.sl_avail, 'Al Bundy', 'epoch' )",
    "expected": "CREATE RULE log_shoelace AS ON UPDATE TO shoelace_data WHERE new.sl_avail \u003c\u003e old.sl_avail DO INSERT INTO shoelace_log VALUES (new.sl_name, new.sl_avail, 'Al Bundy', 'epoch')"
  },
  {
    "comment": "rules - Statement 265",
    "query": "UPDATE shoelace_data SET sl_avail = 6 WHERE  sl_name = 'sl7'",
    "expected": "UPDATE shoelace_data SET sl_avail = 6 WHERE sl_name = 'sl7'"
  },
  {
    "comment": "rules - Statement 266",
    "query": "SELECT * FROM shoelace_log"
  },
  {
    "comment": "rules - Statement 267",
    "query": "CREATE RULE shoelace_ins AS ON INSERT TO shoelace DO INSTEAD INSERT INTO shoelace_data VALUES ( NEW.sl_name, NEW.sl_avail, NEW.sl_color, NEW.sl_len, NEW.sl_unit)",
    "expected": "CREATE RULE shoelace_ins AS ON INSERT TO shoelace DO INSTEAD INSERT INTO shoelace_data VALUES (new.sl_name, new.sl_avail, new.sl_color, new.sl_len, new.sl_unit)"
  },
  {
    "comment": "rules - Statement 268",
    "query": "CREATE RULE shoelace_upd AS ON UPDATE TO shoelace DO INSTEAD UPDATE shoelace_data SET sl_name = NEW.sl_name, sl_avail = NEW.sl_avail, sl_color = NEW.sl_color, sl_len = NEW.sl_len, sl_unit = NEW.sl_unit WHERE sl_name = OLD.sl_name",
    "expected": "CREATE RULE shoelace_upd AS ON UPDATE TO shoelace DO INSTEAD UPDATE shoelace_data SET sl_name = new.sl_name, sl_avail = new.sl_avail, sl_color = new.sl_color, sl_len = new.sl_len, sl_unit = new.sl_unit WHERE sl_name = old.sl_name"
  },
  {
    "comment": "rules - Statement 269",
    "query": "CREATE RULE shoelace_del AS ON DELETE TO shoelace DO INSTEAD DELETE FROM shoelace_data WHERE sl_name = OLD.sl_name",
    "expected": "CREATE RULE shoelace_del AS ON DELETE TO shoelace DO INSTEAD DELETE FROM shoelace_data WHERE sl_name = old.sl_name"
  },
  {
    "comment": "rules - Statement 270",
    "query": "CREATE TABLE shoelace_arrive ( arr_name    char(10), arr_quant   integer )",
    "expected": "CREATE TABLE shoelace_arrive (arr_name CHAR(10), arr_quant INT)"
  },
  {
    "comment": "rules - Statement 271",
    "query": "CREATE TABLE shoelace_ok ( ok_name     char(10), ok_quant    integer )",
    "expected": "CREATE TABLE shoelace_ok (ok_name CHAR(10), ok_quant INT)"
  },
  {
    "comment": "rules - Statement 272",
    "query": "CREATE RULE shoelace_ok_ins AS ON INSERT TO shoelace_ok DO INSTEAD UPDATE shoelace SET sl_avail = sl_avail + NEW.ok_quant WHERE sl_name = NEW.ok_name",
    "expected": "CREATE RULE shoelace_ok_ins AS ON INSERT TO shoelace_ok DO INSTEAD UPDATE shoelace SET sl_avail = sl_avail + new.ok_quant WHERE sl_name = new.ok_name"
  },
  {
    "comment": "rules - Statement 273",
    "query": "INSERT INTO shoelace_arrive VALUES ('sl3', 10)"
  },
  {
    "comment": "rules - Statement 274",
    "query": "INSERT INTO shoelace_arrive VALUES ('sl6', 20)"
  },
  {
    "comment": "rules - Statement 275",
    "query": "INSERT INTO shoelace_arrive VALUES ('sl8', 20)"
  },
  {
    "comment": "rules - Statement 276",
    "query": "insert into shoelace_ok select * from shoelace_arrive",
    "expected": "INSERT INTO shoelace_ok SELECT * FROM shoelace_arrive"
  },
  {
    "comment": "rules - Statement 277",
    "query": "SELECT * FROM shoelace_log ORDER BY sl_name"
  },
  {
    "comment": "rules - Statement 278",
    "query": "CREATE VIEW shoelace_obsolete AS SELECT * FROM shoelace WHERE NOT EXISTS (SELECT shoename FROM shoe WHERE slcolor = sl_color)"
  },
  {
    "comment": "rules - Statement 279",
    "query": "CREATE VIEW shoelace_candelete AS SELECT * FROM shoelace_obsolete WHERE sl_avail = 0"
  },
  {
    "comment": "rules - Statement 280",
    "query": "insert into shoelace values ('sl9', 0, 'pink', 35.0, 'inch', 0.0)",
    "expected": "INSERT INTO shoelace VALUES ('sl9', 0, 'pink', 35.0, 'inch', 0.0)"
  },
  {
    "comment": "rules - Statement 281",
    "query": "insert into shoelace values ('sl10', 1000, 'magenta', 40.0, 'inch', 0.0)",
    "expected": "INSERT INTO shoelace VALUES ('sl10', 1000, 'magenta', 40.0, 'inch', 0.0)"
  },
  {
    "comment": "rules - Statement 282",
    "query": "insert into shoelace values ('sl10', 1000, 'magenta', 40.0, 'inch', 0.0) on conflict do nothing",
    "expected": "INSERT INTO shoelace VALUES ('sl10', 1000, 'magenta', 40.0, 'inch', 0.0) ON CONFLICT DO NOTHING"
  },
  {
    "comment": "rules - Statement 283",
    "query": "SELECT * FROM shoelace_obsolete ORDER BY sl_len_cm"
  },
  {
    "comment": "rules - Statement 284",
    "query": "SELECT * FROM shoelace_candelete"
  },
  {
    "comment": "rules - Statement 285",
    "query": "DELETE FROM shoelace WHERE EXISTS (SELECT * FROM shoelace_candelete WHERE sl_name = shoelace.sl_name)"
  },
  {
    "comment": "rules - Statement 286",
    "query": "SELECT * FROM shoe ORDER BY shoename"
  },
  {
    "comment": "rules - Statement 287",
    "query": "SELECT count(*) FROM shoe",
    "expected": "SELECT COUNT(*) FROM shoe"
  },
  {
    "comment": "rules - Statement 288",
    "query": "create table rules_foo (f1 int)",
    "expected": "CREATE TABLE rules_foo (f1 INT)"
  },
  {
    "comment": "rules - Statement 289",
    "query": "create table rules_foo2 (f1 int)",
    "expected": "CREATE TABLE rules_foo2 (f1 INT)"
  },
  {
    "comment": "rules - Statement 290",
    "query": "create rule rules_foorule as on insert to rules_foo where f1 \u003c 100 do instead nothing",
    "expected": "CREATE RULE rules_foorule AS ON INSERT TO rules_foo WHERE f1 \u003c 100 DO INSTEAD NOTHING"
  },
  {
    "comment": "rules - Statement 291",
    "query": "insert into rules_foo values(1)",
    "expected": "INSERT INTO rules_foo VALUES (1)"
  },
  {
    "comment": "rules - Statement 292",
    "query": "insert into rules_foo values(1001)",
    "expected": "INSERT INTO rules_foo VALUES (1001)"
  },
  {
    "comment": "rules - Statement 293",
    "query": "select * from rules_foo",
    "expected": "SELECT * FROM rules_foo"
  },
  {
    "comment": "rules - Statement 294",
    "query": "drop rule rules_foorule on rules_foo",
    "expected": "DROP RULE rules_foorule ON rules_foo"
  },
  {
    "comment": "rules - Statement 295",
    "query": "create rule rules_foorule as on insert to rules_foo where f1 \u003c 100 do instead insert into rules_foo2 values (f1)",
    "expected": "CREATE RULE rules_foorule AS ON INSERT TO rules_foo WHERE f1 \u003c 100 DO INSTEAD INSERT INTO rules_foo2 VALUES (f1)"
  },
  {
    "comment": "rules - Statement 296",
    "query": "create rule rules_foorule as on insert to rules_foo where f1 \u003c 100 do instead insert into rules_foo2 values (new.f1)",
    "expected": "CREATE RULE rules_foorule AS ON INSERT TO rules_foo WHERE f1 \u003c 100 DO INSTEAD INSERT INTO rules_foo2 VALUES (new.f1)"
  },
  {
    "comment": "rules - Statement 297",
    "query": "insert into rules_foo values(2)",
    "expected": "INSERT INTO rules_foo VALUES (2)"
  },
  {
    "comment": "rules - Statement 298",
    "query": "insert into rules_foo values(100)",
    "expected": "INSERT INTO rules_foo VALUES (100)"
  },
  {
    "comment": "rules - Statement 299",
    "query": "select * from rules_foo2",
    "expected": "SELECT * FROM rules_foo2"
  },
  {
    "comment": "rules - Statement 300",
    "query": "drop table rules_foo",
    "expected": "DROP TABLE rules_foo"
  },
  {
    "comment": "rules - Statement 301",
    "query": "drop table rules_foo2",
    "expected": "DROP TABLE rules_foo2"
  },
  {
    "comment": "rules - Statement 302",
    "query": "create table pparent (pid int, txt text)",
    "expected": "CREATE TABLE pparent (pid INT, txt TEXT)"
  },
  {
    "comment": "rules - Statement 303",
    "query": "insert into pparent values (1,'parent1')",
    "expected": "INSERT INTO pparent VALUES (1, 'parent1')"
  },
  {
    "comment": "rules - Statement 304",
    "query": "insert into pparent values (2,'parent2')",
    "expected": "INSERT INTO pparent VALUES (2, 'parent2')"
  },
  {
    "comment": "rules - Statement 305",
    "query": "create table cchild (pid int, descrip text)",
    "expected": "CREATE TABLE cchild (pid INT, descrip TEXT)"
  },
  {
    "comment": "rules - Statement 306",
    "query": "insert into cchild values (1,'descrip1')",
    "expected": "INSERT INTO cchild VALUES (1, 'descrip1')"
  },
  {
    "comment": "rules - Statement 307",
    "query": "create view vview as select pparent.pid, txt, descrip from pparent left join cchild using (pid)",
    "expected": "CREATE VIEW vview AS SELECT pparent.pid, txt, descrip FROM pparent LEFT OUTER JOIN cchild USING (pid)"
  },
  {
    "comment": "rules - Statement 308",
    "query": "create rule rrule as on update to vview do instead ( insert into cchild (pid, descrip) select old.pid, new.descrip where old.descrip isnull",
    "error": "parse error at position 139: syntax error"
  },
  {
    "comment": "rules - Statement 309",
    "query": "update cchild set descrip = new.descrip where cchild.pid = old.pid",
    "expected": "UPDATE cchild SET descrip = new.descrip WHERE cchild.pid = old.pid"
  },
  {
    "comment": "rules - Statement 310",
    "query": "select * from vview",
    "expected": "SELECT * FROM vview"
  },
  {
    "comment": "rules - Statement 311",
    "query": "update vview set descrip='test1' where pid=1",
    "expected": "UPDATE vview SET descrip = 'test1' WHERE pid = 1"
  },
  {
    "comment": "rules - Statement 312",
    "query": "update vview set descrip='test2' where pid=2",
    "expected": "UPDATE vview SET descrip = 'test2' WHERE pid = 2"
  },
  {
    "comment": "rules - Statement 313",
    "query": "update vview set descrip='test3' where pid=3",
    "expected": "UPDATE vview SET descrip = 'test3' WHERE pid = 3"
  },
  {
    "comment": "rules - Statement 314",
    "query": "select * from cchild",
    "expected": "SELECT * FROM cchild"
  },
  {
    "comment": "rules - Statement 315",
    "query": "drop rule rrule on vview",
    "expected": "DROP RULE rrule ON vview"
  },
  {
    "comment": "rules - Statement 316",
    "query": "drop view vview",
    "expected": "DROP VIEW vview"
  },
  {
    "comment": "rules - Statement 317",
    "query": "drop table pparent",
    "expected": "DROP TABLE pparent"
  },
  {
    "comment": "rules - Statement 318",
    "query": "drop table cchild",
    "expected": "DROP TABLE cchild"
  },
  {
    "comment": "rules - Statement 319",
    "query": "SELECT tablename, rulename, definition FROM pg_rules WHERE schemaname = 'pg_catalog' ORDER BY tablename, rulename"
  },
  {
    "comment": "rules - Statement 320",
    "query": "CREATE TABLE ruletest_tbl2 (a int, b int)",
    "expected": "CREATE TABLE ruletest_tbl2 (a INT, b INT)"
  },
  {
    "comment": "rules - Statement 321",
    "query": "CREATE OR REPLACE RULE myrule AS ON INSERT TO ruletest_tbl DO INSTEAD INSERT INTO ruletest_tbl2 VALUES (10, 10)"
  },
  {
    "comment": "rules - Statement 322",
    "query": "INSERT INTO ruletest_tbl VALUES (99, 99)"
  },
  {
    "comment": "rules - Statement 323",
    "query": "CREATE OR REPLACE RULE myrule AS ON INSERT TO ruletest_tbl DO INSTEAD INSERT INTO ruletest_tbl2 VALUES (1000, 1000)"
  },
  {
    "comment": "rules - Statement 324",
    "query": "SELECT * FROM ruletest_tbl2"
  },
  {
    "comment": "rules - Statement 325",
    "query": "create table rule_and_refint_t1 ( id1a integer, id1b integer, primary key (id1a, id1b) )",
    "expected": "CREATE TABLE rule_and_refint_t1 (id1a INT, id1b INT, PRIMARY KEY (id1a, id1b))"
  },
  {
    "comment": "rules - Statement 326",
    "query": "create table rule_and_refint_t2 ( id2a integer, id2c integer, primary key (id2a, id2c) )",
    "expected": "CREATE TABLE rule_and_refint_t2 (id2a INT, id2c INT, PRIMARY KEY (id2a, id2c))"
  },
  {
    "comment": "rules - Statement 327",
    "query": "create table rule_and_refint_t3 ( id3a integer, id3b integer, id3c integer, data text, primary key (id3a, id3b, id3c), foreign key (id3a, id3b) references rule_and_refint_t1 (id1a, id1b), foreign key (id3a, id3c) references rule_and_refint_t2 (id2a, id2c) )",
    "expected": "CREATE TABLE rule_and_refint_t3 (id3a INT, id3b INT, id3c INT, data TEXT, PRIMARY KEY (id3a, id3b, id3c), FOREIGN KEY (id3a, id3b) REFERENCES rule_and_refint_t1(id1a, id1b), FOREIGN KEY (id3a, id3c) REFERENCES rule_and_refint_t2(id2a, id2c))"
  },
  {
    "comment": "rules - Statement 328",
    "query": "insert into rule_and_refint_t1 values (1, 11)",
    "expected": "INSERT INTO rule_and_refint_t1 VALUES (1, 11)"
  },
  {
    "comment": "rules - Statement 329",
    "query": "insert into rule_and_refint_t1 values (1, 12)",
    "expected": "INSERT INTO rule_and_refint_t1 VALUES (1, 12)"
  },
  {
    "comment": "rules - Statement 330",
    "query": "insert into rule_and_refint_t1 values (2, 21)",
    "expected": "INSERT INTO rule_and_refint_t1 VALUES (2, 21)"
  },
  {
    "comment": "rules - Statement 331",
    "query": "insert into rule_and_refint_t1 values (2, 22)",
    "expected": "INSERT INTO rule_and_refint_t1 VALUES (2, 22)"
  },
  {
    "comment": "rules - Statement 332",
    "query": "insert into rule_and_refint_t2 values (1, 11)",
    "expected": "INSERT INTO rule_and_refint_t2 VALUES (1, 11)"
  },
  {
    "comment": "rules - Statement 333",
    "query": "insert into rule_and_refint_t2 values (1, 12)",
    "expected": "INSERT INTO rule_and_refint_t2 VALUES (1, 12)"
  },
  {
    "comment": "rules - Statement 334",
    "query": "insert into rule_and_refint_t2 values (2, 21)",
    "expected": "INSERT INTO rule_and_refint_t2 VALUES (2, 21)"
  },
  {
    "comment": "rules - Statement 335",
    "query": "insert into rule_and_refint_t2 values (2, 22)",
    "expected": "INSERT INTO rule_and_refint_t2 VALUES (2, 22)"
  },
  {
    "comment": "rules - Statement 336",
    "query": "insert into rule_and_refint_t3 values (1, 11, 11, 'row1')",
    "expected": "INSERT INTO rule_and_refint_t3 VALUES (1, 11, 11, 'row1')"
  },
  {
    "comment": "rules - Statement 337",
    "query": "insert into rule_and_refint_t3 values (1, 11, 12, 'row2')",
    "expected": "INSERT INTO rule_and_refint_t3 VALUES (1, 11, 12, 'row2')"
  },
  {
    "comment": "rules - Statement 338",
    "query": "insert into rule_and_refint_t3 values (1, 12, 11, 'row3')",
    "expected": "INSERT INTO rule_and_refint_t3 VALUES (1, 12, 11, 'row3')"
  },
  {
    "comment": "rules - Statement 339",
    "query": "insert into rule_and_refint_t3 values (1, 12, 12, 'row4')",
    "expected": "INSERT INTO rule_and_refint_t3 VALUES (1, 12, 12, 'row4')"
  },
  {
    "comment": "rules - Statement 340",
    "query": "insert into rule_and_refint_t3 values (1, 11, 13, 'row5')",
    "expected": "INSERT INTO rule_and_refint_t3 VALUES (1, 11, 13, 'row5')"
  },
  {
    "comment": "rules - Statement 341",
    "query": "insert into rule_and_refint_t3 values (1, 13, 11, 'row6')",
    "expected": "INSERT INTO rule_and_refint_t3 VALUES (1, 13, 11, 'row6')"
  },
  {
    "comment": "rules - Statement 342",
    "query": "insert into rule_and_refint_t3 values (1, 13, 11, 'row6') on conflict do nothing",
    "expected": "INSERT INTO rule_and_refint_t3 VALUES (1, 13, 11, 'row6') ON CONFLICT DO NOTHING"
  },
  {
    "comment": "rules - Statement 343",
    "query": "insert into rule_and_refint_t3 values (1, 13, 11, 'row6') on conflict (id3a, id3b, id3c) do update set id3b = excluded.id3b",
    "expected": "INSERT INTO rule_and_refint_t3 VALUES (1, 13, 11, 'row6') ON CONFLICT (id3a, id3b, id3c) DO UPDATE SET id3b = excluded.id3b"
  },
  {
    "comment": "rules - Statement 344",
    "query": "insert into shoelace values ('sl9', 0, 'pink', 35.0, 'inch', 0.0) on conflict (sl_name) do update set sl_avail = excluded.sl_avail",
    "expected": "INSERT INTO shoelace VALUES ('sl9', 0, 'pink', 35.0, 'inch', 0.0) ON CONFLICT (sl_name) DO UPDATE SET sl_avail = excluded.sl_avail"
  },
  {
    "comment": "rules - Statement 345",
    "query": "create rule rule_and_refint_t3_ins as on insert to rule_and_refint_t3 where (exists (select 1 from rule_and_refint_t3 where (((rule_and_refint_t3.id3a = new.id3a) and (rule_and_refint_t3.id3b = new.id3b)) and (rule_and_refint_t3.id3c = new.id3c)))) do instead update rule_and_refint_t3 set data = new.data where (((rule_and_refint_t3.id3a = new.id3a) and (rule_and_refint_t3.id3b = new.id3b)) and (rule_and_refint_t3.id3c = new.id3c))",
    "expected": "CREATE RULE rule_and_refint_t3_ins AS ON INSERT TO rule_and_refint_t3 WHERE (EXISTS (SELECT 1 FROM rule_and_refint_t3 WHERE (((rule_and_refint_t3.id3a = new.id3a) AND (rule_and_refint_t3.id3b = new.id3b)) AND (rule_and_refint_t3.id3c = new.id3c)))) DO INSTEAD UPDATE rule_and_refint_t3 SET data = new.data WHERE (((rule_and_refint_t3.id3a = new.id3a) AND (rule_and_refint_t3.id3b = new.id3b)) AND (rule_and_refint_t3.id3c = new.id3c))"
  },
  {
    "comment": "rules - Statement 346",
    "query": "insert into rule_and_refint_t3 values (1, 11, 13, 'row7')",
    "expected": "INSERT INTO rule_and_refint_t3 VALUES (1, 11, 13, 'row7')"
  },
  {
    "comment": "rules - Statement 347",
    "query": "insert into rule_and_refint_t3 values (1, 13, 11, 'row8')",
    "expected": "INSERT INTO rule_and_refint_t3 VALUES (1, 13, 11, 'row8')"
  },
  {
    "comment": "rules - Statement 348",
    "query": "create view rules_fooview as select 'rules_foo'::text",
    "expected": "CREATE VIEW rules_fooview AS SELECT CAST('rules_foo' AS TEXT)"
  },
  {
    "comment": "rules - Statement 349",
    "query": "drop rule \"_RETURN\" on rules_fooview",
    "expected": "DROP RULE \"_RETURN\" ON rules_fooview"
  },
  {
    "comment": "rules - Statement 350",
    "query": "drop view rules_fooview",
    "expected": "DROP VIEW rules_fooview"
  },
  {
    "comment": "rules - Statement 351",
    "query": "create table rules_fooview (x int, y text)",
    "expected": "CREATE TABLE rules_fooview (x INT, y TEXT)"
  },
  {
    "comment": "rules - Statement 352",
    "query": "create rule \"_RETURN\" as on select to rules_fooview do instead select 1 as x, 'aaa'::text as y",
    "expected": "CREATE RULE \"_RETURN\" AS ON SELECT TO rules_fooview DO INSTEAD SELECT 1 AS x, CAST('aaa' AS TEXT) AS y"
  },
  {
    "comment": "rules - Statement 353",
    "query": "drop table rules_fooview",
    "expected": "DROP TABLE rules_fooview"
  },
  {
    "comment": "rules - Statement 354",
    "query": "create table rules_fooview (x int, y text) partition by list (x)",
    "expected": "CREATE TABLE rules_fooview (x INT, y TEXT) PARTITION BY list (x)"
  },
  {
    "comment": "rules - Statement 355",
    "query": "create table rules_fooview_part partition of rules_fooview for values in (1)",
    "expected": "CREATE TABLE rules_fooview_part PARTITION OF rules_fooview FOR VALUES IN (1)"
  },
  {
    "comment": "rules - Statement 356",
    "query": "create rule \"_RETURN\" as on select to rules_fooview_part do instead select 1 as x, 'aaa'::text as y",
    "expected": "CREATE RULE \"_RETURN\" AS ON SELECT TO rules_fooview_part DO INSTEAD SELECT 1 AS x, CAST('aaa' AS TEXT) AS y"
  },
  {
    "comment": "rules - Statement 357",
    "query": "create table id (id serial primary key, name text)",
    "expected": "CREATE TABLE id (id serial PRIMARY KEY, name TEXT)"
  },
  {
    "comment": "rules - Statement 358",
    "query": "create table test_1 (id integer primary key) inherits (id)",
    "expected": "CREATE TABLE test_1 (id INT PRIMARY KEY) INHERITS (id)"
  },
  {
    "comment": "rules - Statement 359",
    "query": "create table test_2 (id integer primary key) inherits (id)",
    "expected": "CREATE TABLE test_2 (id INT PRIMARY KEY) INHERITS (id)"
  },
  {
    "comment": "rules - Statement 360",
    "query": "create table test_3 (id integer primary key) inherits (id)",
    "expected": "CREATE TABLE test_3 (id INT PRIMARY KEY) INHERITS (id)"
  },
  {
    "comment": "rules - Statement 361",
    "query": "insert into test_1 (name) values ('Test 1')",
    "expected": "INSERT INTO test_1 (name) VALUES ('Test 1')"
  },
  {
    "comment": "rules - Statement 362",
    "query": "insert into test_1 (name) values ('Test 2')",
    "expected": "INSERT INTO test_1 (name) VALUES ('Test 2')"
  },
  {
    "comment": "rules - Statement 363",
    "query": "insert into test_2 (name) values ('Test 3')",
    "expected": "INSERT INTO test_2 (name) VALUES ('Test 3')"
  },
  {
    "comment": "rules - Statement 364",
    "query": "insert into test_2 (name) values ('Test 4')",
    "expected": "INSERT INTO test_2 (name) VALUES ('Test 4')"
  },
  {
    "comment": "rules - Statement 365",
    "query": "insert into test_3 (name) values ('Test 5')",
    "expected": "INSERT INTO test_3 (name) VALUES ('Test 5')"
  },
  {
    "comment": "rules - Statement 366",
    "query": "insert into test_3 (name) values ('Test 6')",
    "expected": "INSERT INTO test_3 (name) VALUES ('Test 6')"
  },
  {
    "comment": "rules - Statement 367",
    "query": "create view id_ordered as select * from id order by id",
    "expected": "CREATE VIEW id_ordered AS SELECT * FROM id ORDER BY id"
  },
  {
    "comment": "rules - Statement 368",
    "query": "create rule update_id_ordered as on update to id_ordered do instead update id set name = new.name where id = old.id",
    "expected": "CREATE RULE update_id_ordered AS ON UPDATE TO id_ordered DO INSTEAD UPDATE id SET name = new.name WHERE id = old.id"
  },
  {
    "comment": "rules - Statement 369",
    "query": "select * from id_ordered",
    "expected": "SELECT * FROM id_ordered"
  },
  {
    "comment": "rules - Statement 370",
    "query": "update id_ordered set name = 'update 2' where id = 2",
    "expected": "UPDATE id_ordered SET name = 'update 2' WHERE id = 2"
  },
  {
    "comment": "rules - Statement 371",
    "query": "update id_ordered set name = 'update 4' where id = 4",
    "expected": "UPDATE id_ordered SET name = 'update 4' WHERE id = 4"
  },
  {
    "comment": "rules - Statement 372",
    "query": "update id_ordered set name = 'update 5' where id = 5",
    "expected": "UPDATE id_ordered SET name = 'update 5' WHERE id = 5"
  },
  {
    "comment": "rules - Statement 373",
    "query": "drop table id cascade",
    "expected": "DROP TABLE id CASCADE"
  },
  {
    "comment": "rules - Statement 374",
    "query": "create temp table t1 (a integer primary key)",
    "expected": "CREATE TEMPORARY TABLE t1 (a INT PRIMARY KEY)"
  },
  {
    "comment": "rules - Statement 375",
    "query": "create temp table t1_1 (check (a \u003e= 0 and a \u003c 10)) inherits (t1)",
    "expected": "CREATE TEMPORARY TABLE t1_1 (CHECK (a \u003e= 0 AND a \u003c 10)) INHERITS (t1)"
  },
  {
    "comment": "rules - Statement 376",
    "query": "create temp table t1_2 (check (a \u003e= 10 and a \u003c 20)) inherits (t1)",
    "expected": "CREATE TEMPORARY TABLE t1_2 (CHECK (a \u003e= 10 AND a \u003c 20)) INHERITS (t1)"
  },
  {
    "comment": "rules - Statement 377",
    "query": "create rule t1_ins_1 as on insert to t1 where new.a \u003e= 0 and new.a \u003c 10 do instead insert into t1_1 values (new.a)",
    "expected": "CREATE RULE t1_ins_1 AS ON INSERT TO t1 WHERE new.a \u003e= 0 AND new.a \u003c 10 DO INSTEAD INSERT INTO t1_1 VALUES (new.a)"
  },
  {
    "comment": "rules - Statement 378",
    "query": "create rule t1_ins_2 as on insert to t1 where new.a \u003e= 10 and new.a \u003c 20 do instead insert into t1_2 values (new.a)",
    "expected": "CREATE RULE t1_ins_2 AS ON INSERT TO t1 WHERE new.a \u003e= 10 AND new.a \u003c 20 DO INSTEAD INSERT INTO t1_2 VALUES (new.a)"
  },
  {
    "comment": "rules - Statement 379",
    "query": "create rule t1_upd_1 as on update to t1 where old.a \u003e= 0 and old.a \u003c 10 do instead update t1_1 set a = new.a where a = old.a",
    "expected": "CREATE RULE t1_upd_1 AS ON UPDATE TO t1 WHERE old.a \u003e= 0 AND old.a \u003c 10 DO INSTEAD UPDATE t1_1 SET a = new.a WHERE a = old.a"
  },
  {
    "comment": "rules - Statement 380",
    "query": "create rule t1_upd_2 as on update to t1 where old.a \u003e= 10 and old.a \u003c 20 do instead update t1_2 set a = new.a where a = old.a",
    "expected": "CREATE RULE t1_upd_2 AS ON UPDATE TO t1 WHERE old.a \u003e= 10 AND old.a \u003c 20 DO INSTEAD UPDATE t1_2 SET a = new.a WHERE a = old.a"
  },
  {
    "comment": "rules - Statement 381",
    "query": "set constraint_exclusion = on",
    "expected": "SET constraint_exclusion = on"
  },
  {
    "comment": "rules - Statement 382",
    "query": "insert into t1 select * from generate_series(5,19,1) g",
    "expected": "INSERT INTO t1 SELECT * FROM generate_series(5, 19, 1) AS g"
  },
  {
    "comment": "rules - Statement 383",
    "query": "update t1 set a = 4 where a = 5",
    "expected": "UPDATE t1 SET a = 4 WHERE a = 5"
  },
  {
    "comment": "rules - Statement 384",
    "query": "select * from only t1",
    "expected": "SELECT * FROM ONLY t1"
  },
  {
    "comment": "rules - Statement 385",
    "query": "select * from only t1_1",
    "expected": "SELECT * FROM ONLY t1_1"
  },
  {
    "comment": "rules - Statement 386",
    "query": "select * from only t1_2",
    "expected": "SELECT * FROM ONLY t1_2"
  },
  {
    "comment": "rules - Statement 387",
    "query": "reset constraint_exclusion",
    "expected": "RESET constraint_exclusion"
  },
  {
    "comment": "rules - Statement 388",
    "query": "create table rules_base(f1 int, f2 int)",
    "expected": "CREATE TABLE rules_base (f1 INT, f2 INT)"
  },
  {
    "comment": "rules - Statement 389",
    "query": "insert into rules_base values(1,2), (11,12)",
    "expected": "INSERT INTO rules_base VALUES (1, 2), (11, 12)"
  },
  {
    "comment": "rules - Statement 390",
    "query": "create rule r1 as on update to rules_base do instead select * from rules_base where f1 = 1 for update",
    "expected": "CREATE RULE r1 AS ON UPDATE TO rules_base DO INSTEAD SELECT * FROM rules_base WHERE f1 = 1 FOR UPDATE"
  },
  {
    "comment": "rules - Statement 391",
    "query": "update rules_base set f2 = f2 + 1",
    "expected": "UPDATE rules_base SET f2 = f2 + 1"
  },
  {
    "comment": "rules - Statement 392",
    "query": "create or replace rule r1 as on update to rules_base do instead select * from rules_base where f1 = 11 for update of rules_base",
    "expected": "CREATE OR REPLACE RULE r1 AS ON UPDATE TO rules_base DO INSTEAD SELECT * FROM rules_base WHERE f1 = 11 FOR UPDATE OF rules_base"
  },
  {
    "comment": "rules - Statement 393",
    "query": "create or replace rule r1 as on update to rules_base do instead select * from rules_base where f1 = 11 for update of old",
    "expected": "CREATE OR REPLACE RULE r1 AS ON UPDATE TO rules_base DO INSTEAD SELECT * FROM rules_base WHERE f1 = 11 FOR UPDATE OF old"
  },
  {
    "comment": "rules - Statement 394",
    "query": "drop table rules_base",
    "expected": "DROP TABLE rules_base"
  },
  {
    "comment": "rules - Statement 395",
    "query": "select pg_get_viewdef('shoe'::regclass) as unpretty",
    "expected": "SELECT pg_get_viewdef(CAST('shoe' AS regclass)) AS unpretty"
  },
  {
    "comment": "rules - Statement 396",
    "query": "select pg_get_viewdef('shoe'::regclass,true) as pretty",
    "expected": "SELECT pg_get_viewdef(CAST('shoe' AS regclass), TRUE) AS pretty"
  },
  {
    "comment": "rules - Statement 397",
    "query": "select pg_get_viewdef('shoe'::regclass,0) as prettier",
    "expected": "SELECT pg_get_viewdef(CAST('shoe' AS regclass), 0) AS prettier"
  },
  {
    "comment": "rules - Statement 398",
    "query": "create table rules_src(f1 int, f2 int default 0)",
    "expected": "CREATE TABLE rules_src (f1 INT, f2 INT DEFAULT 0)"
  },
  {
    "comment": "rules - Statement 399",
    "query": "create table rules_log(f1 int, f2 int, tag text, id serial)",
    "expected": "CREATE TABLE rules_log (f1 INT, f2 INT, tag TEXT, id serial)"
  },
  {
    "comment": "rules - Statement 400",
    "query": "insert into rules_src values(1,2), (11,12)",
    "expected": "INSERT INTO rules_src VALUES (1, 2), (11, 12)"
  },
  {
    "comment": "rules - Statement 401",
    "query": "create rule r1 as on update to rules_src do also insert into rules_log values(old.*, 'old', default), (new.*, 'new', default)",
    "expected": "CREATE RULE r1 AS ON UPDATE TO rules_src DO INSERT INTO rules_log VALUES (old.*, 'old', DEFAULT), (new.*, 'new', DEFAULT)"
  },
  {
    "comment": "rules - Statement 402",
    "query": "update rules_src set f2 = f2 + 1",
    "expected": "UPDATE rules_src SET f2 = f2 + 1"
  },
  {
    "comment": "rules - Statement 403",
    "query": "update rules_src set f2 = f2 * 10",
    "expected": "UPDATE rules_src SET f2 = f2 * 10"
  },
  {
    "comment": "rules - Statement 404",
    "query": "select * from rules_src",
    "expected": "SELECT * FROM rules_src"
  },
  {
    "comment": "rules - Statement 405",
    "query": "select * from rules_log",
    "expected": "SELECT * FROM rules_log"
  },
  {
    "comment": "rules - Statement 406",
    "query": "create rule r2 as on update to rules_src do also values(old.*, 'old'), (new.*, 'new')",
    "expected": "CREATE RULE r2 AS ON UPDATE TO rules_src DO VALUES (old.*, 'old'), (new.*, 'new')"
  },
  {
    "comment": "rules - Statement 407",
    "query": "update rules_src set f2 = f2 / 10",
    "expected": "UPDATE rules_src SET f2 = f2 / 10"
  },
  {
    "comment": "rules - Statement 408",
    "query": "create rule r3 as on insert to rules_src do also insert into rules_log values(null, null, '-', default), (new.*, 'new', default)",
    "expected": "CREATE RULE r3 AS ON INSERT TO rules_src DO INSERT INTO rules_log VALUES (NULL, NULL, '-', DEFAULT), (new.*, 'new', DEFAULT)"
  },
  {
    "comment": "rules - Statement 409",
    "query": "insert into rules_src values(22,23), (33,default)",
    "expected": "INSERT INTO rules_src VALUES (22, 23), (33, DEFAULT)"
  },
  {
    "comment": "rules - Statement 410",
    "query": "create rule r4 as on delete to rules_src do notify rules_src_deletion",
    "expected": "CREATE RULE r4 AS ON DELETE TO rules_src DO NOTIFY rules_src_deletion"
  },
  {
    "comment": "rules - Statement 411",
    "query": "create rule r5 as on insert to rules_src do instead insert into rules_log AS trgt SELECT NEW.* RETURNING trgt.f1, trgt.f2",
    "expected": "CREATE RULE r5 AS ON INSERT TO rules_src DO INSTEAD INSERT INTO rules_log AS trgt SELECT new.* RETURNING trgt.f1, trgt.f2"
  },
  {
    "comment": "rules - Statement 412",
    "query": "create rule r6 as on update to rules_src do instead UPDATE rules_log AS trgt SET tag = 'updated' WHERE trgt.f1 = new.f1",
    "expected": "CREATE RULE r6 AS ON UPDATE TO rules_src DO INSTEAD UPDATE rules_log AS trgt SET tag = 'updated' WHERE trgt.f1 = new.f1"
  },
  {
    "comment": "rules - Statement 413",
    "query": "create rule r7 as on delete to rules_src do instead with wins as (insert into int4_tbl as trgt values (0) returning *), wupd as (update int4_tbl trgt set f1 = f1+1 returning *), wdel as (delete from int4_tbl trgt where f1 = 0 returning *) insert into rules_log AS trgt select old.* from wins, wupd, wdel returning trgt.f1, trgt.f2",
    "expected": "CREATE RULE r7 AS ON DELETE TO rules_src DO INSTEAD WITH wins AS (INSERT INTO int4_tbl AS trgt VALUES (0) RETURNING *), wupd AS (UPDATE int4_tbl AS trgt SET f1 = f1 + 1 RETURNING *), wdel AS (DELETE FROM int4_tbl AS trgt WHERE f1 = 0 RETURNING *) INSERT INTO rules_log AS trgt SELECT old.* FROM wins, wupd, wdel RETURNING trgt.f1, trgt.f2"
  },
  {
    "comment": "rules - Statement 414",
    "query": "create table rule_dest(f1 int, f2 int[], tag text)",
    "expected": "CREATE TABLE rule_dest (f1 INT, f2 INT[], tag TEXT)"
  },
  {
    "comment": "rules - Statement 415",
    "query": "create rule rr as on update to rule_t1 do instead UPDATE rule_dest trgt SET (f2[1], f1, tag) = (SELECT new.f2, new.f1, 'updated'::varchar) WHERE trgt.f1 = new.f1 RETURNING new.*",
    "expected": "CREATE RULE rr AS ON UPDATE TO rule_t1 DO INSTEAD UPDATE rule_dest AS trgt SET f2[1] = (SELECT new.f2, new.f1, CAST('updated' AS VARCHAR)), f1 = (SELECT new.f2, new.f1, CAST('updated' AS VARCHAR)), tag = (SELECT new.f2, new.f1, CAST('updated' AS VARCHAR)) WHERE trgt.f1 = new.f1 RETURNING new.*"
  },
  {
    "comment": "rules - Statement 416",
    "query": "CREATE TABLE rule_t1(a int, b text DEFAULT 'xxx', c int)",
    "expected": "CREATE TABLE rule_t1 (a INT, b TEXT DEFAULT 'xxx', c INT)"
  },
  {
    "comment": "rules - Statement 417",
    "query": "CREATE VIEW rule_v1 AS SELECT * FROM rule_t1"
  },
  {
    "comment": "rules - Statement 418",
    "query": "CREATE RULE v1_ins AS ON INSERT TO rule_v1 DO ALSO INSERT INTO rule_t1 SELECT * FROM (SELECT a + 10 FROM rule_t1 WHERE a = NEW.a) tt",
    "expected": "CREATE RULE v1_ins AS ON INSERT TO rule_v1 DO INSERT INTO rule_t1 SELECT * FROM (SELECT a + 10 FROM rule_t1 WHERE a = new.a) AS tt"
  },
  {
    "comment": "rules - Statement 419",
    "query": "CREATE RULE v1_upd AS ON UPDATE TO rule_v1 DO ALSO UPDATE rule_t1 t SET c = tt.a * 10 FROM (SELECT a FROM rule_t1 WHERE a = OLD.a) tt WHERE t.a = tt.a",
    "expected": "CREATE RULE v1_upd AS ON UPDATE TO rule_v1 DO UPDATE rule_t1 AS t SET c = tt.a * 10 FROM (SELECT a FROM rule_t1 WHERE a = old.a) AS tt WHERE t.a = tt.a"
  },
  {
    "comment": "rules - Statement 420",
    "query": "INSERT INTO rule_v1 VALUES (1, 'a'), (2, 'b')"
  },
  {
    "comment": "rules - Statement 421",
    "query": "UPDATE rule_v1 SET b = upper(b)"
  },
  {
    "comment": "rules - Statement 422",
    "query": "SELECT * FROM rule_t1"
  },
  {
    "comment": "rules - Statement 423",
    "query": "DROP TABLE rule_t1 CASCADE"
  },
  {
    "comment": "rules - Statement 424",
    "query": "CREATE TABLE rule_t1 (a INT)"
  },
  {
    "comment": "rules - Statement 425",
    "query": "CREATE RULE InsertRule AS ON INSERT TO rule_v1 DO INSTEAD INSERT INTO rule_t1 VALUES(new.a)",
    "expected": "CREATE RULE insertrule AS ON INSERT TO rule_v1 DO INSTEAD INSERT INTO rule_t1 VALUES (new.a)"
  },
  {
    "comment": "rules - Statement 426",
    "query": "ALTER RULE InsertRule ON rule_v1 RENAME to NewInsertRule",
    "expected": "ALTER RULE insertrule ON rule_v1 RENAME TO newinsertrule"
  },
  {
    "comment": "rules - Statement 427",
    "query": "INSERT INTO rule_v1 VALUES(1)",
    "expected": "INSERT INTO rule_v1 VALUES (1)"
  },
  {
    "comment": "rules - Statement 428",
    "query": "SELECT * FROM rule_v1"
  },
  {
    "comment": "rules - Statement 429",
    "query": "ALTER RULE NewInsertRule ON rule_v1 RENAME TO \"_RETURN\"",
    "expected": "ALTER RULE newinsertrule ON rule_v1 RENAME TO \"_RETURN\""
  },
  {
    "comment": "rules - Statement 430",
    "query": "ALTER RULE \"_RETURN\" ON rule_v1 RENAME TO abc"
  },
  {
    "comment": "rules - Statement 431",
    "query": "DROP VIEW rule_v1"
  },
  {
    "comment": "rules - Statement 432",
    "query": "DROP TABLE rule_t1"
  },
  {
    "comment": "rules - Statement 433",
    "query": "create view rule_v1 as values(1,2)",
    "expected": "CREATE VIEW rule_v1 AS VALUES (1, 2)"
  },
  {
    "comment": "rules - Statement 434",
    "query": "create view rule_v1(x) as values(1,2)",
    "expected": "CREATE VIEW rule_v1 (x) AS VALUES (1, 2)"
  },
  {
    "comment": "rules - Statement 435",
    "query": "create view rule_v1(x) as select * from (values(1,2)) v",
    "expected": "CREATE VIEW rule_v1 (x) AS SELECT * FROM (VALUES (1, 2)) AS v"
  },
  {
    "comment": "rules - Statement 436",
    "query": "create view rule_v1(x) as select * from (values(1,2)) v(q,w)",
    "expected": "CREATE VIEW rule_v1 (x) AS SELECT * FROM (VALUES (1, 2)) AS v(q, w)"
  },
  {
    "comment": "rules - Statement 437",
    "query": "CREATE TABLE hats ( hat_name    char(10) primary key, hat_color   char(10) )",
    "expected": "CREATE TABLE hats (hat_name CHAR(10) PRIMARY KEY, hat_color CHAR(10))"
  },
  {
    "comment": "rules - Statement 438",
    "query": "CREATE TABLE hat_data ( hat_name    char(10), hat_color   char(10) )",
    "expected": "CREATE TABLE hat_data (hat_name CHAR(10), hat_color CHAR(10))"
  },
  {
    "comment": "rules - Statement 439",
    "query": "create unique index hat_data_unique_idx on hat_data (hat_name COLLATE \"C\" bpchar_pattern_ops)",
    "expected": "CREATE UNIQUE INDEX hat_data_unique_idx ON hat_data USING btree ( hat_name COLLATE \"C\" bpchar_pattern_ops )"
  },
  {
    "comment": "rules - Statement 440",
    "query": "CREATE RULE hat_nosert AS ON INSERT TO hats DO INSTEAD INSERT INTO hat_data VALUES ( NEW.hat_name, NEW.hat_color) ON CONFLICT (hat_name COLLATE \"C\" bpchar_pattern_ops) WHERE hat_color = 'green' DO NOTHING RETURNING *",
    "expected": "CREATE RULE hat_nosert AS ON INSERT TO hats DO INSTEAD INSERT INTO hat_data VALUES (new.hat_name, new.hat_color) ON CONFLICT (hat_name COLLATE \"C\" bpchar_pattern_ops) WHERE hat_color = 'green' DO NOTHING RETURNING *"
  },
  {
    "comment": "rules - Statement 441",
    "query": "SELECT definition FROM pg_rules WHERE tablename = 'hats' ORDER BY rulename"
  },
  {
    "comment": "rules - Statement 442",
    "query": "INSERT INTO hats VALUES ('h7', 'black') RETURNING *"
  },
  {
    "comment": "rules - Statement 443",
    "query": "SELECT tablename, rulename, definition FROM pg_rules WHERE tablename = 'hats'"
  },
  {
    "comment": "rules - Statement 444",
    "query": "DROP RULE hat_nosert ON hats"
  },
  {
    "comment": "rules - Statement 445",
    "query": "CREATE RULE hat_nosert_all AS ON INSERT TO hats DO INSTEAD INSERT INTO hat_data VALUES ( NEW.hat_name, NEW.hat_color) ON CONFLICT DO NOTHING RETURNING *",
    "expected": "CREATE RULE hat_nosert_all AS ON INSERT TO hats DO INSTEAD INSERT INTO hat_data VALUES (new.hat_name, new.hat_color) ON CONFLICT DO NOTHING RETURNING *"
  },
  {
    "comment": "rules - Statement 446",
    "query": "DROP RULE hat_nosert_all ON hats"
  },
  {
    "comment": "rules - Statement 447",
    "query": "CREATE RULE hat_upsert AS ON INSERT TO hats DO INSTEAD INSERT INTO hat_data VALUES ( NEW.hat_name, NEW.hat_color) ON CONFLICT (hat_name) DO UPDATE SET hat_name = hat_data.hat_name, hat_color = excluded.hat_color WHERE excluded.hat_color \u003c\u003e  'forbidden' AND hat_data.* != excluded.* RETURNING *",
    "expected": "CREATE RULE hat_upsert AS ON INSERT TO hats DO INSTEAD INSERT INTO hat_data VALUES (new.hat_name, new.hat_color) ON CONFLICT (hat_name) DO UPDATE SET hat_name = hat_data.hat_name, hat_color = excluded.hat_color WHERE excluded.hat_color \u003c\u003e 'forbidden' AND hat_data.* \u003c\u003e excluded.* RETURNING *"
  },
  {
    "comment": "rules - Statement 448",
    "query": "INSERT INTO hats VALUES ('h8', 'black') RETURNING *"
  },
  {
    "comment": "rules - Statement 449",
    "query": "SELECT * FROM hat_data WHERE hat_name = 'h8'"
  },
  {
    "comment": "rules - Statement 450",
    "query": "INSERT INTO hats VALUES ('h8', 'white') RETURNING *"
  },
  {
    "comment": "rules - Statement 451",
    "query": "INSERT INTO hats VALUES ('h8', 'forbidden') RETURNING *"
  },
  {
    "comment": "rules - Statement 452",
    "query": "explain (costs off) INSERT INTO hats VALUES ('h8', 'forbidden') RETURNING *",
    "expected": "EXPLAIN (COSTS false) INSERT INTO hats VALUES ('h8', 'forbidden') RETURNING *"
  },
  {
    "comment": "rules - Statement 453",
    "query": "WITH data(hat_name, hat_color) AS MATERIALIZED ( VALUES ('h8', 'green'), ('h9', 'blue'), ('h7', 'forbidden') ) INSERT INTO hats SELECT * FROM data RETURNING *",
    "expected": "WITH data(hat_name, hat_color) AS MATERIALIZED (VALUES ('h8', 'green'), ('h9', 'blue'), ('h7', 'forbidden')) INSERT INTO hats SELECT * FROM data RETURNING *"
  },
  {
    "comment": "rules - Statement 454",
    "query": "EXPLAIN (costs off) WITH data(hat_name, hat_color) AS MATERIALIZED ( VALUES ('h8', 'green'), ('h9', 'blue'), ('h7', 'forbidden') ) INSERT INTO hats SELECT * FROM data RETURNING *",
    "expected": "EXPLAIN (COSTS false) WITH data(hat_name, hat_color) AS MATERIALIZED (VALUES ('h8', 'green'), ('h9', 'blue'), ('h7', 'forbidden')) INSERT INTO hats SELECT * FROM data RETURNING *"
  },
  {
    "comment": "rules - Statement 455",
    "query": "SELECT * FROM hat_data WHERE hat_name IN ('h8', 'h9', 'h7') ORDER BY hat_name"
  },
  {
    "comment": "rules - Statement 456",
    "query": "DROP RULE hat_upsert ON hats"
  },
  {
    "comment": "rules - Statement 457",
    "query": "drop table hats",
    "expected": "DROP TABLE hats"
  },
  {
    "comment": "rules - Statement 458",
    "query": "drop table hat_data",
    "expected": "DROP TABLE hat_data"
  },
  {
    "comment": "rules - Statement 459",
    "query": "CREATE FUNCTION func_with_set_params() RETURNS integer AS 'select 1;' LANGUAGE SQL SET search_path TO PG_CATALOG SET extra_float_digits TO 2 SET work_mem TO '4MB' SET datestyle to iso, mdy SET local_preload_libraries TO \"Mixed/Case\", 'c:/''a\"/path', '', '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789' IMMUTABLE STRICT",
    "expected": "CREATE FUNCTION func_with_set_params () RETURNS INT AS $$select 1;$$ LANGUAGE sql SET SCHEMA 'pg_catalog' SET extra_float_digits = 2 SET work_mem = '4MB' SET datestyle = 'iso', 'mdy' SET local_preload_libraries = 'Mixed/Case', 'c:/''a\"/path', '', '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789' IMMUTABLE STRICT"
  },
  {
    "comment": "rules - Statement 460",
    "query": "SELECT pg_get_functiondef('func_with_set_params()'::regprocedure)",
    "expected": "SELECT pg_get_functiondef(CAST('func_with_set_params()' AS regprocedure))"
  },
  {
    "comment": "rules - Statement 461",
    "query": "SELECT pg_get_constraintdef(0)"
  },
  {
    "comment": "rules - Statement 462",
    "query": "SELECT pg_get_functiondef(0)"
  },
  {
    "comment": "rules - Statement 463",
    "query": "SELECT pg_get_indexdef(0)"
  },
  {
    "comment": "rules - Statement 464",
    "query": "SELECT pg_get_ruledef(0)"
  },
  {
    "comment": "rules - Statement 465",
    "query": "SELECT pg_get_statisticsobjdef(0)"
  },
  {
    "comment": "rules - Statement 466",
    "query": "SELECT pg_get_triggerdef(0)"
  },
  {
    "comment": "rules - Statement 467",
    "query": "SELECT pg_get_viewdef(0)"
  },
  {
    "comment": "rules - Statement 468",
    "query": "SELECT pg_get_function_arguments(0)"
  },
  {
    "comment": "rules - Statement 469",
    "query": "SELECT pg_get_function_identity_arguments(0)"
  },
  {
    "comment": "rules - Statement 470",
    "query": "SELECT pg_get_function_result(0)"
  },
  {
    "comment": "rules - Statement 471",
    "query": "SELECT pg_get_function_arg_default(0, 0)"
  },
  {
    "comment": "rules - Statement 472",
    "query": "SELECT pg_get_function_arg_default('pg_class'::regclass, 0)",
    "expected": "SELECT pg_get_function_arg_default(CAST('pg_class' AS regclass), 0)"
  },
  {
    "comment": "rules - Statement 473",
    "query": "SELECT pg_get_partkeydef(0)"
  },
  {
    "comment": "rules - Statement 474",
    "query": "CREATE TABLE rules_parted_table (a int) PARTITION BY LIST (a)",
    "expected": "CREATE TABLE rules_parted_table (a INT) PARTITION BY list (a)"
  },
  {
    "comment": "rules - Statement 475",
    "query": "CREATE TABLE rules_parted_table_1 PARTITION OF rules_parted_table FOR VALUES IN (1)"
  },
  {
    "comment": "rules - Statement 476",
    "query": "CREATE RULE rules_parted_table_insert AS ON INSERT to rules_parted_table DO INSTEAD INSERT INTO rules_parted_table_1 VALUES (NEW.*)",
    "expected": "CREATE RULE rules_parted_table_insert AS ON INSERT TO rules_parted_table DO INSTEAD INSERT INTO rules_parted_table_1 VALUES (new.*)"
  },
  {
    "comment": "rules - Statement 477",
    "query": "ALTER RULE rules_parted_table_insert ON rules_parted_table RENAME TO rules_parted_table_insert_redirect"
  },
  {
    "comment": "rules - Statement 478",
    "query": "DROP TABLE rules_parted_table"
  },
  {
    "comment": "rules - Statement 479",
    "query": "CREATE TABLE rule_merge1 (a int, b text)",
    "expected": "CREATE TABLE rule_merge1 (a INT, b TEXT)"
  },
  {
    "comment": "rules - Statement 480",
    "query": "CREATE TABLE rule_merge2 (a int, b text)",
    "expected": "CREATE TABLE rule_merge2 (a INT, b TEXT)"
  },
  {
    "comment": "rules - Statement 481",
    "query": "CREATE RULE rule1 AS ON INSERT TO rule_merge1 DO INSTEAD INSERT INTO rule_merge2 VALUES (NEW.*)",
    "expected": "CREATE RULE rule1 AS ON INSERT TO rule_merge1 DO INSTEAD INSERT INTO rule_merge2 VALUES (new.*)"
  },
  {
    "comment": "rules - Statement 482",
    "query": "CREATE RULE rule2 AS ON UPDATE TO rule_merge1 DO INSTEAD UPDATE rule_merge2 SET a = NEW.a, b = NEW.b WHERE a = OLD.a",
    "expected": "CREATE RULE rule2 AS ON UPDATE TO rule_merge1 DO INSTEAD UPDATE rule_merge2 SET a = new.a, b = new.b WHERE a = old.a"
  },
  {
    "comment": "rules - Statement 483",
    "query": "CREATE RULE rule3 AS ON DELETE TO rule_merge1 DO INSTEAD DELETE FROM rule_merge2 WHERE a = OLD.a",
    "expected": "CREATE RULE rule3 AS ON DELETE TO rule_merge1 DO INSTEAD DELETE FROM rule_merge2 WHERE a = old.a"
  },
  {
    "comment": "rules - Statement 484",
    "query": "MERGE INTO rule_merge1 t USING (SELECT 1 AS a) s ON t.a = s.a WHEN MATCHED AND t.a \u003c 2 THEN UPDATE SET b = b || ' updated by merge' WHEN MATCHED AND t.a \u003e 2 THEN DELETE WHEN NOT MATCHED THEN INSERT VALUES (s.a, '')",
    "expected": "MERGE INTO rule_merge1 AS t USING (SELECT 1 AS a) AS s ON t.a = s.a WHEN MATCHED AND t.a \u003c 2 THEN UPDATE SET b = b || ' updated by merge' WHEN MATCHED AND t.a \u003e 2 THEN DELETE WHEN NOT MATCHED THEN INSERT VALUES (s.a, '')"
  },
  {
    "comment": "rules - Statement 485",
    "query": "MERGE INTO rule_merge2 t USING (SELECT 1 AS a) s ON t.a = s.a WHEN MATCHED AND t.a \u003c 2 THEN UPDATE SET b = b || ' updated by merge' WHEN MATCHED AND t.a \u003e 2 THEN DELETE WHEN NOT MATCHED THEN INSERT VALUES (s.a, '')",
    "expected": "MERGE INTO rule_merge2 AS t USING (SELECT 1 AS a) AS s ON t.a = s.a WHEN MATCHED AND t.a \u003c 2 THEN UPDATE SET b = b || ' updated by merge' WHEN MATCHED AND t.a \u003e 2 THEN DELETE WHEN NOT MATCHED THEN INSERT VALUES (s.a, '')"
  },
  {
    "comment": "rules - Statement 486",
    "query": "ALTER TABLE rule_merge1 DISABLE RULE rule1"
  },
  {
    "comment": "rules - Statement 487",
    "query": "ALTER TABLE rule_merge1 DISABLE RULE rule2"
  },
  {
    "comment": "rules - Statement 488",
    "query": "ALTER TABLE rule_merge1 DISABLE RULE rule3"
  },
  {
    "comment": "rules - Statement 489",
    "query": "CREATE TABLE sf_target(id int, data text, filling int[])",
    "expected": "CREATE TABLE sf_target (id INT, data TEXT, filling INT[])"
  },
  {
    "comment": "rules - Statement 490",
    "query": "CREATE FUNCTION merge_sf_test() RETURNS TABLE(action text, a int, b text, id int, data text, filling int[]) LANGUAGE sql BEGIN ATOMIC MERGE INTO sf_target t USING rule_merge1 s ON (s.a = t.id) WHEN MATCHED AND (s.a + t.id) = 42 THEN UPDATE SET data = repeat(t.data, s.a) || s.b, id = length(s.b) WHEN NOT MATCHED AND (s.b IS NOT NULL) THEN INSERT (data, id) VALUES (s.b, s.a) WHEN MATCHED AND length(s.b || t.data) \u003e 10 THEN UPDATE SET data = s.b WHEN MATCHED AND s.a \u003e 200 THEN UPDATE SET filling[s.a] = t.id WHEN MATCHED AND s.a \u003e 100 THEN DELETE WHEN MATCHED THEN DO NOTHING WHEN NOT MATCHED AND s.a \u003e 200 THEN INSERT DEFAULT VALUES WHEN NOT MATCHED AND s.a \u003e 100 THEN INSERT (id, data) OVERRIDING USER VALUE VALUES (s.a, DEFAULT) WHEN NOT MATCHED AND s.a \u003e 0 THEN INSERT VALUES (s.a, s.b, DEFAULT) WHEN NOT MATCHED THEN INSERT (filling[1], id) VALUES (s.a, s.a) RETURNING merge_action() AS action, *",
    "error": "parse error at position 903: syntax error"
  },
  {
    "comment": "rules - Statement 491",
    "query": "END",
    "expected": "COMMIT"
  },
  {
    "comment": "rules - Statement 492",
    "query": "DROP FUNCTION merge_sf_test2"
  },
  {
    "comment": "rules - Statement 493",
    "query": "DROP TABLE sf_target"
  },
  {
    "comment": "rules - Statement 494",
    "query": "CREATE TABLE ruletest1 (a int)",
    "expected": "CREATE TABLE ruletest1 (a INT)"
  },
  {
    "comment": "rules - Statement 495",
    "query": "CREATE TABLE ruletest2 (b int)",
    "expected": "CREATE TABLE ruletest2 (b INT)"
  },
  {
    "comment": "rules - Statement 496",
    "query": "CREATE RULE rule1 AS ON INSERT TO ruletest1 DO INSTEAD INSERT INTO ruletest2 VALUES (NEW.*)",
    "expected": "CREATE RULE rule1 AS ON INSERT TO ruletest1 DO INSTEAD INSERT INTO ruletest2 VALUES (new.*)"
  },
  {
    "comment": "rules - Statement 497",
    "query": "INSERT INTO ruletest1 VALUES (1)"
  },
  {
    "comment": "rules - Statement 498",
    "query": "ALTER TABLE ruletest1 DISABLE RULE rule1"
  },
  {
    "comment": "rules - Statement 499",
    "query": "INSERT INTO ruletest1 VALUES (2)"
  },
  {
    "comment": "rules - Statement 500",
    "query": "ALTER TABLE ruletest1 ENABLE RULE rule1"
  },
  {
    "comment": "rules - Statement 501",
    "query": "SET session_replication_role = replica",
    "expected": "SET session_replication_role = 'replica'"
  },
  {
    "comment": "rules - Statement 502",
    "query": "INSERT INTO ruletest1 VALUES (3)"
  },
  {
    "comment": "rules - Statement 503",
    "query": "ALTER TABLE ruletest1 ENABLE REPLICA RULE rule1"
  },
  {
    "comment": "rules - Statement 504",
    "query": "INSERT INTO ruletest1 VALUES (4)"
  },
  {
    "comment": "rules - Statement 505",
    "query": "RESET session_replication_role"
  },
  {
    "comment": "rules - Statement 506",
    "query": "INSERT INTO ruletest1 VALUES (5)"
  },
  {
    "comment": "rules - Statement 507",
    "query": "SELECT * FROM ruletest1"
  },
  {
    "comment": "rules - Statement 508",
    "query": "SELECT * FROM ruletest2"
  },
  {
    "comment": "rules - Statement 509",
    "query": "DROP TABLE ruletest1"
  },
  {
    "comment": "rules - Statement 510",
    "query": "DROP TABLE ruletest2"
  },
  {
    "comment": "rules - Statement 511",
    "query": "CREATE USER regress_rule_user1"
  },
  {
    "comment": "rules - Statement 512",
    "query": "CREATE TABLE ruletest_t1 (x int)",
    "expected": "CREATE TABLE ruletest_t1 (x INT)"
  },
  {
    "comment": "rules - Statement 513",
    "query": "CREATE TABLE ruletest_t2 (x int)",
    "expected": "CREATE TABLE ruletest_t2 (x INT)"
  },
  {
    "comment": "rules - Statement 514",
    "query": "CREATE VIEW ruletest_v1 WITH (security_invoker=true) AS SELECT * FROM ruletest_t1",
    "expected": "CREATE VIEW ruletest_v1 WITH ( security_invoker = 'true') AS SELECT * FROM ruletest_t1"
  },
  {
    "comment": "rules - Statement 515",
    "query": "GRANT INSERT ON ruletest_v1 TO regress_rule_user1"
  },
  {
    "comment": "rules - Statement 516",
    "query": "CREATE RULE rule1 AS ON INSERT TO ruletest_v1 DO INSTEAD INSERT INTO ruletest_t2 VALUES (NEW.*)",
    "expected": "CREATE RULE rule1 AS ON INSERT TO ruletest_v1 DO INSTEAD INSERT INTO ruletest_t2 VALUES (new.*)"
  },
  {
    "comment": "rules - Statement 517",
    "query": "SET SESSION AUTHORIZATION regress_rule_user1",
    "expected": "SET SESSION AUTHORIZATION 'regress_rule_user1'"
  },
  {
    "comment": "rules - Statement 518",
    "query": "INSERT INTO ruletest_v1 VALUES (1)"
  },
  {
    "comment": "rules - Statement 519",
    "query": "RESET SESSION AUTHORIZATION",
    "expected": "RESET session_authorization"
  },
  {
    "comment": "rules - Statement 520",
    "query": "CREATE TABLE ruletest_t3 (x int)",
    "expected": "CREATE TABLE ruletest_t3 (x INT)"
  },
  {
    "comment": "rules - Statement 521",
    "query": "CREATE RULE rule2 AS ON UPDATE TO ruletest_t1 DO INSTEAD INSERT INTO ruletest_t2 VALUES (OLD.*)",
    "expected": "CREATE RULE rule2 AS ON UPDATE TO ruletest_t1 DO INSTEAD INSERT INTO ruletest_t2 VALUES (old.*)"
  },
  {
    "comment": "rules - Statement 522",
    "query": "REVOKE ALL ON ruletest_t2 FROM regress_rule_user1"
  },
  {
    "comment": "rules - Statement 523",
    "query": "REVOKE ALL ON ruletest_t3 FROM regress_rule_user1"
  },
  {
    "comment": "rules - Statement 524",
    "query": "ALTER TABLE ruletest_t1 OWNER TO regress_rule_user1"
  },
  {
    "comment": "rules - Statement 525",
    "query": "UPDATE ruletest_t1 t1 SET x = 0 FROM ruletest_t3 t3 WHERE t1.x = t3.x",
    "expected": "UPDATE ruletest_t1 AS t1 SET x = 0 FROM ruletest_t3 AS t3 WHERE t1.x = t3.x"
  },
  {
    "comment": "rules - Statement 526",
    "query": "SELECT * FROM ruletest_t1"
  },
  {
    "comment": "rules - Statement 527",
    "query": "SELECT * FROM ruletest_t2"
  },
  {
    "comment": "rules - Statement 528",
    "query": "DROP VIEW ruletest_v1"
  },
  {
    "comment": "rules - Statement 529",
    "query": "DROP RULE rule2 ON ruletest_t1"
  },
  {
    "comment": "rules - Statement 530",
    "query": "DROP TABLE ruletest_t3"
  },
  {
    "comment": "rules - Statement 531",
    "query": "DROP TABLE ruletest_t2"
  },
  {
    "comment": "rules - Statement 532",
    "query": "DROP TABLE ruletest_t1"
  },
  {
    "comment": "rules - Statement 533",
    "query": "DROP USER regress_rule_user1",
    "expected": "DROP ROLE regress_rule_user1"
  }
]
