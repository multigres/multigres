[
  {
    "comment": "partition_prune - Statement 1",
    "query": "set plan_cache_mode = force_generic_plan"
  },
  {
    "comment": "partition_prune - Statement 2",
    "query": "create table lp (a char) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 3",
    "query": "create table lp_default partition of lp default"
  },
  {
    "comment": "partition_prune - Statement 4",
    "query": "create table lp_ef partition of lp for values in ('e', 'f')"
  },
  {
    "comment": "partition_prune - Statement 5",
    "query": "create table lp_ad partition of lp for values in ('a', 'd')"
  },
  {
    "comment": "partition_prune - Statement 6",
    "query": "create table lp_bc partition of lp for values in ('b', 'c')"
  },
  {
    "comment": "partition_prune - Statement 7",
    "query": "create table lp_g partition of lp for values in ('g')"
  },
  {
    "comment": "partition_prune - Statement 8",
    "query": "create table lp_null partition of lp for values in (null)"
  },
  {
    "comment": "partition_prune - Statement 9",
    "query": "explain (costs off) select * from lp"
  },
  {
    "comment": "partition_prune - Statement 10",
    "query": "explain (costs off) select * from lp where a > 'a' and a < 'd'"
  },
  {
    "comment": "partition_prune - Statement 11",
    "query": "explain (costs off) select * from lp where a > 'a' and a <= 'd'"
  },
  {
    "comment": "partition_prune - Statement 12",
    "query": "explain (costs off) select * from lp where a = 'a'"
  },
  {
    "comment": "partition_prune - Statement 13",
    "query": "explain (costs off) select * from lp where 'a' = a;\t/* commuted */ explain (costs off) select * from lp where a is not null"
  },
  {
    "comment": "partition_prune - Statement 14",
    "query": "explain (costs off) select * from lp where a is null"
  },
  {
    "comment": "partition_prune - Statement 15",
    "query": "explain (costs off) select * from lp where a = 'a' or a = 'c'"
  },
  {
    "comment": "partition_prune - Statement 16",
    "query": "explain (costs off) select * from lp where a is not null and (a = 'a' or a = 'c')"
  },
  {
    "comment": "partition_prune - Statement 17",
    "query": "explain (costs off) select * from lp where a <> 'g'"
  },
  {
    "comment": "partition_prune - Statement 18",
    "query": "explain (costs off) select * from lp where a <> 'a' and a <> 'd'"
  },
  {
    "comment": "partition_prune - Statement 19",
    "query": "explain (costs off) select * from lp where a not in ('a', 'd')"
  },
  {
    "comment": "partition_prune - Statement 20",
    "query": "create table coll_pruning (a text collate \"C\") partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 21",
    "query": "create table coll_pruning_a partition of coll_pruning for values in ('a')"
  },
  {
    "comment": "partition_prune - Statement 22",
    "query": "create table coll_pruning_b partition of coll_pruning for values in ('b')"
  },
  {
    "comment": "partition_prune - Statement 23",
    "query": "create table coll_pruning_def partition of coll_pruning default"
  },
  {
    "comment": "partition_prune - Statement 24",
    "query": "explain (costs off) select * from coll_pruning where a collate \"C\" = 'a' collate \"C\""
  },
  {
    "comment": "partition_prune - Statement 25",
    "query": "explain (costs off) select * from coll_pruning where a collate \"POSIX\" = 'a' collate \"POSIX\""
  },
  {
    "comment": "partition_prune - Statement 26",
    "query": "create table rlp (a int, b varchar) partition by range (a)"
  },
  {
    "comment": "partition_prune - Statement 27",
    "query": "create table rlp_default partition of rlp default partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 28",
    "query": "create table rlp_default_default partition of rlp_default default"
  },
  {
    "comment": "partition_prune - Statement 29",
    "query": "create table rlp_default_10 partition of rlp_default for values in (10)"
  },
  {
    "comment": "partition_prune - Statement 30",
    "query": "create table rlp_default_30 partition of rlp_default for values in (30)"
  },
  {
    "comment": "partition_prune - Statement 31",
    "query": "create table rlp_default_null partition of rlp_default for values in (null)"
  },
  {
    "comment": "partition_prune - Statement 32",
    "query": "create table rlp1 partition of rlp for values from (minvalue) to (1)"
  },
  {
    "comment": "partition_prune - Statement 33",
    "query": "create table rlp2 partition of rlp for values from (1) to (10)"
  },
  {
    "comment": "partition_prune - Statement 34",
    "query": "create table rlp3 (b varchar, a int) partition by list (b varchar_ops)"
  },
  {
    "comment": "partition_prune - Statement 35",
    "query": "create table rlp3_default partition of rlp3 default"
  },
  {
    "comment": "partition_prune - Statement 36",
    "query": "create table rlp3abcd partition of rlp3 for values in ('ab', 'cd')"
  },
  {
    "comment": "partition_prune - Statement 37",
    "query": "create table rlp3efgh partition of rlp3 for values in ('ef', 'gh')"
  },
  {
    "comment": "partition_prune - Statement 38",
    "query": "create table rlp3nullxy partition of rlp3 for values in (null, 'xy')"
  },
  {
    "comment": "partition_prune - Statement 39",
    "query": "alter table rlp attach partition rlp3 for values from (15) to (20)"
  },
  {
    "comment": "partition_prune - Statement 40",
    "query": "create table rlp4 partition of rlp for values from (20) to (30) partition by range (a)"
  },
  {
    "comment": "partition_prune - Statement 41",
    "query": "create table rlp4_default partition of rlp4 default"
  },
  {
    "comment": "partition_prune - Statement 42",
    "query": "create table rlp4_1 partition of rlp4 for values from (20) to (25)"
  },
  {
    "comment": "partition_prune - Statement 43",
    "query": "create table rlp4_2 partition of rlp4 for values from (25) to (29)"
  },
  {
    "comment": "partition_prune - Statement 44",
    "query": "create table rlp5 partition of rlp for values from (31) to (maxvalue) partition by range (a)"
  },
  {
    "comment": "partition_prune - Statement 45",
    "query": "create table rlp5_default partition of rlp5 default"
  },
  {
    "comment": "partition_prune - Statement 46",
    "query": "create table rlp5_1 partition of rlp5 for values from (31) to (40)"
  },
  {
    "comment": "partition_prune - Statement 47",
    "query": "explain (costs off) select * from rlp where a < 1"
  },
  {
    "comment": "partition_prune - Statement 48",
    "query": "explain (costs off) select * from rlp where 1 > a;\t/* commuted */ explain (costs off) select * from rlp where a <= 1"
  },
  {
    "comment": "partition_prune - Statement 49",
    "query": "explain (costs off) select * from rlp where a = 1"
  },
  {
    "comment": "partition_prune - Statement 50",
    "query": "explain (costs off) select * from rlp where a = 1::bigint;\t\t/* same as above */ explain (costs off) select * from rlp where a = 1::numeric;\t\t/* no pruning */ explain (costs off) select * from rlp where a <= 10"
  },
  {
    "comment": "partition_prune - Statement 51",
    "query": "explain (costs off) select * from rlp where a > 10"
  },
  {
    "comment": "partition_prune - Statement 52",
    "query": "explain (costs off) select * from rlp where a < 15"
  },
  {
    "comment": "partition_prune - Statement 53",
    "query": "explain (costs off) select * from rlp where a <= 15"
  },
  {
    "comment": "partition_prune - Statement 54",
    "query": "explain (costs off) select * from rlp where a > 15 and b = 'ab'"
  },
  {
    "comment": "partition_prune - Statement 55",
    "query": "explain (costs off) select * from rlp where a = 16"
  },
  {
    "comment": "partition_prune - Statement 56",
    "query": "explain (costs off) select * from rlp where a = 16 and b in ('not', 'in', 'here')"
  },
  {
    "comment": "partition_prune - Statement 57",
    "query": "explain (costs off) select * from rlp where a = 16 and b < 'ab'"
  },
  {
    "comment": "partition_prune - Statement 58",
    "query": "explain (costs off) select * from rlp where a = 16 and b <= 'ab'"
  },
  {
    "comment": "partition_prune - Statement 59",
    "query": "explain (costs off) select * from rlp where a = 16 and b is null"
  },
  {
    "comment": "partition_prune - Statement 60",
    "query": "explain (costs off) select * from rlp where a = 16 and b is not null"
  },
  {
    "comment": "partition_prune - Statement 61",
    "query": "explain (costs off) select * from rlp where a is null"
  },
  {
    "comment": "partition_prune - Statement 62",
    "query": "explain (costs off) select * from rlp where a is not null"
  },
  {
    "comment": "partition_prune - Statement 63",
    "query": "explain (costs off) select * from rlp where a > 30"
  },
  {
    "comment": "partition_prune - Statement 64",
    "query": "explain (costs off) select * from rlp where a = 30;\t/* only default is scanned */ explain (costs off) select * from rlp where a <= 31"
  },
  {
    "comment": "partition_prune - Statement 65",
    "query": "explain (costs off) select * from rlp where a = 1 or a = 7"
  },
  {
    "comment": "partition_prune - Statement 66",
    "query": "explain (costs off) select * from rlp where a = 1 or b = 'ab'"
  },
  {
    "comment": "partition_prune - Statement 67",
    "query": "explain (costs off) select * from rlp where a > 20 and a < 27"
  },
  {
    "comment": "partition_prune - Statement 68",
    "query": "explain (costs off) select * from rlp where a = 29"
  },
  {
    "comment": "partition_prune - Statement 69",
    "query": "explain (costs off) select * from rlp where a >= 29"
  },
  {
    "comment": "partition_prune - Statement 70",
    "query": "explain (costs off) select * from rlp where a < 1 or (a > 20 and a < 25)"
  },
  {
    "comment": "partition_prune - Statement 71",
    "query": "explain (costs off) select * from rlp where a = 20 or a = 40"
  },
  {
    "comment": "partition_prune - Statement 72",
    "query": "explain (costs off) select * from rlp3 where a = 20;   /* empty */ explain (costs off) select * from rlp where a > 1 and a = 10;\t/* only default */ explain (costs off) select * from rlp where a > 1 and a >=15;\t/* rlp3 onwards, including default */ explain (costs off) select * from rlp where a = 1 and a = 3;\t/* empty */ explain (costs off) select * from rlp where (a = 1 and a = 3) or (a > 1 and a = 15)"
  },
  {
    "comment": "partition_prune - Statement 73",
    "query": "create table mc3p (a int, b int, c int) partition by range (a, abs(b), c)"
  },
  {
    "comment": "partition_prune - Statement 74",
    "query": "create table mc3p_default partition of mc3p default"
  },
  {
    "comment": "partition_prune - Statement 75",
    "query": "create table mc3p0 partition of mc3p for values from (minvalue, minvalue, minvalue) to (1, 1, 1)"
  },
  {
    "comment": "partition_prune - Statement 76",
    "query": "create table mc3p1 partition of mc3p for values from (1, 1, 1) to (10, 5, 10)"
  },
  {
    "comment": "partition_prune - Statement 77",
    "query": "create table mc3p2 partition of mc3p for values from (10, 5, 10) to (10, 10, 10)"
  },
  {
    "comment": "partition_prune - Statement 78",
    "query": "create table mc3p3 partition of mc3p for values from (10, 10, 10) to (10, 10, 20)"
  },
  {
    "comment": "partition_prune - Statement 79",
    "query": "create table mc3p4 partition of mc3p for values from (10, 10, 20) to (10, maxvalue, maxvalue)"
  },
  {
    "comment": "partition_prune - Statement 80",
    "query": "create table mc3p5 partition of mc3p for values from (11, 1, 1) to (20, 10, 10)"
  },
  {
    "comment": "partition_prune - Statement 81",
    "query": "create table mc3p6 partition of mc3p for values from (20, 10, 10) to (20, 20, 20)"
  },
  {
    "comment": "partition_prune - Statement 82",
    "query": "create table mc3p7 partition of mc3p for values from (20, 20, 20) to (maxvalue, maxvalue, maxvalue)"
  },
  {
    "comment": "partition_prune - Statement 83",
    "query": "explain (costs off) select * from mc3p where a = 1"
  },
  {
    "comment": "partition_prune - Statement 84",
    "query": "explain (costs off) select * from mc3p where a = 1 and abs(b) < 1"
  },
  {
    "comment": "partition_prune - Statement 85",
    "query": "explain (costs off) select * from mc3p where a = 1 and abs(b) = 1"
  },
  {
    "comment": "partition_prune - Statement 86",
    "query": "explain (costs off) select * from mc3p where a = 1 and abs(b) = 1 and c < 8"
  },
  {
    "comment": "partition_prune - Statement 87",
    "query": "explain (costs off) select * from mc3p where a = 10 and abs(b) between 5 and 35"
  },
  {
    "comment": "partition_prune - Statement 88",
    "query": "explain (costs off) select * from mc3p where a > 10"
  },
  {
    "comment": "partition_prune - Statement 89",
    "query": "explain (costs off) select * from mc3p where a >= 10"
  },
  {
    "comment": "partition_prune - Statement 90",
    "query": "explain (costs off) select * from mc3p where a < 10"
  },
  {
    "comment": "partition_prune - Statement 91",
    "query": "explain (costs off) select * from mc3p where a <= 10 and abs(b) < 10"
  },
  {
    "comment": "partition_prune - Statement 92",
    "query": "explain (costs off) select * from mc3p where a = 11 and abs(b) = 0"
  },
  {
    "comment": "partition_prune - Statement 93",
    "query": "explain (costs off) select * from mc3p where a = 20 and abs(b) = 10 and c = 100"
  },
  {
    "comment": "partition_prune - Statement 94",
    "query": "explain (costs off) select * from mc3p where a > 20"
  },
  {
    "comment": "partition_prune - Statement 95",
    "query": "explain (costs off) select * from mc3p where a >= 20"
  },
  {
    "comment": "partition_prune - Statement 96",
    "query": "explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1 and c = 1) or (a = 10 and abs(b) = 5 and c = 10) or (a > 11 and a < 20)"
  },
  {
    "comment": "partition_prune - Statement 97",
    "query": "explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1 and c = 1) or (a = 10 and abs(b) = 5 and c = 10) or (a > 11 and a < 20) or a < 1"
  },
  {
    "comment": "partition_prune - Statement 98",
    "query": "explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1 and c = 1) or (a = 10 and abs(b) = 5 and c = 10) or (a > 11 and a < 20) or a < 1 or a = 1"
  },
  {
    "comment": "partition_prune - Statement 99",
    "query": "explain (costs off) select * from mc3p where a = 1 or abs(b) = 1 or c = 1"
  },
  {
    "comment": "partition_prune - Statement 100",
    "query": "explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1) or (a = 10 and abs(b) = 10)"
  },
  {
    "comment": "partition_prune - Statement 101",
    "query": "explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1) or (a = 10 and abs(b) = 9)"
  },
  {
    "comment": "partition_prune - Statement 102",
    "query": "create table mc2p (a int, b int) partition by range (a, b)"
  },
  {
    "comment": "partition_prune - Statement 103",
    "query": "create table mc2p_default partition of mc2p default"
  },
  {
    "comment": "partition_prune - Statement 104",
    "query": "create table mc2p0 partition of mc2p for values from (minvalue, minvalue) to (1, minvalue)"
  },
  {
    "comment": "partition_prune - Statement 105",
    "query": "create table mc2p1 partition of mc2p for values from (1, minvalue) to (1, 1)"
  },
  {
    "comment": "partition_prune - Statement 106",
    "query": "create table mc2p2 partition of mc2p for values from (1, 1) to (2, minvalue)"
  },
  {
    "comment": "partition_prune - Statement 107",
    "query": "create table mc2p3 partition of mc2p for values from (2, minvalue) to (2, 1)"
  },
  {
    "comment": "partition_prune - Statement 108",
    "query": "create table mc2p4 partition of mc2p for values from (2, 1) to (2, maxvalue)"
  },
  {
    "comment": "partition_prune - Statement 109",
    "query": "create table mc2p5 partition of mc2p for values from (2, maxvalue) to (maxvalue, maxvalue)"
  },
  {
    "comment": "partition_prune - Statement 110",
    "query": "explain (costs off) select * from mc2p where a < 2"
  },
  {
    "comment": "partition_prune - Statement 111",
    "query": "explain (costs off) select * from mc2p where a = 2 and b < 1"
  },
  {
    "comment": "partition_prune - Statement 112",
    "query": "explain (costs off) select * from mc2p where a > 1"
  },
  {
    "comment": "partition_prune - Statement 113",
    "query": "explain (costs off) select * from mc2p where a = 1 and b > 1"
  },
  {
    "comment": "partition_prune - Statement 114",
    "query": "explain (costs off) select * from mc2p where a = 1 and b is null"
  },
  {
    "comment": "partition_prune - Statement 115",
    "query": "explain (costs off) select * from mc2p where a is null and b is null"
  },
  {
    "comment": "partition_prune - Statement 116",
    "query": "explain (costs off) select * from mc2p where a is null and b = 1"
  },
  {
    "comment": "partition_prune - Statement 117",
    "query": "explain (costs off) select * from mc2p where a is null"
  },
  {
    "comment": "partition_prune - Statement 118",
    "query": "explain (costs off) select * from mc2p where b is null"
  },
  {
    "comment": "partition_prune - Statement 119",
    "query": "create table boolpart (a bool) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 120",
    "query": "create table boolpart_default partition of boolpart default"
  },
  {
    "comment": "partition_prune - Statement 121",
    "query": "create table boolpart_t partition of boolpart for values in ('true')"
  },
  {
    "comment": "partition_prune - Statement 122",
    "query": "create table boolpart_f partition of boolpart for values in ('false')"
  },
  {
    "comment": "partition_prune - Statement 123",
    "query": "insert into boolpart values (true), (false), (null)"
  },
  {
    "comment": "partition_prune - Statement 124",
    "query": "explain (costs off) select * from boolpart where a in (true, false)"
  },
  {
    "comment": "partition_prune - Statement 125",
    "query": "explain (costs off) select * from boolpart where a = false"
  },
  {
    "comment": "partition_prune - Statement 126",
    "query": "explain (costs off) select * from boolpart where not a = false"
  },
  {
    "comment": "partition_prune - Statement 127",
    "query": "explain (costs off) select * from boolpart where a is true or a is not true"
  },
  {
    "comment": "partition_prune - Statement 128",
    "query": "explain (costs off) select * from boolpart where a is not true"
  },
  {
    "comment": "partition_prune - Statement 129",
    "query": "explain (costs off) select * from boolpart where a is not true and a is not false"
  },
  {
    "comment": "partition_prune - Statement 130",
    "query": "explain (costs off) select * from boolpart where a is unknown"
  },
  {
    "comment": "partition_prune - Statement 131",
    "query": "explain (costs off) select * from boolpart where a is not unknown"
  },
  {
    "comment": "partition_prune - Statement 132",
    "query": "select * from boolpart where a in (true, false)"
  },
  {
    "comment": "partition_prune - Statement 133",
    "query": "select * from boolpart where a = false"
  },
  {
    "comment": "partition_prune - Statement 134",
    "query": "select * from boolpart where not a = false"
  },
  {
    "comment": "partition_prune - Statement 135",
    "query": "select * from boolpart where a is true or a is not true"
  },
  {
    "comment": "partition_prune - Statement 136",
    "query": "select * from boolpart where a is not true"
  },
  {
    "comment": "partition_prune - Statement 137",
    "query": "select * from boolpart where a is not true and a is not false"
  },
  {
    "comment": "partition_prune - Statement 138",
    "query": "select * from boolpart where a is unknown"
  },
  {
    "comment": "partition_prune - Statement 139",
    "query": "select * from boolpart where a is not unknown"
  },
  {
    "comment": "partition_prune - Statement 140",
    "query": "delete from boolpart where a is null"
  },
  {
    "comment": "partition_prune - Statement 141",
    "query": "create table boolpart_null partition of boolpart for values in (null)"
  },
  {
    "comment": "partition_prune - Statement 142",
    "query": "insert into boolpart values(null)"
  },
  {
    "comment": "partition_prune - Statement 143",
    "query": "explain (costs off) select * from boolpart where a is not false"
  },
  {
    "comment": "partition_prune - Statement 144",
    "query": "select * from boolpart where a is not false"
  },
  {
    "comment": "partition_prune - Statement 145",
    "query": "explain (costs off) select * from boolpart where a is not unknown and a is unknown"
  },
  {
    "comment": "partition_prune - Statement 146",
    "query": "explain (costs off) select * from boolpart where a is false and a is unknown"
  },
  {
    "comment": "partition_prune - Statement 147",
    "query": "explain (costs off) select * from boolpart where a is true and a is unknown"
  },
  {
    "comment": "partition_prune - Statement 148",
    "query": "create table iboolpart (a bool) partition by list ((not a))"
  },
  {
    "comment": "partition_prune - Statement 149",
    "query": "create table iboolpart_default partition of iboolpart default"
  },
  {
    "comment": "partition_prune - Statement 150",
    "query": "create table iboolpart_f partition of iboolpart for values in ('true')"
  },
  {
    "comment": "partition_prune - Statement 151",
    "query": "create table iboolpart_t partition of iboolpart for values in ('false')"
  },
  {
    "comment": "partition_prune - Statement 152",
    "query": "insert into iboolpart values (true), (false), (null)"
  },
  {
    "comment": "partition_prune - Statement 153",
    "query": "explain (costs off) select * from iboolpart where a in (true, false)"
  },
  {
    "comment": "partition_prune - Statement 154",
    "query": "explain (costs off) select * from iboolpart where a = false"
  },
  {
    "comment": "partition_prune - Statement 155",
    "query": "explain (costs off) select * from iboolpart where not a = false"
  },
  {
    "comment": "partition_prune - Statement 156",
    "query": "explain (costs off) select * from iboolpart where a is true or a is not true"
  },
  {
    "comment": "partition_prune - Statement 157",
    "query": "explain (costs off) select * from iboolpart where a is not true"
  },
  {
    "comment": "partition_prune - Statement 158",
    "query": "explain (costs off) select * from iboolpart where a is not true and a is not false"
  },
  {
    "comment": "partition_prune - Statement 159",
    "query": "explain (costs off) select * from iboolpart where a is unknown"
  },
  {
    "comment": "partition_prune - Statement 160",
    "query": "explain (costs off) select * from iboolpart where a is not unknown"
  },
  {
    "comment": "partition_prune - Statement 161",
    "query": "select * from iboolpart where a in (true, false)"
  },
  {
    "comment": "partition_prune - Statement 162",
    "query": "select * from iboolpart where a = false"
  },
  {
    "comment": "partition_prune - Statement 163",
    "query": "select * from iboolpart where not a = false"
  },
  {
    "comment": "partition_prune - Statement 164",
    "query": "select * from iboolpart where a is true or a is not true"
  },
  {
    "comment": "partition_prune - Statement 165",
    "query": "select * from iboolpart where a is not true"
  },
  {
    "comment": "partition_prune - Statement 166",
    "query": "select * from iboolpart where a is not true and a is not false"
  },
  {
    "comment": "partition_prune - Statement 167",
    "query": "select * from iboolpart where a is unknown"
  },
  {
    "comment": "partition_prune - Statement 168",
    "query": "select * from iboolpart where a is not unknown"
  },
  {
    "comment": "partition_prune - Statement 169",
    "query": "delete from iboolpart where a is null"
  },
  {
    "comment": "partition_prune - Statement 170",
    "query": "create table iboolpart_null partition of iboolpart for values in (null)"
  },
  {
    "comment": "partition_prune - Statement 171",
    "query": "insert into iboolpart values(null)"
  },
  {
    "comment": "partition_prune - Statement 172",
    "query": "select * from iboolpart where a is not false"
  },
  {
    "comment": "partition_prune - Statement 173",
    "query": "create table boolrangep (a bool, b bool, c int) partition by range (a,b,c)"
  },
  {
    "comment": "partition_prune - Statement 174",
    "query": "create table boolrangep_tf partition of boolrangep for values from ('true', 'false', 0) to ('true', 'false', 100)"
  },
  {
    "comment": "partition_prune - Statement 175",
    "query": "create table boolrangep_ft partition of boolrangep for values from ('false', 'true', 0) to ('false', 'true', 100)"
  },
  {
    "comment": "partition_prune - Statement 176",
    "query": "create table boolrangep_ff1 partition of boolrangep for values from ('false', 'false', 0) to ('false', 'false', 50)"
  },
  {
    "comment": "partition_prune - Statement 177",
    "query": "create table boolrangep_ff2 partition of boolrangep for values from ('false', 'false', 50) to ('false', 'false', 100)"
  },
  {
    "comment": "partition_prune - Statement 178",
    "query": "create table boolrangep_null partition of boolrangep default"
  },
  {
    "comment": "partition_prune - Statement 179",
    "query": "explain (costs off)  select * from boolrangep where not a and not b and c = 25"
  },
  {
    "comment": "partition_prune - Statement 180",
    "query": "explain (costs off)  select * from boolrangep where a is not true and not b and c = 25"
  },
  {
    "comment": "partition_prune - Statement 181",
    "query": "explain (costs off)  select * from boolrangep where a is not false and not b and c = 25"
  },
  {
    "comment": "partition_prune - Statement 182",
    "query": "create table coercepart (a varchar) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 183",
    "query": "create table coercepart_ab partition of coercepart for values in ('ab')"
  },
  {
    "comment": "partition_prune - Statement 184",
    "query": "create table coercepart_bc partition of coercepart for values in ('bc')"
  },
  {
    "comment": "partition_prune - Statement 185",
    "query": "create table coercepart_cd partition of coercepart for values in ('cd')"
  },
  {
    "comment": "partition_prune - Statement 186",
    "query": "explain (costs off) select * from coercepart where a in ('ab', to_char(125, '999'))"
  },
  {
    "comment": "partition_prune - Statement 187",
    "query": "explain (costs off) select * from coercepart where a ~ any ('{ab}')"
  },
  {
    "comment": "partition_prune - Statement 188",
    "query": "explain (costs off) select * from coercepart where a !~ all ('{ab}')"
  },
  {
    "comment": "partition_prune - Statement 189",
    "query": "explain (costs off) select * from coercepart where a ~ any ('{ab,bc}')"
  },
  {
    "comment": "partition_prune - Statement 190",
    "query": "explain (costs off) select * from coercepart where a !~ all ('{ab,bc}')"
  },
  {
    "comment": "partition_prune - Statement 191",
    "query": "explain (costs off) select * from coercepart where a = any ('{ab,bc}')"
  },
  {
    "comment": "partition_prune - Statement 192",
    "query": "explain (costs off) select * from coercepart where a = any ('{ab,null}')"
  },
  {
    "comment": "partition_prune - Statement 193",
    "query": "explain (costs off) select * from coercepart where a = any (null::text[])"
  },
  {
    "comment": "partition_prune - Statement 194",
    "query": "explain (costs off) select * from coercepart where a = all ('{ab}')"
  },
  {
    "comment": "partition_prune - Statement 195",
    "query": "explain (costs off) select * from coercepart where a = all ('{ab,bc}')"
  },
  {
    "comment": "partition_prune - Statement 196",
    "query": "explain (costs off) select * from coercepart where a = all ('{ab,null}')"
  },
  {
    "comment": "partition_prune - Statement 197",
    "query": "explain (costs off) select * from coercepart where a = all (null::text[])"
  },
  {
    "comment": "partition_prune - Statement 198",
    "query": "drop table coercepart"
  },
  {
    "comment": "partition_prune - Statement 199",
    "query": "CREATE TABLE part (a INT, b INT) PARTITION BY LIST (a)"
  },
  {
    "comment": "partition_prune - Statement 200",
    "query": "CREATE TABLE part_p1 PARTITION OF part FOR VALUES IN (-2,-1,0,1,2)"
  },
  {
    "comment": "partition_prune - Statement 201",
    "query": "CREATE TABLE part_p2 PARTITION OF part DEFAULT PARTITION BY RANGE(a)"
  },
  {
    "comment": "partition_prune - Statement 202",
    "query": "CREATE TABLE part_p2_p1 PARTITION OF part_p2 DEFAULT"
  },
  {
    "comment": "partition_prune - Statement 203",
    "query": "CREATE TABLE part_rev (b INT, c INT, a INT)"
  },
  {
    "comment": "partition_prune - Statement 204",
    "query": "ALTER TABLE part ATTACH PARTITION part_rev FOR VALUES IN (3)"
  },
  {
    "comment": "partition_prune - Statement 205",
    "query": "ALTER TABLE part_rev DROP COLUMN c"
  },
  {
    "comment": "partition_prune - Statement 206",
    "query": "INSERT INTO part VALUES (-1,-1), (1,1), (2,NULL), (NULL,-2),(NULL,NULL)"
  },
  {
    "comment": "partition_prune - Statement 207",
    "query": "EXPLAIN (COSTS OFF) SELECT tableoid::regclass as part, a, b FROM part WHERE a IS NULL ORDER BY 1, 2, 3"
  },
  {
    "comment": "partition_prune - Statement 208",
    "query": "EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM part p(x) ORDER BY x"
  },
  {
    "comment": "partition_prune - Statement 209",
    "query": "explain (costs off) select * from mc2p t1, lateral (select count(*) from mc3p t2 where t2.a = t1.b and abs(t2.b) = 1 and t2.c = 1) s where t1.a = 1"
  },
  {
    "comment": "partition_prune - Statement 210",
    "query": "explain (costs off) select * from mc2p t1, lateral (select count(*) from mc3p t2 where t2.c = t1.b and abs(t2.b) = 1 and t2.a = 1) s where t1.a = 1"
  },
  {
    "comment": "partition_prune - Statement 211",
    "query": "explain (costs off) select * from mc2p t1, lateral (select count(*) from mc3p t2 where t2.a = 1 and abs(t2.b) = 1 and t2.c = 1) s where t1.a = 1"
  },
  {
    "comment": "partition_prune - Statement 212",
    "query": "create table rp (a int) partition by range (a)"
  },
  {
    "comment": "partition_prune - Statement 213",
    "query": "create table rp0 partition of rp for values from (minvalue) to (1)"
  },
  {
    "comment": "partition_prune - Statement 214",
    "query": "create table rp1 partition of rp for values from (1) to (2)"
  },
  {
    "comment": "partition_prune - Statement 215",
    "query": "create table rp2 partition of rp for values from (2) to (maxvalue)"
  },
  {
    "comment": "partition_prune - Statement 216",
    "query": "explain (costs off) select * from rp where a <> 1"
  },
  {
    "comment": "partition_prune - Statement 217",
    "query": "explain (costs off) select * from rp where a <> 1 and a <> 2"
  },
  {
    "comment": "partition_prune - Statement 218",
    "query": "explain (costs off) select * from lp where a <> 'a'"
  },
  {
    "comment": "partition_prune - Statement 219",
    "query": "explain (costs off) select * from lp where a <> 'a' and a is null"
  },
  {
    "comment": "partition_prune - Statement 220",
    "query": "explain (costs off) select * from lp where (a <> 'a' and a <> 'd') or a is null"
  },
  {
    "comment": "partition_prune - Statement 221",
    "query": "explain (costs off) select * from rlp where a = 15 and b <> 'ab' and b <> 'cd' and b <> 'xy' and b is not null"
  },
  {
    "comment": "partition_prune - Statement 222",
    "query": "create table coll_pruning_multi (a text) partition by range (substr(a, 1) collate \"POSIX\", substr(a, 1) collate \"C\")"
  },
  {
    "comment": "partition_prune - Statement 223",
    "query": "create table coll_pruning_multi1 partition of coll_pruning_multi for values from ('a', 'a') to ('a', 'e')"
  },
  {
    "comment": "partition_prune - Statement 224",
    "query": "create table coll_pruning_multi2 partition of coll_pruning_multi for values from ('a', 'e') to ('a', 'z')"
  },
  {
    "comment": "partition_prune - Statement 225",
    "query": "create table coll_pruning_multi3 partition of coll_pruning_multi for values from ('b', 'a') to ('b', 'e')"
  },
  {
    "comment": "partition_prune - Statement 226",
    "query": "explain (costs off) select * from coll_pruning_multi where substr(a, 1) = 'e' collate \"C\""
  },
  {
    "comment": "partition_prune - Statement 227",
    "query": "explain (costs off) select * from coll_pruning_multi where substr(a, 1) = 'a' collate \"POSIX\""
  },
  {
    "comment": "partition_prune - Statement 228",
    "query": "explain (costs off) select * from coll_pruning_multi where substr(a, 1) = 'e' collate \"C\" and substr(a, 1) = 'a' collate \"POSIX\""
  },
  {
    "comment": "partition_prune - Statement 229",
    "query": "create table like_op_noprune (a text) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 230",
    "query": "create table like_op_noprune1 partition of like_op_noprune for values in ('ABC')"
  },
  {
    "comment": "partition_prune - Statement 231",
    "query": "create table like_op_noprune2 partition of like_op_noprune for values in ('BCD')"
  },
  {
    "comment": "partition_prune - Statement 232",
    "query": "explain (costs off) select * from like_op_noprune where a like '%BC'"
  },
  {
    "comment": "partition_prune - Statement 233",
    "query": "create table lparted_by_int2 (a smallint) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 234",
    "query": "create table lparted_by_int2_1 partition of lparted_by_int2 for values in (1)"
  },
  {
    "comment": "partition_prune - Statement 235",
    "query": "create table lparted_by_int2_16384 partition of lparted_by_int2 for values in (16384)"
  },
  {
    "comment": "partition_prune - Statement 236",
    "query": "explain (costs off) select * from lparted_by_int2 where a = 100_000_000_000_000"
  },
  {
    "comment": "partition_prune - Statement 237",
    "query": "create table rparted_by_int2 (a smallint) partition by range (a)"
  },
  {
    "comment": "partition_prune - Statement 238",
    "query": "create table rparted_by_int2_1 partition of rparted_by_int2 for values from (1) to (10)"
  },
  {
    "comment": "partition_prune - Statement 239",
    "query": "create table rparted_by_int2_16384 partition of rparted_by_int2 for values from (10) to (16384)"
  },
  {
    "comment": "partition_prune - Statement 240",
    "query": "explain (costs off) select * from rparted_by_int2 where a > 100_000_000_000_000"
  },
  {
    "comment": "partition_prune - Statement 241",
    "query": "create table rparted_by_int2_maxvalue partition of rparted_by_int2 for values from (16384) to (maxvalue)"
  },
  {
    "comment": "partition_prune - Statement 242",
    "query": "drop table lp, coll_pruning, rlp, mc3p, mc2p, boolpart, iboolpart, boolrangep, rp, coll_pruning_multi, like_op_noprune, lparted_by_int2, rparted_by_int2"
  },
  {
    "comment": "partition_prune - Statement 243",
    "query": "create table asptab (id int primary key) partition by range (id)"
  },
  {
    "comment": "partition_prune - Statement 244",
    "query": "create table asptab0 partition of asptab for values from (0) to (1)"
  },
  {
    "comment": "partition_prune - Statement 245",
    "query": "create table asptab1 partition of asptab for values from (1) to (2)"
  },
  {
    "comment": "partition_prune - Statement 246",
    "query": "explain (costs off) select * from (select exists (select 1 from int4_tbl tinner where f1 = touter.f1) as b from int4_tbl touter) ss, asptab where asptab.id > ss.b::int"
  },
  {
    "comment": "partition_prune - Statement 247",
    "query": "drop table asptab"
  },
  {
    "comment": "partition_prune - Statement 248",
    "query": "create table hp (a int, b text, c int) partition by hash (a part_test_int4_ops, b part_test_text_ops)"
  },
  {
    "comment": "partition_prune - Statement 249",
    "query": "create table hp0 partition of hp for values with (modulus 4, remainder 0)"
  },
  {
    "comment": "partition_prune - Statement 250",
    "query": "create table hp3 partition of hp for values with (modulus 4, remainder 3)"
  },
  {
    "comment": "partition_prune - Statement 251",
    "query": "create table hp1 partition of hp for values with (modulus 4, remainder 1)"
  },
  {
    "comment": "partition_prune - Statement 252",
    "query": "create table hp2 partition of hp for values with (modulus 4, remainder 2)"
  },
  {
    "comment": "partition_prune - Statement 253",
    "query": "insert into hp values (null, null, 0)"
  },
  {
    "comment": "partition_prune - Statement 254",
    "query": "insert into hp values (1, null, 1)"
  },
  {
    "comment": "partition_prune - Statement 255",
    "query": "insert into hp values (1, 'xxx', 2)"
  },
  {
    "comment": "partition_prune - Statement 256",
    "query": "insert into hp values (null, 'xxx', 3)"
  },
  {
    "comment": "partition_prune - Statement 257",
    "query": "insert into hp values (2, 'xxx', 4)"
  },
  {
    "comment": "partition_prune - Statement 258",
    "query": "insert into hp values (1, 'abcde', 5)"
  },
  {
    "comment": "partition_prune - Statement 259",
    "query": "select tableoid::regclass, * from hp order by c"
  },
  {
    "comment": "partition_prune - Statement 260",
    "query": "explain (costs off) select * from hp where a = 1"
  },
  {
    "comment": "partition_prune - Statement 261",
    "query": "explain (costs off) select * from hp where b = 'xxx'"
  },
  {
    "comment": "partition_prune - Statement 262",
    "query": "explain (costs off) select * from hp where a is null"
  },
  {
    "comment": "partition_prune - Statement 263",
    "query": "explain (costs off) select * from hp where b is null"
  },
  {
    "comment": "partition_prune - Statement 264",
    "query": "explain (costs off) select * from hp where a < 1 and b = 'xxx'"
  },
  {
    "comment": "partition_prune - Statement 265",
    "query": "explain (costs off) select * from hp where a <> 1 and b = 'yyy'"
  },
  {
    "comment": "partition_prune - Statement 266",
    "query": "explain (costs off) select * from hp where a <> 1 and b <> 'xxx'"
  },
  {
    "comment": "partition_prune - Statement 267",
    "query": "explain (costs off) select * from hp where a is null and b is null"
  },
  {
    "comment": "partition_prune - Statement 268",
    "query": "explain (costs off) select * from hp where a = 1 and b is null"
  },
  {
    "comment": "partition_prune - Statement 269",
    "query": "explain (costs off) select * from hp where a = 1 and b = 'xxx'"
  },
  {
    "comment": "partition_prune - Statement 270",
    "query": "explain (costs off) select * from hp where a is null and b = 'xxx'"
  },
  {
    "comment": "partition_prune - Statement 271",
    "query": "explain (costs off) select * from hp where a = 2 and b = 'xxx'"
  },
  {
    "comment": "partition_prune - Statement 272",
    "query": "explain (costs off) select * from hp where a = 1 and b = 'abcde'"
  },
  {
    "comment": "partition_prune - Statement 273",
    "query": "explain (costs off) select * from hp where (a = 1 and b = 'abcde') or (a = 2 and b = 'xxx') or (a is null and b is null)"
  },
  {
    "comment": "partition_prune - Statement 274",
    "query": "drop table hp1"
  },
  {
    "comment": "partition_prune - Statement 275",
    "query": "drop table hp3"
  },
  {
    "comment": "partition_prune - Statement 276",
    "query": "explain (costs off) select * from hp where a = 1 and b = 'abcde' and (c = 2 or c = 3)"
  },
  {
    "comment": "partition_prune - Statement 277",
    "query": "drop table hp2"
  },
  {
    "comment": "partition_prune - Statement 278",
    "query": "create table ab (a int not null, b int not null) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 279",
    "query": "create table ab_a2 partition of ab for values in(2) partition by list (b)"
  },
  {
    "comment": "partition_prune - Statement 280",
    "query": "create table ab_a2_b1 partition of ab_a2 for values in (1)"
  },
  {
    "comment": "partition_prune - Statement 281",
    "query": "create table ab_a2_b2 partition of ab_a2 for values in (2)"
  },
  {
    "comment": "partition_prune - Statement 282",
    "query": "create table ab_a2_b3 partition of ab_a2 for values in (3)"
  },
  {
    "comment": "partition_prune - Statement 283",
    "query": "create table ab_a1 partition of ab for values in(1) partition by list (b)"
  },
  {
    "comment": "partition_prune - Statement 284",
    "query": "create table ab_a1_b1 partition of ab_a1 for values in (1)"
  },
  {
    "comment": "partition_prune - Statement 285",
    "query": "create table ab_a1_b2 partition of ab_a1 for values in (2)"
  },
  {
    "comment": "partition_prune - Statement 286",
    "query": "create table ab_a1_b3 partition of ab_a1 for values in (3)"
  },
  {
    "comment": "partition_prune - Statement 287",
    "query": "create table ab_a3 partition of ab for values in(3) partition by list (b)"
  },
  {
    "comment": "partition_prune - Statement 288",
    "query": "create table ab_a3_b1 partition of ab_a3 for values in (1)"
  },
  {
    "comment": "partition_prune - Statement 289",
    "query": "create table ab_a3_b2 partition of ab_a3 for values in (2)"
  },
  {
    "comment": "partition_prune - Statement 290",
    "query": "create table ab_a3_b3 partition of ab_a3 for values in (3)"
  },
  {
    "comment": "partition_prune - Statement 291",
    "query": "set enable_indexonlyscan = off"
  },
  {
    "comment": "partition_prune - Statement 292",
    "query": "prepare ab_q1 (int, int, int) as select * from ab where a between $1 and $2 and b <= $3"
  },
  {
    "comment": "partition_prune - Statement 293",
    "query": "explain (analyze, costs off, summary off, timing off) execute ab_q1 (2, 2, 3)"
  },
  {
    "comment": "partition_prune - Statement 294",
    "query": "explain (analyze, costs off, summary off, timing off) execute ab_q1 (1, 2, 3)"
  },
  {
    "comment": "partition_prune - Statement 295",
    "query": "deallocate ab_q1"
  },
  {
    "comment": "partition_prune - Statement 296",
    "query": "prepare ab_q1 (int, int) as select a from ab where a between $1 and $2 and b < 3"
  },
  {
    "comment": "partition_prune - Statement 297",
    "query": "explain (analyze, costs off, summary off, timing off) execute ab_q1 (2, 2)"
  },
  {
    "comment": "partition_prune - Statement 298",
    "query": "explain (analyze, costs off, summary off, timing off) execute ab_q1 (2, 4)"
  },
  {
    "comment": "partition_prune - Statement 299",
    "query": "prepare ab_q2 (int, int) as select a from ab where a between $1 and $2 and b < (select 3)"
  },
  {
    "comment": "partition_prune - Statement 300",
    "query": "explain (analyze, costs off, summary off, timing off) execute ab_q2 (2, 2)"
  },
  {
    "comment": "partition_prune - Statement 301",
    "query": "prepare ab_q3 (int, int) as select a from ab where b between $1 and $2 and a < (select 3)"
  },
  {
    "comment": "partition_prune - Statement 302",
    "query": "explain (analyze, costs off, summary off, timing off) execute ab_q3 (2, 2)"
  },
  {
    "comment": "partition_prune - Statement 303",
    "query": "prepare hp_q1 (text) as select * from hp where a is null and b = $1"
  },
  {
    "comment": "partition_prune - Statement 304",
    "query": "explain (costs off) execute hp_q1('xxx')"
  },
  {
    "comment": "partition_prune - Statement 305",
    "query": "deallocate hp_q1"
  },
  {
    "comment": "partition_prune - Statement 306",
    "query": "drop table hp"
  },
  {
    "comment": "partition_prune - Statement 307",
    "query": "create table list_part (a int) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 308",
    "query": "create table list_part1 partition of list_part for values in (1)"
  },
  {
    "comment": "partition_prune - Statement 309",
    "query": "create table list_part2 partition of list_part for values in (2)"
  },
  {
    "comment": "partition_prune - Statement 310",
    "query": "create table list_part3 partition of list_part for values in (3)"
  },
  {
    "comment": "partition_prune - Statement 311",
    "query": "create table list_part4 partition of list_part for values in (4)"
  },
  {
    "comment": "partition_prune - Statement 312",
    "query": "insert into list_part select generate_series(1,4)"
  },
  {
    "comment": "partition_prune - Statement 313",
    "query": "begin"
  },
  {
    "comment": "partition_prune - Statement 314",
    "query": "declare cur SCROLL CURSOR for select 1 from list_part where a > (select 1) and a < (select 4)"
  },
  {
    "comment": "partition_prune - Statement 315",
    "query": "move 3 from cur"
  },
  {
    "comment": "partition_prune - Statement 316",
    "query": "fetch backward all from cur"
  },
  {
    "comment": "partition_prune - Statement 317",
    "query": "commit"
  },
  {
    "comment": "partition_prune - Statement 318",
    "query": "create function list_part_fn(int) returns int as $$ begin return $1; end;$$ language plpgsql stable"
  },
  {
    "comment": "partition_prune - Statement 319",
    "query": "explain (analyze, costs off, summary off, timing off) select * from list_part where a = list_part_fn(1)"
  },
  {
    "comment": "partition_prune - Statement 320",
    "query": "explain (analyze, costs off, summary off, timing off) select * from list_part where a = list_part_fn(a)"
  },
  {
    "comment": "partition_prune - Statement 321",
    "query": "explain (analyze, costs off, summary off, timing off) select * from list_part where a = list_part_fn(1) + a"
  },
  {
    "comment": "partition_prune - Statement 322",
    "query": "rollback"
  },
  {
    "comment": "partition_prune - Statement 323",
    "query": "drop table list_part"
  },
  {
    "comment": "partition_prune - Statement 324",
    "query": "create function explain_parallel_append(text) returns setof text language plpgsql as $$ declare ln text"
  },
  {
    "comment": "partition_prune - Statement 325",
    "query": "begin for ln in execute format('explain (analyze, costs off, summary off, timing off) %s', $1) loop ln := regexp_replace(ln, 'Workers Launched: \\d+', 'Workers Launched: N')"
  },
  {
    "comment": "partition_prune - Statement 326",
    "query": "ln := regexp_replace(ln, 'actual rows=\\d+ loops=\\d+', 'actual rows=N loops=N')"
  },
  {
    "comment": "partition_prune - Statement 327",
    "query": "ln := regexp_replace(ln, 'Rows Removed by Filter: \\d+', 'Rows Removed by Filter: N')"
  },
  {
    "comment": "partition_prune - Statement 328",
    "query": "return next ln"
  },
  {
    "comment": "partition_prune - Statement 329",
    "query": "end loop"
  },
  {
    "comment": "partition_prune - Statement 330",
    "query": "end"
  },
  {
    "comment": "partition_prune - Statement 331",
    "query": "$$"
  },
  {
    "comment": "partition_prune - Statement 332",
    "query": "prepare ab_q4 (int, int) as select avg(a) from ab where a between $1 and $2 and b < 4"
  },
  {
    "comment": "partition_prune - Statement 333",
    "query": "set parallel_setup_cost = 0"
  },
  {
    "comment": "partition_prune - Statement 334",
    "query": "set parallel_tuple_cost = 0"
  },
  {
    "comment": "partition_prune - Statement 335",
    "query": "set min_parallel_table_scan_size = 0"
  },
  {
    "comment": "partition_prune - Statement 336",
    "query": "set max_parallel_workers_per_gather = 2"
  },
  {
    "comment": "partition_prune - Statement 337",
    "query": "select explain_parallel_append('execute ab_q4 (2, 2)')"
  },
  {
    "comment": "partition_prune - Statement 338",
    "query": "prepare ab_q5 (int, int, int) as select avg(a) from ab where a in($1,$2,$3) and b < 4"
  },
  {
    "comment": "partition_prune - Statement 339",
    "query": "select explain_parallel_append('execute ab_q5 (1, 1, 1)')"
  },
  {
    "comment": "partition_prune - Statement 340",
    "query": "select explain_parallel_append('execute ab_q5 (2, 3, 3)')"
  },
  {
    "comment": "partition_prune - Statement 341",
    "query": "select explain_parallel_append('execute ab_q5 (33, 44, 55)')"
  },
  {
    "comment": "partition_prune - Statement 342",
    "query": "select explain_parallel_append('select count(*) from ab where (a = (select 1) or a = (select 3)) and b = 2')"
  },
  {
    "comment": "partition_prune - Statement 343",
    "query": "create table lprt_a (a int not null)"
  },
  {
    "comment": "partition_prune - Statement 344",
    "query": "insert into lprt_a select 0 from generate_series(1,100)"
  },
  {
    "comment": "partition_prune - Statement 345",
    "query": "insert into lprt_a values(1),(1)"
  },
  {
    "comment": "partition_prune - Statement 346",
    "query": "analyze lprt_a"
  },
  {
    "comment": "partition_prune - Statement 347",
    "query": "create index ab_a2_b1_a_idx on ab_a2_b1 (a)"
  },
  {
    "comment": "partition_prune - Statement 348",
    "query": "create index ab_a2_b2_a_idx on ab_a2_b2 (a)"
  },
  {
    "comment": "partition_prune - Statement 349",
    "query": "create index ab_a2_b3_a_idx on ab_a2_b3 (a)"
  },
  {
    "comment": "partition_prune - Statement 350",
    "query": "create index ab_a1_b1_a_idx on ab_a1_b1 (a)"
  },
  {
    "comment": "partition_prune - Statement 351",
    "query": "create index ab_a1_b2_a_idx on ab_a1_b2 (a)"
  },
  {
    "comment": "partition_prune - Statement 352",
    "query": "create index ab_a1_b3_a_idx on ab_a1_b3 (a)"
  },
  {
    "comment": "partition_prune - Statement 353",
    "query": "create index ab_a3_b1_a_idx on ab_a3_b1 (a)"
  },
  {
    "comment": "partition_prune - Statement 354",
    "query": "create index ab_a3_b2_a_idx on ab_a3_b2 (a)"
  },
  {
    "comment": "partition_prune - Statement 355",
    "query": "create index ab_a3_b3_a_idx on ab_a3_b3 (a)"
  },
  {
    "comment": "partition_prune - Statement 356",
    "query": "set enable_hashjoin = 0"
  },
  {
    "comment": "partition_prune - Statement 357",
    "query": "set enable_mergejoin = 0"
  },
  {
    "comment": "partition_prune - Statement 358",
    "query": "set enable_memoize = 0"
  },
  {
    "comment": "partition_prune - Statement 359",
    "query": "select explain_parallel_append('select avg(ab.a) from ab inner join lprt_a a on ab.a = a.a where a.a in(0, 0, 1)')"
  },
  {
    "comment": "partition_prune - Statement 360",
    "query": "select explain_parallel_append('select avg(ab.a) from ab inner join lprt_a a on ab.a = a.a + 0 where a.a in(0, 0, 1)')"
  },
  {
    "comment": "partition_prune - Statement 361",
    "query": "insert into lprt_a values(3),(3)"
  },
  {
    "comment": "partition_prune - Statement 362",
    "query": "select explain_parallel_append('select avg(ab.a) from ab inner join lprt_a a on ab.a = a.a where a.a in(1, 0, 3)')"
  },
  {
    "comment": "partition_prune - Statement 363",
    "query": "select explain_parallel_append('select avg(ab.a) from ab inner join lprt_a a on ab.a = a.a where a.a in(1, 0, 0)')"
  },
  {
    "comment": "partition_prune - Statement 364",
    "query": "delete from lprt_a where a = 1"
  },
  {
    "comment": "partition_prune - Statement 365",
    "query": "reset enable_hashjoin"
  },
  {
    "comment": "partition_prune - Statement 366",
    "query": "reset enable_mergejoin"
  },
  {
    "comment": "partition_prune - Statement 367",
    "query": "reset enable_memoize"
  },
  {
    "comment": "partition_prune - Statement 368",
    "query": "reset parallel_setup_cost"
  },
  {
    "comment": "partition_prune - Statement 369",
    "query": "reset parallel_tuple_cost"
  },
  {
    "comment": "partition_prune - Statement 370",
    "query": "reset min_parallel_table_scan_size"
  },
  {
    "comment": "partition_prune - Statement 371",
    "query": "reset max_parallel_workers_per_gather"
  },
  {
    "comment": "partition_prune - Statement 372",
    "query": "explain (analyze, costs off, summary off, timing off) select * from ab where a = (select max(a) from lprt_a) and b = (select max(a)-1 from lprt_a)"
  },
  {
    "comment": "partition_prune - Statement 373",
    "query": "explain (analyze, costs off, summary off, timing off) select * from (select * from ab where a = 1 union all select * from ab) ab where b = (select 1)"
  },
  {
    "comment": "partition_prune - Statement 374",
    "query": "explain (analyze, costs off, summary off, timing off) select * from (select * from ab where a = 1 union all (values(10,5)) union all select * from ab) ab where b = (select 1)"
  },
  {
    "comment": "partition_prune - Statement 375",
    "query": "create table xy_1 (x int, y int)"
  },
  {
    "comment": "partition_prune - Statement 376",
    "query": "insert into xy_1 values(100,-10)"
  },
  {
    "comment": "partition_prune - Statement 377",
    "query": "set enable_bitmapscan = 0"
  },
  {
    "comment": "partition_prune - Statement 378",
    "query": "set enable_indexscan = 0"
  },
  {
    "comment": "partition_prune - Statement 379",
    "query": "prepare ab_q6 as select * from ( select tableoid::regclass,a,b from ab union all select tableoid::regclass,x,y from xy_1 union all select tableoid::regclass,a,b from ab ) ab where a = $1 and b = (select -10)"
  },
  {
    "comment": "partition_prune - Statement 380",
    "query": "explain (analyze, costs off, summary off, timing off) execute ab_q6(1)"
  },
  {
    "comment": "partition_prune - Statement 381",
    "query": "execute ab_q6(100)"
  },
  {
    "comment": "partition_prune - Statement 382",
    "query": "reset enable_bitmapscan"
  },
  {
    "comment": "partition_prune - Statement 383",
    "query": "reset enable_indexscan"
  },
  {
    "comment": "partition_prune - Statement 384",
    "query": "deallocate ab_q2"
  },
  {
    "comment": "partition_prune - Statement 385",
    "query": "deallocate ab_q3"
  },
  {
    "comment": "partition_prune - Statement 386",
    "query": "deallocate ab_q4"
  },
  {
    "comment": "partition_prune - Statement 387",
    "query": "deallocate ab_q5"
  },
  {
    "comment": "partition_prune - Statement 388",
    "query": "deallocate ab_q6"
  },
  {
    "comment": "partition_prune - Statement 389",
    "query": "insert into ab values (1,2)"
  },
  {
    "comment": "partition_prune - Statement 390",
    "query": "explain (analyze, costs off, summary off, timing off) update ab_a1 set b = 3 from ab where ab.a = 1 and ab.a = ab_a1.a"
  },
  {
    "comment": "partition_prune - Statement 391",
    "query": "table ab"
  },
  {
    "comment": "partition_prune - Statement 392",
    "query": "truncate ab"
  },
  {
    "comment": "partition_prune - Statement 393",
    "query": "insert into ab values (1, 1), (1, 2), (1, 3), (2, 1)"
  },
  {
    "comment": "partition_prune - Statement 394",
    "query": "explain (analyze, costs off, summary off, timing off) update ab_a1 set b = 3 from ab_a2 where ab_a2.b = (select 1)"
  },
  {
    "comment": "partition_prune - Statement 395",
    "query": "select tableoid::regclass, * from ab"
  },
  {
    "comment": "partition_prune - Statement 396",
    "query": "drop table ab, lprt_a"
  },
  {
    "comment": "partition_prune - Statement 397",
    "query": "create table tbl1(col1 int)"
  },
  {
    "comment": "partition_prune - Statement 398",
    "query": "insert into tbl1 values (501), (505)"
  },
  {
    "comment": "partition_prune - Statement 399",
    "query": "create table tprt (col1 int) partition by range (col1)"
  },
  {
    "comment": "partition_prune - Statement 400",
    "query": "create table tprt_1 partition of tprt for values from (1) to (501)"
  },
  {
    "comment": "partition_prune - Statement 401",
    "query": "create table tprt_2 partition of tprt for values from (501) to (1001)"
  },
  {
    "comment": "partition_prune - Statement 402",
    "query": "create table tprt_3 partition of tprt for values from (1001) to (2001)"
  },
  {
    "comment": "partition_prune - Statement 403",
    "query": "create table tprt_4 partition of tprt for values from (2001) to (3001)"
  },
  {
    "comment": "partition_prune - Statement 404",
    "query": "create table tprt_5 partition of tprt for values from (3001) to (4001)"
  },
  {
    "comment": "partition_prune - Statement 405",
    "query": "create table tprt_6 partition of tprt for values from (4001) to (5001)"
  },
  {
    "comment": "partition_prune - Statement 406",
    "query": "create index tprt1_idx on tprt_1 (col1)"
  },
  {
    "comment": "partition_prune - Statement 407",
    "query": "create index tprt2_idx on tprt_2 (col1)"
  },
  {
    "comment": "partition_prune - Statement 408",
    "query": "create index tprt3_idx on tprt_3 (col1)"
  },
  {
    "comment": "partition_prune - Statement 409",
    "query": "create index tprt4_idx on tprt_4 (col1)"
  },
  {
    "comment": "partition_prune - Statement 410",
    "query": "create index tprt5_idx on tprt_5 (col1)"
  },
  {
    "comment": "partition_prune - Statement 411",
    "query": "create index tprt6_idx on tprt_6 (col1)"
  },
  {
    "comment": "partition_prune - Statement 412",
    "query": "insert into tprt values (10), (20), (501), (502), (505), (1001), (4500)"
  },
  {
    "comment": "partition_prune - Statement 413",
    "query": "set enable_hashjoin = off"
  },
  {
    "comment": "partition_prune - Statement 414",
    "query": "set enable_mergejoin = off"
  },
  {
    "comment": "partition_prune - Statement 415",
    "query": "explain (analyze, costs off, summary off, timing off) select * from tbl1 join tprt on tbl1.col1 > tprt.col1"
  },
  {
    "comment": "partition_prune - Statement 416",
    "query": "explain (analyze, costs off, summary off, timing off) select * from tbl1 join tprt on tbl1.col1 = tprt.col1"
  },
  {
    "comment": "partition_prune - Statement 417",
    "query": "select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 > tprt.col1 order by tbl1.col1, tprt.col1"
  },
  {
    "comment": "partition_prune - Statement 418",
    "query": "select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 = tprt.col1 order by tbl1.col1, tprt.col1"
  },
  {
    "comment": "partition_prune - Statement 419",
    "query": "insert into tbl1 values (1001), (1010), (1011)"
  },
  {
    "comment": "partition_prune - Statement 420",
    "query": "explain (analyze, costs off, summary off, timing off) select * from tbl1 inner join tprt on tbl1.col1 > tprt.col1"
  },
  {
    "comment": "partition_prune - Statement 421",
    "query": "explain (analyze, costs off, summary off, timing off) select * from tbl1 inner join tprt on tbl1.col1 = tprt.col1"
  },
  {
    "comment": "partition_prune - Statement 422",
    "query": "delete from tbl1"
  },
  {
    "comment": "partition_prune - Statement 423",
    "query": "insert into tbl1 values (4400)"
  },
  {
    "comment": "partition_prune - Statement 424",
    "query": "explain (analyze, costs off, summary off, timing off) select * from tbl1 join tprt on tbl1.col1 < tprt.col1"
  },
  {
    "comment": "partition_prune - Statement 425",
    "query": "select tbl1.col1, tprt.col1 from tbl1 inner join tprt on tbl1.col1 < tprt.col1 order by tbl1.col1, tprt.col1"
  },
  {
    "comment": "partition_prune - Statement 426",
    "query": "insert into tbl1 values (10000)"
  },
  {
    "comment": "partition_prune - Statement 427",
    "query": "drop table tbl1, tprt"
  },
  {
    "comment": "partition_prune - Statement 428",
    "query": "create table part_abc (a int not null, b int not null, c int not null) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 429",
    "query": "create table part_bac (b int not null, a int not null, c int not null) partition by list (b)"
  },
  {
    "comment": "partition_prune - Statement 430",
    "query": "create table part_cab (c int not null, a int not null, b int not null) partition by list (c)"
  },
  {
    "comment": "partition_prune - Statement 431",
    "query": "create table part_abc_p1 (a int not null, b int not null, c int not null)"
  },
  {
    "comment": "partition_prune - Statement 432",
    "query": "alter table part_abc attach partition part_bac for values in(1)"
  },
  {
    "comment": "partition_prune - Statement 433",
    "query": "alter table part_bac attach partition part_cab for values in(2)"
  },
  {
    "comment": "partition_prune - Statement 434",
    "query": "alter table part_cab attach partition part_abc_p1 for values in(3)"
  },
  {
    "comment": "partition_prune - Statement 435",
    "query": "prepare part_abc_q1 (int, int, int) as select * from part_abc where a = $1 and b = $2 and c = $3"
  },
  {
    "comment": "partition_prune - Statement 436",
    "query": "explain (analyze, costs off, summary off, timing off) execute part_abc_q1 (1, 2, 3)"
  },
  {
    "comment": "partition_prune - Statement 437",
    "query": "deallocate part_abc_q1"
  },
  {
    "comment": "partition_prune - Statement 438",
    "query": "drop table part_abc"
  },
  {
    "comment": "partition_prune - Statement 439",
    "query": "create table listp (a int, b int) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 440",
    "query": "create table listp_1 partition of listp for values in(1) partition by list (b)"
  },
  {
    "comment": "partition_prune - Statement 441",
    "query": "create table listp_1_1 partition of listp_1 for values in(1)"
  },
  {
    "comment": "partition_prune - Statement 442",
    "query": "create table listp_2 partition of listp for values in(2) partition by list (b)"
  },
  {
    "comment": "partition_prune - Statement 443",
    "query": "create table listp_2_1 partition of listp_2 for values in(2)"
  },
  {
    "comment": "partition_prune - Statement 444",
    "query": "select * from listp where b = 1"
  },
  {
    "comment": "partition_prune - Statement 445",
    "query": "prepare q1 (int,int) as select * from listp where b in ($1,$2)"
  },
  {
    "comment": "partition_prune - Statement 446",
    "query": "explain (analyze, costs off, summary off, timing off)  execute q1 (1,1)"
  },
  {
    "comment": "partition_prune - Statement 447",
    "query": "explain (analyze, costs off, summary off, timing off)  execute q1 (2,2)"
  },
  {
    "comment": "partition_prune - Statement 448",
    "query": "explain (analyze, costs off, summary off, timing off)  execute q1 (0,0)"
  },
  {
    "comment": "partition_prune - Statement 449",
    "query": "deallocate q1"
  },
  {
    "comment": "partition_prune - Statement 450",
    "query": "prepare q1 (int,int,int,int) as select * from listp where b in($1,$2) and $3 <> b and $4 <> b"
  },
  {
    "comment": "partition_prune - Statement 451",
    "query": "explain (analyze, costs off, summary off, timing off)  execute q1 (1,2,2,0)"
  },
  {
    "comment": "partition_prune - Statement 452",
    "query": "explain (analyze, costs off, summary off, timing off)  execute q1 (1,2,2,1)"
  },
  {
    "comment": "partition_prune - Statement 453",
    "query": "explain (analyze, costs off, summary off, timing off) select * from listp where a = (select null::int)"
  },
  {
    "comment": "partition_prune - Statement 454",
    "query": "drop table listp"
  },
  {
    "comment": "partition_prune - Statement 455",
    "query": "create table stable_qual_pruning (a timestamp) partition by range (a)"
  },
  {
    "comment": "partition_prune - Statement 456",
    "query": "create table stable_qual_pruning1 partition of stable_qual_pruning for values from ('2000-01-01') to ('2000-02-01')"
  },
  {
    "comment": "partition_prune - Statement 457",
    "query": "create table stable_qual_pruning2 partition of stable_qual_pruning for values from ('2000-02-01') to ('2000-03-01')"
  },
  {
    "comment": "partition_prune - Statement 458",
    "query": "create table stable_qual_pruning3 partition of stable_qual_pruning for values from ('3000-02-01') to ('3000-03-01')"
  },
  {
    "comment": "partition_prune - Statement 459",
    "query": "explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning where a < localtimestamp"
  },
  {
    "comment": "partition_prune - Statement 460",
    "query": "explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning where a < '2000-02-01'::timestamptz"
  },
  {
    "comment": "partition_prune - Statement 461",
    "query": "explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning where a = any(array['2010-02-01', '2020-01-01']::timestamp[])"
  },
  {
    "comment": "partition_prune - Statement 462",
    "query": "explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning where a = any(array['2000-02-01', '2010-01-01']::timestamp[])"
  },
  {
    "comment": "partition_prune - Statement 463",
    "query": "explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning where a = any(array['2000-02-01', localtimestamp]::timestamp[])"
  },
  {
    "comment": "partition_prune - Statement 464",
    "query": "explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning where a = any(array['2010-02-01', '2020-01-01']::timestamptz[])"
  },
  {
    "comment": "partition_prune - Statement 465",
    "query": "explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning where a = any(array['2000-02-01', '2010-01-01']::timestamptz[])"
  },
  {
    "comment": "partition_prune - Statement 466",
    "query": "explain (analyze, costs off, summary off, timing off) select * from stable_qual_pruning where a = any(null::timestamptz[])"
  },
  {
    "comment": "partition_prune - Statement 467",
    "query": "drop table stable_qual_pruning"
  },
  {
    "comment": "partition_prune - Statement 468",
    "query": "create table mc3p0 partition of mc3p for values from (0, 0, 0) to (0, maxvalue, maxvalue)"
  },
  {
    "comment": "partition_prune - Statement 469",
    "query": "create table mc3p1 partition of mc3p for values from (1, 1, 1) to (2, minvalue, minvalue)"
  },
  {
    "comment": "partition_prune - Statement 470",
    "query": "create table mc3p2 partition of mc3p for values from (2, minvalue, minvalue) to (3, maxvalue, maxvalue)"
  },
  {
    "comment": "partition_prune - Statement 471",
    "query": "insert into mc3p values (0, 1, 1), (1, 1, 1), (2, 1, 1)"
  },
  {
    "comment": "partition_prune - Statement 472",
    "query": "explain (analyze, costs off, summary off, timing off) select * from mc3p where a < 3 and abs(b) = 1"
  },
  {
    "comment": "partition_prune - Statement 473",
    "query": "prepare ps1 as select * from mc3p where a = $1 and abs(b) < (select 3)"
  },
  {
    "comment": "partition_prune - Statement 474",
    "query": "explain (analyze, costs off, summary off, timing off) execute ps1(1)"
  },
  {
    "comment": "partition_prune - Statement 475",
    "query": "deallocate ps1"
  },
  {
    "comment": "partition_prune - Statement 476",
    "query": "prepare ps2 as select * from mc3p where a <= $1 and abs(b) < (select 3)"
  },
  {
    "comment": "partition_prune - Statement 477",
    "query": "explain (analyze, costs off, summary off, timing off) execute ps2(1)"
  },
  {
    "comment": "partition_prune - Statement 478",
    "query": "deallocate ps2"
  },
  {
    "comment": "partition_prune - Statement 479",
    "query": "drop table mc3p"
  },
  {
    "comment": "partition_prune - Statement 480",
    "query": "create table boolvalues (value bool not null)"
  },
  {
    "comment": "partition_prune - Statement 481",
    "query": "insert into boolvalues values('t'),('f')"
  },
  {
    "comment": "partition_prune - Statement 482",
    "query": "create table boolp (a bool) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 483",
    "query": "create table boolp_t partition of boolp for values in('t')"
  },
  {
    "comment": "partition_prune - Statement 484",
    "query": "create table boolp_f partition of boolp for values in('f')"
  },
  {
    "comment": "partition_prune - Statement 485",
    "query": "explain (analyze, costs off, summary off, timing off) select * from boolp where a = (select value from boolvalues where value)"
  },
  {
    "comment": "partition_prune - Statement 486",
    "query": "explain (analyze, costs off, summary off, timing off) select * from boolp where a = (select value from boolvalues where not value)"
  },
  {
    "comment": "partition_prune - Statement 487",
    "query": "drop table boolp"
  },
  {
    "comment": "partition_prune - Statement 488",
    "query": "set enable_seqscan = off"
  },
  {
    "comment": "partition_prune - Statement 489",
    "query": "set enable_sort = off"
  },
  {
    "comment": "partition_prune - Statement 490",
    "query": "create table ma_test (a int, b int) partition by range (a)"
  },
  {
    "comment": "partition_prune - Statement 491",
    "query": "create table ma_test_p1 partition of ma_test for values from (0) to (10)"
  },
  {
    "comment": "partition_prune - Statement 492",
    "query": "create table ma_test_p2 partition of ma_test for values from (10) to (20)"
  },
  {
    "comment": "partition_prune - Statement 493",
    "query": "create table ma_test_p3 partition of ma_test for values from (20) to (30)"
  },
  {
    "comment": "partition_prune - Statement 494",
    "query": "insert into ma_test select x,x from generate_series(0,29) t(x)"
  },
  {
    "comment": "partition_prune - Statement 495",
    "query": "create index on ma_test (b)"
  },
  {
    "comment": "partition_prune - Statement 496",
    "query": "analyze ma_test"
  },
  {
    "comment": "partition_prune - Statement 497",
    "query": "prepare mt_q1 (int) as select a from ma_test where a >= $1 and a % 10 = 5 order by b"
  },
  {
    "comment": "partition_prune - Statement 498",
    "query": "explain (analyze, costs off, summary off, timing off) execute mt_q1(15)"
  },
  {
    "comment": "partition_prune - Statement 499",
    "query": "execute mt_q1(15)"
  },
  {
    "comment": "partition_prune - Statement 500",
    "query": "explain (analyze, costs off, summary off, timing off) execute mt_q1(25)"
  },
  {
    "comment": "partition_prune - Statement 501",
    "query": "execute mt_q1(25)"
  },
  {
    "comment": "partition_prune - Statement 502",
    "query": "explain (analyze, costs off, summary off, timing off) execute mt_q1(35)"
  },
  {
    "comment": "partition_prune - Statement 503",
    "query": "execute mt_q1(35)"
  },
  {
    "comment": "partition_prune - Statement 504",
    "query": "deallocate mt_q1"
  },
  {
    "comment": "partition_prune - Statement 505",
    "query": "prepare mt_q2 (int) as select * from ma_test where a >= $1 order by b limit 1"
  },
  {
    "comment": "partition_prune - Statement 506",
    "query": "explain (analyze, verbose, costs off, summary off, timing off) execute mt_q2 (35)"
  },
  {
    "comment": "partition_prune - Statement 507",
    "query": "deallocate mt_q2"
  },
  {
    "comment": "partition_prune - Statement 508",
    "query": "explain (analyze, costs off, summary off, timing off) select * from ma_test where a >= (select min(b) from ma_test_p2) order by b"
  },
  {
    "comment": "partition_prune - Statement 509",
    "query": "reset enable_seqscan"
  },
  {
    "comment": "partition_prune - Statement 510",
    "query": "reset enable_sort"
  },
  {
    "comment": "partition_prune - Statement 511",
    "query": "drop table ma_test"
  },
  {
    "comment": "partition_prune - Statement 512",
    "query": "reset enable_indexonlyscan"
  },
  {
    "comment": "partition_prune - Statement 513",
    "query": "create table pp_arrpart (a int[]) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 514",
    "query": "create table pp_arrpart1 partition of pp_arrpart for values in ('{1}')"
  },
  {
    "comment": "partition_prune - Statement 515",
    "query": "create table pp_arrpart2 partition of pp_arrpart for values in ('{2, 3}', '{4, 5}')"
  },
  {
    "comment": "partition_prune - Statement 516",
    "query": "explain (costs off) select * from pp_arrpart where a = '{1}'"
  },
  {
    "comment": "partition_prune - Statement 517",
    "query": "explain (costs off) select * from pp_arrpart where a = '{1, 2}'"
  },
  {
    "comment": "partition_prune - Statement 518",
    "query": "explain (costs off) select * from pp_arrpart where a in ('{4, 5}', '{1}')"
  },
  {
    "comment": "partition_prune - Statement 519",
    "query": "explain (costs off) update pp_arrpart set a = a where a = '{1}'"
  },
  {
    "comment": "partition_prune - Statement 520",
    "query": "explain (costs off) delete from pp_arrpart where a = '{1}'"
  },
  {
    "comment": "partition_prune - Statement 521",
    "query": "drop table pp_arrpart"
  },
  {
    "comment": "partition_prune - Statement 522",
    "query": "create table pph_arrpart (a int[]) partition by hash (a)"
  },
  {
    "comment": "partition_prune - Statement 523",
    "query": "create table pph_arrpart1 partition of pph_arrpart for values with (modulus 2, remainder 0)"
  },
  {
    "comment": "partition_prune - Statement 524",
    "query": "create table pph_arrpart2 partition of pph_arrpart for values with (modulus 2, remainder 1)"
  },
  {
    "comment": "partition_prune - Statement 525",
    "query": "insert into pph_arrpart values ('{1}'), ('{1, 2}'), ('{4, 5}')"
  },
  {
    "comment": "partition_prune - Statement 526",
    "query": "select tableoid::regclass, * from pph_arrpart order by 1"
  },
  {
    "comment": "partition_prune - Statement 527",
    "query": "explain (costs off) select * from pph_arrpart where a = '{1}'"
  },
  {
    "comment": "partition_prune - Statement 528",
    "query": "explain (costs off) select * from pph_arrpart where a = '{1, 2}'"
  },
  {
    "comment": "partition_prune - Statement 529",
    "query": "explain (costs off) select * from pph_arrpart where a in ('{4, 5}', '{1}')"
  },
  {
    "comment": "partition_prune - Statement 530",
    "query": "drop table pph_arrpart"
  },
  {
    "comment": "partition_prune - Statement 531",
    "query": "create type pp_colors as enum ('green', 'blue', 'black')"
  },
  {
    "comment": "partition_prune - Statement 532",
    "query": "create table pp_enumpart (a pp_colors) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 533",
    "query": "create table pp_enumpart_green partition of pp_enumpart for values in ('green')"
  },
  {
    "comment": "partition_prune - Statement 534",
    "query": "create table pp_enumpart_blue partition of pp_enumpart for values in ('blue')"
  },
  {
    "comment": "partition_prune - Statement 535",
    "query": "explain (costs off) select * from pp_enumpart where a = 'blue'"
  },
  {
    "comment": "partition_prune - Statement 536",
    "query": "explain (costs off) select * from pp_enumpart where a = 'black'"
  },
  {
    "comment": "partition_prune - Statement 537",
    "query": "drop table pp_enumpart"
  },
  {
    "comment": "partition_prune - Statement 538",
    "query": "drop type pp_colors"
  },
  {
    "comment": "partition_prune - Statement 539",
    "query": "create type pp_rectype as (a int, b int)"
  },
  {
    "comment": "partition_prune - Statement 540",
    "query": "create table pp_recpart (a pp_rectype) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 541",
    "query": "create table pp_recpart_11 partition of pp_recpart for values in ('(1,1)')"
  },
  {
    "comment": "partition_prune - Statement 542",
    "query": "create table pp_recpart_23 partition of pp_recpart for values in ('(2,3)')"
  },
  {
    "comment": "partition_prune - Statement 543",
    "query": "explain (costs off) select * from pp_recpart where a = '(1,1)'::pp_rectype"
  },
  {
    "comment": "partition_prune - Statement 544",
    "query": "explain (costs off) select * from pp_recpart where a = '(1,2)'::pp_rectype"
  },
  {
    "comment": "partition_prune - Statement 545",
    "query": "drop table pp_recpart"
  },
  {
    "comment": "partition_prune - Statement 546",
    "query": "drop type pp_rectype"
  },
  {
    "comment": "partition_prune - Statement 547",
    "query": "create table pp_intrangepart (a int4range) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 548",
    "query": "create table pp_intrangepart12 partition of pp_intrangepart for values in ('[1,2]')"
  },
  {
    "comment": "partition_prune - Statement 549",
    "query": "create table pp_intrangepart2inf partition of pp_intrangepart for values in ('[2,)')"
  },
  {
    "comment": "partition_prune - Statement 550",
    "query": "explain (costs off) select * from pp_intrangepart where a = '[1,2]'::int4range"
  },
  {
    "comment": "partition_prune - Statement 551",
    "query": "explain (costs off) select * from pp_intrangepart where a = '(1,2)'::int4range"
  },
  {
    "comment": "partition_prune - Statement 552",
    "query": "drop table pp_intrangepart"
  },
  {
    "comment": "partition_prune - Statement 553",
    "query": "create table pp_lp (a int, value int) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 554",
    "query": "create table pp_lp1 partition of pp_lp for values in(1)"
  },
  {
    "comment": "partition_prune - Statement 555",
    "query": "create table pp_lp2 partition of pp_lp for values in(2)"
  },
  {
    "comment": "partition_prune - Statement 556",
    "query": "explain (costs off) select * from pp_lp where a = 1"
  },
  {
    "comment": "partition_prune - Statement 557",
    "query": "explain (costs off) update pp_lp set value = 10 where a = 1"
  },
  {
    "comment": "partition_prune - Statement 558",
    "query": "explain (costs off) delete from pp_lp where a = 1"
  },
  {
    "comment": "partition_prune - Statement 559",
    "query": "set enable_partition_pruning = off"
  },
  {
    "comment": "partition_prune - Statement 560",
    "query": "set constraint_exclusion = 'partition'"
  },
  {
    "comment": "partition_prune - Statement 561",
    "query": "set constraint_exclusion = 'off'"
  },
  {
    "comment": "partition_prune - Statement 562",
    "query": "drop table pp_lp"
  },
  {
    "comment": "partition_prune - Statement 563",
    "query": "create table inh_lp (a int, value int)"
  },
  {
    "comment": "partition_prune - Statement 564",
    "query": "create table inh_lp1 (a int, value int, check(a = 1)) inherits (inh_lp)"
  },
  {
    "comment": "partition_prune - Statement 565",
    "query": "create table inh_lp2 (a int, value int, check(a = 2)) inherits (inh_lp)"
  },
  {
    "comment": "partition_prune - Statement 566",
    "query": "explain (costs off) select * from inh_lp where a = 1"
  },
  {
    "comment": "partition_prune - Statement 567",
    "query": "explain (costs off) update inh_lp set value = 10 where a = 1"
  },
  {
    "comment": "partition_prune - Statement 568",
    "query": "explain (costs off) delete from inh_lp where a = 1"
  },
  {
    "comment": "partition_prune - Statement 569",
    "query": "explain (costs off) update inh_lp1 set value = 10 where a = 2"
  },
  {
    "comment": "partition_prune - Statement 570",
    "query": "drop table inh_lp cascade"
  },
  {
    "comment": "partition_prune - Statement 571",
    "query": "reset enable_partition_pruning"
  },
  {
    "comment": "partition_prune - Statement 572",
    "query": "reset constraint_exclusion"
  },
  {
    "comment": "partition_prune - Statement 573",
    "query": "create temp table pp_temp_parent (a int) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 574",
    "query": "create temp table pp_temp_part_1 partition of pp_temp_parent for values in (1)"
  },
  {
    "comment": "partition_prune - Statement 575",
    "query": "create temp table pp_temp_part_def partition of pp_temp_parent default"
  },
  {
    "comment": "partition_prune - Statement 576",
    "query": "explain (costs off) select * from pp_temp_parent where true"
  },
  {
    "comment": "partition_prune - Statement 577",
    "query": "explain (costs off) select * from pp_temp_parent where a = 2"
  },
  {
    "comment": "partition_prune - Statement 578",
    "query": "drop table pp_temp_parent"
  },
  {
    "comment": "partition_prune - Statement 579",
    "query": "create temp table p (a int, b int, c int) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 580",
    "query": "create temp table p1 partition of p for values in (1)"
  },
  {
    "comment": "partition_prune - Statement 581",
    "query": "create temp table p2 partition of p for values in (2)"
  },
  {
    "comment": "partition_prune - Statement 582",
    "query": "create temp table q (a int, b int, c int) partition by list (a)"
  },
  {
    "comment": "partition_prune - Statement 583",
    "query": "create temp table q1 partition of q for values in (1) partition by list (b)"
  },
  {
    "comment": "partition_prune - Statement 584",
    "query": "create temp table q11 partition of q1 for values in (1) partition by list (c)"
  },
  {
    "comment": "partition_prune - Statement 585",
    "query": "create temp table q111 partition of q11 for values in (1)"
  },
  {
    "comment": "partition_prune - Statement 586",
    "query": "create temp table q2 partition of q for values in (2) partition by list (b)"
  },
  {
    "comment": "partition_prune - Statement 587",
    "query": "create temp table q21 partition of q2 for values in (1)"
  },
  {
    "comment": "partition_prune - Statement 588",
    "query": "create temp table q22 partition of q2 for values in (2)"
  },
  {
    "comment": "partition_prune - Statement 589",
    "query": "insert into q22 values (2, 2, 3)"
  },
  {
    "comment": "partition_prune - Statement 590",
    "query": "explain (costs off) select * from ( select * from p union all select * from q1 union all select 1, 1, 1 ) s(a, b, c) where s.a = 1 and s.b = 1 and s.c = (select 1)"
  },
  {
    "comment": "partition_prune - Statement 591",
    "query": "select * from ( select * from p union all select * from q1 union all select 1, 1, 1 ) s(a, b, c) where s.a = 1 and s.b = 1 and s.c = (select 1)"
  },
  {
    "comment": "partition_prune - Statement 592",
    "query": "prepare q (int, int) as select * from ( select * from p union all select * from q1 union all select 1, 1, 1 ) s(a, b, c) where s.a = $1 and s.b = $2 and s.c = (select 1)"
  },
  {
    "comment": "partition_prune - Statement 593",
    "query": "explain (costs off) execute q (1, 1)"
  },
  {
    "comment": "partition_prune - Statement 594",
    "query": "execute q (1, 1)"
  },
  {
    "comment": "partition_prune - Statement 595",
    "query": "drop table p, q"
  },
  {
    "comment": "partition_prune - Statement 596",
    "query": "create table listp1 partition of listp for values in(1)"
  },
  {
    "comment": "partition_prune - Statement 597",
    "query": "create table listp2 partition of listp for values in(2) partition by list(b)"
  },
  {
    "comment": "partition_prune - Statement 598",
    "query": "create table listp2_10 partition of listp2 for values in (10)"
  },
  {
    "comment": "partition_prune - Statement 599",
    "query": "explain (analyze, costs off, summary off, timing off) select * from listp where a = (select 2) and b <> 10"
  },
  {
    "comment": "partition_prune - Statement 600",
    "query": "set enable_partition_pruning to off"
  },
  {
    "comment": "partition_prune - Statement 601",
    "query": "set constraint_exclusion to 'partition'"
  },
  {
    "comment": "partition_prune - Statement 602",
    "query": "explain (costs off) select * from listp1 where a = 2"
  },
  {
    "comment": "partition_prune - Statement 603",
    "query": "explain (costs off) update listp1 set a = 1 where a = 2"
  },
  {
    "comment": "partition_prune - Statement 604",
    "query": "set constraint_exclusion to 'on'"
  },
  {
    "comment": "partition_prune - Statement 605",
    "query": "set parallel_setup_cost to 0"
  },
  {
    "comment": "partition_prune - Statement 606",
    "query": "set parallel_tuple_cost to 0"
  },
  {
    "comment": "partition_prune - Statement 607",
    "query": "create table listp (a int) partition by list(a)"
  },
  {
    "comment": "partition_prune - Statement 608",
    "query": "create table listp_12 partition of listp for values in(1,2) partition by list(a)"
  },
  {
    "comment": "partition_prune - Statement 609",
    "query": "create table listp_12_1 partition of listp_12 for values in(1)"
  },
  {
    "comment": "partition_prune - Statement 610",
    "query": "create table listp_12_2 partition of listp_12 for values in(2)"
  },
  {
    "comment": "partition_prune - Statement 611",
    "query": "alter table listp_12_1 set (parallel_workers = 0)"
  },
  {
    "comment": "partition_prune - Statement 612",
    "query": "select explain_parallel_append('select * from listp where a = (select 1);')"
  },
  {
    "comment": "partition_prune - Statement 613",
    "query": "select explain_parallel_append( 'select * from listp where a = (select 1) union all select * from listp where a = (select 2);')"
  },
  {
    "comment": "partition_prune - Statement 614",
    "query": "set enable_sort to 0"
  },
  {
    "comment": "partition_prune - Statement 615",
    "query": "create table rangep (a int, b int) partition by range (a)"
  },
  {
    "comment": "partition_prune - Statement 616",
    "query": "create table rangep_0_to_100 partition of rangep for values from (0) to (100) partition by list (b)"
  },
  {
    "comment": "partition_prune - Statement 617",
    "query": "create table rangep_0_to_100_1 partition of rangep_0_to_100 for values in(1)"
  },
  {
    "comment": "partition_prune - Statement 618",
    "query": "create table rangep_0_to_100_2 partition of rangep_0_to_100 for values in(2)"
  },
  {
    "comment": "partition_prune - Statement 619",
    "query": "create table rangep_0_to_100_3 partition of rangep_0_to_100 for values in(3)"
  },
  {
    "comment": "partition_prune - Statement 620",
    "query": "create table rangep_100_to_200 partition of rangep for values from (100) to (200)"
  },
  {
    "comment": "partition_prune - Statement 621",
    "query": "create index on rangep (a)"
  },
  {
    "comment": "partition_prune - Statement 622",
    "query": "explain (analyze on, costs off, timing off, summary off) select * from rangep where b IN((select 1),(select 2)) order by a"
  },
  {
    "comment": "partition_prune - Statement 623",
    "query": "drop table rangep"
  },
  {
    "comment": "partition_prune - Statement 624",
    "query": "create table rp_prefix_test1 (a int, b varchar) partition by range(a, b)"
  },
  {
    "comment": "partition_prune - Statement 625",
    "query": "create table rp_prefix_test1_p1 partition of rp_prefix_test1 for values from (1, 'a') to (1, 'b')"
  },
  {
    "comment": "partition_prune - Statement 626",
    "query": "create table rp_prefix_test1_p2 partition of rp_prefix_test1 for values from (2, 'a') to (2, 'b')"
  },
  {
    "comment": "partition_prune - Statement 627",
    "query": "explain (costs off) select * from rp_prefix_test1 where a <= 1 and b = 'a'"
  },
  {
    "comment": "partition_prune - Statement 628",
    "query": "create table rp_prefix_test2 (a int, b int, c int) partition by range(a, b, c)"
  },
  {
    "comment": "partition_prune - Statement 629",
    "query": "create table rp_prefix_test2_p1 partition of rp_prefix_test2 for values from (1, 1, 0) to (1, 1, 10)"
  },
  {
    "comment": "partition_prune - Statement 630",
    "query": "create table rp_prefix_test2_p2 partition of rp_prefix_test2 for values from (2, 2, 0) to (2, 2, 10)"
  },
  {
    "comment": "partition_prune - Statement 631",
    "query": "explain (costs off) select * from rp_prefix_test2 where a <= 1 and b = 1 and c >= 0"
  },
  {
    "comment": "partition_prune - Statement 632",
    "query": "create table rp_prefix_test3 (a int, b int, c int, d int) partition by range(a, b, c, d)"
  },
  {
    "comment": "partition_prune - Statement 633",
    "query": "create table rp_prefix_test3_p1 partition of rp_prefix_test3 for values from (1, 1, 1, 0) to (1, 1, 1, 10)"
  },
  {
    "comment": "partition_prune - Statement 634",
    "query": "create table rp_prefix_test3_p2 partition of rp_prefix_test3 for values from (2, 2, 2, 0) to (2, 2, 2, 10)"
  },
  {
    "comment": "partition_prune - Statement 635",
    "query": "explain (costs off) select * from rp_prefix_test3 where a >= 1 and b >= 1 and b >= 2 and c >= 2 and d >= 0"
  },
  {
    "comment": "partition_prune - Statement 636",
    "query": "explain (costs off) select * from rp_prefix_test3 where a >= 1 and b >= 1 and b = 2 and c = 2 and d >= 0"
  },
  {
    "comment": "partition_prune - Statement 637",
    "query": "drop table rp_prefix_test1"
  },
  {
    "comment": "partition_prune - Statement 638",
    "query": "drop table rp_prefix_test2"
  },
  {
    "comment": "partition_prune - Statement 639",
    "query": "drop table rp_prefix_test3"
  },
  {
    "comment": "partition_prune - Statement 640",
    "query": "create table hp_prefix_test (a int, b int, c int, d int) partition by hash (a part_test_int4_ops, b part_test_int4_ops, c part_test_int4_ops, d part_test_int4_ops)"
  },
  {
    "comment": "partition_prune - Statement 641",
    "query": "select 'create table hp_prefix_test_p' || x::text || ' partition of hp_prefix_test for values with (modulus 8, remainder ' || x::text || ');' from generate_Series(0,7) x"
  },
  {
    "comment": "partition_prune - Statement 642",
    "query": "insert into hp_prefix_test select case a when 0 then null else 1 end, case b when 0 then null else 2 end, case c when 0 then null else 3 end, case d when 0 then null else 4 end from generate_series(0,1) a, generate_series(0,1) b, generate_Series(0,1) c, generate_Series(0,1) d"
  },
  {
    "comment": "partition_prune - Statement 643",
    "query": "select 'select tableoid::regclass,* from hp_prefix_test where ' || string_agg(c.colname || case when g.s & (1 << c.colpos) = 0 then ' is null' else ' = ' || (colpos+1)::text end, ' and ' order by c.colpos) from (values('a',0),('b',1),('c',2),('d',3)) c(colname, colpos), generate_Series(0,15) g(s) group by g.s order by g.s"
  },
  {
    "comment": "partition_prune - Statement 644",
    "query": "create operator === ( leftarg = int4, rightarg = int4, procedure = int4eq, commutator = ===, hashes )"
  },
  {
    "comment": "partition_prune - Statement 645",
    "query": "create operator class part_test_int4_ops2 for type int4 using hash as operator 1 ===, function 2 part_hashint4_noop(int4, int8)"
  },
  {
    "comment": "partition_prune - Statement 646",
    "query": "create table hp_contradict_test (a int, b int) partition by hash (a part_test_int4_ops2, b part_test_int4_ops2)"
  },
  {
    "comment": "partition_prune - Statement 647",
    "query": "create table hp_contradict_test_p1 partition of hp_contradict_test for values with (modulus 2, remainder 0)"
  },
  {
    "comment": "partition_prune - Statement 648",
    "query": "create table hp_contradict_test_p2 partition of hp_contradict_test for values with (modulus 2, remainder 1)"
  },
  {
    "comment": "partition_prune - Statement 649",
    "query": "explain (costs off) select * from hp_contradict_test where a is null and a === 1 and b === 1"
  },
  {
    "comment": "partition_prune - Statement 650",
    "query": "explain (costs off) select * from hp_contradict_test where a === 1 and b === 1 and a is null"
  },
  {
    "comment": "partition_prune - Statement 651",
    "query": "drop table hp_contradict_test"
  },
  {
    "comment": "partition_prune - Statement 652",
    "query": "drop operator class part_test_int4_ops2 using hash"
  },
  {
    "comment": "partition_prune - Statement 653",
    "query": "drop operator ===(int4, int4)"
  }
]