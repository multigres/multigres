[
  {
    "comment": "plpgsql - Statement 1",
    "query": "create table Room ( roomno\tchar(8), comment\ttext )"
  },
  {
    "comment": "plpgsql - Statement 2",
    "query": "create unique index Room_rno on Room using btree (roomno bpchar_ops)"
  },
  {
    "comment": "plpgsql - Statement 3",
    "query": "create table WSlot ( slotname\tchar(20), roomno\tchar(8), slotlink\tchar(20), backlink\tchar(20) )"
  },
  {
    "comment": "plpgsql - Statement 4",
    "query": "create unique index WSlot_name on WSlot using btree (slotname bpchar_ops)"
  },
  {
    "comment": "plpgsql - Statement 5",
    "query": "create table PField ( name\ttext, comment\ttext )"
  },
  {
    "comment": "plpgsql - Statement 6",
    "query": "create unique index PField_name on PField using btree (name text_ops)"
  },
  {
    "comment": "plpgsql - Statement 7",
    "query": "create table PSlot ( slotname\tchar(20), pfname\ttext, slotlink\tchar(20), backlink\tchar(20) )"
  },
  {
    "comment": "plpgsql - Statement 8",
    "query": "create unique index PSlot_name on PSlot using btree (slotname bpchar_ops)"
  },
  {
    "comment": "plpgsql - Statement 9",
    "query": "create table PLine ( slotname\tchar(20), phonenumber\tchar(20), comment\ttext, backlink\tchar(20) )"
  },
  {
    "comment": "plpgsql - Statement 10",
    "query": "create unique index PLine_name on PLine using btree (slotname bpchar_ops)"
  },
  {
    "comment": "plpgsql - Statement 11",
    "query": "create table Hub ( name\tchar(14), comment\ttext, nslots\tinteger )"
  },
  {
    "comment": "plpgsql - Statement 12",
    "query": "create unique index Hub_name on Hub using btree (name bpchar_ops)"
  },
  {
    "comment": "plpgsql - Statement 13",
    "query": "create table HSlot ( slotname\tchar(20), hubname\tchar(14), slotno\tinteger, slotlink\tchar(20) )"
  },
  {
    "comment": "plpgsql - Statement 14",
    "query": "create unique index HSlot_name on HSlot using btree (slotname bpchar_ops)"
  },
  {
    "comment": "plpgsql - Statement 15",
    "query": "create index HSlot_hubname on HSlot using btree (hubname bpchar_ops)"
  },
  {
    "comment": "plpgsql - Statement 16",
    "query": "create table System ( name\ttext, comment\ttext )"
  },
  {
    "comment": "plpgsql - Statement 17",
    "query": "create unique index System_name on System using btree (name text_ops)"
  },
  {
    "comment": "plpgsql - Statement 18",
    "query": "create table IFace ( slotname\tchar(20), sysname\ttext, ifname\ttext, slotlink\tchar(20) )"
  },
  {
    "comment": "plpgsql - Statement 19",
    "query": "create unique index IFace_name on IFace using btree (slotname bpchar_ops)"
  },
  {
    "comment": "plpgsql - Statement 20",
    "query": "create table PHone ( slotname\tchar(20), comment\ttext, slotlink\tchar(20) )"
  },
  {
    "comment": "plpgsql - Statement 21",
    "query": "create unique index PHone_name on PHone using btree (slotname bpchar_ops)"
  },
  {
    "comment": "plpgsql - Statement 22",
    "query": "create function tg_room_au() returns trigger as ' begin if new.roomno != old.roomno then update WSlot set roomno = new.roomno where roomno = old.roomno; end if; return new; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 23",
    "query": "create trigger tg_room_au after update on Room for each row execute procedure tg_room_au()"
  },
  {
    "comment": "plpgsql - Statement 24",
    "query": "create function tg_room_ad() returns trigger as ' begin delete from WSlot where roomno = old.roomno; return old; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 25",
    "query": "create trigger tg_room_ad after delete on Room for each row execute procedure tg_room_ad()"
  },
  {
    "comment": "plpgsql - Statement 26",
    "query": "create function tg_wslot_biu() returns trigger as $$ begin if count(*) = 0 from Room where roomno = new.roomno then raise exception 'Room % does not exist', new.roomno; end if; return new; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 27",
    "query": "create trigger tg_wslot_biu before insert or update on WSlot for each row execute procedure tg_wslot_biu()"
  },
  {
    "comment": "plpgsql - Statement 28",
    "query": "create function tg_pfield_au() returns trigger as ' begin if new.name != old.name then update PSlot set pfname = new.name where pfname = old.name; end if; return new; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 29",
    "query": "create trigger tg_pfield_au after update on PField for each row execute procedure tg_pfield_au()"
  },
  {
    "comment": "plpgsql - Statement 30",
    "query": "create function tg_pfield_ad() returns trigger as ' begin delete from PSlot where pfname = old.name; return old; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 31",
    "query": "create trigger tg_pfield_ad after delete on PField for each row execute procedure tg_pfield_ad()"
  },
  {
    "comment": "plpgsql - Statement 32",
    "query": "create function tg_pslot_biu() returns trigger as $proc$ declare pfrec\trecord; ps          alias for new; begin select into pfrec * from PField where name = ps.pfname; if not found then raise exception $$Patchfield \"%\" does not exist$$, ps.pfname; end if; return ps; end; $proc$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 33",
    "query": "create trigger tg_pslot_biu before insert or update on PSlot for each row execute procedure tg_pslot_biu()"
  },
  {
    "comment": "plpgsql - Statement 34",
    "query": "create function tg_system_au() returns trigger as ' begin if new.name != old.name then update IFace set sysname = new.name where sysname = old.name; end if; return new; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 35",
    "query": "create trigger tg_system_au after update on System for each row execute procedure tg_system_au()"
  },
  {
    "comment": "plpgsql - Statement 36",
    "query": "create function tg_iface_biu() returns trigger as $$ declare sname\ttext; sysrec\trecord; begin select into sysrec * from system where name = new.sysname; if not found then raise exception $q$system \"%\" does not exist$q$, new.sysname; end if; sname := 'IF.' || new.sysname; sname := sname || '.'; sname := sname || new.ifname; if length(sname) > 20 then raise exception 'IFace slotname \"%\" too long (20 char max)', sname; end if; new.slotname := sname; return new; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 37",
    "query": "create trigger tg_iface_biu before insert or update on IFace for each row execute procedure tg_iface_biu()"
  },
  {
    "comment": "plpgsql - Statement 38",
    "query": "create function tg_hub_a() returns trigger as ' declare hname\ttext; dummy\tinteger; begin if tg_op = ''INSERT'' then dummy := tg_hub_adjustslots(new.name, 0, new.nslots); return new; end if; if tg_op = ''UPDATE'' then if new.name != old.name then update HSlot set hubname = new.name where hubname = old.name; end if; dummy := tg_hub_adjustslots(new.name, old.nslots, new.nslots); return new; end if; if tg_op = ''DELETE'' then dummy := tg_hub_adjustslots(old.name, old.nslots, 0); return old; end if; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 39",
    "query": "create trigger tg_hub_a after insert or update or delete on Hub for each row execute procedure tg_hub_a()"
  },
  {
    "comment": "plpgsql - Statement 40",
    "query": "create function tg_hub_adjustslots(hname bpchar, oldnslots integer, newnslots integer) returns integer as ' begin if newnslots = oldnslots then return 0; end if; if newnslots < oldnslots then delete from HSlot where hubname = hname and slotno > newnslots; return 0; end if; for i in oldnslots + 1 .. newnslots loop insert into HSlot (slotname, hubname, slotno, slotlink) values (''HS.dummy'', hname, i, ''''); end loop; return 0; end ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 41",
    "query": "COMMENT ON FUNCTION tg_hub_adjustslots_wrong(bpchar, integer, integer) IS 'function with args'"
  },
  {
    "comment": "plpgsql - Statement 42",
    "query": "COMMENT ON FUNCTION tg_hub_adjustslots(bpchar, integer, integer) IS 'function with args'"
  },
  {
    "comment": "plpgsql - Statement 43",
    "query": "COMMENT ON FUNCTION tg_hub_adjustslots(bpchar, integer, integer) IS NULL"
  },
  {
    "comment": "plpgsql - Statement 44",
    "query": "create function tg_hslot_biu() returns trigger as ' declare sname\ttext; xname\tHSlot.slotname%TYPE; hubrec\trecord; begin select into hubrec * from Hub where name = new.hubname; if not found then raise exception ''no manual manipulation of HSlot''; end if; if new.slotno < 1 or new.slotno > hubrec.nslots then raise exception ''no manual manipulation of HSlot''; end if; if tg_op = ''UPDATE'' and new.hubname != old.hubname then if count(*) > 0 from Hub where name = old.hubname then raise exception ''no manual manipulation of HSlot''; end if; end if; sname := ''HS.'' || trim(new.hubname); sname := sname || ''.''; sname := sname || new.slotno::text; if length(sname) > 20 then raise exception ''HSlot slotname \"%\" too long (20 char max)'', sname; end if; new.slotname := sname; return new; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 45",
    "query": "create trigger tg_hslot_biu before insert or update on HSlot for each row execute procedure tg_hslot_biu()"
  },
  {
    "comment": "plpgsql - Statement 46",
    "query": "create function tg_hslot_bd() returns trigger as ' declare hubrec\trecord; begin select into hubrec * from Hub where name = old.hubname; if not found then return old; end if; if old.slotno > hubrec.nslots then return old; end if; raise exception ''no manual manipulation of HSlot''; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 47",
    "query": "create trigger tg_hslot_bd before delete on HSlot for each row execute procedure tg_hslot_bd()"
  },
  {
    "comment": "plpgsql - Statement 48",
    "query": "create function tg_chkslotname() returns trigger as ' begin if substr(new.slotname, 1, 2) != tg_argv[0] then raise exception ''slotname must begin with %'', tg_argv[0]; end if; return new; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 49",
    "query": "create trigger tg_chkslotname before insert on PSlot for each row execute procedure tg_chkslotname('PS')"
  },
  {
    "comment": "plpgsql - Statement 50",
    "query": "create trigger tg_chkslotname before insert on WSlot for each row execute procedure tg_chkslotname('WS')"
  },
  {
    "comment": "plpgsql - Statement 51",
    "query": "create trigger tg_chkslotname before insert on PLine for each row execute procedure tg_chkslotname('PL')"
  },
  {
    "comment": "plpgsql - Statement 52",
    "query": "create trigger tg_chkslotname before insert on IFace for each row execute procedure tg_chkslotname('IF')"
  },
  {
    "comment": "plpgsql - Statement 53",
    "query": "create trigger tg_chkslotname before insert on PHone for each row execute procedure tg_chkslotname('PH')"
  },
  {
    "comment": "plpgsql - Statement 54",
    "query": "create function tg_chkslotlink() returns trigger as ' begin if new.slotlink isnull then new.slotlink := ''''; end if; return new; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 55",
    "query": "create trigger tg_chkslotlink before insert or update on PSlot for each row execute procedure tg_chkslotlink()"
  },
  {
    "comment": "plpgsql - Statement 56",
    "query": "create trigger tg_chkslotlink before insert or update on WSlot for each row execute procedure tg_chkslotlink()"
  },
  {
    "comment": "plpgsql - Statement 57",
    "query": "create trigger tg_chkslotlink before insert or update on IFace for each row execute procedure tg_chkslotlink()"
  },
  {
    "comment": "plpgsql - Statement 58",
    "query": "create trigger tg_chkslotlink before insert or update on HSlot for each row execute procedure tg_chkslotlink()"
  },
  {
    "comment": "plpgsql - Statement 59",
    "query": "create trigger tg_chkslotlink before insert or update on PHone for each row execute procedure tg_chkslotlink()"
  },
  {
    "comment": "plpgsql - Statement 60",
    "query": "create function tg_chkbacklink() returns trigger as ' begin if new.backlink isnull then new.backlink := ''''; end if; return new; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 61",
    "query": "create trigger tg_chkbacklink before insert or update on PSlot for each row execute procedure tg_chkbacklink()"
  },
  {
    "comment": "plpgsql - Statement 62",
    "query": "create trigger tg_chkbacklink before insert or update on WSlot for each row execute procedure tg_chkbacklink()"
  },
  {
    "comment": "plpgsql - Statement 63",
    "query": "create trigger tg_chkbacklink before insert or update on PLine for each row execute procedure tg_chkbacklink()"
  },
  {
    "comment": "plpgsql - Statement 64",
    "query": "create function tg_pslot_bu() returns trigger as ' begin if new.slotname != old.slotname then delete from PSlot where slotname = old.slotname; insert into PSlot ( slotname, pfname, slotlink, backlink ) values ( new.slotname, new.pfname, new.slotlink, new.backlink ); return null; end if; return new; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 65",
    "query": "create trigger tg_pslot_bu before update on PSlot for each row execute procedure tg_pslot_bu()"
  },
  {
    "comment": "plpgsql - Statement 66",
    "query": "create function tg_wslot_bu() returns trigger as ' begin if new.slotname != old.slotname then delete from WSlot where slotname = old.slotname; insert into WSlot ( slotname, roomno, slotlink, backlink ) values ( new.slotname, new.roomno, new.slotlink, new.backlink ); return null; end if; return new; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 67",
    "query": "create trigger tg_wslot_bu before update on WSlot for each row execute procedure tg_Wslot_bu()"
  },
  {
    "comment": "plpgsql - Statement 68",
    "query": "create function tg_pline_bu() returns trigger as ' begin if new.slotname != old.slotname then delete from PLine where slotname = old.slotname; insert into PLine ( slotname, phonenumber, comment, backlink ) values ( new.slotname, new.phonenumber, new.comment, new.backlink ); return null; end if; return new; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 69",
    "query": "create trigger tg_pline_bu before update on PLine for each row execute procedure tg_pline_bu()"
  },
  {
    "comment": "plpgsql - Statement 70",
    "query": "create function tg_iface_bu() returns trigger as ' begin if new.slotname != old.slotname then delete from IFace where slotname = old.slotname; insert into IFace ( slotname, sysname, ifname, slotlink ) values ( new.slotname, new.sysname, new.ifname, new.slotlink ); return null; end if; return new; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 71",
    "query": "create trigger tg_iface_bu before update on IFace for each row execute procedure tg_iface_bu()"
  },
  {
    "comment": "plpgsql - Statement 72",
    "query": "create function tg_hslot_bu() returns trigger as ' begin if new.slotname != old.slotname or new.hubname != old.hubname then delete from HSlot where slotname = old.slotname; insert into HSlot ( slotname, hubname, slotno, slotlink ) values ( new.slotname, new.hubname, new.slotno, new.slotlink ); return null; end if; return new; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 73",
    "query": "create trigger tg_hslot_bu before update on HSlot for each row execute procedure tg_hslot_bu()"
  },
  {
    "comment": "plpgsql - Statement 74",
    "query": "create function tg_phone_bu() returns trigger as ' begin if new.slotname != old.slotname then delete from PHone where slotname = old.slotname; insert into PHone ( slotname, comment, slotlink ) values ( new.slotname, new.comment, new.slotlink ); return null; end if; return new; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 75",
    "query": "create trigger tg_phone_bu before update on PHone for each row execute procedure tg_phone_bu()"
  },
  {
    "comment": "plpgsql - Statement 76",
    "query": "create function tg_backlink_a() returns trigger as ' declare dummy\tinteger; begin if tg_op = ''INSERT'' then if new.backlink != '''' then dummy := tg_backlink_set(new.backlink, new.slotname); end if; return new; end if; if tg_op = ''UPDATE'' then if new.backlink != old.backlink then if old.backlink != '''' then dummy := tg_backlink_unset(old.backlink, old.slotname); end if; if new.backlink != '''' then dummy := tg_backlink_set(new.backlink, new.slotname); end if; else if new.slotname != old.slotname and new.backlink != '''' then dummy := tg_slotlink_set(new.backlink, new.slotname); end if; end if; return new; end if; if tg_op = ''DELETE'' then if old.backlink != '''' then dummy := tg_backlink_unset(old.backlink, old.slotname); end if; return old; end if; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 77",
    "query": "create trigger tg_backlink_a after insert or update or delete on PSlot for each row execute procedure tg_backlink_a('PS')"
  },
  {
    "comment": "plpgsql - Statement 78",
    "query": "create trigger tg_backlink_a after insert or update or delete on WSlot for each row execute procedure tg_backlink_a('WS')"
  },
  {
    "comment": "plpgsql - Statement 79",
    "query": "create trigger tg_backlink_a after insert or update or delete on PLine for each row execute procedure tg_backlink_a('PL')"
  },
  {
    "comment": "plpgsql - Statement 80",
    "query": "create function tg_backlink_set(myname bpchar, blname bpchar) returns integer as ' declare mytype\tchar(2); link\tchar(4); rec\t\trecord; begin mytype := substr(myname, 1, 2); link := mytype || substr(blname, 1, 2); if link = ''PLPL'' then raise exception ''backlink between two phone lines does not make sense''; end if; if link in (''PLWS'', ''WSPL'') then raise exception ''direct link of phone line to wall slot not permitted''; end if; if mytype = ''PS'' then select into rec * from PSlot where slotname = myname; if not found then raise exception ''% does not exist'', myname; end if; if rec.backlink != blname then update PSlot set backlink = blname where slotname = myname; end if; return 0; end if; if mytype = ''WS'' then select into rec * from WSlot where slotname = myname; if not found then raise exception ''% does not exist'', myname; end if; if rec.backlink != blname then update WSlot set backlink = blname where slotname = myname; end if; return 0; end if; if mytype = ''PL'' then select into rec * from PLine where slotname = myname; if not found then raise exception ''% does not exist'', myname; end if; if rec.backlink != blname then update PLine set backlink = blname where slotname = myname; end if; return 0; end if; raise exception ''illegal backlink beginning with %'', mytype; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 81",
    "query": "create function tg_backlink_unset(bpchar, bpchar) returns integer as ' declare myname\talias for $1; blname\talias for $2; mytype\tchar(2); rec\t\trecord; begin mytype := substr(myname, 1, 2); if mytype = ''PS'' then select into rec * from PSlot where slotname = myname; if not found then return 0; end if; if rec.backlink = blname then update PSlot set backlink = '''' where slotname = myname; end if; return 0; end if; if mytype = ''WS'' then select into rec * from WSlot where slotname = myname; if not found then return 0; end if; if rec.backlink = blname then update WSlot set backlink = '''' where slotname = myname; end if; return 0; end if; if mytype = ''PL'' then select into rec * from PLine where slotname = myname; if not found then return 0; end if; if rec.backlink = blname then update PLine set backlink = '''' where slotname = myname; end if; return 0; end if; end ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 82",
    "query": "create function tg_slotlink_a() returns trigger as ' declare dummy\tinteger; begin if tg_op = ''INSERT'' then if new.slotlink != '''' then dummy := tg_slotlink_set(new.slotlink, new.slotname); end if; return new; end if; if tg_op = ''UPDATE'' then if new.slotlink != old.slotlink then if old.slotlink != '''' then dummy := tg_slotlink_unset(old.slotlink, old.slotname); end if; if new.slotlink != '''' then dummy := tg_slotlink_set(new.slotlink, new.slotname); end if; else if new.slotname != old.slotname and new.slotlink != '''' then dummy := tg_slotlink_set(new.slotlink, new.slotname); end if; end if; return new; end if; if tg_op = ''DELETE'' then if old.slotlink != '''' then dummy := tg_slotlink_unset(old.slotlink, old.slotname); end if; return old; end if; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 83",
    "query": "create trigger tg_slotlink_a after insert or update or delete on PSlot for each row execute procedure tg_slotlink_a('PS')"
  },
  {
    "comment": "plpgsql - Statement 84",
    "query": "create trigger tg_slotlink_a after insert or update or delete on WSlot for each row execute procedure tg_slotlink_a('WS')"
  },
  {
    "comment": "plpgsql - Statement 85",
    "query": "create trigger tg_slotlink_a after insert or update or delete on IFace for each row execute procedure tg_slotlink_a('IF')"
  },
  {
    "comment": "plpgsql - Statement 86",
    "query": "create trigger tg_slotlink_a after insert or update or delete on HSlot for each row execute procedure tg_slotlink_a('HS')"
  },
  {
    "comment": "plpgsql - Statement 87",
    "query": "create trigger tg_slotlink_a after insert or update or delete on PHone for each row execute procedure tg_slotlink_a('PH')"
  },
  {
    "comment": "plpgsql - Statement 88",
    "query": "create function tg_slotlink_set(bpchar, bpchar) returns integer as ' declare myname\talias for $1; blname\talias for $2; mytype\tchar(2); link\tchar(4); rec\t\trecord; begin mytype := substr(myname, 1, 2); link := mytype || substr(blname, 1, 2); if link = ''PHPH'' then raise exception ''slotlink between two phones does not make sense''; end if; if link in (''PHHS'', ''HSPH'') then raise exception ''link of phone to hub does not make sense''; end if; if link in (''PHIF'', ''IFPH'') then raise exception ''link of phone to hub does not make sense''; end if; if link in (''PSWS'', ''WSPS'') then raise exception ''slotlink from patchslot to wallslot not permitted''; end if; if mytype = ''PS'' then select into rec * from PSlot where slotname = myname; if not found then raise exception ''% does not exist'', myname; end if; if rec.slotlink != blname then update PSlot set slotlink = blname where slotname = myname; end if; return 0; end if; if mytype = ''WS'' then select into rec * from WSlot where slotname = myname; if not found then raise exception ''% does not exist'', myname; end if; if rec.slotlink != blname then update WSlot set slotlink = blname where slotname = myname; end if; return 0; end if; if mytype = ''IF'' then select into rec * from IFace where slotname = myname; if not found then raise exception ''% does not exist'', myname; end if; if rec.slotlink != blname then update IFace set slotlink = blname where slotname = myname; end if; return 0; end if; if mytype = ''HS'' then select into rec * from HSlot where slotname = myname; if not found then raise exception ''% does not exist'', myname; end if; if rec.slotlink != blname then update HSlot set slotlink = blname where slotname = myname; end if; return 0; end if; if mytype = ''PH'' then select into rec * from PHone where slotname = myname; if not found then raise exception ''% does not exist'', myname; end if; if rec.slotlink != blname then update PHone set slotlink = blname where slotname = myname; end if; return 0; end if; raise exception ''illegal slotlink beginning with %'', mytype; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 89",
    "query": "create function tg_slotlink_unset(bpchar, bpchar) returns integer as ' declare myname\talias for $1; blname\talias for $2; mytype\tchar(2); rec\t\trecord; begin mytype := substr(myname, 1, 2); if mytype = ''PS'' then select into rec * from PSlot where slotname = myname; if not found then return 0; end if; if rec.slotlink = blname then update PSlot set slotlink = '''' where slotname = myname; end if; return 0; end if; if mytype = ''WS'' then select into rec * from WSlot where slotname = myname; if not found then return 0; end if; if rec.slotlink = blname then update WSlot set slotlink = '''' where slotname = myname; end if; return 0; end if; if mytype = ''IF'' then select into rec * from IFace where slotname = myname; if not found then return 0; end if; if rec.slotlink = blname then update IFace set slotlink = '''' where slotname = myname; end if; return 0; end if; if mytype = ''HS'' then select into rec * from HSlot where slotname = myname; if not found then return 0; end if; if rec.slotlink = blname then update HSlot set slotlink = '''' where slotname = myname; end if; return 0; end if; if mytype = ''PH'' then select into rec * from PHone where slotname = myname; if not found then return 0; end if; if rec.slotlink = blname then update PHone set slotlink = '''' where slotname = myname; end if; return 0; end if; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 90",
    "query": "create function pslot_backlink_view(bpchar) returns text as ' <<outer>> declare rec\t\trecord; bltype\tchar(2); retval\ttext; begin select into rec * from PSlot where slotname = $1; if not found then return ''''; end if; if rec.backlink = '''' then return ''-''; end if; bltype := substr(rec.backlink, 1, 2); if bltype = ''PL'' then declare rec\t\trecord; begin select into rec * from PLine where slotname = \"outer\".rec.backlink; retval := ''Phone line '' || trim(rec.phonenumber); if rec.comment != '''' then retval := retval || '' (''; retval := retval || rec.comment; retval := retval || '')''; end if; return retval; end; end if; if bltype = ''WS'' then select into rec * from WSlot where slotname = rec.backlink; retval := trim(rec.slotname) || '' in room ''; retval := retval || trim(rec.roomno); retval := retval || '' -> ''; return retval || wslot_slotlink_view(rec.slotname); end if; return rec.backlink; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 91",
    "query": "create function pslot_slotlink_view(bpchar) returns text as ' declare psrec\trecord; sltype\tchar(2); retval\ttext; begin select into psrec * from PSlot where slotname = $1; if not found then return ''''; end if; if psrec.slotlink = '''' then return ''-''; end if; sltype := substr(psrec.slotlink, 1, 2); if sltype = ''PS'' then retval := trim(psrec.slotlink) || '' -> ''; return retval || pslot_backlink_view(psrec.slotlink); end if; if sltype = ''HS'' then retval := comment from Hub H, HSlot HS where HS.slotname = psrec.slotlink and H.name = HS.hubname; retval := retval || '' slot ''; retval := retval || slotno::text from HSlot where slotname = psrec.slotlink; return retval; end if; return psrec.slotlink; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 92",
    "query": "create function wslot_slotlink_view(bpchar) returns text as ' declare rec\t\trecord; sltype\tchar(2); retval\ttext; begin select into rec * from WSlot where slotname = $1; if not found then return ''''; end if; if rec.slotlink = '''' then return ''-''; end if; sltype := substr(rec.slotlink, 1, 2); if sltype = ''PH'' then select into rec * from PHone where slotname = rec.slotlink; retval := ''Phone '' || trim(rec.slotname); if rec.comment != '''' then retval := retval || '' (''; retval := retval || rec.comment; retval := retval || '')''; end if; return retval; end if; if sltype = ''IF'' then declare syrow\tSystem%RowType; ifrow\tIFace%ROWTYPE; begin select into ifrow * from IFace where slotname = rec.slotlink; select into syrow * from System where name = ifrow.sysname; retval := syrow.name || '' IF ''; retval := retval || ifrow.ifname; if syrow.comment != '''' then retval := retval || '' (''; retval := retval || syrow.comment; retval := retval || '')''; end if; return retval; end; end if; return rec.slotlink; end; ' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 93",
    "query": "create view Pfield_v1 as select PF.pfname, PF.slotname, pslot_backlink_view(PF.slotname) as backside, pslot_slotlink_view(PF.slotname) as patch from PSlot PF"
  },
  {
    "comment": "plpgsql - Statement 94",
    "query": "insert into Room values ('001', 'Entrance')"
  },
  {
    "comment": "plpgsql - Statement 95",
    "query": "insert into Room values ('002', 'Office')"
  },
  {
    "comment": "plpgsql - Statement 96",
    "query": "insert into Room values ('003', 'Office')"
  },
  {
    "comment": "plpgsql - Statement 97",
    "query": "insert into Room values ('004', 'Technical')"
  },
  {
    "comment": "plpgsql - Statement 98",
    "query": "insert into Room values ('101', 'Office')"
  },
  {
    "comment": "plpgsql - Statement 99",
    "query": "insert into Room values ('102', 'Conference')"
  },
  {
    "comment": "plpgsql - Statement 100",
    "query": "insert into Room values ('103', 'Restroom')"
  },
  {
    "comment": "plpgsql - Statement 101",
    "query": "insert into Room values ('104', 'Technical')"
  },
  {
    "comment": "plpgsql - Statement 102",
    "query": "insert into Room values ('105', 'Office')"
  },
  {
    "comment": "plpgsql - Statement 103",
    "query": "insert into Room values ('106', 'Office')"
  },
  {
    "comment": "plpgsql - Statement 104",
    "query": "insert into WSlot values ('WS.001.1a', '001', '', '')"
  },
  {
    "comment": "plpgsql - Statement 105",
    "query": "insert into WSlot values ('WS.001.1b', '001', '', '')"
  },
  {
    "comment": "plpgsql - Statement 106",
    "query": "insert into WSlot values ('WS.001.2a', '001', '', '')"
  },
  {
    "comment": "plpgsql - Statement 107",
    "query": "insert into WSlot values ('WS.001.2b', '001', '', '')"
  },
  {
    "comment": "plpgsql - Statement 108",
    "query": "insert into WSlot values ('WS.001.3a', '001', '', '')"
  },
  {
    "comment": "plpgsql - Statement 109",
    "query": "insert into WSlot values ('WS.001.3b', '001', '', '')"
  },
  {
    "comment": "plpgsql - Statement 110",
    "query": "insert into WSlot values ('WS.002.1a', '002', '', '')"
  },
  {
    "comment": "plpgsql - Statement 111",
    "query": "insert into WSlot values ('WS.002.1b', '002', '', '')"
  },
  {
    "comment": "plpgsql - Statement 112",
    "query": "insert into WSlot values ('WS.002.2a', '002', '', '')"
  },
  {
    "comment": "plpgsql - Statement 113",
    "query": "insert into WSlot values ('WS.002.2b', '002', '', '')"
  },
  {
    "comment": "plpgsql - Statement 114",
    "query": "insert into WSlot values ('WS.002.3a', '002', '', '')"
  },
  {
    "comment": "plpgsql - Statement 115",
    "query": "insert into WSlot values ('WS.002.3b', '002', '', '')"
  },
  {
    "comment": "plpgsql - Statement 116",
    "query": "insert into WSlot values ('WS.003.1a', '003', '', '')"
  },
  {
    "comment": "plpgsql - Statement 117",
    "query": "insert into WSlot values ('WS.003.1b', '003', '', '')"
  },
  {
    "comment": "plpgsql - Statement 118",
    "query": "insert into WSlot values ('WS.003.2a', '003', '', '')"
  },
  {
    "comment": "plpgsql - Statement 119",
    "query": "insert into WSlot values ('WS.003.2b', '003', '', '')"
  },
  {
    "comment": "plpgsql - Statement 120",
    "query": "insert into WSlot values ('WS.003.3a', '003', '', '')"
  },
  {
    "comment": "plpgsql - Statement 121",
    "query": "insert into WSlot values ('WS.003.3b', '003', '', '')"
  },
  {
    "comment": "plpgsql - Statement 122",
    "query": "insert into WSlot values ('WS.101.1a', '101', '', '')"
  },
  {
    "comment": "plpgsql - Statement 123",
    "query": "insert into WSlot values ('WS.101.1b', '101', '', '')"
  },
  {
    "comment": "plpgsql - Statement 124",
    "query": "insert into WSlot values ('WS.101.2a', '101', '', '')"
  },
  {
    "comment": "plpgsql - Statement 125",
    "query": "insert into WSlot values ('WS.101.2b', '101', '', '')"
  },
  {
    "comment": "plpgsql - Statement 126",
    "query": "insert into WSlot values ('WS.101.3a', '101', '', '')"
  },
  {
    "comment": "plpgsql - Statement 127",
    "query": "insert into WSlot values ('WS.101.3b', '101', '', '')"
  },
  {
    "comment": "plpgsql - Statement 128",
    "query": "insert into WSlot values ('WS.102.1a', '102', '', '')"
  },
  {
    "comment": "plpgsql - Statement 129",
    "query": "insert into WSlot values ('WS.102.1b', '102', '', '')"
  },
  {
    "comment": "plpgsql - Statement 130",
    "query": "insert into WSlot values ('WS.102.2a', '102', '', '')"
  },
  {
    "comment": "plpgsql - Statement 131",
    "query": "insert into WSlot values ('WS.102.2b', '102', '', '')"
  },
  {
    "comment": "plpgsql - Statement 132",
    "query": "insert into WSlot values ('WS.102.3a', '102', '', '')"
  },
  {
    "comment": "plpgsql - Statement 133",
    "query": "insert into WSlot values ('WS.102.3b', '102', '', '')"
  },
  {
    "comment": "plpgsql - Statement 134",
    "query": "insert into WSlot values ('WS.105.1a', '105', '', '')"
  },
  {
    "comment": "plpgsql - Statement 135",
    "query": "insert into WSlot values ('WS.105.1b', '105', '', '')"
  },
  {
    "comment": "plpgsql - Statement 136",
    "query": "insert into WSlot values ('WS.105.2a', '105', '', '')"
  },
  {
    "comment": "plpgsql - Statement 137",
    "query": "insert into WSlot values ('WS.105.2b', '105', '', '')"
  },
  {
    "comment": "plpgsql - Statement 138",
    "query": "insert into WSlot values ('WS.105.3a', '105', '', '')"
  },
  {
    "comment": "plpgsql - Statement 139",
    "query": "insert into WSlot values ('WS.105.3b', '105', '', '')"
  },
  {
    "comment": "plpgsql - Statement 140",
    "query": "insert into WSlot values ('WS.106.1a', '106', '', '')"
  },
  {
    "comment": "plpgsql - Statement 141",
    "query": "insert into WSlot values ('WS.106.1b', '106', '', '')"
  },
  {
    "comment": "plpgsql - Statement 142",
    "query": "insert into WSlot values ('WS.106.2a', '106', '', '')"
  },
  {
    "comment": "plpgsql - Statement 143",
    "query": "insert into WSlot values ('WS.106.2b', '106', '', '')"
  },
  {
    "comment": "plpgsql - Statement 144",
    "query": "insert into WSlot values ('WS.106.3a', '106', '', '')"
  },
  {
    "comment": "plpgsql - Statement 145",
    "query": "insert into WSlot values ('WS.106.3b', '106', '', '')"
  },
  {
    "comment": "plpgsql - Statement 146",
    "query": "insert into PField values ('PF0_1', 'Wallslots basement')"
  },
  {
    "comment": "plpgsql - Statement 147",
    "query": "insert into PSlot values ('PS.base.a1', 'PF0_1', '', '')"
  },
  {
    "comment": "plpgsql - Statement 148",
    "query": "insert into PSlot values ('PS.base.a2', 'PF0_1', '', '')"
  },
  {
    "comment": "plpgsql - Statement 149",
    "query": "insert into PSlot values ('PS.base.a3', 'PF0_1', '', '')"
  },
  {
    "comment": "plpgsql - Statement 150",
    "query": "insert into PSlot values ('PS.base.a4', 'PF0_1', '', '')"
  },
  {
    "comment": "plpgsql - Statement 151",
    "query": "insert into PSlot values ('PS.base.a5', 'PF0_1', '', '')"
  },
  {
    "comment": "plpgsql - Statement 152",
    "query": "insert into PSlot values ('PS.base.a6', 'PF0_1', '', '')"
  },
  {
    "comment": "plpgsql - Statement 153",
    "query": "insert into PSlot values ('PS.base.b1', 'PF0_1', '', 'WS.002.1a')"
  },
  {
    "comment": "plpgsql - Statement 154",
    "query": "insert into PSlot values ('PS.base.b2', 'PF0_1', '', 'WS.002.1b')"
  },
  {
    "comment": "plpgsql - Statement 155",
    "query": "insert into PSlot values ('PS.base.b3', 'PF0_1', '', 'WS.002.2a')"
  },
  {
    "comment": "plpgsql - Statement 156",
    "query": "insert into PSlot values ('PS.base.b4', 'PF0_1', '', 'WS.002.2b')"
  },
  {
    "comment": "plpgsql - Statement 157",
    "query": "insert into PSlot values ('PS.base.b5', 'PF0_1', '', 'WS.002.3a')"
  },
  {
    "comment": "plpgsql - Statement 158",
    "query": "insert into PSlot values ('PS.base.b6', 'PF0_1', '', 'WS.002.3b')"
  },
  {
    "comment": "plpgsql - Statement 159",
    "query": "insert into PSlot values ('PS.base.c1', 'PF0_1', '', 'WS.003.1a')"
  },
  {
    "comment": "plpgsql - Statement 160",
    "query": "insert into PSlot values ('PS.base.c2', 'PF0_1', '', 'WS.003.1b')"
  },
  {
    "comment": "plpgsql - Statement 161",
    "query": "insert into PSlot values ('PS.base.c3', 'PF0_1', '', 'WS.003.2a')"
  },
  {
    "comment": "plpgsql - Statement 162",
    "query": "insert into PSlot values ('PS.base.c4', 'PF0_1', '', 'WS.003.2b')"
  },
  {
    "comment": "plpgsql - Statement 163",
    "query": "insert into PSlot values ('PS.base.c5', 'PF0_1', '', 'WS.003.3a')"
  },
  {
    "comment": "plpgsql - Statement 164",
    "query": "insert into PSlot values ('PS.base.c6', 'PF0_1', '', 'WS.003.3b')"
  },
  {
    "comment": "plpgsql - Statement 165",
    "query": "insert into PField values ('PF0_X', 'Phonelines basement')"
  },
  {
    "comment": "plpgsql - Statement 166",
    "query": "insert into PSlot values ('PS.base.ta1', 'PF0_X', '', '')"
  },
  {
    "comment": "plpgsql - Statement 167",
    "query": "insert into PSlot values ('PS.base.ta2', 'PF0_X', '', '')"
  },
  {
    "comment": "plpgsql - Statement 168",
    "query": "insert into PSlot values ('PS.base.ta3', 'PF0_X', '', '')"
  },
  {
    "comment": "plpgsql - Statement 169",
    "query": "insert into PSlot values ('PS.base.ta4', 'PF0_X', '', '')"
  },
  {
    "comment": "plpgsql - Statement 170",
    "query": "insert into PSlot values ('PS.base.ta5', 'PF0_X', '', '')"
  },
  {
    "comment": "plpgsql - Statement 171",
    "query": "insert into PSlot values ('PS.base.ta6', 'PF0_X', '', '')"
  },
  {
    "comment": "plpgsql - Statement 172",
    "query": "insert into PSlot values ('PS.base.tb1', 'PF0_X', '', '')"
  },
  {
    "comment": "plpgsql - Statement 173",
    "query": "insert into PSlot values ('PS.base.tb2', 'PF0_X', '', '')"
  },
  {
    "comment": "plpgsql - Statement 174",
    "query": "insert into PSlot values ('PS.base.tb3', 'PF0_X', '', '')"
  },
  {
    "comment": "plpgsql - Statement 175",
    "query": "insert into PSlot values ('PS.base.tb4', 'PF0_X', '', '')"
  },
  {
    "comment": "plpgsql - Statement 176",
    "query": "insert into PSlot values ('PS.base.tb5', 'PF0_X', '', '')"
  },
  {
    "comment": "plpgsql - Statement 177",
    "query": "insert into PSlot values ('PS.base.tb6', 'PF0_X', '', '')"
  },
  {
    "comment": "plpgsql - Statement 178",
    "query": "insert into PField values ('PF1_1', 'Wallslots first floor')"
  },
  {
    "comment": "plpgsql - Statement 179",
    "query": "insert into PSlot values ('PS.first.a1', 'PF1_1', '', 'WS.101.1a')"
  },
  {
    "comment": "plpgsql - Statement 180",
    "query": "insert into PSlot values ('PS.first.a2', 'PF1_1', '', 'WS.101.1b')"
  },
  {
    "comment": "plpgsql - Statement 181",
    "query": "insert into PSlot values ('PS.first.a3', 'PF1_1', '', 'WS.101.2a')"
  },
  {
    "comment": "plpgsql - Statement 182",
    "query": "insert into PSlot values ('PS.first.a4', 'PF1_1', '', 'WS.101.2b')"
  },
  {
    "comment": "plpgsql - Statement 183",
    "query": "insert into PSlot values ('PS.first.a5', 'PF1_1', '', 'WS.101.3a')"
  },
  {
    "comment": "plpgsql - Statement 184",
    "query": "insert into PSlot values ('PS.first.a6', 'PF1_1', '', 'WS.101.3b')"
  },
  {
    "comment": "plpgsql - Statement 185",
    "query": "insert into PSlot values ('PS.first.b1', 'PF1_1', '', 'WS.102.1a')"
  },
  {
    "comment": "plpgsql - Statement 186",
    "query": "insert into PSlot values ('PS.first.b2', 'PF1_1', '', 'WS.102.1b')"
  },
  {
    "comment": "plpgsql - Statement 187",
    "query": "insert into PSlot values ('PS.first.b3', 'PF1_1', '', 'WS.102.2a')"
  },
  {
    "comment": "plpgsql - Statement 188",
    "query": "insert into PSlot values ('PS.first.b4', 'PF1_1', '', 'WS.102.2b')"
  },
  {
    "comment": "plpgsql - Statement 189",
    "query": "insert into PSlot values ('PS.first.b5', 'PF1_1', '', 'WS.102.3a')"
  },
  {
    "comment": "plpgsql - Statement 190",
    "query": "insert into PSlot values ('PS.first.b6', 'PF1_1', '', 'WS.102.3b')"
  },
  {
    "comment": "plpgsql - Statement 191",
    "query": "insert into PSlot values ('PS.first.c1', 'PF1_1', '', 'WS.105.1a')"
  },
  {
    "comment": "plpgsql - Statement 192",
    "query": "insert into PSlot values ('PS.first.c2', 'PF1_1', '', 'WS.105.1b')"
  },
  {
    "comment": "plpgsql - Statement 193",
    "query": "insert into PSlot values ('PS.first.c3', 'PF1_1', '', 'WS.105.2a')"
  },
  {
    "comment": "plpgsql - Statement 194",
    "query": "insert into PSlot values ('PS.first.c4', 'PF1_1', '', 'WS.105.2b')"
  },
  {
    "comment": "plpgsql - Statement 195",
    "query": "insert into PSlot values ('PS.first.c5', 'PF1_1', '', 'WS.105.3a')"
  },
  {
    "comment": "plpgsql - Statement 196",
    "query": "insert into PSlot values ('PS.first.c6', 'PF1_1', '', 'WS.105.3b')"
  },
  {
    "comment": "plpgsql - Statement 197",
    "query": "insert into PSlot values ('PS.first.d1', 'PF1_1', '', 'WS.106.1a')"
  },
  {
    "comment": "plpgsql - Statement 198",
    "query": "insert into PSlot values ('PS.first.d2', 'PF1_1', '', 'WS.106.1b')"
  },
  {
    "comment": "plpgsql - Statement 199",
    "query": "insert into PSlot values ('PS.first.d3', 'PF1_1', '', 'WS.106.2a')"
  },
  {
    "comment": "plpgsql - Statement 200",
    "query": "insert into PSlot values ('PS.first.d4', 'PF1_1', '', 'WS.106.2b')"
  },
  {
    "comment": "plpgsql - Statement 201",
    "query": "insert into PSlot values ('PS.first.d5', 'PF1_1', '', 'WS.106.3a')"
  },
  {
    "comment": "plpgsql - Statement 202",
    "query": "insert into PSlot values ('PS.first.d6', 'PF1_1', '', 'WS.106.3b')"
  },
  {
    "comment": "plpgsql - Statement 203",
    "query": "update PSlot set backlink = 'WS.001.1a' where slotname = 'PS.base.a1'"
  },
  {
    "comment": "plpgsql - Statement 204",
    "query": "update PSlot set backlink = 'WS.001.1b' where slotname = 'PS.base.a3'"
  },
  {
    "comment": "plpgsql - Statement 205",
    "query": "select * from WSlot where roomno = '001' order by slotname"
  },
  {
    "comment": "plpgsql - Statement 206",
    "query": "select * from PSlot where slotname ~ 'PS.base.a' order by slotname"
  },
  {
    "comment": "plpgsql - Statement 207",
    "query": "update PSlot set backlink = 'WS.001.2a' where slotname = 'PS.base.a3'"
  },
  {
    "comment": "plpgsql - Statement 208",
    "query": "update PSlot set backlink = 'WS.001.1b' where slotname = 'PS.base.a2'"
  },
  {
    "comment": "plpgsql - Statement 209",
    "query": "update WSlot set backlink = 'PS.base.a4' where slotname = 'WS.001.2b'"
  },
  {
    "comment": "plpgsql - Statement 210",
    "query": "update WSlot set backlink = 'PS.base.a6' where slotname = 'WS.001.3a'"
  },
  {
    "comment": "plpgsql - Statement 211",
    "query": "update WSlot set backlink = 'PS.base.a6' where slotname = 'WS.001.3b'"
  },
  {
    "comment": "plpgsql - Statement 212",
    "query": "update WSlot set backlink = 'PS.base.a5' where slotname = 'WS.001.3a'"
  },
  {
    "comment": "plpgsql - Statement 213",
    "query": "insert into PField values ('PF1_2', 'Phonelines first floor')"
  },
  {
    "comment": "plpgsql - Statement 214",
    "query": "insert into PSlot values ('PS.first.ta1', 'PF1_2', '', '')"
  },
  {
    "comment": "plpgsql - Statement 215",
    "query": "insert into PSlot values ('PS.first.ta2', 'PF1_2', '', '')"
  },
  {
    "comment": "plpgsql - Statement 216",
    "query": "insert into PSlot values ('PS.first.ta3', 'PF1_2', '', '')"
  },
  {
    "comment": "plpgsql - Statement 217",
    "query": "insert into PSlot values ('PS.first.ta4', 'PF1_2', '', '')"
  },
  {
    "comment": "plpgsql - Statement 218",
    "query": "insert into PSlot values ('PS.first.ta5', 'PF1_2', '', '')"
  },
  {
    "comment": "plpgsql - Statement 219",
    "query": "insert into PSlot values ('PS.first.ta6', 'PF1_2', '', '')"
  },
  {
    "comment": "plpgsql - Statement 220",
    "query": "insert into PSlot values ('PS.first.tb1', 'PF1_2', '', '')"
  },
  {
    "comment": "plpgsql - Statement 221",
    "query": "insert into PSlot values ('PS.first.tb2', 'PF1_2', '', '')"
  },
  {
    "comment": "plpgsql - Statement 222",
    "query": "insert into PSlot values ('PS.first.tb3', 'PF1_2', '', '')"
  },
  {
    "comment": "plpgsql - Statement 223",
    "query": "insert into PSlot values ('PS.first.tb4', 'PF1_2', '', '')"
  },
  {
    "comment": "plpgsql - Statement 224",
    "query": "insert into PSlot values ('PS.first.tb5', 'PF1_2', '', '')"
  },
  {
    "comment": "plpgsql - Statement 225",
    "query": "insert into PSlot values ('PS.first.tb6', 'PF1_2', '', '')"
  },
  {
    "comment": "plpgsql - Statement 226",
    "query": "update PField set name = 'PF0_2' where name = 'PF0_X'"
  },
  {
    "comment": "plpgsql - Statement 227",
    "query": "select * from PSlot order by slotname"
  },
  {
    "comment": "plpgsql - Statement 228",
    "query": "select * from WSlot order by slotname"
  },
  {
    "comment": "plpgsql - Statement 229",
    "query": "insert into PLine values ('PL.001', '-0', 'Central call', 'PS.base.ta1')"
  },
  {
    "comment": "plpgsql - Statement 230",
    "query": "insert into PLine values ('PL.002', '-101', '', 'PS.base.ta2')"
  },
  {
    "comment": "plpgsql - Statement 231",
    "query": "insert into PLine values ('PL.003', '-102', '', 'PS.base.ta3')"
  },
  {
    "comment": "plpgsql - Statement 232",
    "query": "insert into PLine values ('PL.004', '-103', '', 'PS.base.ta5')"
  },
  {
    "comment": "plpgsql - Statement 233",
    "query": "insert into PLine values ('PL.005', '-104', '', 'PS.base.ta6')"
  },
  {
    "comment": "plpgsql - Statement 234",
    "query": "insert into PLine values ('PL.006', '-106', '', 'PS.base.tb2')"
  },
  {
    "comment": "plpgsql - Statement 235",
    "query": "insert into PLine values ('PL.007', '-108', '', 'PS.base.tb3')"
  },
  {
    "comment": "plpgsql - Statement 236",
    "query": "insert into PLine values ('PL.008', '-109', '', 'PS.base.tb4')"
  },
  {
    "comment": "plpgsql - Statement 237",
    "query": "insert into PLine values ('PL.009', '-121', '', 'PS.base.tb5')"
  },
  {
    "comment": "plpgsql - Statement 238",
    "query": "insert into PLine values ('PL.010', '-122', '', 'PS.base.tb6')"
  },
  {
    "comment": "plpgsql - Statement 239",
    "query": "insert into PLine values ('PL.015', '-134', '', 'PS.first.ta1')"
  },
  {
    "comment": "plpgsql - Statement 240",
    "query": "insert into PLine values ('PL.016', '-137', '', 'PS.first.ta3')"
  },
  {
    "comment": "plpgsql - Statement 241",
    "query": "insert into PLine values ('PL.017', '-139', '', 'PS.first.ta4')"
  },
  {
    "comment": "plpgsql - Statement 242",
    "query": "insert into PLine values ('PL.018', '-362', '', 'PS.first.tb1')"
  },
  {
    "comment": "plpgsql - Statement 243",
    "query": "insert into PLine values ('PL.019', '-363', '', 'PS.first.tb2')"
  },
  {
    "comment": "plpgsql - Statement 244",
    "query": "insert into PLine values ('PL.020', '-364', '', 'PS.first.tb3')"
  },
  {
    "comment": "plpgsql - Statement 245",
    "query": "insert into PLine values ('PL.021', '-365', '', 'PS.first.tb5')"
  },
  {
    "comment": "plpgsql - Statement 246",
    "query": "insert into PLine values ('PL.022', '-367', '', 'PS.first.tb6')"
  },
  {
    "comment": "plpgsql - Statement 247",
    "query": "insert into PLine values ('PL.028', '-501', 'Fax entrance', 'PS.base.ta2')"
  },
  {
    "comment": "plpgsql - Statement 248",
    "query": "insert into PLine values ('PL.029', '-502', 'Fax first floor', 'PS.first.ta1')"
  },
  {
    "comment": "plpgsql - Statement 249",
    "query": "insert into PHone values ('PH.hc001', 'Hicom standard', 'WS.001.1a')"
  },
  {
    "comment": "plpgsql - Statement 250",
    "query": "update PSlot set slotlink = 'PS.base.ta1' where slotname = 'PS.base.a1'"
  },
  {
    "comment": "plpgsql - Statement 251",
    "query": "insert into PHone values ('PH.hc002', 'Hicom standard', 'WS.002.1a')"
  },
  {
    "comment": "plpgsql - Statement 252",
    "query": "update PSlot set slotlink = 'PS.base.ta5' where slotname = 'PS.base.b1'"
  },
  {
    "comment": "plpgsql - Statement 253",
    "query": "insert into PHone values ('PH.hc003', 'Hicom standard', 'WS.002.2a')"
  },
  {
    "comment": "plpgsql - Statement 254",
    "query": "update PSlot set slotlink = 'PS.base.tb2' where slotname = 'PS.base.b3'"
  },
  {
    "comment": "plpgsql - Statement 255",
    "query": "insert into PHone values ('PH.fax001', 'Canon fax', 'WS.001.2a')"
  },
  {
    "comment": "plpgsql - Statement 256",
    "query": "update PSlot set slotlink = 'PS.base.ta2' where slotname = 'PS.base.a3'"
  },
  {
    "comment": "plpgsql - Statement 257",
    "query": "insert into Hub values ('base.hub1', 'Patchfield PF0_1 hub', 16)"
  },
  {
    "comment": "plpgsql - Statement 258",
    "query": "insert into System values ('orion', 'PC')"
  },
  {
    "comment": "plpgsql - Statement 259",
    "query": "insert into IFace values ('IF', 'orion', 'eth0', 'WS.002.1b')"
  },
  {
    "comment": "plpgsql - Statement 260",
    "query": "update PSlot set slotlink = 'HS.base.hub1.1' where slotname = 'PS.base.b2'"
  },
  {
    "comment": "plpgsql - Statement 261",
    "query": "select * from PField_v1 where pfname = 'PF0_1' order by slotname"
  },
  {
    "comment": "plpgsql - Statement 262",
    "query": "select * from PField_v1 where pfname = 'PF0_2' order by slotname"
  },
  {
    "comment": "plpgsql - Statement 263",
    "query": "insert into PField values ('PF1_1', 'should fail due to unique index')"
  },
  {
    "comment": "plpgsql - Statement 264",
    "query": "update PSlot set backlink = 'WS.not.there' where slotname = 'PS.base.a1'"
  },
  {
    "comment": "plpgsql - Statement 265",
    "query": "update PSlot set backlink = 'XX.illegal' where slotname = 'PS.base.a1'"
  },
  {
    "comment": "plpgsql - Statement 266",
    "query": "update PSlot set slotlink = 'PS.not.there' where slotname = 'PS.base.a1'"
  },
  {
    "comment": "plpgsql - Statement 267",
    "query": "update PSlot set slotlink = 'XX.illegal' where slotname = 'PS.base.a1'"
  },
  {
    "comment": "plpgsql - Statement 268",
    "query": "insert into HSlot values ('HS', 'base.hub1', 1, '')"
  },
  {
    "comment": "plpgsql - Statement 269",
    "query": "insert into HSlot values ('HS', 'base.hub1', 20, '')"
  },
  {
    "comment": "plpgsql - Statement 270",
    "query": "delete from HSlot"
  },
  {
    "comment": "plpgsql - Statement 271",
    "query": "insert into IFace values ('IF', 'notthere', 'eth0', '')"
  },
  {
    "comment": "plpgsql - Statement 272",
    "query": "insert into IFace values ('IF', 'orion', 'ethernet_interface_name_too_long', '')"
  },
  {
    "comment": "plpgsql - Statement 273",
    "query": "CREATE FUNCTION recursion_test(int,int) RETURNS text AS ' DECLARE rslt text; BEGIN IF $1 <= 0 THEN rslt = CAST($2 AS TEXT); ELSE rslt = CAST($1 AS TEXT) || '','' || recursion_test($1 - 1, $2); END IF; RETURN rslt; END;' LANGUAGE plpgsql"
  },
  {
    "comment": "plpgsql - Statement 274",
    "query": "SELECT recursion_test(4,3)"
  },
  {
    "comment": "plpgsql - Statement 275",
    "query": "CREATE TABLE found_test_tbl (a int)"
  },
  {
    "comment": "plpgsql - Statement 276",
    "query": "create function test_found() returns boolean as ' declare begin insert into found_test_tbl values (1); if FOUND then insert into found_test_tbl values (2); end if;  update found_test_tbl set a = 100 where a = 1; if FOUND then insert into found_test_tbl values (3); end if;  delete from found_test_tbl where a = 9999; if not FOUND then insert into found_test_tbl values (4); end if;  for i in 1 .. 10 loop  end loop; if FOUND then insert into found_test_tbl values (5); end if;   for i in 2 .. 1 loop  end loop; if not FOUND then insert into found_test_tbl values (6); end if; return true; end;' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 277",
    "query": "select test_found()"
  },
  {
    "comment": "plpgsql - Statement 278",
    "query": "select * from found_test_tbl"
  },
  {
    "comment": "plpgsql - Statement 279",
    "query": "create function test_table_func_rec() returns setof found_test_tbl as ' DECLARE rec RECORD; BEGIN FOR rec IN select * from found_test_tbl LOOP RETURN NEXT rec; END LOOP; RETURN; END;' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 280",
    "query": "select * from test_table_func_rec()"
  },
  {
    "comment": "plpgsql - Statement 281",
    "query": "create function test_table_func_row() returns setof found_test_tbl as ' DECLARE row found_test_tbl%ROWTYPE; BEGIN FOR row IN select * from found_test_tbl LOOP RETURN NEXT row; END LOOP; RETURN; END;' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 282",
    "query": "select * from test_table_func_row()"
  },
  {
    "comment": "plpgsql - Statement 283",
    "query": "create function test_ret_set_scalar(int,int) returns setof int as ' DECLARE i int; BEGIN FOR i IN $1 .. $2 LOOP RETURN NEXT i + 1; END LOOP; RETURN; END;' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 284",
    "query": "select * from test_ret_set_scalar(1,10)"
  },
  {
    "comment": "plpgsql - Statement 285",
    "query": "create function test_ret_set_rec_dyn(int) returns setof record as ' DECLARE retval RECORD; BEGIN IF $1 > 10 THEN SELECT INTO retval 5, 10, 15; RETURN NEXT retval; RETURN NEXT retval; ELSE SELECT INTO retval 50, 5::numeric, ''xxx''::text; RETURN NEXT retval; RETURN NEXT retval; END IF; RETURN; END;' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 286",
    "query": "SELECT * FROM test_ret_set_rec_dyn(1500) AS (a int, b int, c int)"
  },
  {
    "comment": "plpgsql - Statement 287",
    "query": "SELECT * FROM test_ret_set_rec_dyn(5) AS (a int, b numeric, c text)"
  },
  {
    "comment": "plpgsql - Statement 288",
    "query": "create function test_ret_rec_dyn(int) returns record as ' DECLARE retval RECORD; BEGIN IF $1 > 10 THEN SELECT INTO retval 5, 10, 15; RETURN retval; ELSE SELECT INTO retval 50, 5::numeric, ''xxx''::text; RETURN retval; END IF; END;' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 289",
    "query": "SELECT * FROM test_ret_rec_dyn(1500) AS (a int, b int, c int)"
  },
  {
    "comment": "plpgsql - Statement 290",
    "query": "SELECT * FROM test_ret_rec_dyn(5) AS (a int, b numeric, c text)"
  },
  {
    "comment": "plpgsql - Statement 291",
    "query": "create function f1(x anyelement) returns anyelement as $$ begin return x + 1; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 292",
    "query": "select f1(42) as int, f1(4.5) as num"
  },
  {
    "comment": "plpgsql - Statement 293",
    "query": "select f1(point(3,4))"
  },
  {
    "comment": "plpgsql - Statement 294",
    "query": "drop function f1(x anyelement)"
  },
  {
    "comment": "plpgsql - Statement 295",
    "query": "create function f1(x anyelement) returns anyarray as $$ begin return array[x + 1, x + 2]; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 296",
    "query": "create function f1(x anyarray) returns anyelement as $$ begin return x[1]; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 297",
    "query": "select f1(array[2,4]) as int, f1(array[4.5, 7.7]) as num"
  },
  {
    "comment": "plpgsql - Statement 298",
    "query": "select f1(stavalues1) from pg_statistic"
  },
  {
    "comment": "plpgsql - Statement 299",
    "query": "drop function f1(x anyarray)"
  },
  {
    "comment": "plpgsql - Statement 300",
    "query": "create function f1(x anyarray) returns anyarray as $$ begin return x; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 301",
    "query": "create function f1(x anyelement) returns anyrange as $$ begin return array[x + 1, x + 2]; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 302",
    "query": "create function f1(x anyrange) returns anyarray as $$ begin return array[lower(x), upper(x)]; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 303",
    "query": "select f1(int4range(42, 49)) as int, f1(float8range(4.5, 7.8)) as num"
  },
  {
    "comment": "plpgsql - Statement 304",
    "query": "drop function f1(x anyrange)"
  },
  {
    "comment": "plpgsql - Statement 305",
    "query": "create function f1(x anycompatible, y anycompatible) returns anycompatiblearray as $$ begin return array[x, y]; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 306",
    "query": "select f1(2, 4) as int, f1(2, 4.5) as num"
  },
  {
    "comment": "plpgsql - Statement 307",
    "query": "drop function f1(x anycompatible, y anycompatible)"
  },
  {
    "comment": "plpgsql - Statement 308",
    "query": "create function f1(x anycompatiblerange, y anycompatible, z anycompatible) returns anycompatiblearray as $$ begin return array[lower(x), upper(x), y, z]; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 309",
    "query": "select f1(int4range(42, 49), 11, 2::smallint) as int, f1(float8range(4.5, 7.8), 7.8, 11::real) as num"
  },
  {
    "comment": "plpgsql - Statement 310",
    "query": "select f1(int4range(42, 49), 11, 4.5) as fail"
  },
  {
    "comment": "plpgsql - Statement 311",
    "query": "drop function f1(x anycompatiblerange, y anycompatible, z anycompatible)"
  },
  {
    "comment": "plpgsql - Statement 312",
    "query": "create function f1(x anycompatible) returns anycompatiblerange as $$ begin return array[x + 1, x + 2]; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 313",
    "query": "create function f1(x anycompatiblerange, y anycompatiblearray) returns anycompatiblerange as $$ begin return x; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 314",
    "query": "select f1(int4range(42, 49), array[11]) as int, f1(float8range(4.5, 7.8), array[7]) as num"
  },
  {
    "comment": "plpgsql - Statement 315",
    "query": "drop function f1(x anycompatiblerange, y anycompatiblearray)"
  },
  {
    "comment": "plpgsql - Statement 316",
    "query": "create function f1(a anyelement, b anyarray, c anycompatible, d anycompatible, OUT x anyarray, OUT y anycompatiblearray) as $$ begin x := a || b; y := array[c, d]; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 317",
    "query": "select x, pg_typeof(x), y, pg_typeof(y) from f1(11, array[1, 2], 42, 34.5)"
  },
  {
    "comment": "plpgsql - Statement 318",
    "query": "select x, pg_typeof(x), y, pg_typeof(y) from f1(11, array[1, 2], point(1,2), point(3,4))"
  },
  {
    "comment": "plpgsql - Statement 319",
    "query": "select x, pg_typeof(x), y, pg_typeof(y) from f1(11, '{1,2}', point(1,2), '(3,4)')"
  },
  {
    "comment": "plpgsql - Statement 320",
    "query": "select x, pg_typeof(x), y, pg_typeof(y) from f1(11, array[1, 2.2], 42, 34.5)"
  },
  {
    "comment": "plpgsql - Statement 321",
    "query": "drop function f1(a anyelement, b anyarray, c anycompatible, d anycompatible)"
  },
  {
    "comment": "plpgsql - Statement 322",
    "query": "create function f1(in i int, out j int) returns int as $$ begin return i+1; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 323",
    "query": "create function f1(in i int, out j int) as $$ begin j := i+1; return; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 324",
    "query": "select f1(42)"
  },
  {
    "comment": "plpgsql - Statement 325",
    "query": "select * from f1(42)"
  },
  {
    "comment": "plpgsql - Statement 326",
    "query": "create or replace function f1(inout i int) as $$ begin i := i+1; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 327",
    "query": "drop function f1(int)"
  },
  {
    "comment": "plpgsql - Statement 328",
    "query": "create function f1(in i int, out j int) returns setof int as $$ begin j := i+1; return next; j := i+2; return next; return; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 329",
    "query": "create function f1(in i int, out j int, out k text) as $$ begin j := i; j := j+1; k := 'foo'; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 330",
    "query": "create function f1(in i int, out j int, out k text) returns setof record as $$ begin j := i+1; k := 'foo'; return next; j := j+1; k := 'foot'; return next; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 331",
    "query": "create function duplic(in i anyelement, out j anyelement, out k anyarray) as $$ begin j := i; k := array[j,j]; return; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 332",
    "query": "select * from duplic(42)"
  },
  {
    "comment": "plpgsql - Statement 333",
    "query": "select * from duplic('foo'::text)"
  },
  {
    "comment": "plpgsql - Statement 334",
    "query": "drop function duplic(anyelement)"
  },
  {
    "comment": "plpgsql - Statement 335",
    "query": "create function duplic(in i anycompatiblerange, out j anycompatible, out k anycompatiblearray) as $$ begin j := lower(i); k := array[lower(i),upper(i)]; return; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 336",
    "query": "select * from duplic(int4range(42,49))"
  },
  {
    "comment": "plpgsql - Statement 337",
    "query": "select * from duplic(textrange('aaa', 'bbb'))"
  },
  {
    "comment": "plpgsql - Statement 338",
    "query": "drop function duplic(anycompatiblerange)"
  },
  {
    "comment": "plpgsql - Statement 339",
    "query": "create table perform_test ( a\tINT, b\tINT )"
  },
  {
    "comment": "plpgsql - Statement 340",
    "query": "create function perform_simple_func(int) returns boolean as ' BEGIN IF $1 < 20 THEN INSERT INTO perform_test VALUES ($1, $1 + 10); RETURN TRUE; ELSE RETURN FALSE; END IF; END;' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 341",
    "query": "create function perform_test_func() returns void as ' BEGIN IF FOUND then INSERT INTO perform_test VALUES (100, 100); END IF;  PERFORM perform_simple_func(5);  IF FOUND then INSERT INTO perform_test VALUES (100, 100); END IF;  PERFORM perform_simple_func(50);  IF FOUND then INSERT INTO perform_test VALUES (100, 100); END IF;  RETURN; END;' language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 342",
    "query": "SELECT perform_test_func()"
  },
  {
    "comment": "plpgsql - Statement 343",
    "query": "SELECT * FROM perform_test"
  },
  {
    "comment": "plpgsql - Statement 344",
    "query": "drop table perform_test"
  },
  {
    "comment": "plpgsql - Statement 345",
    "query": "create temp table users(login text, id serial)"
  },
  {
    "comment": "plpgsql - Statement 346",
    "query": "create function sp_id_user(a_login text) returns int as $$ declare x int; begin select into x id from users where login = a_login; if found then return x; end if; return 0; end$$ language plpgsql stable"
  },
  {
    "comment": "plpgsql - Statement 347",
    "query": "insert into users values('user1')"
  },
  {
    "comment": "plpgsql - Statement 348",
    "query": "select sp_id_user('user1')"
  },
  {
    "comment": "plpgsql - Statement 349",
    "query": "select sp_id_user('userx')"
  },
  {
    "comment": "plpgsql - Statement 350",
    "query": "create function sp_add_user(a_login text) returns int as $$ declare my_id_user int; begin my_id_user = sp_id_user( a_login ); IF  my_id_user > 0 THEN RETURN -1; END IF; INSERT INTO users ( login ) VALUES ( a_login ); my_id_user = sp_id_user( a_login ); IF  my_id_user = 0 THEN RETURN -2; END IF; RETURN my_id_user; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 351",
    "query": "select sp_add_user('user1')"
  },
  {
    "comment": "plpgsql - Statement 352",
    "query": "select sp_add_user('user2')"
  },
  {
    "comment": "plpgsql - Statement 353",
    "query": "select sp_add_user('user3')"
  },
  {
    "comment": "plpgsql - Statement 354",
    "query": "drop function sp_add_user(text)"
  },
  {
    "comment": "plpgsql - Statement 355",
    "query": "drop function sp_id_user(text)"
  },
  {
    "comment": "plpgsql - Statement 356",
    "query": "create table rc_test (a int, b int)"
  },
  {
    "comment": "plpgsql - Statement 357",
    "query": "copy rc_test from stdin"
  },
  {
    "comment": "plpgsql - Statement 358",
    "query": "5\t10 50\t100 500\t1000 \\. create function return_unnamed_refcursor() returns refcursor as $$ declare rc refcursor; begin open rc for select a from rc_test; return rc; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 359",
    "query": "create function use_refcursor(rc refcursor) returns int as $$ declare rc refcursor; x record; begin rc := return_unnamed_refcursor(); fetch next from rc into x; return x.a; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 360",
    "query": "select use_refcursor(return_unnamed_refcursor())"
  },
  {
    "comment": "plpgsql - Statement 361",
    "query": "create function return_refcursor(rc refcursor) returns refcursor as $$ begin open rc for select a from rc_test; return rc; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 362",
    "query": "create function refcursor_test1(refcursor) returns refcursor as $$ begin perform return_refcursor($1); return $1; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 363",
    "query": "begin"
  },
  {
    "comment": "plpgsql - Statement 364",
    "query": "select refcursor_test1('test1')"
  },
  {
    "comment": "plpgsql - Statement 365",
    "query": "fetch next in test1"
  },
  {
    "comment": "plpgsql - Statement 366",
    "query": "select refcursor_test1('test2')"
  },
  {
    "comment": "plpgsql - Statement 367",
    "query": "fetch all from test2"
  },
  {
    "comment": "plpgsql - Statement 368",
    "query": "commit"
  },
  {
    "comment": "plpgsql - Statement 369",
    "query": "fetch next from test1"
  },
  {
    "comment": "plpgsql - Statement 370",
    "query": "create function refcursor_test2(int, int) returns boolean as $$ declare c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2; nonsense record; begin open c1($1, $2); fetch c1 into nonsense; close c1; if found then return true; else return false; end if; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 371",
    "query": "select refcursor_test2(20000, 20000) as \"Should be false\", refcursor_test2(20, 20) as \"Should be true\""
  },
  {
    "comment": "plpgsql - Statement 372",
    "query": "create function constant_refcursor() returns refcursor as $$ declare rc constant refcursor; begin open rc for select a from rc_test; return rc; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 373",
    "query": "select constant_refcursor()"
  },
  {
    "comment": "plpgsql - Statement 374",
    "query": "create or replace function constant_refcursor() returns refcursor as $$ declare rc constant refcursor := 'my_cursor_name'; begin open rc for select a from rc_test; return rc; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 375",
    "query": "create function namedparmcursor_test1(int, int) returns boolean as $$ declare c1 cursor (param1 int, param12 int) for select * from rc_test where a > param1 and b > param12; nonsense record; begin open c1(param12 := $2, param1 := $1); fetch c1 into nonsense; close c1; if found then return true; else return false; end if; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 376",
    "query": "select namedparmcursor_test1(20000, 20000) as \"Should be false\", namedparmcursor_test1(20, 20) as \"Should be true\""
  },
  {
    "comment": "plpgsql - Statement 377",
    "query": "create function namedparmcursor_test2(int, int) returns boolean as $$ declare c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2; nonsense record; begin open c1(param1 := $1, $2); fetch c1 into nonsense; close c1; if found then return true; else return false; end if; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 378",
    "query": "select namedparmcursor_test2(20, 20)"
  },
  {
    "comment": "plpgsql - Statement 379",
    "query": "create function namedparmcursor_test3() returns void as $$ declare c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2; begin open c1(param2 := 20, 21); end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 380",
    "query": "create function namedparmcursor_test4() returns void as $$ declare c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2; begin open c1(20, param1 := 21); end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 381",
    "query": "create function namedparmcursor_test5() returns void as $$ declare c1 cursor (p1 int, p2 int) for select * from tenk1 where thousand = p1 and tenthous = p2; begin open c1 (p2 := 77, p2 := 42); end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 382",
    "query": "create function namedparmcursor_test6() returns void as $$ declare c1 cursor (p1 int, p2 int) for select * from tenk1 where thousand = p1 and tenthous = p2; begin open c1 (p2 := 77); end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 383",
    "query": "create function namedparmcursor_test7() returns void as $$ declare c1 cursor (p1 int, p2 int) for select * from tenk1 where thousand = p1 and tenthous = p2; begin open c1 (p2 := 77, p1 := 42/0); end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 384",
    "query": "select namedparmcursor_test7()"
  },
  {
    "comment": "plpgsql - Statement 385",
    "query": "create function namedparmcursor_test8() returns int4 as $$ declare c1 cursor (p1 int, p2 int) for select count(*) from tenk1 where thousand = p1 and tenthous = p2; n int4; begin open c1 (77 , 42); fetch c1 into n; return n; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 386",
    "query": "select namedparmcursor_test8()"
  },
  {
    "comment": "plpgsql - Statement 387",
    "query": "create function namedparmcursor_test9(p1 int) returns int4 as $$ declare c1 cursor (p1 int, p2 int, debug int) for select count(*) from tenk1 where thousand = p1 and tenthous = p2 and four = debug; p2 int4 := 1006; n int4; begin open c1 (p1 := p1, p2 := p2, debug := 2); fetch c1 into n; return n; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 388",
    "query": "select namedparmcursor_test9(6)"
  },
  {
    "comment": "plpgsql - Statement 389",
    "query": "create function raise_test1(int) returns int as $$ begin raise notice 'This message has too many parameters!', $1; return $1; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 390",
    "query": "create function raise_test2(int) returns int as $$ begin raise notice 'This message has too few parameters: %, %, %', $1, $1; return $1; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 391",
    "query": "create function raise_test3(int) returns int as $$ begin raise notice 'This message has no parameters (despite having %% signs in it)!'; return $1; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 392",
    "query": "select raise_test3(1)"
  },
  {
    "comment": "plpgsql - Statement 393",
    "query": "CREATE FUNCTION reraise_test() RETURNS void AS $$ BEGIN BEGIN RAISE syntax_error; EXCEPTION WHEN syntax_error THEN BEGIN raise notice 'exception % thrown in inner block, reraising', sqlerrm; RAISE; EXCEPTION WHEN OTHERS THEN raise notice 'RIGHT - exception % caught in inner block', sqlerrm; END; END; EXCEPTION WHEN OTHERS THEN raise notice 'WRONG - exception % caught in outer block', sqlerrm; END; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "plpgsql - Statement 394",
    "query": "SELECT reraise_test()"
  },
  {
    "comment": "plpgsql - Statement 395",
    "query": "create function bad_sql1() returns int as $$ declare a int; begin a := 5; Johnny Yuma; a := 10; return a; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 396",
    "query": "create function bad_sql2() returns int as $$ declare r record; begin for r in select I fought the law, the law won LOOP raise notice 'in loop'; end loop; return 5; end;$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 397",
    "query": "create function missing_return_expr() returns int as $$ begin return ; end;$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 398",
    "query": "create function void_return_expr() returns void as $$ begin return 5; end;$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 399",
    "query": "create function void_return_expr() returns void as $$ begin perform 2+2; end;$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 400",
    "query": "select void_return_expr()"
  },
  {
    "comment": "plpgsql - Statement 401",
    "query": "create function missing_return_expr() returns int as $$ begin perform 2+2; end;$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 402",
    "query": "select missing_return_expr()"
  },
  {
    "comment": "plpgsql - Statement 403",
    "query": "drop function void_return_expr()"
  },
  {
    "comment": "plpgsql - Statement 404",
    "query": "drop function missing_return_expr()"
  },
  {
    "comment": "plpgsql - Statement 405",
    "query": "create table eifoo (i integer, y integer)"
  },
  {
    "comment": "plpgsql - Statement 406",
    "query": "create type eitype as (i integer, y integer)"
  },
  {
    "comment": "plpgsql - Statement 407",
    "query": "create or replace function execute_into_test(varchar) returns record as $$ declare _r record; _rt eifoo%rowtype; _v eitype; i int; j int; k int; begin execute 'insert into '||$1||' values(10,15)'; execute 'select (row).* from (select row(10,1)::eifoo) s' into _r; raise notice '% %', _r.i, _r.y; execute 'select * from '||$1||' limit 1' into _rt; raise notice '% %', _rt.i, _rt.y; execute 'select *, 20 from '||$1||' limit 1' into i, j, k; raise notice '% % %', i, j, k; execute 'select 1,2' into _v; return _v; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 408",
    "query": "select execute_into_test('eifoo')"
  },
  {
    "comment": "plpgsql - Statement 409",
    "query": "drop table eifoo cascade"
  },
  {
    "comment": "plpgsql - Statement 410",
    "query": "drop type eitype cascade"
  },
  {
    "comment": "plpgsql - Statement 411",
    "query": "create function excpt_test1() returns void as $$ begin raise notice '% %', sqlstate, sqlerrm; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 412",
    "query": "select excpt_test1()"
  },
  {
    "comment": "plpgsql - Statement 413",
    "query": "create function excpt_test2() returns void as $$ begin begin begin raise notice '% %', sqlstate, sqlerrm; end; end; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 414",
    "query": "select excpt_test2()"
  },
  {
    "comment": "plpgsql - Statement 415",
    "query": "create function excpt_test3() returns void as $$ begin begin raise exception 'user exception'; exception when others then raise notice 'caught exception % %', sqlstate, sqlerrm; begin raise notice '% %', sqlstate, sqlerrm; perform 10/0; exception when substring_error then  raise notice 'unexpected exception: % %', sqlstate, sqlerrm; when division_by_zero then raise notice 'caught exception % %', sqlstate, sqlerrm; end; raise notice '% %', sqlstate, sqlerrm; end; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 416",
    "query": "select excpt_test3()"
  },
  {
    "comment": "plpgsql - Statement 417",
    "query": "create function excpt_test4() returns text as $$ begin begin perform 1/0; exception when others then return sqlerrm; end; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 418",
    "query": "select excpt_test4()"
  },
  {
    "comment": "plpgsql - Statement 419",
    "query": "drop function excpt_test1()"
  },
  {
    "comment": "plpgsql - Statement 420",
    "query": "drop function excpt_test2()"
  },
  {
    "comment": "plpgsql - Statement 421",
    "query": "drop function excpt_test3()"
  },
  {
    "comment": "plpgsql - Statement 422",
    "query": "drop function excpt_test4()"
  },
  {
    "comment": "plpgsql - Statement 423",
    "query": "create function raise_exprs() returns void as $$ declare a integer[] = '{10,20,30}'; c varchar = 'xyz'; i integer; begin i := 2; raise notice '%; %; %; %; %; %', a, a[i], c, (select c || 'abc'), row(10,'aaa',NULL,30), NULL; end;$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 424",
    "query": "select raise_exprs()"
  },
  {
    "comment": "plpgsql - Statement 425",
    "query": "drop function raise_exprs()"
  },
  {
    "comment": "plpgsql - Statement 426",
    "query": "create function multi_datum_use(p1 int) returns bool as $$ declare x int; y int; begin select into x,y unique1/p1, unique1/$1 from tenk1 group by unique1/p1; return x = y; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 427",
    "query": "select multi_datum_use(42)"
  },
  {
    "comment": "plpgsql - Statement 428",
    "query": "create temp table foo (f1 int, f2 int)"
  },
  {
    "comment": "plpgsql - Statement 429",
    "query": "insert into foo values (1,2), (3,4)"
  },
  {
    "comment": "plpgsql - Statement 430",
    "query": "create or replace function stricttest() returns void as $$ declare x record; begin  insert into foo values(5,6) returning * into x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 431",
    "query": "select stricttest()"
  },
  {
    "comment": "plpgsql - Statement 432",
    "query": "create or replace function stricttest() returns void as $$ declare x record; begin  insert into foo values(7,8),(9,10) returning * into x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 433",
    "query": "create or replace function stricttest() returns void as $$ declare x record; begin  execute 'insert into foo values(5,6) returning *' into x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 434",
    "query": "create or replace function stricttest() returns void as $$ declare x record; begin  execute 'insert into foo values(7,8),(9,10) returning *' into x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 435",
    "query": "select * from foo"
  },
  {
    "comment": "plpgsql - Statement 436",
    "query": "create or replace function stricttest() returns void as $$ declare x record; begin  select * from foo where f1 = 3 into strict x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 437",
    "query": "create or replace function stricttest() returns void as $$ declare x record; begin  select * from foo where f1 = 0 into strict x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 438",
    "query": "create or replace function stricttest() returns void as $$ declare x record; begin  select * from foo where f1 > 3 into strict x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 439",
    "query": "create or replace function stricttest() returns void as $$ declare x record; begin  execute 'select * from foo where f1 = 3' into strict x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 440",
    "query": "create or replace function stricttest() returns void as $$ declare x record; begin  execute 'select * from foo where f1 = 0' into strict x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 441",
    "query": "create or replace function stricttest() returns void as $$ declare x record; begin  execute 'select * from foo where f1 > 3' into strict x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 442",
    "query": "drop function stricttest()"
  },
  {
    "comment": "plpgsql - Statement 443",
    "query": "set plpgsql.print_strict_params to true"
  },
  {
    "comment": "plpgsql - Statement 444",
    "query": "create or replace function stricttest() returns void as $$ declare x record; p1 int := 2; p3 text := 'foo'; begin  select * from foo where f1 = p1 and f1::text = p3 into strict x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 445",
    "query": "create or replace function stricttest() returns void as $$ declare x record; p1 int := 2; p3 text := $a$'Valame Dios!' dijo Sancho; 'no le dije yo a vuestra merced que mirase bien lo que hacia?'$a$; begin  select * from foo where f1 = p1 and f1::text = p3 into strict x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 446",
    "query": "create or replace function stricttest() returns void as $$ declare x record; p1 int := 2; p3 text := 'foo'; begin  select * from foo where f1 > p1 or f1::text = p3  into strict x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 447",
    "query": "create or replace function stricttest() returns void as $$ declare x record; begin  execute 'select * from foo where f1 = $1 or f1::text = $2' using 0, 'foo' into strict x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 448",
    "query": "create or replace function stricttest() returns void as $$ declare x record; begin  execute 'select * from foo where f1 > $1' using 1 into strict x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 449",
    "query": "create or replace function stricttest() returns void as $$  #print_strict_params off declare x record; p1 int := 2; p3 text := 'foo'; begin  select * from foo where f1 > p1 or f1::text = p3  into strict x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 450",
    "query": "reset plpgsql.print_strict_params"
  },
  {
    "comment": "plpgsql - Statement 451",
    "query": "create or replace function stricttest() returns void as $$  #print_strict_params on declare x record; p1 int := 2; p3 text := 'foo'; begin  select * from foo where f1 > p1 or f1::text = p3  into strict x; raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 452",
    "query": "set plpgsql.extra_warnings to 'all'"
  },
  {
    "comment": "plpgsql - Statement 453",
    "query": "set plpgsql.extra_warnings to 'none'"
  },
  {
    "comment": "plpgsql - Statement 454",
    "query": "set plpgsql.extra_errors to 'all'"
  },
  {
    "comment": "plpgsql - Statement 455",
    "query": "set plpgsql.extra_errors to 'none'"
  },
  {
    "comment": "plpgsql - Statement 456",
    "query": "set plpgsql.extra_warnings to 'shadowed_variables'"
  },
  {
    "comment": "plpgsql - Statement 457",
    "query": "create or replace function shadowtest(in1 int) returns table (out1 int) as $$ declare in1 int; out1 int; begin end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 458",
    "query": "select shadowtest(1)"
  },
  {
    "comment": "plpgsql - Statement 459",
    "query": "drop function shadowtest(int)"
  },
  {
    "comment": "plpgsql - Statement 460",
    "query": "create or replace function shadowtest() returns void as $$ declare f1 int; begin declare f1 int; begin end; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 461",
    "query": "drop function shadowtest()"
  },
  {
    "comment": "plpgsql - Statement 462",
    "query": "create or replace function shadowtest(in1 int) returns void as $$ declare in1 int; begin declare in1 int; begin end; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 463",
    "query": "create or replace function shadowtest() returns void as $$ declare f1 int; c1 cursor (f1 int) for select 1; begin end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 464",
    "query": "set plpgsql.extra_errors to 'shadowed_variables'"
  },
  {
    "comment": "plpgsql - Statement 465",
    "query": "create or replace function shadowtest(f1 int) returns boolean as $$ declare f1 int; begin return 1; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 466",
    "query": "reset plpgsql.extra_errors"
  },
  {
    "comment": "plpgsql - Statement 467",
    "query": "reset plpgsql.extra_warnings"
  },
  {
    "comment": "plpgsql - Statement 468",
    "query": "set plpgsql.extra_warnings to 'too_many_rows'"
  },
  {
    "comment": "plpgsql - Statement 469",
    "query": "do $$ declare x int; begin select v from generate_series(1,2) g(v) into x; end; $$"
  },
  {
    "comment": "plpgsql - Statement 470",
    "query": "set plpgsql.extra_errors to 'too_many_rows'"
  },
  {
    "comment": "plpgsql - Statement 471",
    "query": "set plpgsql.extra_warnings to 'strict_multi_assignment'"
  },
  {
    "comment": "plpgsql - Statement 472",
    "query": "do $$ declare x int; y int; begin select 1 into x, y; select 1,2 into x, y; select 1,2,3 into x, y; end $$"
  },
  {
    "comment": "plpgsql - Statement 473",
    "query": "set plpgsql.extra_errors to 'strict_multi_assignment'"
  },
  {
    "comment": "plpgsql - Statement 474",
    "query": "create table test_01(a int, b int, c int)"
  },
  {
    "comment": "plpgsql - Statement 475",
    "query": "alter table test_01 drop column a"
  },
  {
    "comment": "plpgsql - Statement 476",
    "query": "insert into test_01 values(10,20)"
  },
  {
    "comment": "plpgsql - Statement 477",
    "query": "do $$ declare x int; y int; begin select * from test_01 into x, y; raise notice 'ok'; select * from test_01 into x; end; $$"
  },
  {
    "comment": "plpgsql - Statement 478",
    "query": "do $$ declare t test_01; begin select 1, 2 into t; raise notice 'ok'; select 1, 2, 3 into t; end; $$"
  },
  {
    "comment": "plpgsql - Statement 479",
    "query": "do $$ declare t test_01; begin select 1 into t; end; $$"
  },
  {
    "comment": "plpgsql - Statement 480",
    "query": "drop table test_01"
  },
  {
    "comment": "plpgsql - Statement 481",
    "query": "create function sc_test() returns setof integer as $$ declare c scroll cursor for select f1 from int4_tbl; x integer; begin open c; fetch last from c into x; while found loop return next x; fetch prior from c into x; end loop; close c; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 482",
    "query": "select * from sc_test()"
  },
  {
    "comment": "plpgsql - Statement 483",
    "query": "create or replace function sc_test() returns setof integer as $$ declare c no scroll cursor for select f1 from int4_tbl; x integer; begin open c; fetch last from c into x; while found loop return next x; fetch prior from c into x; end loop; close c; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 484",
    "query": "create or replace function sc_test() returns setof integer as $$ declare c refcursor; x integer; begin open c scroll for select f1 from int4_tbl; fetch last from c into x; while found loop return next x; fetch prior from c into x; end loop; close c; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 485",
    "query": "create or replace function sc_test() returns setof integer as $$ declare c refcursor; x integer; begin open c scroll for execute 'select f1 from int4_tbl'; fetch last from c into x; while found loop return next x; fetch relative -2 from c into x; end loop; close c; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 486",
    "query": "create or replace function sc_test() returns setof integer as $$ declare c refcursor; x integer; begin open c scroll for execute 'select f1 from int4_tbl'; fetch last from c into x; while found loop return next x; move backward 2 from c; fetch relative -1 from c into x; end loop; close c; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 487",
    "query": "create or replace function sc_test() returns setof integer as $$ declare c cursor for select * from generate_series(1, 10); x integer; begin open c; loop move relative 2 in c; if not found then exit; end if; fetch next from c into x; if found then return next x; end if; end loop; close c; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 488",
    "query": "create or replace function sc_test() returns setof integer as $$ declare c cursor for select * from generate_series(1, 10); x integer; begin open c; move forward all in c; fetch backward from c into x; if found then return next x; end if; close c; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 489",
    "query": "drop function sc_test()"
  },
  {
    "comment": "plpgsql - Statement 490",
    "query": "create function pl_qual_names (param1 int) returns void as $$ <<outerblock>> declare param1 int := 1; begin <<innerblock>> declare param1 int := 2; begin raise notice 'param1 = %', param1; raise notice 'pl_qual_names.param1 = %', pl_qual_names.param1; raise notice 'outerblock.param1 = %', outerblock.param1; raise notice 'innerblock.param1 = %', innerblock.param1; end; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 491",
    "query": "select pl_qual_names(42)"
  },
  {
    "comment": "plpgsql - Statement 492",
    "query": "drop function pl_qual_names(int)"
  },
  {
    "comment": "plpgsql - Statement 493",
    "query": "create function ret_query1(out int, out int) returns setof record as $$ begin $1 := -1; $2 := -2; return next; return query select x + 1, x * 10 from generate_series(0, 10) s (x); return next; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 494",
    "query": "select * from ret_query1()"
  },
  {
    "comment": "plpgsql - Statement 495",
    "query": "create type record_type as (x text, y int, z boolean)"
  },
  {
    "comment": "plpgsql - Statement 496",
    "query": "create or replace function ret_query2(lim int) returns setof record_type as $$ begin return query select fipshash(s.x::text), s.x, s.x > 0 from generate_series(-8, lim) s (x) where s.x % 2 = 0; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 497",
    "query": "select * from ret_query2(8)"
  },
  {
    "comment": "plpgsql - Statement 498",
    "query": "create function exc_using(int, text) returns int as $$ declare i int; begin for i in execute 'select * from generate_series(1,$1)' using $1+1 loop raise notice '%', i; end loop; execute 'select $2 + $2*3 + length($1)' into i using $2,$1; return i; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 499",
    "query": "select exc_using(5, 'foobar')"
  },
  {
    "comment": "plpgsql - Statement 500",
    "query": "drop function exc_using(int, text)"
  },
  {
    "comment": "plpgsql - Statement 501",
    "query": "create or replace function exc_using(int) returns void as $$ declare c refcursor; i int; begin open c for execute 'select * from generate_series(1,$1)' using $1+1; loop fetch c into i; exit when not found; raise notice '%', i; end loop; close c; return; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 502",
    "query": "select exc_using(5)"
  },
  {
    "comment": "plpgsql - Statement 503",
    "query": "drop function exc_using(int)"
  },
  {
    "comment": "plpgsql - Statement 504",
    "query": "create or replace function forc01() returns void as $$ declare c cursor(r1 integer, r2 integer) for select * from generate_series(r1,r2) i; c2 cursor for select * from generate_series(41,43) i; begin  c := 'c'; c2 := 'c2'; for r in c(5,7) loop raise notice '% from %', r.i, c; end loop;  for r in c(9,10) loop raise notice '% from %', r.i, c; end loop;  for r in c2 loop raise notice '% from %', r.i, c2; end loop;  raise notice 'after loop, c2 = %', c2; c2 := 'special_name'; for r in c2 loop raise notice '% from %', r.i, c2; end loop; raise notice 'after loop, c2 = %', c2;   c2 := null; for r in c2 loop raise notice '%', r.i; end loop; raise notice 'after loop, c2 = %', c2; return; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 505",
    "query": "select forc01()"
  },
  {
    "comment": "plpgsql - Statement 506",
    "query": "create temp table forc_test as select n as i, n as j from generate_series(1,10) n"
  },
  {
    "comment": "plpgsql - Statement 507",
    "query": "create or replace function forc01() returns void as $$ declare c cursor for select * from forc_test; begin for r in c loop raise notice '%, %', r.i, r.j; update forc_test set i = i * 100, j = r.j * 2 where current of c; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 508",
    "query": "select * from forc_test"
  },
  {
    "comment": "plpgsql - Statement 509",
    "query": "create or replace function forc01() returns void as $$ declare c refcursor := 'fooled_ya'; r record; begin open c for select * from forc_test; loop fetch c into r; exit when not found; raise notice '%, %', r.i, r.j; update forc_test set i = i * 100, j = r.j * 2 where current of c; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 510",
    "query": "drop function forc01()"
  },
  {
    "comment": "plpgsql - Statement 511",
    "query": "do $$ declare cnt int := 0; c1 cursor for select * from forc_test; begin for r1 in c1 loop declare c1 cursor for select * from forc_test; begin for r2 in c1 loop cnt := cnt + 1; end loop; end; end loop; raise notice 'cnt = %', cnt; end $$"
  },
  {
    "comment": "plpgsql - Statement 512",
    "query": "create or replace function forc_bad() returns void as $$ declare c refcursor; begin for r in c loop raise notice '%', r.i; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 513",
    "query": "create or replace function return_dquery() returns setof int as $$ begin return query execute 'select * from (values(10),(20)) f'; return query execute 'select * from (values($1),($2)) f' using 40,50; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 514",
    "query": "select * from return_dquery()"
  },
  {
    "comment": "plpgsql - Statement 515",
    "query": "drop function return_dquery()"
  },
  {
    "comment": "plpgsql - Statement 516",
    "query": "create table tabwithcols(a int, b int, c int, d int)"
  },
  {
    "comment": "plpgsql - Statement 517",
    "query": "insert into tabwithcols values(10,20,30,40),(50,60,70,80)"
  },
  {
    "comment": "plpgsql - Statement 518",
    "query": "create or replace function returnqueryf() returns setof tabwithcols as $$ begin return query select * from tabwithcols; return query execute 'select * from tabwithcols'; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 519",
    "query": "select * from returnqueryf()"
  },
  {
    "comment": "plpgsql - Statement 520",
    "query": "alter table tabwithcols drop column b"
  },
  {
    "comment": "plpgsql - Statement 521",
    "query": "alter table tabwithcols drop column d"
  },
  {
    "comment": "plpgsql - Statement 522",
    "query": "alter table tabwithcols add column d int"
  },
  {
    "comment": "plpgsql - Statement 523",
    "query": "drop function returnqueryf()"
  },
  {
    "comment": "plpgsql - Statement 524",
    "query": "drop table tabwithcols"
  },
  {
    "comment": "plpgsql - Statement 525",
    "query": "create type compostype as (x int, y varchar)"
  },
  {
    "comment": "plpgsql - Statement 526",
    "query": "create or replace function compos() returns compostype as $$ declare v compostype; begin v := (1, 'hello'); return v; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 527",
    "query": "select compos()"
  },
  {
    "comment": "plpgsql - Statement 528",
    "query": "create or replace function compos() returns compostype as $$ declare v record; begin v := (1, 'hello'::varchar); return v; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 529",
    "query": "create or replace function compos() returns compostype as $$ begin return (1, 'hello'::varchar); end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 530",
    "query": "create or replace function compos() returns compostype as $$ begin return (1, 'hello'); end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 531",
    "query": "create or replace function compos() returns compostype as $$ begin return (1, 'hello')::compostype; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 532",
    "query": "drop function compos()"
  },
  {
    "comment": "plpgsql - Statement 533",
    "query": "create or replace function composrec() returns record as $$ declare v record; begin v := (1, 'hello'); return v; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 534",
    "query": "select composrec()"
  },
  {
    "comment": "plpgsql - Statement 535",
    "query": "create or replace function composrec() returns record as $$ begin return (1, 'hello'); end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 536",
    "query": "drop function composrec()"
  },
  {
    "comment": "plpgsql - Statement 537",
    "query": "create or replace function compos() returns setof compostype as $$ begin for i in 1..3 loop return next (1, 'hello'::varchar); end loop; return next null::compostype; return next (2, 'goodbye')::compostype; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 538",
    "query": "select * from compos()"
  },
  {
    "comment": "plpgsql - Statement 539",
    "query": "create or replace function compos() returns compostype as $$ begin return 1 + 1; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 540",
    "query": "create or replace function compos() returns compostype as $$ declare x int := 42; begin return x; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 541",
    "query": "create or replace function compos() returns int as $$ declare v compostype; begin v := (1, 'hello'); return v; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 542",
    "query": "create or replace function compos() returns int as $$ begin return (1, 'hello')::compostype; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 543",
    "query": "drop type compostype"
  },
  {
    "comment": "plpgsql - Statement 544",
    "query": "create or replace function raise_test() returns void as $$ begin raise notice '% % %', 1, 2, 3 using errcode = '55001', detail = 'some detail info', hint = 'some hint'; raise '% % %', 1, 2, 3 using errcode = 'division_by_zero', detail = 'some detail info'; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 545",
    "query": "select raise_test()"
  },
  {
    "comment": "plpgsql - Statement 546",
    "query": "create or replace function raise_test() returns void as $$ begin raise 'check me' using errcode = 'division_by_zero', detail = 'some detail info'; exception when others then raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm; raise; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 547",
    "query": "create or replace function raise_test() returns void as $$ begin raise 'check me' using errcode = '1234F', detail = 'some detail info'; exception when others then raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm; raise; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 548",
    "query": "create or replace function raise_test() returns void as $$ begin raise 'check me' using errcode = '1234F', detail = 'some detail info'; exception when sqlstate '1234F' then raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm; raise; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 549",
    "query": "create or replace function raise_test() returns void as $$ begin raise division_by_zero using detail = 'some detail info'; exception when others then raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm; raise; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 550",
    "query": "create or replace function raise_test() returns void as $$ begin raise division_by_zero; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 551",
    "query": "create or replace function raise_test() returns void as $$ begin raise sqlstate '1234F'; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 552",
    "query": "create or replace function raise_test() returns void as $$ begin raise division_by_zero using message = 'custom' || ' message'; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 553",
    "query": "create or replace function raise_test() returns void as $$ begin raise using message = 'custom' || ' message', errcode = '22012'; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 554",
    "query": "create or replace function raise_test() returns void as $$ begin raise notice 'some message' using message = 'custom' || ' message', errcode = '22012'; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 555",
    "query": "create or replace function raise_test() returns void as $$ begin raise division_by_zero using message = 'custom' || ' message', errcode = '22012'; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 556",
    "query": "create or replace function raise_test() returns void as $$ begin raise; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 557",
    "query": "create function zero_divide() returns int as $$ declare v int := 0; begin return 10 / v; end; $$ language plpgsql parallel safe"
  },
  {
    "comment": "plpgsql - Statement 558",
    "query": "create or replace function raise_test() returns void as $$ begin raise exception 'custom exception' using detail = 'some detail of custom exception', hint = 'some hint related to custom exception'; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 559",
    "query": "create function stacked_diagnostics_test() returns void as $$ declare _sqlstate text; _message text; _context text; begin perform zero_divide(); exception when others then get stacked diagnostics _sqlstate = returned_sqlstate, _message = message_text, _context = pg_exception_context; raise notice 'sqlstate: %, message: %, context: [%]', _sqlstate, _message, replace(_context, E'\\n', ' <- '); end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 560",
    "query": "select stacked_diagnostics_test()"
  },
  {
    "comment": "plpgsql - Statement 561",
    "query": "create or replace function stacked_diagnostics_test() returns void as $$ declare _detail text; _hint text; _message text; begin perform raise_test(); exception when others then get stacked diagnostics _message = message_text, _detail = pg_exception_detail, _hint = pg_exception_hint; raise notice 'message: %, detail: %, hint: %', _message, _detail, _hint; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 562",
    "query": "create or replace function stacked_diagnostics_test() returns void as $$ declare _detail text; _hint text; _message text; begin get stacked diagnostics _message = message_text, _detail = pg_exception_detail, _hint = pg_exception_hint; raise notice 'message: %, detail: %, hint: %', _message, _detail, _hint; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 563",
    "query": "drop function stacked_diagnostics_test()"
  },
  {
    "comment": "plpgsql - Statement 564",
    "query": "create function error_trap_test() returns text as $$ begin perform zero_divide(); return 'no error detected!'; exception when division_by_zero then return 'division_by_zero detected'; end; $$ language plpgsql parallel safe"
  },
  {
    "comment": "plpgsql - Statement 565",
    "query": "set debug_parallel_query to on"
  },
  {
    "comment": "plpgsql - Statement 566",
    "query": "explain (verbose, costs off) select error_trap_test()"
  },
  {
    "comment": "plpgsql - Statement 567",
    "query": "select error_trap_test()"
  },
  {
    "comment": "plpgsql - Statement 568",
    "query": "reset debug_parallel_query"
  },
  {
    "comment": "plpgsql - Statement 569",
    "query": "drop function error_trap_test()"
  },
  {
    "comment": "plpgsql - Statement 570",
    "query": "drop function zero_divide()"
  },
  {
    "comment": "plpgsql - Statement 571",
    "query": "create or replace function raise_test() returns void as $$ begin perform 1/0; exception when sqlstate '22012' then raise notice using message = sqlstate; raise sqlstate '22012' using message = 'substitute message'; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 572",
    "query": "drop function raise_test()"
  },
  {
    "comment": "plpgsql - Statement 573",
    "query": "create or replace function stacked_diagnostics_test() returns void as $$ declare _column_name text; _constraint_name text; _datatype_name text; _table_name text; _schema_name text; begin raise exception using column = '>>some column name<<', constraint = '>>some constraint name<<', datatype = '>>some datatype name<<', table = '>>some table name<<', schema = '>>some schema name<<'; exception when others then get stacked diagnostics _column_name = column_name, _constraint_name = constraint_name, _datatype_name = pg_datatype_name, _table_name = table_name, _schema_name = schema_name; raise notice 'column %, constraint %, type %, table %, schema %', _column_name, _constraint_name, _datatype_name, _table_name, _schema_name; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 574",
    "query": "create or replace function vari(variadic int[]) returns void as $$ begin for i in array_lower($1,1)..array_upper($1,1) loop raise notice '%', $1[i]; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 575",
    "query": "select vari(1,2,3,4,5)"
  },
  {
    "comment": "plpgsql - Statement 576",
    "query": "select vari(3,4,5)"
  },
  {
    "comment": "plpgsql - Statement 577",
    "query": "select vari(variadic array[5,6,7])"
  },
  {
    "comment": "plpgsql - Statement 578",
    "query": "drop function vari(int[])"
  },
  {
    "comment": "plpgsql - Statement 579",
    "query": "create or replace function pleast(variadic numeric[]) returns numeric as $$ declare aux numeric = $1[array_lower($1,1)]; begin for i in array_lower($1,1)+1..array_upper($1,1) loop if $1[i] < aux then aux := $1[i]; end if; end loop; return aux; end; $$ language plpgsql immutable strict"
  },
  {
    "comment": "plpgsql - Statement 580",
    "query": "select pleast(10,1,2,3,-16)"
  },
  {
    "comment": "plpgsql - Statement 581",
    "query": "select pleast(10.2,2.2,-1.1)"
  },
  {
    "comment": "plpgsql - Statement 582",
    "query": "select pleast(10.2,10, -20)"
  },
  {
    "comment": "plpgsql - Statement 583",
    "query": "select pleast(10,20, -1.0)"
  },
  {
    "comment": "plpgsql - Statement 584",
    "query": "create or replace function pleast(numeric) returns numeric as $$ begin raise notice 'non-variadic function called'; return $1; end; $$ language plpgsql immutable strict"
  },
  {
    "comment": "plpgsql - Statement 585",
    "query": "select pleast(10)"
  },
  {
    "comment": "plpgsql - Statement 586",
    "query": "drop function pleast(numeric[])"
  },
  {
    "comment": "plpgsql - Statement 587",
    "query": "drop function pleast(numeric)"
  },
  {
    "comment": "plpgsql - Statement 588",
    "query": "create function tftest(int) returns table(a int, b int) as $$ begin return query select $1, $1+i from generate_series(1,5) g(i); end; $$ language plpgsql immutable strict"
  },
  {
    "comment": "plpgsql - Statement 589",
    "query": "select * from tftest(10)"
  },
  {
    "comment": "plpgsql - Statement 590",
    "query": "create or replace function tftest(a1 int) returns table(a int, b int) as $$ begin a := a1; b := a1 + 1; return next; a := a1 * 10; b := a1 * 10 + 1; return next; end; $$ language plpgsql immutable strict"
  },
  {
    "comment": "plpgsql - Statement 591",
    "query": "drop function tftest(int)"
  },
  {
    "comment": "plpgsql - Statement 592",
    "query": "create function rttest() returns setof int as $$ declare rc int; begin return query values(10),(20); get diagnostics rc = row_count; raise notice '% %', found, rc; return query select * from (values(10),(20)) f(a) where false; get diagnostics rc = row_count; raise notice '% %', found, rc; return query execute 'values(10),(20)'; get diagnostics rc = row_count; raise notice '% %', found, rc; return query execute 'select * from (values(10),(20)) f(a) where false'; get diagnostics rc = row_count; raise notice '% %', found, rc; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 593",
    "query": "select * from rttest()"
  },
  {
    "comment": "plpgsql - Statement 594",
    "query": "create or replace function rttest() returns setof int as $$ begin return query select 10 into no_such_table; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 595",
    "query": "create or replace function rttest() returns setof int as $$ begin return query execute 'select 10 into no_such_table'; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 596",
    "query": "select * from no_such_table"
  },
  {
    "comment": "plpgsql - Statement 597",
    "query": "drop function rttest()"
  },
  {
    "comment": "plpgsql - Statement 598",
    "query": "CREATE FUNCTION leaker_1(fail BOOL) RETURNS INTEGER AS $$ DECLARE v_var INTEGER; BEGIN BEGIN v_var := (leaker_2(fail)).error_code; EXCEPTION WHEN others THEN RETURN 0; END; RETURN 1; END; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "plpgsql - Statement 599",
    "query": "CREATE FUNCTION leaker_2(fail BOOL, OUT error_code INTEGER, OUT new_id INTEGER) RETURNS RECORD AS $$ BEGIN IF fail THEN RAISE EXCEPTION 'fail ...'; END IF; error_code := 1; new_id := 1; RETURN; END; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "plpgsql - Statement 600",
    "query": "SELECT * FROM leaker_1(false)"
  },
  {
    "comment": "plpgsql - Statement 601",
    "query": "SELECT * FROM leaker_1(true)"
  },
  {
    "comment": "plpgsql - Statement 602",
    "query": "DROP FUNCTION leaker_1(bool)"
  },
  {
    "comment": "plpgsql - Statement 603",
    "query": "DROP FUNCTION leaker_2(bool)"
  },
  {
    "comment": "plpgsql - Statement 604",
    "query": "CREATE FUNCTION nonsimple_expr_test() RETURNS text[] AS $$ DECLARE arr text[]; lr text; i integer; BEGIN arr := array[array['foo','bar'], array['baz', 'quux']]; lr := 'fool'; i := 1;  arr[(SELECT i)][(SELECT i+1)] := (SELECT lr); RETURN arr; END; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "plpgsql - Statement 605",
    "query": "SELECT nonsimple_expr_test()"
  },
  {
    "comment": "plpgsql - Statement 606",
    "query": "DROP FUNCTION nonsimple_expr_test()"
  },
  {
    "comment": "plpgsql - Statement 607",
    "query": "CREATE FUNCTION nonsimple_expr_test() RETURNS integer AS $$ declare i integer NOT NULL := 0; begin begin i := (SELECT NULL::integer); exception WHEN OTHERS THEN i := (SELECT 1::integer); end; return i; end; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "plpgsql - Statement 608",
    "query": "create function recurse(float8) returns float8 as $$ begin if ($1 > 0) then return sql_recurse($1 - 1); else return $1; end if; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 609",
    "query": "create function sql_recurse(float8) returns float8 as $$ select recurse($1) limit 1; $$ language sql"
  },
  {
    "comment": "plpgsql - Statement 610",
    "query": "select recurse(10)"
  },
  {
    "comment": "plpgsql - Statement 611",
    "query": "create function error1(text) returns text language sql as $$ SELECT relname::text FROM pg_class c WHERE c.oid = $1::regclass $$"
  },
  {
    "comment": "plpgsql - Statement 612",
    "query": "create function error2(p_name_table text) returns text language plpgsql as $$ begin return error1(p_name_table); end$$"
  },
  {
    "comment": "plpgsql - Statement 613",
    "query": "create table public.stuffs (stuff text)"
  },
  {
    "comment": "plpgsql - Statement 614",
    "query": "SAVEPOINT a"
  },
  {
    "comment": "plpgsql - Statement 615",
    "query": "select error2('nonexistent.stuffs')"
  },
  {
    "comment": "plpgsql - Statement 616",
    "query": "ROLLBACK TO a"
  },
  {
    "comment": "plpgsql - Statement 617",
    "query": "select error2('public.stuffs')"
  },
  {
    "comment": "plpgsql - Statement 618",
    "query": "rollback"
  },
  {
    "comment": "plpgsql - Statement 619",
    "query": "drop function error2(p_name_table text)"
  },
  {
    "comment": "plpgsql - Statement 620",
    "query": "drop function error1(text)"
  },
  {
    "comment": "plpgsql - Statement 621",
    "query": "create function sql_to_date(integer) returns date as $$ select $1::text::date $$ language sql immutable strict"
  },
  {
    "comment": "plpgsql - Statement 622",
    "query": "create cast (integer as date) with function sql_to_date(integer) as assignment"
  },
  {
    "comment": "plpgsql - Statement 623",
    "query": "create function cast_invoker(integer) returns date as $$ begin return $1; end$$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 624",
    "query": "select cast_invoker(20150717)"
  },
  {
    "comment": "plpgsql - Statement 625",
    "query": "select cast_invoker(20150718)"
  },
  {
    "comment": "plpgsql - Statement 626",
    "query": "savepoint s1"
  },
  {
    "comment": "plpgsql - Statement 627",
    "query": "select cast_invoker(-1)"
  },
  {
    "comment": "plpgsql - Statement 628",
    "query": "rollback to savepoint s1"
  },
  {
    "comment": "plpgsql - Statement 629",
    "query": "select cast_invoker(20150719)"
  },
  {
    "comment": "plpgsql - Statement 630",
    "query": "select cast_invoker(20150720)"
  },
  {
    "comment": "plpgsql - Statement 631",
    "query": "drop function cast_invoker(integer)"
  },
  {
    "comment": "plpgsql - Statement 632",
    "query": "drop function sql_to_date(integer) cascade"
  },
  {
    "comment": "plpgsql - Statement 633",
    "query": "do $$ declare x text[]; begin x := '{1.23, 4.56}'::numeric[]; end $$"
  },
  {
    "comment": "plpgsql - Statement 634",
    "query": "end"
  },
  {
    "comment": "plpgsql - Statement 635",
    "query": "create function fail() returns int language plpgsql as $$ begin return 1/0; end $$"
  },
  {
    "comment": "plpgsql - Statement 636",
    "query": "select fail()"
  },
  {
    "comment": "plpgsql - Statement 637",
    "query": "drop function fail()"
  },
  {
    "comment": "plpgsql - Statement 638",
    "query": "set standard_conforming_strings = off"
  },
  {
    "comment": "plpgsql - Statement 639",
    "query": "create or replace function strtest() returns text as $$ begin raise notice 'foo\\\\bar\\041baz'; return 'foo\\\\bar\\041baz'; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 640",
    "query": "select strtest()"
  },
  {
    "comment": "plpgsql - Statement 641",
    "query": "create or replace function strtest() returns text as $$ begin raise notice E'foo\\\\bar\\041baz'; return E'foo\\\\bar\\041baz'; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 642",
    "query": "set standard_conforming_strings = on"
  },
  {
    "comment": "plpgsql - Statement 643",
    "query": "create or replace function strtest() returns text as $$ begin raise notice 'foo\\\\bar\\041baz\\'; return 'foo\\\\bar\\041baz\\'; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 644",
    "query": "drop function strtest()"
  },
  {
    "comment": "plpgsql - Statement 645",
    "query": "DO $$ DECLARE r record; BEGIN FOR r IN SELECT rtrim(roomno) AS roomno, comment FROM Room ORDER BY roomno LOOP RAISE NOTICE '%, %', r.roomno, r.comment; END LOOP; END$$"
  },
  {
    "comment": "plpgsql - Statement 646",
    "query": "DO LANGUAGE plpgsql $$begin return 1; end$$"
  },
  {
    "comment": "plpgsql - Statement 647",
    "query": "DO $$ DECLARE r record; BEGIN FOR r IN SELECT rtrim(roomno) AS roomno, foo FROM Room ORDER BY roomno LOOP RAISE NOTICE '%, %', r.roomno, r.comment; END LOOP; END$$"
  },
  {
    "comment": "plpgsql - Statement 648",
    "query": "do $outer$ begin for i in 1..10 loop begin execute $ex$ do $$ declare x int = 0; begin x := 1 / x; end; $$; $ex$; exception when division_by_zero then raise notice 'caught division by zero'; end; end loop; end; $outer$"
  },
  {
    "comment": "plpgsql - Statement 649",
    "query": "do $$ declare x int := x + 1; begin raise notice 'x = %', x; end; $$"
  },
  {
    "comment": "plpgsql - Statement 650",
    "query": "do $$ declare y int := x + 1; x int := 42; begin raise notice 'x = %, y = %', x, y; end; $$"
  },
  {
    "comment": "plpgsql - Statement 651",
    "query": "do $$ declare x int := 42; y int := x + 1; begin raise notice 'x = %, y = %', x, y; end; $$"
  },
  {
    "comment": "plpgsql - Statement 652",
    "query": "do $$ declare x int := 42; begin declare y int := x + 1; x int := x + 2; z int := x * 10; begin raise notice 'x = %, y = %, z = %', x, y, z; end; end; $$"
  },
  {
    "comment": "plpgsql - Statement 653",
    "query": "set plpgsql.variable_conflict = error"
  },
  {
    "comment": "plpgsql - Statement 654",
    "query": "create function conflict_test() returns setof int8_tbl as $$ declare r record; q1 bigint := 42; begin for r in select q1,q2 from int8_tbl loop return next r; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 655",
    "query": "select * from conflict_test()"
  },
  {
    "comment": "plpgsql - Statement 656",
    "query": "create or replace function conflict_test() returns setof int8_tbl as $$ #variable_conflict use_variable declare r record; q1 bigint := 42; begin for r in select q1,q2 from int8_tbl loop return next r; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 657",
    "query": "create or replace function conflict_test() returns setof int8_tbl as $$ #variable_conflict use_column declare r record; q1 bigint := 42; begin for r in select q1,q2 from int8_tbl loop return next r; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 658",
    "query": "drop function conflict_test()"
  },
  {
    "comment": "plpgsql - Statement 659",
    "query": "create function unreserved_test() returns int as $$ declare forward int := 21; begin forward := forward * 2; return forward; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 660",
    "query": "select unreserved_test()"
  },
  {
    "comment": "plpgsql - Statement 661",
    "query": "create or replace function unreserved_test() returns int as $$ declare return int := 42; begin return := return + 1; return return; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 662",
    "query": "create or replace function unreserved_test() returns int as $$ declare comment int := 21; begin comment := comment * 2; comment on function unreserved_test() is 'this is a test'; return comment; end $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 663",
    "query": "select obj_description('unreserved_test()'::regprocedure, 'pg_proc')"
  },
  {
    "comment": "plpgsql - Statement 664",
    "query": "drop function unreserved_test()"
  },
  {
    "comment": "plpgsql - Statement 665",
    "query": "create function foreach_test(anyarray) returns void as $$ declare x int; begin foreach x in array $1 loop raise notice '%', x; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 666",
    "query": "select foreach_test(ARRAY[1,2,3,4])"
  },
  {
    "comment": "plpgsql - Statement 667",
    "query": "select foreach_test(ARRAY[[1,2],[3,4]])"
  },
  {
    "comment": "plpgsql - Statement 668",
    "query": "create or replace function foreach_test(anyarray) returns void as $$ declare x int; begin foreach x slice 1 in array $1 loop raise notice '%', x; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 669",
    "query": "create or replace function foreach_test(anyarray) returns void as $$ declare x int[]; begin foreach x slice 1 in array $1 loop raise notice '%', x; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 670",
    "query": "create or replace function foreach_test(anyarray) returns void as $$ declare x int[]; begin foreach x slice 2 in array $1 loop raise notice '%', x; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 671",
    "query": "select foreach_test(ARRAY[[[1,2]],[[3,4]]])"
  },
  {
    "comment": "plpgsql - Statement 672",
    "query": "create type xy_tuple AS (x int, y int)"
  },
  {
    "comment": "plpgsql - Statement 673",
    "query": "create or replace function foreach_test(anyarray) returns void as $$ declare r record; begin foreach r in array $1 loop raise notice '%', r; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 674",
    "query": "select foreach_test(ARRAY[(10,20),(40,69),(35,78)]::xy_tuple[])"
  },
  {
    "comment": "plpgsql - Statement 675",
    "query": "select foreach_test(ARRAY[[(10,20),(40,69)],[(35,78),(88,76)]]::xy_tuple[])"
  },
  {
    "comment": "plpgsql - Statement 676",
    "query": "create or replace function foreach_test(anyarray) returns void as $$ declare x int; y int; begin foreach x, y in array $1 loop raise notice 'x = %, y = %', x, y; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 677",
    "query": "create or replace function foreach_test(anyarray) returns void as $$ declare x xy_tuple[]; begin foreach x slice 1 in array $1 loop raise notice '%', x; end loop; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 678",
    "query": "drop function foreach_test(anyarray)"
  },
  {
    "comment": "plpgsql - Statement 679",
    "query": "drop type xy_tuple"
  },
  {
    "comment": "plpgsql - Statement 680",
    "query": "create temp table rtype (id int, ar text[])"
  },
  {
    "comment": "plpgsql - Statement 681",
    "query": "create function arrayassign1() returns text[] language plpgsql as $$ declare r record; begin r := row(12, '{foo,bar,baz}')::rtype; r.ar[2] := 'replace'; return r.ar; end$$"
  },
  {
    "comment": "plpgsql - Statement 682",
    "query": "select arrayassign1()"
  },
  {
    "comment": "plpgsql - Statement 683",
    "query": "create domain orderedarray as int[2] constraint sorted check (value[1] < value[2])"
  },
  {
    "comment": "plpgsql - Statement 684",
    "query": "select '{1,2}'::orderedarray"
  },
  {
    "comment": "plpgsql - Statement 685",
    "query": "select '{2,1}'::orderedarray"
  },
  {
    "comment": "plpgsql - Statement 686",
    "query": "create function testoa(x1 int, x2 int, x3 int) returns orderedarray language plpgsql as $$ declare res orderedarray; begin res := array[x1, x2]; res[2] := x3; return res; end$$"
  },
  {
    "comment": "plpgsql - Statement 687",
    "query": "select testoa(1,2,3)"
  },
  {
    "comment": "plpgsql - Statement 688",
    "query": "select testoa(2,1,3)"
  },
  {
    "comment": "plpgsql - Statement 689",
    "query": "select testoa(1,2,1)"
  },
  {
    "comment": "plpgsql - Statement 690",
    "query": "drop function arrayassign1()"
  },
  {
    "comment": "plpgsql - Statement 691",
    "query": "drop function testoa(x1 int, x2 int, x3 int)"
  },
  {
    "comment": "plpgsql - Statement 692",
    "query": "create function returns_rw_array(int) returns int[] language plpgsql as $$ declare r int[]; begin r := array[$1, $1]; return r; end; $$ stable"
  },
  {
    "comment": "plpgsql - Statement 693",
    "query": "create function consumes_rw_array(int[]) returns int language plpgsql as $$ begin return $1[1]; end; $$ stable"
  },
  {
    "comment": "plpgsql - Statement 694",
    "query": "select consumes_rw_array(returns_rw_array(42))"
  },
  {
    "comment": "plpgsql - Statement 695",
    "query": "explain (verbose, costs off) select i, a from (select returns_rw_array(1) as a offset 0) ss, lateral consumes_rw_array(a) i"
  },
  {
    "comment": "plpgsql - Statement 696",
    "query": "select i, a from (select returns_rw_array(1) as a offset 0) ss, lateral consumes_rw_array(a) i"
  },
  {
    "comment": "plpgsql - Statement 697",
    "query": "explain (verbose, costs off) select consumes_rw_array(a), a from returns_rw_array(1) a"
  },
  {
    "comment": "plpgsql - Statement 698",
    "query": "select consumes_rw_array(a), a from returns_rw_array(1) a"
  },
  {
    "comment": "plpgsql - Statement 699",
    "query": "explain (verbose, costs off) select consumes_rw_array(a), a from (values (returns_rw_array(1)), (returns_rw_array(2))) v(a)"
  },
  {
    "comment": "plpgsql - Statement 700",
    "query": "select consumes_rw_array(a), a from (values (returns_rw_array(1)), (returns_rw_array(2))) v(a)"
  },
  {
    "comment": "plpgsql - Statement 701",
    "query": "do $$ declare a int[] := array[1,2]; begin a := a || 3; raise notice 'a = %', a; end$$"
  },
  {
    "comment": "plpgsql - Statement 702",
    "query": "create function inner_func(int) returns int as $$ declare _context text; begin get diagnostics _context = pg_context; raise notice '***%***', _context;  get diagnostics _context = pg_context; raise notice '***%***', _context; raise notice 'lets make sure we didnt break anything'; return 2 * $1; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 703",
    "query": "create or replace function outer_func(int) returns int as $$ declare myresult int; begin raise notice 'calling down into inner_func()'; myresult := inner_func($1); raise notice 'inner_func() done'; return myresult; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 704",
    "query": "create or replace function outer_outer_func(int) returns int as $$ declare myresult int; begin raise notice 'calling down into outer_func()'; myresult := outer_func($1); raise notice 'outer_func() done'; return myresult; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 705",
    "query": "select outer_outer_func(10)"
  },
  {
    "comment": "plpgsql - Statement 706",
    "query": "select outer_outer_func(20)"
  },
  {
    "comment": "plpgsql - Statement 707",
    "query": "drop function outer_outer_func(int)"
  },
  {
    "comment": "plpgsql - Statement 708",
    "query": "drop function outer_func(int)"
  },
  {
    "comment": "plpgsql - Statement 709",
    "query": "drop function inner_func(int)"
  },
  {
    "comment": "plpgsql - Statement 710",
    "query": "create function inner_func(int) returns int as $$ declare _context text; sx int := 5; begin begin perform sx / 0; exception when division_by_zero then get diagnostics _context = pg_context; raise notice '***%***', _context; end;   get diagnostics _context = pg_context; raise notice '***%***', _context; raise notice 'lets make sure we didnt break anything'; return 2 * $1; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 711",
    "query": "create function current_function(text) returns regprocedure as $$ declare fn_oid regprocedure; begin get diagnostics fn_oid = pg_routine_oid; return fn_oid; end; $$ language plpgsql"
  },
  {
    "comment": "plpgsql - Statement 712",
    "query": "select current_function('foo')"
  },
  {
    "comment": "plpgsql - Statement 713",
    "query": "drop function current_function(text)"
  },
  {
    "comment": "plpgsql - Statement 714",
    "query": "do $$ declare fn_oid oid; begin get diagnostics fn_oid = pg_routine_oid; raise notice 'pg_routine_oid = %', fn_oid; end; $$"
  },
  {
    "comment": "plpgsql - Statement 715",
    "query": "do $$ begin assert 1=1; end; $$"
  },
  {
    "comment": "plpgsql - Statement 716",
    "query": "do $$ begin assert 1=0; end; $$"
  },
  {
    "comment": "plpgsql - Statement 717",
    "query": "do $$ begin assert NULL; end; $$"
  },
  {
    "comment": "plpgsql - Statement 718",
    "query": "set plpgsql.check_asserts = off"
  },
  {
    "comment": "plpgsql - Statement 719",
    "query": "reset plpgsql.check_asserts"
  },
  {
    "comment": "plpgsql - Statement 720",
    "query": "do $$ declare var text := 'some value'; begin assert 1=0, format('assertion failed, var = \"%s\"', var); end; $$"
  },
  {
    "comment": "plpgsql - Statement 721",
    "query": "do $$ begin assert 1=0, 'unhandled assertion'; exception when others then null; end; $$"
  },
  {
    "comment": "plpgsql - Statement 722",
    "query": "create function plpgsql_domain_check(val int) returns boolean as $$ begin return val > 0; end $$ language plpgsql immutable"
  },
  {
    "comment": "plpgsql - Statement 723",
    "query": "create domain plpgsql_domain as integer check(plpgsql_domain_check(value))"
  },
  {
    "comment": "plpgsql - Statement 724",
    "query": "do $$ declare v_test plpgsql_domain; begin v_test := 1; end; $$"
  },
  {
    "comment": "plpgsql - Statement 725",
    "query": "do $$ declare v_test plpgsql_domain := 1; begin v_test := 0; end; $$"
  },
  {
    "comment": "plpgsql - Statement 726",
    "query": "create function plpgsql_arr_domain_check(val int[]) returns boolean as $$ begin return val[1] > 0; end $$ language plpgsql immutable"
  },
  {
    "comment": "plpgsql - Statement 727",
    "query": "create domain plpgsql_arr_domain as int[] check(plpgsql_arr_domain_check(value))"
  },
  {
    "comment": "plpgsql - Statement 728",
    "query": "do $$ declare v_test plpgsql_arr_domain; begin v_test := array[1]; v_test := v_test || 2; end; $$"
  },
  {
    "comment": "plpgsql - Statement 729",
    "query": "do $$ declare v_test plpgsql_arr_domain := array[1]; begin v_test := 0 || v_test; end; $$"
  },
  {
    "comment": "plpgsql - Statement 730",
    "query": "CREATE TABLE transition_table_base (id int PRIMARY KEY, val text)"
  },
  {
    "comment": "plpgsql - Statement 731",
    "query": "CREATE FUNCTION transition_table_base_ins_func() RETURNS trigger LANGUAGE plpgsql AS $$ DECLARE t text; l text; BEGIN t = ''; FOR l IN EXECUTE $q$ EXPLAIN (TIMING off, COSTS off, VERBOSE on) SELECT * FROM newtable $q$ LOOP t = t || l || E'\\n'; END LOOP;  RAISE INFO '%', t; RETURN new; END; $$"
  },
  {
    "comment": "plpgsql - Statement 732",
    "query": "CREATE TRIGGER transition_table_base_ins_trig AFTER INSERT ON transition_table_base REFERENCING OLD TABLE AS oldtable NEW TABLE AS newtable FOR EACH STATEMENT EXECUTE PROCEDURE transition_table_base_ins_func()"
  },
  {
    "comment": "plpgsql - Statement 733",
    "query": "CREATE TRIGGER transition_table_base_ins_trig AFTER INSERT ON transition_table_base REFERENCING NEW TABLE AS newtable FOR EACH STATEMENT EXECUTE PROCEDURE transition_table_base_ins_func()"
  },
  {
    "comment": "plpgsql - Statement 734",
    "query": "INSERT INTO transition_table_base VALUES (1, 'One'), (2, 'Two')"
  },
  {
    "comment": "plpgsql - Statement 735",
    "query": "INSERT INTO transition_table_base VALUES (3, 'Three'), (4, 'Four')"
  },
  {
    "comment": "plpgsql - Statement 736",
    "query": "CREATE OR REPLACE FUNCTION transition_table_base_upd_func() RETURNS trigger LANGUAGE plpgsql AS $$ DECLARE t text; l text; BEGIN t = ''; FOR l IN EXECUTE $q$ EXPLAIN (TIMING off, COSTS off, VERBOSE on) SELECT * FROM oldtable ot FULL JOIN newtable nt USING (id) $q$ LOOP t = t || l || E'\\n'; END LOOP;  RAISE INFO '%', t; RETURN new; END; $$"
  },
  {
    "comment": "plpgsql - Statement 737",
    "query": "CREATE TRIGGER transition_table_base_upd_trig AFTER UPDATE ON transition_table_base REFERENCING OLD TABLE AS oldtable NEW TABLE AS newtable FOR EACH STATEMENT EXECUTE PROCEDURE transition_table_base_upd_func()"
  },
  {
    "comment": "plpgsql - Statement 738",
    "query": "UPDATE transition_table_base SET val = '*' || val || '*' WHERE id BETWEEN 2 AND 3"
  },
  {
    "comment": "plpgsql - Statement 739",
    "query": "CREATE TABLE transition_table_level1 ( level1_no serial NOT NULL , level1_node_name varchar(255), PRIMARY KEY (level1_no) ) WITHOUT OIDS"
  },
  {
    "comment": "plpgsql - Statement 740",
    "query": "CREATE TABLE transition_table_level2 ( level2_no serial NOT NULL , parent_no int NOT NULL, level1_node_name varchar(255), PRIMARY KEY (level2_no) ) WITHOUT OIDS"
  },
  {
    "comment": "plpgsql - Statement 741",
    "query": "CREATE TABLE transition_table_status ( level int NOT NULL, node_no int NOT NULL, status int, PRIMARY KEY (level, node_no) ) WITHOUT OIDS"
  },
  {
    "comment": "plpgsql - Statement 742",
    "query": "CREATE FUNCTION transition_table_level1_ri_parent_del_func() RETURNS TRIGGER LANGUAGE plpgsql AS $$ DECLARE n bigint; BEGIN PERFORM FROM p JOIN transition_table_level2 c ON c.parent_no = p.level1_no; IF FOUND THEN RAISE EXCEPTION 'RI error'; END IF; RETURN NULL; END; $$"
  },
  {
    "comment": "plpgsql - Statement 743",
    "query": "CREATE TRIGGER transition_table_level1_ri_parent_del_trigger AFTER DELETE ON transition_table_level1 REFERENCING OLD TABLE AS p FOR EACH STATEMENT EXECUTE PROCEDURE transition_table_level1_ri_parent_del_func()"
  },
  {
    "comment": "plpgsql - Statement 744",
    "query": "CREATE FUNCTION transition_table_level1_ri_parent_upd_func() RETURNS TRIGGER LANGUAGE plpgsql AS $$ DECLARE x int; BEGIN WITH p AS (SELECT level1_no, sum(delta) cnt FROM (SELECT level1_no, 1 AS delta FROM i UNION ALL SELECT level1_no, -1 AS delta FROM d) w GROUP BY level1_no HAVING sum(delta) < 0) SELECT level1_no FROM p JOIN transition_table_level2 c ON c.parent_no = p.level1_no INTO x; IF FOUND THEN RAISE EXCEPTION 'RI error'; END IF; RETURN NULL; END; $$"
  },
  {
    "comment": "plpgsql - Statement 745",
    "query": "CREATE TRIGGER transition_table_level1_ri_parent_upd_trigger AFTER UPDATE ON transition_table_level1 REFERENCING OLD TABLE AS d NEW TABLE AS i FOR EACH STATEMENT EXECUTE PROCEDURE transition_table_level1_ri_parent_upd_func()"
  },
  {
    "comment": "plpgsql - Statement 746",
    "query": "CREATE FUNCTION transition_table_level2_ri_child_insupd_func() RETURNS TRIGGER LANGUAGE plpgsql AS $$ BEGIN PERFORM FROM i LEFT JOIN transition_table_level1 p ON p.level1_no IS NOT NULL AND p.level1_no = i.parent_no WHERE p.level1_no IS NULL; IF FOUND THEN RAISE EXCEPTION 'RI error'; END IF; RETURN NULL; END; $$"
  },
  {
    "comment": "plpgsql - Statement 747",
    "query": "CREATE TRIGGER transition_table_level2_ri_child_ins_trigger AFTER INSERT ON transition_table_level2 REFERENCING NEW TABLE AS i FOR EACH STATEMENT EXECUTE PROCEDURE transition_table_level2_ri_child_insupd_func()"
  },
  {
    "comment": "plpgsql - Statement 748",
    "query": "CREATE TRIGGER transition_table_level2_ri_child_upd_trigger AFTER UPDATE ON transition_table_level2 REFERENCING NEW TABLE AS i FOR EACH STATEMENT EXECUTE PROCEDURE transition_table_level2_ri_child_insupd_func()"
  },
  {
    "comment": "plpgsql - Statement 749",
    "query": "INSERT INTO transition_table_level1 (level1_no) SELECT generate_series(1,200)"
  },
  {
    "comment": "plpgsql - Statement 750",
    "query": "ANALYZE transition_table_level1"
  },
  {
    "comment": "plpgsql - Statement 751",
    "query": "INSERT INTO transition_table_level2 (level2_no, parent_no) SELECT level2_no, level2_no / 50 + 1 AS parent_no FROM generate_series(1,9999) level2_no"
  },
  {
    "comment": "plpgsql - Statement 752",
    "query": "ANALYZE transition_table_level2"
  },
  {
    "comment": "plpgsql - Statement 753",
    "query": "INSERT INTO transition_table_status (level, node_no, status) SELECT 1, level1_no, 0 FROM transition_table_level1"
  },
  {
    "comment": "plpgsql - Statement 754",
    "query": "INSERT INTO transition_table_status (level, node_no, status) SELECT 2, level2_no, 0 FROM transition_table_level2"
  },
  {
    "comment": "plpgsql - Statement 755",
    "query": "ANALYZE transition_table_status"
  },
  {
    "comment": "plpgsql - Statement 756",
    "query": "INSERT INTO transition_table_level1(level1_no) SELECT generate_series(201,1000)"
  },
  {
    "comment": "plpgsql - Statement 757",
    "query": "CREATE FUNCTION transition_table_level2_bad_usage_func() RETURNS TRIGGER LANGUAGE plpgsql AS $$ BEGIN INSERT INTO dx VALUES (1000000, 1000000, 'x'); RETURN NULL; END; $$"
  },
  {
    "comment": "plpgsql - Statement 758",
    "query": "CREATE TRIGGER transition_table_level2_bad_usage_trigger AFTER DELETE ON transition_table_level2 REFERENCING OLD TABLE AS dx FOR EACH STATEMENT EXECUTE PROCEDURE transition_table_level2_bad_usage_func()"
  },
  {
    "comment": "plpgsql - Statement 759",
    "query": "DELETE FROM transition_table_level2 WHERE level2_no BETWEEN 301 AND 305"
  },
  {
    "comment": "plpgsql - Statement 760",
    "query": "DROP TRIGGER transition_table_level2_bad_usage_trigger ON transition_table_level2"
  },
  {
    "comment": "plpgsql - Statement 761",
    "query": "DELETE FROM transition_table_level1 WHERE level1_no = 25"
  },
  {
    "comment": "plpgsql - Statement 762",
    "query": "UPDATE transition_table_level1 SET level1_no = -1 WHERE level1_no = 30"
  },
  {
    "comment": "plpgsql - Statement 763",
    "query": "INSERT INTO transition_table_level2 (level2_no, parent_no) VALUES (10000, 10000)"
  },
  {
    "comment": "plpgsql - Statement 764",
    "query": "UPDATE transition_table_level2 SET parent_no = 2000 WHERE level2_no = 40"
  },
  {
    "comment": "plpgsql - Statement 765",
    "query": "DELETE FROM transition_table_level1 WHERE level1_no BETWEEN 201 AND 1000"
  },
  {
    "comment": "plpgsql - Statement 766",
    "query": "DELETE FROM transition_table_level1 WHERE level1_no BETWEEN 100000000 AND 100000010"
  },
  {
    "comment": "plpgsql - Statement 767",
    "query": "SELECT count(*) FROM transition_table_level1"
  },
  {
    "comment": "plpgsql - Statement 768",
    "query": "DELETE FROM transition_table_level2 WHERE level2_no BETWEEN 211 AND 220"
  },
  {
    "comment": "plpgsql - Statement 769",
    "query": "SELECT count(*) FROM transition_table_level2"
  },
  {
    "comment": "plpgsql - Statement 770",
    "query": "CREATE TABLE alter_table_under_transition_tables ( id int PRIMARY KEY, name text )"
  },
  {
    "comment": "plpgsql - Statement 771",
    "query": "CREATE FUNCTION alter_table_under_transition_tables_upd_func() RETURNS TRIGGER LANGUAGE plpgsql AS $$ BEGIN RAISE WARNING 'old table = %, new table = %', (SELECT string_agg(id || '=' || name, ',') FROM d), (SELECT string_agg(id || '=' || name, ',') FROM i); RAISE NOTICE 'one = %', (SELECT 1 FROM alter_table_under_transition_tables LIMIT 1); RETURN NULL; END; $$"
  },
  {
    "comment": "plpgsql - Statement 772",
    "query": "CREATE TRIGGER alter_table_under_transition_tables_upd_trigger AFTER TRUNCATE OR UPDATE ON alter_table_under_transition_tables REFERENCING OLD TABLE AS d NEW TABLE AS i FOR EACH STATEMENT EXECUTE PROCEDURE alter_table_under_transition_tables_upd_func()"
  },
  {
    "comment": "plpgsql - Statement 773",
    "query": "CREATE TRIGGER alter_table_under_transition_tables_upd_trigger AFTER UPDATE ON alter_table_under_transition_tables REFERENCING OLD TABLE AS d NEW TABLE AS i FOR EACH STATEMENT EXECUTE PROCEDURE alter_table_under_transition_tables_upd_func()"
  },
  {
    "comment": "plpgsql - Statement 774",
    "query": "INSERT INTO alter_table_under_transition_tables VALUES (1, '1'), (2, '2'), (3, '3')"
  },
  {
    "comment": "plpgsql - Statement 775",
    "query": "UPDATE alter_table_under_transition_tables SET name = name || name"
  },
  {
    "comment": "plpgsql - Statement 776",
    "query": "ALTER TABLE alter_table_under_transition_tables ALTER COLUMN name TYPE int USING name::integer"
  },
  {
    "comment": "plpgsql - Statement 777",
    "query": "UPDATE alter_table_under_transition_tables SET name = (name::text || name::text)::integer"
  },
  {
    "comment": "plpgsql - Statement 778",
    "query": "ALTER TABLE alter_table_under_transition_tables DROP column name"
  },
  {
    "comment": "plpgsql - Statement 779",
    "query": "UPDATE alter_table_under_transition_tables SET id = id"
  },
  {
    "comment": "plpgsql - Statement 780",
    "query": "CREATE TABLE multi_test (i int)"
  },
  {
    "comment": "plpgsql - Statement 781",
    "query": "INSERT INTO multi_test VALUES (1)"
  },
  {
    "comment": "plpgsql - Statement 782",
    "query": "CREATE OR REPLACE FUNCTION multi_test_trig() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN RAISE NOTICE 'count = %', (SELECT COUNT(*) FROM new_test); RAISE NOTICE 'count union = %', (SELECT COUNT(*) FROM (SELECT * FROM new_test UNION ALL SELECT * FROM new_test) ss); RETURN NULL; END$$"
  },
  {
    "comment": "plpgsql - Statement 783",
    "query": "CREATE TRIGGER my_trigger AFTER UPDATE ON multi_test REFERENCING NEW TABLE AS new_test OLD TABLE as old_test FOR EACH STATEMENT EXECUTE PROCEDURE multi_test_trig()"
  },
  {
    "comment": "plpgsql - Statement 784",
    "query": "UPDATE multi_test SET i = i"
  },
  {
    "comment": "plpgsql - Statement 785",
    "query": "DROP TABLE multi_test"
  },
  {
    "comment": "plpgsql - Statement 786",
    "query": "DROP FUNCTION multi_test_trig()"
  },
  {
    "comment": "plpgsql - Statement 787",
    "query": "CREATE TABLE partitioned_table (a int, b text) PARTITION BY LIST (a)"
  },
  {
    "comment": "plpgsql - Statement 788",
    "query": "CREATE TABLE pt_part1 PARTITION OF partitioned_table FOR VALUES IN (1)"
  },
  {
    "comment": "plpgsql - Statement 789",
    "query": "CREATE TABLE pt_part2 PARTITION OF partitioned_table FOR VALUES IN (2)"
  },
  {
    "comment": "plpgsql - Statement 790",
    "query": "INSERT INTO partitioned_table VALUES (1, 'Row 1')"
  },
  {
    "comment": "plpgsql - Statement 791",
    "query": "INSERT INTO partitioned_table VALUES (2, 'Row 2')"
  },
  {
    "comment": "plpgsql - Statement 792",
    "query": "CREATE OR REPLACE FUNCTION get_from_partitioned_table(partitioned_table.a%type) RETURNS partitioned_table AS $$ DECLARE a_val partitioned_table.a%TYPE; result partitioned_table%ROWTYPE; BEGIN a_val := $1; SELECT * INTO result FROM partitioned_table WHERE a = a_val; RETURN result; END; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "plpgsql - Statement 793",
    "query": "SELECT * FROM get_from_partitioned_table(1) AS t"
  },
  {
    "comment": "plpgsql - Statement 794",
    "query": "CREATE OR REPLACE FUNCTION list_partitioned_table() RETURNS SETOF public.partitioned_table.a%TYPE AS $$ DECLARE row public.partitioned_table%ROWTYPE; a_val public.partitioned_table.a%TYPE; BEGIN FOR row IN SELECT * FROM public.partitioned_table ORDER BY a LOOP a_val := row.a; RETURN NEXT a_val; END LOOP; RETURN; END; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "plpgsql - Statement 795",
    "query": "SELECT * FROM list_partitioned_table() AS t"
  },
  {
    "comment": "plpgsql - Statement 796",
    "query": "CREATE FUNCTION fx(x WSlot) RETURNS void AS $$ BEGIN GET DIAGNOSTICS x = ROW_COUNT; RETURN; END; $$ LANGUAGE plpgsql"
  }
]