[
  {
    "comment": "conversion - Statement 1",
    "query": "SELECT FROM test_enc_setup()",
    "expected": "SELECT * FROM test_enc_setup()"
  },
  {
    "comment": "conversion - Statement 2",
    "query": "CREATE FUNCTION test_enc_conversion(bytea, name, name, bool, validlen OUT int, result OUT bytea) AS 'regresslib', 'test_enc_conversion' LANGUAGE C STRICT",
    "expected": "CREATE FUNCTION test_enc_conversion (BYTEA, name, name, BOOLEAN, OUT validlen INT, OUT result BYTEA) AS $$regresslib$$ LANGUAGE c STRICT"
  },
  {
    "comment": "conversion - Statement 3",
    "query": "CREATE USER regress_conversion_user WITH NOCREATEDB NOCREATEROLE",
    "expected": "CREATE USER regress_conversion_user NOCREATEDB NOCREATEROLE"
  },
  {
    "comment": "conversion - Statement 4",
    "query": "SET SESSION AUTHORIZATION regress_conversion_user",
    "expected": "SET SESSION AUTHORIZATION 'regress_conversion_user'"
  },
  {
    "comment": "conversion - Statement 5",
    "query": "CREATE CONVERSION myconv FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8"
  },
  {
    "comment": "conversion - Statement 6",
    "query": "CREATE DEFAULT CONVERSION public.mydef FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8"
  },
  {
    "comment": "conversion - Statement 7",
    "query": "CREATE DEFAULT CONVERSION public.mydef2 FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8"
  },
  {
    "comment": "conversion - Statement 8",
    "query": "COMMENT ON CONVERSION myconv_bad IS 'foo'"
  },
  {
    "comment": "conversion - Statement 9",
    "query": "COMMENT ON CONVERSION myconv IS 'bar'"
  },
  {
    "comment": "conversion - Statement 10",
    "query": "COMMENT ON CONVERSION myconv IS NULL"
  },
  {
    "comment": "conversion - Statement 11",
    "query": "DROP CONVERSION myconv"
  },
  {
    "comment": "conversion - Statement 12",
    "query": "DROP CONVERSION mydef"
  },
  {
    "comment": "conversion - Statement 13",
    "query": "RESET SESSION AUTHORIZATION",
    "expected": "RESET session_authorization"
  },
  {
    "comment": "conversion - Statement 14",
    "query": "DROP USER regress_conversion_user",
    "expected": "DROP ROLE regress_conversion_user"
  },
  {
    "comment": "conversion - Statement 15",
    "query": "create or replace function test_conv(\n input IN bytea,\n src_encoding IN text,\n dst_encoding IN text,\n\n result OUT bytea,\n errorat OUT bytea,\n error OUT text)\nlanguage plpgsql as\n$$\ndeclare\n validlen int;\nbegin\n begin\n  select * into validlen, result from test_enc_conversion(input, src_encoding, dst_encoding, false);\n errorat = NULL;\n error := NULL;\n exception when others then\n error := sqlerrm;\n select * into validlen, result from test_enc_conversion(input, src_encoding, dst_encoding, true);\n errorat = substr(input, validlen + 1);\n end;\n return;\nend;\n$$;",
    "expected": "CREATE OR REPLACE FUNCTION test_conv (input BYTEA, src_encoding TEXT, dst_encoding TEXT, OUT result BYTEA, OUT errorat BYTEA, OUT error TEXT) LANGUAGE plpgsql AS $$\ndeclare\n validlen int;\nbegin\n begin\n  select * into validlen, result from test_enc_conversion(input, src_encoding, dst_encoding, false);\n errorat = NULL;\n error := NULL;\n exception when others then\n error := sqlerrm;\n select * into validlen, result from test_enc_conversion(input, src_encoding, dst_encoding, true);\n errorat = substr(input, validlen + 1);\n end;\n return;\nend;\n$$"
  },
  {
    "comment": "conversion - Statement 25",
    "query": "CREATE TABLE utf8_verification_inputs (inbytes bytea, description text PRIMARY KEY)",
    "expected": "CREATE TABLE utf8_verification_inputs (inbytes BYTEA, description TEXT PRIMARY KEY)"
  },
  {
    "comment": "conversion - Statement 26",
    "query": "insert into utf8_verification_inputs  values ('\\x66006f',\t'NUL byte'), ('\\xaf',\t\t'bare continuation'), ('\\xc5',\t\t'missing second byte in 2-byte char'), ('\\xc080',\t'smallest 2-byte overlong'), ('\\xc1bf',\t'largest 2-byte overlong'), ('\\xc280',\t'next 2-byte after overlongs'), ('\\xdfbf',\t'largest 2-byte'), ('\\xe9af',\t'missing third byte in 3-byte char'), ('\\xe08080',\t'smallest 3-byte overlong'), ('\\xe09fbf',\t'largest 3-byte overlong'), ('\\xe0a080',\t'next 3-byte after overlong'), ('\\xed9fbf',\t'last before surrogates'), ('\\xeda080',\t'smallest surrogate'), ('\\xedbfbf',\t'largest surrogate'), ('\\xee8080',\t'next after surrogates'), ('\\xefbfbf',\t'largest 3-byte'), ('\\xf1afbf',\t'missing fourth byte in 4-byte char'), ('\\xf0808080',\t'smallest 4-byte overlong'), ('\\xf08fbfbf',\t'largest 4-byte overlong'), ('\\xf0908080',\t'next 4-byte after overlong'), ('\\xf48fbfbf',\t'largest 4-byte'), ('\\xf4908080',\t'smallest too large'), ('\\xfa9a9a8a8a',\t'5-byte')",
    "expected": "INSERT INTO utf8_verification_inputs VALUES ('\\x66006f', 'NUL byte'), ('\\xaf', 'bare continuation'), ('\\xc5', 'missing second byte in 2-byte char'), ('\\xc080', 'smallest 2-byte overlong'), ('\\xc1bf', 'largest 2-byte overlong'), ('\\xc280', 'next 2-byte after overlongs'), ('\\xdfbf', 'largest 2-byte'), ('\\xe9af', 'missing third byte in 3-byte char'), ('\\xe08080', 'smallest 3-byte overlong'), ('\\xe09fbf', 'largest 3-byte overlong'), ('\\xe0a080', 'next 3-byte after overlong'), ('\\xed9fbf', 'last before surrogates'), ('\\xeda080', 'smallest surrogate'), ('\\xedbfbf', 'largest surrogate'), ('\\xee8080', 'next after surrogates'), ('\\xefbfbf', 'largest 3-byte'), ('\\xf1afbf', 'missing fourth byte in 4-byte char'), ('\\xf0808080', 'smallest 4-byte overlong'), ('\\xf08fbfbf', 'largest 4-byte overlong'), ('\\xf0908080', 'next 4-byte after overlong'), ('\\xf48fbfbf', 'largest 4-byte'), ('\\xf4908080', 'smallest too large'), ('\\xfa9a9a8a8a', '5-byte')"
  },
  {
    "comment": "conversion - Statement 27",
    "query": "select description, (test_conv(inbytes, 'utf8', 'utf8')).* from utf8_verification_inputs",
    "expected": "SELECT description, (test_conv(inbytes, 'utf8', 'utf8')).* FROM utf8_verification_inputs"
  },
  {
    "comment": "conversion - Statement 28",
    "query": "with test_bytes as ( select inbytes, description, (test_conv(inbytes || repeat('.', 3)::bytea, 'utf8', 'utf8')).error from utf8_verification_inputs ), test_padded as ( select description, (test_conv(inbytes || repeat('.', 64)::bytea, 'utf8', 'utf8')).error from test_bytes ) select description, b.error as orig_error, p.error as error_after_padding from test_padded p join test_bytes b using (description) where p.error is distinct from b.error order by description",
    "expected": "WITH test_bytes AS (SELECT inbytes, description, (test_conv(inbytes || CAST(repeat('.', 3) AS BYTEA), 'utf8', 'utf8')).error FROM utf8_verification_inputs), test_padded AS (SELECT description, (test_conv(inbytes || CAST(repeat('.', 64) AS BYTEA), 'utf8', 'utf8')).error FROM test_bytes) SELECT description, b.error AS orig_error, p.error AS error_after_padding FROM test_padded AS p INNER JOIN test_bytes AS b USING (description) WHERE p.error IS DISTINCT FROM b.error ORDER BY description"
  },
  {
    "comment": "conversion - Statement 29",
    "query": "with test_bytes as ( select inbytes, description, (test_conv(inbytes || repeat('.', 3)::bytea, 'utf8', 'utf8')).error from utf8_verification_inputs ), test_padded as ( select description, (test_conv(repeat('.', 64 - length(inbytes))::bytea || inbytes || repeat('.', 64)::bytea, 'utf8', 'utf8')).error from test_bytes ) select description, b.error as orig_error, p.error as error_after_padding from test_padded p join test_bytes b using (description) where p.error is distinct from b.error order by description",
    "expected": "WITH test_bytes AS (SELECT inbytes, description, (test_conv(inbytes || CAST(repeat('.', 3) AS BYTEA), 'utf8', 'utf8')).error FROM utf8_verification_inputs), test_padded AS (SELECT description, (test_conv(CAST(repeat('.', 64 - length(inbytes)) AS BYTEA) || inbytes || CAST(repeat('.', 64) AS BYTEA), 'utf8', 'utf8')).error FROM test_bytes) SELECT description, b.error AS orig_error, p.error AS error_after_padding FROM test_padded AS p INNER JOIN test_bytes AS b USING (description) WHERE p.error IS DISTINCT FROM b.error ORDER BY description"
  },
  {
    "comment": "conversion - Statement 30",
    "query": "with test_bytes as ( select inbytes, description, (test_conv(inbytes || repeat('.', 3)::bytea, 'utf8', 'utf8')).error from utf8_verification_inputs ), test_padded as ( select description, (test_conv(repeat('.', 64)::bytea || inbytes || repeat('.', 3)::bytea, 'utf8', 'utf8')).error from test_bytes ) select description, b.error as orig_error, p.error as error_after_padding from test_padded p join test_bytes b using (description) where p.error is distinct from b.error order by description",
    "expected": "WITH test_bytes AS (SELECT inbytes, description, (test_conv(inbytes || CAST(repeat('.', 3) AS BYTEA), 'utf8', 'utf8')).error FROM utf8_verification_inputs), test_padded AS (SELECT description, (test_conv(CAST(repeat('.', 64) AS BYTEA) || inbytes || CAST(repeat('.', 3) AS BYTEA), 'utf8', 'utf8')).error FROM test_bytes) SELECT description, b.error AS orig_error, p.error AS error_after_padding FROM test_padded AS p INNER JOIN test_bytes AS b USING (description) WHERE p.error IS DISTINCT FROM b.error ORDER BY description"
  },
  {
    "comment": "conversion - Statement 31",
    "query": "with test_bytes as ( select inbytes, description, (test_conv(inbytes || repeat('.', 3)::bytea, 'utf8', 'utf8')).error from utf8_verification_inputs ), test_padded as ( select description, (test_conv(repeat('.', 64 - length(inbytes))::bytea || inbytes || repeat('.', 3)::bytea, 'utf8', 'utf8')).error from test_bytes ) select description, b.error as orig_error, p.error as error_after_padding from test_padded p join test_bytes b using (description) where p.error is distinct from b.error order by description",
    "expected": "WITH test_bytes AS (SELECT inbytes, description, (test_conv(inbytes || CAST(repeat('.', 3) AS BYTEA), 'utf8', 'utf8')).error FROM utf8_verification_inputs), test_padded AS (SELECT description, (test_conv(CAST(repeat('.', 64 - length(inbytes)) AS BYTEA) || inbytes || CAST(repeat('.', 3) AS BYTEA), 'utf8', 'utf8')).error FROM test_bytes) SELECT description, b.error AS orig_error, p.error AS error_after_padding FROM test_padded AS p INNER JOIN test_bytes AS b USING (description) WHERE p.error IS DISTINCT FROM b.error ORDER BY description"
  },
  {
    "comment": "conversion - Statement 32",
    "query": "CREATE TABLE utf8_inputs (inbytes bytea, description text)",
    "expected": "CREATE TABLE utf8_inputs (inbytes BYTEA, description TEXT)"
  },
  {
    "comment": "conversion - Statement 33",
    "query": "insert into utf8_inputs  values ('\\x666f6f',\t\t'valid, pure ASCII'), ('\\xc3a4c3b6',\t'valid, extra latin chars'), ('\\xd184d0bed0be',\t'valid, cyrillic'), ('\\x666f6fe8b1a1',\t'valid, kanji/Chinese'), ('\\xe382abe3829a',\t'valid, two chars that combine to one in EUC_JIS_2004'), ('\\xe382ab',\t\t'only first half of combined char in EUC_JIS_2004'), ('\\xe382abe382',\t'incomplete combination when converted EUC_JIS_2004'), ('\\xecbd94eb81bceba6ac', 'valid, Hangul, Korean'), ('\\x666f6fefa8aa',\t'valid, needs mapping function to convert to GB18030'), ('\\x66e8b1ff6f6f',\t'invalid byte sequence'), ('\\x66006f',\t\t'invalid, NUL byte'), ('\\x666f6fe8b100',\t'invalid, NUL byte'), ('\\x666f6fe8b1',\t'incomplete character at end')",
    "expected": "INSERT INTO utf8_inputs VALUES ('\\x666f6f', 'valid, pure ASCII'), ('\\xc3a4c3b6', 'valid, extra latin chars'), ('\\xd184d0bed0be', 'valid, cyrillic'), ('\\x666f6fe8b1a1', 'valid, kanji/Chinese'), ('\\xe382abe3829a', 'valid, two chars that combine to one in EUC_JIS_2004'), ('\\xe382ab', 'only first half of combined char in EUC_JIS_2004'), ('\\xe382abe382', 'incomplete combination when converted EUC_JIS_2004'), ('\\xecbd94eb81bceba6ac', 'valid, Hangul, Korean'), ('\\x666f6fefa8aa', 'valid, needs mapping function to convert to GB18030'), ('\\x66e8b1ff6f6f', 'invalid byte sequence'), ('\\x66006f', 'invalid, NUL byte'), ('\\x666f6fe8b100', 'invalid, NUL byte'), ('\\x666f6fe8b1', 'incomplete character at end')"
  },
  {
    "comment": "conversion - Statement 34",
    "query": "select description, (test_conv(inbytes, 'utf8', 'utf8')).* from utf8_inputs",
    "expected": "SELECT description, (test_conv(inbytes, 'utf8', 'utf8')).* FROM utf8_inputs"
  },
  {
    "comment": "conversion - Statement 35",
    "query": "select description, inbytes, (test_conv(inbytes, 'utf8', 'euc_jis_2004')).* from utf8_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'utf8', 'euc_jis_2004')).* FROM utf8_inputs"
  },
  {
    "comment": "conversion - Statement 36",
    "query": "select description, inbytes, (test_conv(inbytes, 'utf8', 'latin1')).* from utf8_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'utf8', 'latin1')).* FROM utf8_inputs"
  },
  {
    "comment": "conversion - Statement 37",
    "query": "select description, inbytes, (test_conv(inbytes, 'utf8', 'latin2')).* from utf8_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'utf8', 'latin2')).* FROM utf8_inputs"
  },
  {
    "comment": "conversion - Statement 38",
    "query": "select description, inbytes, (test_conv(inbytes, 'utf8', 'latin5')).* from utf8_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'utf8', 'latin5')).* FROM utf8_inputs"
  },
  {
    "comment": "conversion - Statement 39",
    "query": "select description, inbytes, (test_conv(inbytes, 'utf8', 'koi8r')).* from utf8_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'utf8', 'koi8r')).* FROM utf8_inputs"
  },
  {
    "comment": "conversion - Statement 40",
    "query": "select description, inbytes, (test_conv(inbytes, 'utf8', 'gb18030')).* from utf8_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'utf8', 'gb18030')).* FROM utf8_inputs"
  },
  {
    "comment": "conversion - Statement 41",
    "query": "CREATE TABLE euc_jis_2004_inputs (inbytes bytea, description text)",
    "expected": "CREATE TABLE euc_jis_2004_inputs (inbytes BYTEA, description TEXT)"
  },
  {
    "comment": "conversion - Statement 42",
    "query": "insert into euc_jis_2004_inputs  values ('\\x666f6f',\t\t'valid, pure ASCII'), ('\\x666f6fbedd',\t'valid'), ('\\xa5f7',\t\t'valid, translates to two UTF-8 chars '), ('\\xbeddbe',\t\t'incomplete char '), ('\\x666f6f00bedd',\t'invalid, NUL byte'), ('\\x666f6fbe00dd',\t'invalid, NUL byte'), ('\\x666f6fbedd00',\t'invalid, NUL byte'), ('\\xbe04',\t\t'invalid byte sequence')",
    "expected": "INSERT INTO euc_jis_2004_inputs VALUES ('\\x666f6f', 'valid, pure ASCII'), ('\\x666f6fbedd', 'valid'), ('\\xa5f7', 'valid, translates to two UTF-8 chars '), ('\\xbeddbe', 'incomplete char '), ('\\x666f6f00bedd', 'invalid, NUL byte'), ('\\x666f6fbe00dd', 'invalid, NUL byte'), ('\\x666f6fbedd00', 'invalid, NUL byte'), ('\\xbe04', 'invalid byte sequence')"
  },
  {
    "comment": "conversion - Statement 43",
    "query": "select description, inbytes, (test_conv(inbytes, 'euc_jis_2004', 'euc_jis_2004')).* from euc_jis_2004_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'euc_jis_2004', 'euc_jis_2004')).* FROM euc_jis_2004_inputs"
  },
  {
    "comment": "conversion - Statement 44",
    "query": "select description, inbytes, (test_conv(inbytes, 'euc_jis_2004', 'utf8')).* from euc_jis_2004_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'euc_jis_2004', 'utf8')).* FROM euc_jis_2004_inputs"
  },
  {
    "comment": "conversion - Statement 45",
    "query": "CREATE TABLE shiftjis2004_inputs (inbytes bytea, description text)",
    "expected": "CREATE TABLE shiftjis2004_inputs (inbytes BYTEA, description TEXT)"
  },
  {
    "comment": "conversion - Statement 46",
    "query": "insert into shiftjis2004_inputs  values ('\\x666f6f',\t\t'valid, pure ASCII'), ('\\x666f6f8fdb',\t'valid'), ('\\x666f6f81c0',\t'valid, no translation to UTF-8'), ('\\x666f6f82f5',\t'valid, translates to two UTF-8 chars '), ('\\x666f6f8fdb8f',\t'incomplete char '), ('\\x666f6f820a',\t'incomplete char, followed by newline '), ('\\x666f6f008fdb',\t'invalid, NUL byte'), ('\\x666f6f8f00db',\t'invalid, NUL byte'), ('\\x666f6f8fdb00',\t'invalid, NUL byte')",
    "expected": "INSERT INTO shiftjis2004_inputs VALUES ('\\x666f6f', 'valid, pure ASCII'), ('\\x666f6f8fdb', 'valid'), ('\\x666f6f81c0', 'valid, no translation to UTF-8'), ('\\x666f6f82f5', 'valid, translates to two UTF-8 chars '), ('\\x666f6f8fdb8f', 'incomplete char '), ('\\x666f6f820a', 'incomplete char, followed by newline '), ('\\x666f6f008fdb', 'invalid, NUL byte'), ('\\x666f6f8f00db', 'invalid, NUL byte'), ('\\x666f6f8fdb00', 'invalid, NUL byte')"
  },
  {
    "comment": "conversion - Statement 47",
    "query": "select description, inbytes, (test_conv(inbytes, 'shiftjis2004', 'shiftjis2004')).* from shiftjis2004_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'shiftjis2004', 'shiftjis2004')).* FROM shiftjis2004_inputs"
  },
  {
    "comment": "conversion - Statement 48",
    "query": "select description, inbytes, (test_conv(inbytes, 'shiftjis2004', 'utf8')).* from shiftjis2004_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'shiftjis2004', 'utf8')).* FROM shiftjis2004_inputs"
  },
  {
    "comment": "conversion - Statement 49",
    "query": "select description, inbytes, (test_conv(inbytes, 'shiftjis2004', 'euc_jis_2004')).* from shiftjis2004_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'shiftjis2004', 'euc_jis_2004')).* FROM shiftjis2004_inputs"
  },
  {
    "comment": "conversion - Statement 50",
    "query": "CREATE TABLE gb18030_inputs (inbytes bytea, description text)",
    "expected": "CREATE TABLE gb18030_inputs (inbytes BYTEA, description TEXT)"
  },
  {
    "comment": "conversion - Statement 51",
    "query": "insert into gb18030_inputs  values ('\\x666f6f',\t\t'valid, pure ASCII'), ('\\x666f6fcff3',\t'valid'), ('\\x666f6f8431a530',\t'valid, no translation to UTF-8'), ('\\x666f6f84309c38',\t'valid, translates to UTF-8 by mapping function'), ('\\x666f6f84309c',\t'incomplete char '), ('\\x666f6f84309c0a',\t'incomplete char, followed by newline '), ('\\x666f6f84',\t\t'incomplete char at end'), ('\\x666f6f84309c3800', 'invalid, NUL byte'), ('\\x666f6f84309c0038', 'invalid, NUL byte')",
    "expected": "INSERT INTO gb18030_inputs VALUES ('\\x666f6f', 'valid, pure ASCII'), ('\\x666f6fcff3', 'valid'), ('\\x666f6f8431a530', 'valid, no translation to UTF-8'), ('\\x666f6f84309c38', 'valid, translates to UTF-8 by mapping function'), ('\\x666f6f84309c', 'incomplete char '), ('\\x666f6f84309c0a', 'incomplete char, followed by newline '), ('\\x666f6f84', 'incomplete char at end'), ('\\x666f6f84309c3800', 'invalid, NUL byte'), ('\\x666f6f84309c0038', 'invalid, NUL byte')"
  },
  {
    "comment": "conversion - Statement 52",
    "query": "select description, inbytes, (test_conv(inbytes::text::bytea, 'gb18030', 'gb18030')).* from gb18030_inputs",
    "expected": "SELECT description, inbytes, (test_conv(CAST(CAST(inbytes AS TEXT) AS BYTEA), 'gb18030', 'gb18030')).* FROM gb18030_inputs"
  },
  {
    "comment": "conversion - Statement 53",
    "query": "select description, inbytes, (test_conv(inbytes, 'gb18030', 'utf8')).* from gb18030_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'gb18030', 'utf8')).* FROM gb18030_inputs"
  },
  {
    "comment": "conversion - Statement 54",
    "query": "CREATE TABLE iso8859_5_inputs (inbytes bytea, description text)",
    "expected": "CREATE TABLE iso8859_5_inputs (inbytes BYTEA, description TEXT)"
  },
  {
    "comment": "conversion - Statement 55",
    "query": "insert into iso8859_5_inputs  values ('\\x666f6f',\t\t'valid, pure ASCII'), ('\\xe4dede',\t\t'valid'), ('\\x00',\t\t'invalid, NUL byte'), ('\\xe400dede',\t'invalid, NUL byte'), ('\\xe4dede00',\t'invalid, NUL byte')",
    "expected": "INSERT INTO iso8859_5_inputs VALUES ('\\x666f6f', 'valid, pure ASCII'), ('\\xe4dede', 'valid'), ('\\x00', 'invalid, NUL byte'), ('\\xe400dede', 'invalid, NUL byte'), ('\\xe4dede00', 'invalid, NUL byte')"
  },
  {
    "comment": "conversion - Statement 56",
    "query": "select description, inbytes, (test_conv(inbytes, 'iso8859-5', 'iso8859-5')).* from iso8859_5_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'iso8859-5', 'iso8859-5')).* FROM iso8859_5_inputs"
  },
  {
    "comment": "conversion - Statement 57",
    "query": "select description, inbytes, (test_conv(inbytes, 'iso8859-5', 'utf8')).* from iso8859_5_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'iso8859-5', 'utf8')).* FROM iso8859_5_inputs"
  },
  {
    "comment": "conversion - Statement 58",
    "query": "select description, inbytes, (test_conv(inbytes, 'iso8859-5', 'koi8r')).* from iso8859_5_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'iso8859-5', 'koi8r')).* FROM iso8859_5_inputs"
  },
  {
    "comment": "conversion - Statement 59",
    "query": "select description, inbytes, (test_conv(inbytes, 'iso8859_5', 'mule_internal')).* from iso8859_5_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'iso8859_5', 'mule_internal')).* FROM iso8859_5_inputs"
  },
  {
    "comment": "conversion - Statement 60",
    "query": "CREATE TABLE big5_inputs (inbytes bytea, description text)",
    "expected": "CREATE TABLE big5_inputs (inbytes BYTEA, description TEXT)"
  },
  {
    "comment": "conversion - Statement 61",
    "query": "insert into big5_inputs  values ('\\x666f6f',\t\t'valid, pure ASCII'), ('\\x666f6fb648',\t'valid'), ('\\x666f6fa27f',\t'valid, no translation to UTF-8'), ('\\x666f6fb60048',\t'invalid, NUL byte'), ('\\x666f6fb64800',\t'invalid, NUL byte')",
    "expected": "INSERT INTO big5_inputs VALUES ('\\x666f6f', 'valid, pure ASCII'), ('\\x666f6fb648', 'valid'), ('\\x666f6fa27f', 'valid, no translation to UTF-8'), ('\\x666f6fb60048', 'invalid, NUL byte'), ('\\x666f6fb64800', 'invalid, NUL byte')"
  },
  {
    "comment": "conversion - Statement 62",
    "query": "select description, inbytes, (test_conv(inbytes, 'big5', 'big5')).* from big5_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'big5', 'big5')).* FROM big5_inputs"
  },
  {
    "comment": "conversion - Statement 63",
    "query": "select description, inbytes, (test_conv(inbytes, 'big5', 'utf8')).* from big5_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'big5', 'utf8')).* FROM big5_inputs"
  },
  {
    "comment": "conversion - Statement 64",
    "query": "select description, inbytes, (test_conv(inbytes, 'big5', 'mule_internal')).* from big5_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'big5', 'mule_internal')).* FROM big5_inputs"
  },
  {
    "comment": "conversion - Statement 65",
    "query": "CREATE TABLE mic_inputs (inbytes bytea, description text)",
    "expected": "CREATE TABLE mic_inputs (inbytes BYTEA, description TEXT)"
  },
  {
    "comment": "conversion - Statement 66",
    "query": "insert into mic_inputs  values ('\\x666f6f',\t\t'valid, pure ASCII'), ('\\x8bc68bcf8bcf',\t'valid (in KOI8R)'), ('\\x8bc68bcf8b',\t'invalid,incomplete char'), ('\\x92bedd',\t\t'valid (in SHIFT_JIS)'), ('\\x92be',\t\t'invalid, incomplete char)'), ('\\x666f6f95a3c1',\t'valid (in Big5)'), ('\\x666f6f95a3',\t'invalid, incomplete char'), ('\\x9200bedd',\t'invalid, NUL byte'), ('\\x92bedd00',\t'invalid, NUL byte'), ('\\x8b00c68bcf8bcf',\t'invalid, NUL byte')",
    "expected": "INSERT INTO mic_inputs VALUES ('\\x666f6f', 'valid, pure ASCII'), ('\\x8bc68bcf8bcf', 'valid (in KOI8R)'), ('\\x8bc68bcf8b', 'invalid,incomplete char'), ('\\x92bedd', 'valid (in SHIFT_JIS)'), ('\\x92be', 'invalid, incomplete char)'), ('\\x666f6f95a3c1', 'valid (in Big5)'), ('\\x666f6f95a3', 'invalid, incomplete char'), ('\\x9200bedd', 'invalid, NUL byte'), ('\\x92bedd00', 'invalid, NUL byte'), ('\\x8b00c68bcf8bcf', 'invalid, NUL byte')"
  },
  {
    "comment": "conversion - Statement 67",
    "query": "select description, inbytes, (test_conv(inbytes, 'mule_internal', 'mule_internal')).* from mic_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'mule_internal', 'mule_internal')).* FROM mic_inputs"
  },
  {
    "comment": "conversion - Statement 68",
    "query": "select description, inbytes, (test_conv(inbytes, 'mule_internal', 'koi8r')).* from mic_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'mule_internal', 'koi8r')).* FROM mic_inputs"
  },
  {
    "comment": "conversion - Statement 69",
    "query": "select description, inbytes, (test_conv(inbytes, 'mule_internal', 'iso8859-5')).* from mic_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'mule_internal', 'iso8859-5')).* FROM mic_inputs"
  },
  {
    "comment": "conversion - Statement 70",
    "query": "select description, inbytes, (test_conv(inbytes, 'mule_internal', 'sjis')).* from mic_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'mule_internal', 'sjis')).* FROM mic_inputs"
  },
  {
    "comment": "conversion - Statement 71",
    "query": "select description, inbytes, (test_conv(inbytes, 'mule_internal', 'big5')).* from mic_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'mule_internal', 'big5')).* FROM mic_inputs"
  },
  {
    "comment": "conversion - Statement 72",
    "query": "select description, inbytes, (test_conv(inbytes, 'mule_internal', 'euc_jp')).* from mic_inputs",
    "expected": "SELECT description, inbytes, (test_conv(inbytes, 'mule_internal', 'euc_jp')).* FROM mic_inputs"
  }
]
