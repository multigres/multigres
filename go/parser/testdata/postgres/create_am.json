[
  {
    "comment": "create_am - Statement 1",
    "query": "CREATE ACCESS METHOD gist2 TYPE INDEX HANDLER gisthandler"
  },
  {
    "comment": "create_am - Statement 2",
    "query": "CREATE ACCESS METHOD bogus TYPE INDEX HANDLER int4in"
  },
  {
    "comment": "create_am - Statement 3",
    "query": "CREATE ACCESS METHOD bogus TYPE INDEX HANDLER heap_tableam_handler"
  },
  {
    "comment": "create_am - Statement 4",
    "query": "CREATE INDEX grect2ind2 ON fast_emp4000 USING gist2 (home_base)",
    "expected": "CREATE INDEX grect2ind2 ON fast_emp4000 USING gist2 ( home_base )"
  },
  {
    "comment": "create_am - Statement 5",
    "query": "CREATE OPERATOR CLASS box_ops DEFAULT FOR TYPE box USING gist2 AS OPERATOR 1\t\u003c\u003c, OPERATOR 2\t\u0026\u003c, OPERATOR 3\t\u0026\u0026, OPERATOR 4\t\u0026\u003e, OPERATOR 5\t\u003e\u003e, OPERATOR 6\t~=, OPERATOR 7\t@\u003e, OPERATOR 8\t\u003c@, OPERATOR 9\t\u0026\u003c|, OPERATOR 10\t\u003c\u003c|, OPERATOR 11\t|\u003e\u003e, OPERATOR 12\t|\u0026\u003e, FUNCTION 1\tgist_box_consistent(internal, box, smallint, oid, internal), FUNCTION 2\tgist_box_union(internal, internal), FUNCTION 5\tgist_box_penalty(internal, internal, internal), FUNCTION 6\tgist_box_picksplit(internal, internal), FUNCTION 7\tgist_box_same(box, box, internal)",
    "expected": "CREATE OPERATOR CLASS box_ops DEFAULT FOR TYPE box USING gist2 AS OPERATOR 1 \u003c\u003c, OPERATOR 2 \u0026\u003c, OPERATOR 3 \u0026\u0026, OPERATOR 4 \u0026\u003e, OPERATOR 5 \u003e\u003e, OPERATOR 6 ~=, OPERATOR 7 @\u003e, OPERATOR 8 \u003c@, OPERATOR 9 \u0026\u003c|, OPERATOR 10 \u003c\u003c|, OPERATOR 11 |\u003e\u003e, OPERATOR 12 |\u0026\u003e, FUNCTION 1 gist_box_consistent(internal, box, int2, oid, internal), FUNCTION 2 gist_box_union(internal, internal), FUNCTION 5 gist_box_penalty(internal, internal, internal), FUNCTION 6 gist_box_picksplit(internal, internal), FUNCTION 7 gist_box_same(box, box, internal)"
  },
  {
    "comment": "create_am - Statement 6",
    "query": "BEGIN"
  },
  {
    "comment": "create_am - Statement 7",
    "query": "DROP INDEX grect2ind"
  },
  {
    "comment": "create_am - Statement 8",
    "query": "SET enable_seqscan = OFF",
    "expected": "SET enable_seqscan = off"
  },
  {
    "comment": "create_am - Statement 9",
    "query": "SET enable_indexscan = ON",
    "expected": "SET enable_indexscan = on"
  },
  {
    "comment": "create_am - Statement 10",
    "query": "SET enable_bitmapscan = OFF",
    "expected": "SET enable_bitmapscan = off"
  },
  {
    "comment": "create_am - Statement 11",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM fast_emp4000 WHERE home_base \u003c@ '(200,200),(2000,1000)'::box ORDER BY (home_base[0])[0]",
    "expected": "EXPLAIN (COSTS false) SELECT * FROM fast_emp4000 WHERE home_base \u003c@ CAST('(200,200),(2000,1000)' AS box) ORDER BY (home_base[0])[0]"
  },
  {
    "comment": "create_am - Statement 12",
    "query": "SELECT * FROM fast_emp4000 WHERE home_base \u003c@ '(200,200),(2000,1000)'::box ORDER BY (home_base[0])[0]",
    "expected": "SELECT * FROM fast_emp4000 WHERE home_base \u003c@ CAST('(200,200),(2000,1000)' AS box) ORDER BY (home_base[0])[0]"
  },
  {
    "comment": "create_am - Statement 13",
    "query": "EXPLAIN (COSTS OFF) SELECT count(*) FROM fast_emp4000 WHERE home_base \u0026\u0026 '(1000,1000,0,0)'::box",
    "expected": "EXPLAIN (COSTS false) SELECT COUNT(*) FROM fast_emp4000 WHERE home_base \u0026\u0026 CAST('(1000,1000,0,0)' AS box)"
  },
  {
    "comment": "create_am - Statement 14",
    "query": "SELECT count(*) FROM fast_emp4000 WHERE home_base \u0026\u0026 '(1000,1000,0,0)'::box",
    "expected": "SELECT COUNT(*) FROM fast_emp4000 WHERE home_base \u0026\u0026 CAST('(1000,1000,0,0)' AS box)"
  },
  {
    "comment": "create_am - Statement 15",
    "query": "EXPLAIN (COSTS OFF) SELECT count(*) FROM fast_emp4000 WHERE home_base IS NULL",
    "expected": "EXPLAIN (COSTS false) SELECT COUNT(*) FROM fast_emp4000 WHERE home_base IS NULL"
  },
  {
    "comment": "create_am - Statement 16",
    "query": "SELECT count(*) FROM fast_emp4000 WHERE home_base IS NULL",
    "expected": "SELECT COUNT(*) FROM fast_emp4000 WHERE home_base IS NULL"
  },
  {
    "comment": "create_am - Statement 17",
    "query": "ROLLBACK"
  },
  {
    "comment": "create_am - Statement 18",
    "query": "DROP ACCESS METHOD gist2"
  },
  {
    "comment": "create_am - Statement 19",
    "query": "LOCK TABLE fast_emp4000",
    "expected": "LOCK TABLE fast_emp4000 IN ACCESS EXCLUSIVE MODE"
  },
  {
    "comment": "create_am - Statement 20",
    "query": "DROP ACCESS METHOD gist2 CASCADE"
  },
  {
    "comment": "create_am - Statement 21",
    "query": "COMMIT"
  },
  {
    "comment": "create_am - Statement 22",
    "query": "SET default_table_access_method = ''"
  },
  {
    "comment": "create_am - Statement 23",
    "query": "SET default_table_access_method = 'I do not exist AM'"
  },
  {
    "comment": "create_am - Statement 24",
    "query": "SET default_table_access_method = 'btree'"
  },
  {
    "comment": "create_am - Statement 25",
    "query": "CREATE ACCESS METHOD heap2 TYPE TABLE HANDLER heap_tableam_handler"
  },
  {
    "comment": "create_am - Statement 26",
    "query": "CREATE ACCESS METHOD bogus TYPE TABLE HANDLER int4in"
  },
  {
    "comment": "create_am - Statement 27",
    "query": "CREATE ACCESS METHOD bogus TYPE TABLE HANDLER bthandler"
  },
  {
    "comment": "create_am - Statement 28",
    "query": "SELECT amname, amhandler, amtype FROM pg_am where amtype = 't' ORDER BY 1, 2",
    "expected": "SELECT amname, amhandler, amtype FROM pg_am WHERE amtype = 't' ORDER BY 1, 2"
  },
  {
    "comment": "create_am - Statement 29",
    "query": "CREATE TABLE tableam_tbl_heap2(f1 int) USING heap2",
    "expected": "CREATE TABLE tableam_tbl_heap2 (f1 INT) USING heap2"
  },
  {
    "comment": "create_am - Statement 30",
    "query": "INSERT INTO tableam_tbl_heap2 VALUES(1)",
    "expected": "INSERT INTO tableam_tbl_heap2 VALUES (1)"
  },
  {
    "comment": "create_am - Statement 31",
    "query": "SELECT f1 FROM tableam_tbl_heap2 ORDER BY f1"
  },
  {
    "comment": "create_am - Statement 32",
    "query": "CREATE TABLE tableam_tblas_heap2 USING heap2 AS SELECT * FROM tableam_tbl_heap2"
  },
  {
    "comment": "create_am - Statement 33",
    "query": "SELECT INTO tableam_tblselectinto_heap2 USING heap2 FROM tableam_tbl_heap2",
    "error": "parse error at position 45: syntax error"
  },
  {
    "comment": "create_am - Statement 34",
    "query": "CREATE VIEW tableam_view_heap2 USING heap2 AS SELECT * FROM tableam_tbl_heap2",
    "error": "parse error at position 36: syntax error"
  },
  {
    "comment": "create_am - Statement 35",
    "query": "CREATE SEQUENCE tableam_seq_heap2 USING heap2",
    "error": "parse error at position 39: syntax error"
  },
  {
    "comment": "create_am - Statement 36",
    "query": "CREATE MATERIALIZED VIEW tableam_tblmv_heap2 USING heap2 AS SELECT * FROM tableam_tbl_heap2"
  },
  {
    "comment": "create_am - Statement 37",
    "query": "SELECT f1 FROM tableam_tblmv_heap2 ORDER BY f1"
  },
  {
    "comment": "create_am - Statement 38",
    "query": "CREATE TABLE tableam_parted_heap2 (a text, b int) PARTITION BY list (a) USING heap2",
    "expected": "CREATE TABLE tableam_parted_heap2 (a TEXT, b INT) PARTITION BY list (a) USING heap2"
  },
  {
    "comment": "create_am - Statement 39",
    "query": "SELECT a.amname FROM pg_class c, pg_am a WHERE c.relname = 'tableam_parted_heap2' AND a.oid = c.relam",
    "expected": "SELECT a.amname FROM pg_class AS c, pg_am AS a WHERE c.relname = 'tableam_parted_heap2' AND a.oid = c.relam"
  },
  {
    "comment": "create_am - Statement 40",
    "query": "DROP TABLE tableam_parted_heap2"
  },
  {
    "comment": "create_am - Statement 41",
    "query": "CREATE TABLE tableam_parted_heap2 (a text, b int) PARTITION BY list (a)",
    "expected": "CREATE TABLE tableam_parted_heap2 (a TEXT, b INT) PARTITION BY list (a)"
  },
  {
    "comment": "create_am - Statement 42",
    "query": "SET default_table_access_method = 'heap'"
  },
  {
    "comment": "create_am - Statement 43",
    "query": "CREATE TABLE tableam_parted_a_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('a')"
  },
  {
    "comment": "create_am - Statement 44",
    "query": "SET default_table_access_method = 'heap2'"
  },
  {
    "comment": "create_am - Statement 45",
    "query": "CREATE TABLE tableam_parted_b_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('b')"
  },
  {
    "comment": "create_am - Statement 46",
    "query": "RESET default_table_access_method"
  },
  {
    "comment": "create_am - Statement 47",
    "query": "CREATE TABLE tableam_parted_c_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('c') USING heap"
  },
  {
    "comment": "create_am - Statement 48",
    "query": "CREATE TABLE tableam_parted_d_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('d') USING heap2"
  },
  {
    "comment": "create_am - Statement 49",
    "query": "SELECT pc.relkind, pa.amname, CASE WHEN relkind = 't' THEN (SELECT 'toast for ' || relname::regclass FROM pg_class pcm WHERE pcm.reltoastrelid = pc.oid) ELSE relname::regclass::text END COLLATE \"C\" AS relname FROM pg_class AS pc, pg_am AS pa WHERE pa.oid = pc.relam AND pa.amname = 'heap2' ORDER BY 3, 1, 2",
    "expected": "SELECT pc.relkind, pa.amname, CASE WHEN relkind = 't' THEN (SELECT 'toast for ' || CAST(relname AS regclass) FROM pg_class AS pcm WHERE pcm.reltoastrelid = pc.oid) ELSE CAST(CAST(relname AS regclass) AS TEXT) END COLLATE \"C\" AS relname FROM pg_class AS pc, pg_am AS pa WHERE pa.oid = pc.relam AND pa.amname = 'heap2' ORDER BY 3, 1, 2"
  },
  {
    "comment": "create_am - Statement 50",
    "query": "SELECT pg_describe_object(classid,objid,objsubid) AS obj FROM pg_depend, pg_am WHERE pg_depend.refclassid = 'pg_am'::regclass AND pg_am.oid = pg_depend.refobjid AND pg_am.amname = 'heap2' ORDER BY classid, objid, objsubid",
    "expected": "SELECT pg_describe_object(classid, objid, objsubid) AS obj FROM pg_depend, pg_am WHERE pg_depend.refclassid = CAST('pg_am' AS regclass) AND pg_am.oid = pg_depend.refobjid AND pg_am.amname = 'heap2' ORDER BY classid, objid, objsubid"
  },
  {
    "comment": "create_am - Statement 51",
    "query": "CREATE TABLE heaptable USING heap AS SELECT a, repeat(a::text, 100) FROM generate_series(1,9) AS a",
    "expected": "CREATE TABLE heaptable USING heap AS SELECT a, repeat(CAST(a AS TEXT), 100) FROM generate_series(1, 9) AS a"
  },
  {
    "comment": "create_am - Statement 52",
    "query": "SELECT amname FROM pg_class c, pg_am am WHERE c.relam = am.oid AND c.oid = 'heaptable'::regclass",
    "expected": "SELECT amname FROM pg_class AS c, pg_am AS am WHERE c.relam = am.oid AND c.oid = CAST('heaptable' AS regclass)"
  },
  {
    "comment": "create_am - Statement 53",
    "query": "ALTER TABLE heaptable SET ACCESS METHOD heap2"
  },
  {
    "comment": "create_am - Statement 54",
    "query": "SELECT pg_describe_object(classid, objid, objsubid) as obj, pg_describe_object(refclassid, refobjid, refobjsubid) as objref, deptype FROM pg_depend WHERE classid = 'pg_class'::regclass AND objid = 'heaptable'::regclass ORDER BY 1, 2",
    "expected": "SELECT pg_describe_object(classid, objid, objsubid) AS obj, pg_describe_object(refclassid, refobjid, refobjsubid) AS objref, deptype FROM pg_depend WHERE classid = CAST('pg_class' AS regclass) AND objid = CAST('heaptable' AS regclass) ORDER BY 1, 2"
  },
  {
    "comment": "create_am - Statement 55",
    "query": "ALTER TABLE heaptable SET ACCESS METHOD heap"
  },
  {
    "comment": "create_am - Statement 56",
    "query": "SELECT COUNT(a), COUNT(1) FILTER(WHERE a=1) FROM heaptable",
    "expected": "SELECT COUNT(a), COUNT(1) FILTER (WHERE a = 1) FROM heaptable"
  },
  {
    "comment": "create_am - Statement 57",
    "query": "SET LOCAL default_table_access_method TO heap2",
    "expected": "SET LOCAL default_table_access_method = 'heap2'"
  },
  {
    "comment": "create_am - Statement 58",
    "query": "ALTER TABLE heaptable SET ACCESS METHOD DEFAULT"
  },
  {
    "comment": "create_am - Statement 59",
    "query": "SET LOCAL default_table_access_method TO heap",
    "expected": "SET LOCAL default_table_access_method = 'heap'"
  },
  {
    "comment": "create_am - Statement 60",
    "query": "CREATE MATERIALIZED VIEW heapmv USING heap AS SELECT * FROM heaptable"
  },
  {
    "comment": "create_am - Statement 61",
    "query": "SELECT amname FROM pg_class c, pg_am am WHERE c.relam = am.oid AND c.oid = 'heapmv'::regclass",
    "expected": "SELECT amname FROM pg_class AS c, pg_am AS am WHERE c.relam = am.oid AND c.oid = CAST('heapmv' AS regclass)"
  },
  {
    "comment": "create_am - Statement 62",
    "query": "ALTER MATERIALIZED VIEW heapmv SET ACCESS METHOD heap2"
  },
  {
    "comment": "create_am - Statement 63",
    "query": "SELECT COUNT(a), COUNT(1) FILTER(WHERE a=1) FROM heapmv",
    "expected": "SELECT COUNT(a), COUNT(1) FILTER (WHERE a = 1) FROM heapmv"
  },
  {
    "comment": "create_am - Statement 64",
    "query": "ALTER TABLE heaptable SET ACCESS METHOD heap, SET ACCESS METHOD heap2"
  },
  {
    "comment": "create_am - Statement 65",
    "query": "ALTER TABLE heaptable SET ACCESS METHOD DEFAULT, SET ACCESS METHOD heap2"
  },
  {
    "comment": "create_am - Statement 66",
    "query": "ALTER MATERIALIZED VIEW heapmv SET ACCESS METHOD heap, SET ACCESS METHOD heap2"
  },
  {
    "comment": "create_am - Statement 67",
    "query": "DROP MATERIALIZED VIEW heapmv"
  },
  {
    "comment": "create_am - Statement 68",
    "query": "DROP TABLE heaptable"
  },
  {
    "comment": "create_am - Statement 69",
    "query": "CREATE TABLE am_partitioned(x INT, y INT) PARTITION BY hash (x) USING heap2",
    "expected": "CREATE TABLE am_partitioned (x INT, y INT) PARTITION BY hash (x) USING heap2"
  },
  {
    "comment": "create_am - Statement 70",
    "query": "SELECT pg_describe_object(classid, objid, objsubid) AS obj, pg_describe_object(refclassid, refobjid, refobjsubid) as refobj FROM pg_depend, pg_am WHERE pg_depend.refclassid = 'pg_am'::regclass AND pg_am.oid = pg_depend.refobjid AND pg_depend.objid = 'am_partitioned'::regclass",
    "expected": "SELECT pg_describe_object(classid, objid, objsubid) AS obj, pg_describe_object(refclassid, refobjid, refobjsubid) AS refobj FROM pg_depend, pg_am WHERE pg_depend.refclassid = CAST('pg_am' AS regclass) AND pg_am.oid = pg_depend.refobjid AND pg_depend.objid = CAST('am_partitioned' AS regclass)"
  },
  {
    "comment": "create_am - Statement 71",
    "query": "DROP TABLE am_partitioned"
  },
  {
    "comment": "create_am - Statement 72",
    "query": "SET LOCAL default_table_access_method = 'heap'"
  },
  {
    "comment": "create_am - Statement 73",
    "query": "CREATE TABLE am_partitioned(x INT, y INT) PARTITION BY hash (x)",
    "expected": "CREATE TABLE am_partitioned (x INT, y INT) PARTITION BY hash (x)"
  },
  {
    "comment": "create_am - Statement 74",
    "query": "SELECT relam FROM pg_class WHERE relname = 'am_partitioned'"
  },
  {
    "comment": "create_am - Statement 75",
    "query": "ALTER TABLE am_partitioned SET ACCESS METHOD heap2"
  },
  {
    "comment": "create_am - Statement 76",
    "query": "SELECT a.amname FROM pg_class c, pg_am a WHERE c.relname = 'am_partitioned' AND a.oid = c.relam",
    "expected": "SELECT a.amname FROM pg_class AS c, pg_am AS a WHERE c.relname = 'am_partitioned' AND a.oid = c.relam"
  },
  {
    "comment": "create_am - Statement 77",
    "query": "SET LOCAL default_table_access_method = 'heap2'"
  },
  {
    "comment": "create_am - Statement 78",
    "query": "ALTER TABLE am_partitioned SET ACCESS METHOD heap"
  },
  {
    "comment": "create_am - Statement 79",
    "query": "ALTER TABLE am_partitioned SET ACCESS METHOD DEFAULT"
  },
  {
    "comment": "create_am - Statement 80",
    "query": "CREATE TABLE am_partitioned_0 PARTITION OF am_partitioned FOR VALUES WITH (MODULUS 10, REMAINDER 0)",
    "expected": "CREATE TABLE am_partitioned_0 PARTITION OF am_partitioned FOR VALUES WITH (modulus 10, remainder 0)"
  },
  {
    "comment": "create_am - Statement 81",
    "query": "CREATE TABLE am_partitioned_1 PARTITION OF am_partitioned FOR VALUES WITH (MODULUS 10, REMAINDER 1)",
    "expected": "CREATE TABLE am_partitioned_1 PARTITION OF am_partitioned FOR VALUES WITH (modulus 10, remainder 1)"
  },
  {
    "comment": "create_am - Statement 82",
    "query": "CREATE TABLE am_partitioned_2 PARTITION OF am_partitioned FOR VALUES WITH (MODULUS 10, REMAINDER 2)",
    "expected": "CREATE TABLE am_partitioned_2 PARTITION OF am_partitioned FOR VALUES WITH (modulus 10, remainder 2)"
  },
  {
    "comment": "create_am - Statement 83",
    "query": "CREATE TABLE am_partitioned_3 PARTITION OF am_partitioned FOR VALUES WITH (MODULUS 10, REMAINDER 3)",
    "expected": "CREATE TABLE am_partitioned_3 PARTITION OF am_partitioned FOR VALUES WITH (modulus 10, remainder 3)"
  },
  {
    "comment": "create_am - Statement 84",
    "query": "CREATE TABLE am_partitioned_5p PARTITION OF am_partitioned FOR VALUES WITH (MODULUS 10, REMAINDER 5) PARTITION BY hash(y)",
    "expected": "CREATE TABLE am_partitioned_5p PARTITION OF am_partitioned FOR VALUES WITH (modulus 10, remainder 5) PARTITION BY hash (y)"
  },
  {
    "comment": "create_am - Statement 85",
    "query": "CREATE TABLE am_partitioned_5p1 PARTITION OF am_partitioned_5p FOR VALUES WITH (MODULUS 10, REMAINDER 1)",
    "expected": "CREATE TABLE am_partitioned_5p1 PARTITION OF am_partitioned_5p FOR VALUES WITH (modulus 10, remainder 1)"
  },
  {
    "comment": "create_am - Statement 86",
    "query": "CREATE TABLE am_partitioned_6p PARTITION OF am_partitioned FOR VALUES WITH (MODULUS 10, REMAINDER 6) PARTITION BY hash(y)",
    "expected": "CREATE TABLE am_partitioned_6p PARTITION OF am_partitioned FOR VALUES WITH (modulus 10, remainder 6) PARTITION BY hash (y)"
  },
  {
    "comment": "create_am - Statement 87",
    "query": "CREATE TABLE am_partitioned_6p1 PARTITION OF am_partitioned_6p FOR VALUES WITH (MODULUS 10, REMAINDER 1)",
    "expected": "CREATE TABLE am_partitioned_6p1 PARTITION OF am_partitioned_6p FOR VALUES WITH (modulus 10, remainder 1)"
  },
  {
    "comment": "create_am - Statement 88",
    "query": "SELECT c.relname, a.amname FROM pg_class c, pg_am a WHERE c.relam = a.oid AND c.relname LIKE 'am_partitioned%' UNION ALL SELECT c.relname, 'default' FROM pg_class c WHERE c.relam = 0 AND c.relname LIKE 'am_partitioned%' ORDER BY 1",
    "expected": "(SELECT c.relname, a.amname FROM pg_class AS c, pg_am AS a WHERE c.relam = a.oid AND c.relname LIKE 'am_partitioned%') UNION ALL (SELECT c.relname, 'default' FROM pg_class AS c WHERE c.relam = 0 AND c.relname LIKE 'am_partitioned%') ORDER BY 1"
  },
  {
    "comment": "create_am - Statement 89",
    "query": "CREATE TABLE tableam_tbl_heapx(f1 int)",
    "expected": "CREATE TABLE tableam_tbl_heapx (f1 INT)"
  },
  {
    "comment": "create_am - Statement 90",
    "query": "CREATE TABLE tableam_tblas_heapx AS SELECT * FROM tableam_tbl_heapx"
  },
  {
    "comment": "create_am - Statement 91",
    "query": "SELECT INTO tableam_tblselectinto_heapx FROM tableam_tbl_heapx",
    "expected": "SELECT * INTO tableam_tblselectinto_heapx FROM tableam_tbl_heapx"
  },
  {
    "comment": "create_am - Statement 92",
    "query": "CREATE MATERIALIZED VIEW tableam_tblmv_heapx USING heap2 AS SELECT * FROM tableam_tbl_heapx"
  },
  {
    "comment": "create_am - Statement 93",
    "query": "CREATE TABLE tableam_parted_heapx (a text, b int) PARTITION BY list (a)",
    "expected": "CREATE TABLE tableam_parted_heapx (a TEXT, b INT) PARTITION BY list (a)"
  },
  {
    "comment": "create_am - Statement 94",
    "query": "CREATE TABLE tableam_parted_1_heapx PARTITION OF tableam_parted_heapx FOR VALUES IN ('a', 'b')"
  },
  {
    "comment": "create_am - Statement 95",
    "query": "CREATE TABLE tableam_parted_2_heapx PARTITION OF tableam_parted_heapx FOR VALUES IN ('c', 'd') USING heap"
  },
  {
    "comment": "create_am - Statement 96",
    "query": "CREATE VIEW tableam_view_heapx AS SELECT * FROM tableam_tbl_heapx"
  },
  {
    "comment": "create_am - Statement 97",
    "query": "CREATE SEQUENCE tableam_seq_heapx"
  },
  {
    "comment": "create_am - Statement 98",
    "query": "CREATE FOREIGN DATA WRAPPER fdw_heap2 VALIDATOR postgresql_fdw_validator"
  },
  {
    "comment": "create_am - Statement 99",
    "query": "CREATE SERVER fs_heap2 FOREIGN DATA WRAPPER fdw_heap2"
  },
  {
    "comment": "create_am - Statement 100",
    "query": "CREATE FOREIGN table tableam_fdw_heapx () SERVER fs_heap2",
    "expected": "CREATE FOREIGN TABLE tableam_fdw_heapx () SERVER fs_heap2"
  },
  {
    "comment": "create_am - Statement 101",
    "query": "SELECT pc.relkind, pa.amname, CASE WHEN relkind = 't' THEN (SELECT 'toast for ' || relname::regclass FROM pg_class pcm WHERE pcm.reltoastrelid = pc.oid) ELSE relname::regclass::text END COLLATE \"C\" AS relname FROM pg_class AS pc LEFT JOIN pg_am AS pa ON (pa.oid = pc.relam) WHERE pc.relname LIKE 'tableam_%_heapx' ORDER BY 3, 1, 2",
    "expected": "SELECT pc.relkind, pa.amname, CASE WHEN relkind = 't' THEN (SELECT 'toast for ' || CAST(relname AS regclass) FROM pg_class AS pcm WHERE pcm.reltoastrelid = pc.oid) ELSE CAST(CAST(relname AS regclass) AS TEXT) END COLLATE \"C\" AS relname FROM pg_class AS pc LEFT OUTER JOIN pg_am AS pa ON (pa.oid = pc.relam) WHERE pc.relname LIKE 'tableam_%_heapx' ORDER BY 3, 1, 2"
  },
  {
    "comment": "create_am - Statement 102",
    "query": "CREATE TABLE i_am_a_failure() USING \"\"",
    "error": "zero-length delimited identifier"
  },
  {
    "comment": "create_am - Statement 103",
    "query": "CREATE TABLE i_am_a_failure() USING i_do_not_exist_am",
    "expected": "CREATE TABLE i_am_a_failure () USING i_do_not_exist_am"
  },
  {
    "comment": "create_am - Statement 104",
    "query": "CREATE TABLE i_am_a_failure() USING \"I do not exist AM\"",
    "expected": "CREATE TABLE i_am_a_failure () USING \"I do not exist AM\""
  },
  {
    "comment": "create_am - Statement 105",
    "query": "CREATE TABLE i_am_a_failure() USING \"btree\"",
    "expected": "CREATE TABLE i_am_a_failure () USING btree"
  },
  {
    "comment": "create_am - Statement 106",
    "query": "CREATE FOREIGN TABLE fp PARTITION OF tableam_parted_a_heap2 DEFAULT SERVER x"
  },
  {
    "comment": "create_am - Statement 107",
    "query": "DROP ACCESS METHOD heap2"
  }
]
