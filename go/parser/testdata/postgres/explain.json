[
  {
    "comment": "explain - Statement 1",
    "query": "create function explain_filter(text) returns setof text language plpgsql as $$ declare ln text"
  },
  {
    "comment": "explain - Statement 2",
    "query": "begin for ln in execute $1 loop ln := regexp_replace(ln, '-?\\m\\d+\\M', 'N', 'g')"
  },
  {
    "comment": "explain - Statement 3",
    "query": "ln := regexp_replace(ln, '\\m\\d+kB', 'NkB', 'g')"
  },
  {
    "comment": "explain - Statement 4",
    "query": "CONTINUE WHEN (ln ~ ' +Buffers: .*')"
  },
  {
    "comment": "explain - Statement 5",
    "query": "CONTINUE WHEN (ln = 'Planning:')"
  },
  {
    "comment": "explain - Statement 6",
    "query": "return next ln"
  },
  {
    "comment": "explain - Statement 7",
    "query": "end loop"
  },
  {
    "comment": "explain - Statement 8",
    "query": "end"
  },
  {
    "comment": "explain - Statement 9",
    "query": "$$"
  },
  {
    "comment": "explain - Statement 10",
    "query": "create function explain_filter_to_json(text) returns jsonb language plpgsql as $$ declare data text := ''"
  },
  {
    "comment": "explain - Statement 11",
    "query": "ln text"
  },
  {
    "comment": "explain - Statement 12",
    "query": "begin for ln in execute $1 loop ln := regexp_replace(ln, '\\m\\d+\\M', '0', 'g')"
  },
  {
    "comment": "explain - Statement 13",
    "query": "data := data || ln"
  },
  {
    "comment": "explain - Statement 14",
    "query": "return data::jsonb"
  },
  {
    "comment": "explain - Statement 15",
    "query": "set jit = off"
  },
  {
    "comment": "explain - Statement 16",
    "query": "set track_io_timing = off"
  },
  {
    "comment": "explain - Statement 17",
    "query": "select explain_filter('explain select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 18",
    "query": "select explain_filter('explain (analyze) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 19",
    "query": "select explain_filter('explain (analyze, verbose) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 20",
    "query": "select explain_filter('explain (analyze, buffers, format text) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 21",
    "query": "select explain_filter('explain (analyze, buffers, format xml) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 22",
    "query": "select explain_filter('explain (analyze, serialize, buffers, format yaml) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 23",
    "query": "select explain_filter('explain (buffers, format text) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 24",
    "query": "select explain_filter('explain (buffers, format json) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 25",
    "query": "set track_io_timing = on"
  },
  {
    "comment": "explain - Statement 26",
    "query": "select explain_filter('explain (analyze, buffers, format json) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 27",
    "query": "begin"
  },
  {
    "comment": "explain - Statement 28",
    "query": "set local plan_cache_mode = force_generic_plan"
  },
  {
    "comment": "explain - Statement 29",
    "query": "select true as \"OK\" from explain_filter('explain (settings) select * from int8_tbl i8') ln where ln ~ '^ *Settings: .*plan_cache_mode = ''force_generic_plan'''"
  },
  {
    "comment": "explain - Statement 30",
    "query": "select explain_filter_to_json('explain (settings, format json) select * from int8_tbl i8') #> '{0,Settings,plan_cache_mode}'"
  },
  {
    "comment": "explain - Statement 31",
    "query": "rollback"
  },
  {
    "comment": "explain - Statement 32",
    "query": "select explain_filter('explain (generic_plan) select unique1 from tenk1 where thousand = $1')"
  },
  {
    "comment": "explain - Statement 33",
    "query": "select explain_filter('explain (analyze, generic_plan) select unique1 from tenk1 where thousand = $1')"
  },
  {
    "comment": "explain - Statement 34",
    "query": "select explain_filter('explain (memory) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 35",
    "query": "select explain_filter('explain (memory, analyze) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 36",
    "query": "select explain_filter('explain (memory, summary, format yaml) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 37",
    "query": "select explain_filter('explain (memory, analyze, format json) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 38",
    "query": "prepare int8_query as select * from int8_tbl i8"
  },
  {
    "comment": "explain - Statement 39",
    "query": "select explain_filter('explain (memory) execute int8_query')"
  },
  {
    "comment": "explain - Statement 40",
    "query": "create table gen_part ( key1 integer not null, key2 integer not null ) partition by list (key1)"
  },
  {
    "comment": "explain - Statement 41",
    "query": "create table gen_part_1 partition of gen_part for values in (1) partition by range (key2)"
  },
  {
    "comment": "explain - Statement 42",
    "query": "create table gen_part_1_1 partition of gen_part_1 for values from (1) to (2)"
  },
  {
    "comment": "explain - Statement 43",
    "query": "create table gen_part_1_2 partition of gen_part_1 for values from (2) to (3)"
  },
  {
    "comment": "explain - Statement 44",
    "query": "create table gen_part_2 partition of gen_part for values in (2)"
  },
  {
    "comment": "explain - Statement 45",
    "query": "select explain_filter('explain (generic_plan) select key1, key2 from gen_part where key1 = 1 and key2 = $1')"
  },
  {
    "comment": "explain - Statement 46",
    "query": "drop table gen_part"
  },
  {
    "comment": "explain - Statement 47",
    "query": "set parallel_setup_cost=0"
  },
  {
    "comment": "explain - Statement 48",
    "query": "set parallel_tuple_cost=0"
  },
  {
    "comment": "explain - Statement 49",
    "query": "set min_parallel_table_scan_size=0"
  },
  {
    "comment": "explain - Statement 50",
    "query": "set max_parallel_workers_per_gather=4"
  },
  {
    "comment": "explain - Statement 51",
    "query": "select jsonb_pretty( explain_filter_to_json('explain (analyze, verbose, buffers, format json) select * from tenk1 order by tenthous') #- '{0,Plan,Plans,0,Plans,0,Workers}' #- '{0,Plan,Plans,0,Workers}' #- '{0,Plan,Plans,0,Sort Method}' #- '{0,Plan,Plans,0,Sort Space Type}' )"
  },
  {
    "comment": "explain - Statement 52",
    "query": "create temp table t1(f1 float8)"
  },
  {
    "comment": "explain - Statement 53",
    "query": "create function pg_temp.mysin(float8) returns float8 language plpgsql as 'begin return sin($1); end'"
  },
  {
    "comment": "explain - Statement 54",
    "query": "select explain_filter('explain (verbose) select * from t1 where pg_temp.mysin(f1) < 0.5')"
  },
  {
    "comment": "explain - Statement 55",
    "query": "set compute_query_id = on"
  },
  {
    "comment": "explain - Statement 56",
    "query": "select explain_filter('explain (verbose) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 57",
    "query": "select explain_filter('explain (analyze,serialize) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 58",
    "query": "select explain_filter('explain (analyze,serialize text,buffers,timing off) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 59",
    "query": "select explain_filter('explain (analyze,serialize binary,buffers,timing) select * from int8_tbl i8')"
  },
  {
    "comment": "explain - Statement 60",
    "query": "select explain_filter('explain (analyze,serialize) create temp table explain_temp as select * from int8_tbl i8')"
  }
]