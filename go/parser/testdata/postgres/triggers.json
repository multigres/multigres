[
  {
    "comment": "triggers - Statement 1",
    "query": "CREATE FUNCTION check_primary_key () RETURNS trigger AS 'refintlib' LANGUAGE C",
    "expected": "CREATE FUNCTION check_primary_key () RETURNS trigger AS $$refintlib$$ LANGUAGE c"
  },
  {
    "comment": "triggers - Statement 2",
    "query": "CREATE FUNCTION check_foreign_key () RETURNS trigger AS 'refintlib' LANGUAGE C",
    "expected": "CREATE FUNCTION check_foreign_key () RETURNS trigger AS $$refintlib$$ LANGUAGE c"
  },
  {
    "comment": "triggers - Statement 3",
    "query": "CREATE FUNCTION trigger_return_old () RETURNS trigger AS 'regresslib' LANGUAGE C",
    "expected": "CREATE FUNCTION trigger_return_old () RETURNS trigger AS $$regresslib$$ LANGUAGE c"
  },
  {
    "comment": "triggers - Statement 4",
    "query": "CREATE FUNCTION set_ttdummy (int4) RETURNS int4 AS 'regresslib' LANGUAGE C STRICT",
    "expected": "CREATE FUNCTION set_ttdummy (INT) RETURNS INT AS $$regresslib$$ LANGUAGE c STRICT"
  },
  {
    "comment": "triggers - Statement 5",
    "query": "create table pkeys (pkey1 int4 not null, pkey2 text not null)",
    "expected": "CREATE TABLE pkeys (pkey1 INT NOT NULL, pkey2 TEXT NOT NULL)"
  },
  {
    "comment": "triggers - Statement 6",
    "query": "create table fkeys (fkey1 int4, fkey2 text, fkey3 int)",
    "expected": "CREATE TABLE fkeys (fkey1 INT, fkey2 TEXT, fkey3 INT)"
  },
  {
    "comment": "triggers - Statement 7",
    "query": "create table fkeys2 (fkey21 int4, fkey22 text, pkey23 int not null)",
    "expected": "CREATE TABLE fkeys2 (fkey21 INT, fkey22 TEXT, pkey23 INT NOT NULL)"
  },
  {
    "comment": "triggers - Statement 8",
    "query": "create index fkeys_i on fkeys (fkey1, fkey2)",
    "expected": "CREATE INDEX fkeys_i ON fkeys USING btree ( fkey1, fkey2 )"
  },
  {
    "comment": "triggers - Statement 9",
    "query": "create index fkeys2_i on fkeys2 (fkey21, fkey22)",
    "expected": "CREATE INDEX fkeys2_i ON fkeys2 USING btree ( fkey21, fkey22 )"
  },
  {
    "comment": "triggers - Statement 10",
    "query": "create index fkeys2p_i on fkeys2 (pkey23)",
    "expected": "CREATE INDEX fkeys2p_i ON fkeys2 USING btree ( pkey23 )"
  },
  {
    "comment": "triggers - Statement 11",
    "query": "insert into pkeys values (10, '1')",
    "expected": "INSERT INTO pkeys VALUES (10, '1')"
  },
  {
    "comment": "triggers - Statement 12",
    "query": "insert into pkeys values (20, '2')",
    "expected": "INSERT INTO pkeys VALUES (20, '2')"
  },
  {
    "comment": "triggers - Statement 13",
    "query": "insert into pkeys values (30, '3')",
    "expected": "INSERT INTO pkeys VALUES (30, '3')"
  },
  {
    "comment": "triggers - Statement 14",
    "query": "insert into pkeys values (40, '4')",
    "expected": "INSERT INTO pkeys VALUES (40, '4')"
  },
  {
    "comment": "triggers - Statement 15",
    "query": "insert into pkeys values (50, '5')",
    "expected": "INSERT INTO pkeys VALUES (50, '5')"
  },
  {
    "comment": "triggers - Statement 16",
    "query": "insert into pkeys values (60, '6')",
    "expected": "INSERT INTO pkeys VALUES (60, '6')"
  },
  {
    "comment": "triggers - Statement 17",
    "query": "create unique index pkeys_i on pkeys (pkey1, pkey2)",
    "expected": "CREATE UNIQUE INDEX pkeys_i ON pkeys USING btree ( pkey1, pkey2 )"
  },
  {
    "comment": "triggers - Statement 18",
    "query": "create trigger check_fkeys_pkey_exist before insert or update on fkeys for each row execute function check_primary_key ('fkey1', 'fkey2', 'pkeys', 'pkey1', 'pkey2')",
    "expected": "CREATE TRIGGER check_fkeys_pkey_exist BEFORE INSERT OR UPDATE ON fkeys FOR EACH ROW EXECUTE FUNCTION check_primary_key('fkey1', 'fkey2', 'pkeys', 'pkey1', 'pkey2')"
  },
  {
    "comment": "triggers - Statement 19",
    "query": "create trigger check_fkeys_pkey2_exist before insert or update on fkeys for each row execute function check_primary_key ('fkey3', 'fkeys2', 'pkey23')",
    "expected": "CREATE TRIGGER check_fkeys_pkey2_exist BEFORE INSERT OR UPDATE ON fkeys FOR EACH ROW EXECUTE FUNCTION check_primary_key('fkey3', 'fkeys2', 'pkey23')"
  },
  {
    "comment": "triggers - Statement 20",
    "query": "create trigger check_fkeys2_pkey_exist before insert or update on fkeys2 for each row execute procedure check_primary_key ('fkey21', 'fkey22', 'pkeys', 'pkey1', 'pkey2')",
    "expected": "CREATE TRIGGER check_fkeys2_pkey_exist BEFORE INSERT OR UPDATE ON fkeys2 FOR EACH ROW EXECUTE FUNCTION check_primary_key('fkey21', 'fkey22', 'pkeys', 'pkey1', 'pkey2')"
  },
  {
    "comment": "triggers - Statement 21",
    "query": "COMMENT ON TRIGGER check_fkeys2_pkey_bad ON fkeys2 IS 'wrong'"
  },
  {
    "comment": "triggers - Statement 22",
    "query": "COMMENT ON TRIGGER check_fkeys2_pkey_exist ON fkeys2 IS 'right'"
  },
  {
    "comment": "triggers - Statement 23",
    "query": "COMMENT ON TRIGGER check_fkeys2_pkey_exist ON fkeys2 IS NULL"
  },
  {
    "comment": "triggers - Statement 24",
    "query": "create trigger check_pkeys_fkey_cascade before delete or update on pkeys for each row execute procedure check_foreign_key (2, 'cascade', 'pkey1', 'pkey2', 'fkeys', 'fkey1', 'fkey2', 'fkeys2', 'fkey21', 'fkey22')",
    "expected": "CREATE TRIGGER check_pkeys_fkey_cascade BEFORE UPDATE OR DELETE ON pkeys FOR EACH ROW EXECUTE FUNCTION check_foreign_key(2, 'cascade', 'pkey1', 'pkey2', 'fkeys', 'fkey1', 'fkey2', 'fkeys2', 'fkey21', 'fkey22')"
  },
  {
    "comment": "triggers - Statement 25",
    "query": "create trigger check_fkeys2_fkey_restrict before delete or update on fkeys2 for each row execute procedure check_foreign_key (1, 'restrict', 'pkey23', 'fkeys', 'fkey3')",
    "expected": "CREATE TRIGGER check_fkeys2_fkey_restrict BEFORE UPDATE OR DELETE ON fkeys2 FOR EACH ROW EXECUTE FUNCTION check_foreign_key(1, 'restrict', 'pkey23', 'fkeys', 'fkey3')"
  },
  {
    "comment": "triggers - Statement 26",
    "query": "insert into fkeys2 values (10, '1', 1)",
    "expected": "INSERT INTO fkeys2 VALUES (10, '1', 1)"
  },
  {
    "comment": "triggers - Statement 27",
    "query": "insert into fkeys2 values (30, '3', 2)",
    "expected": "INSERT INTO fkeys2 VALUES (30, '3', 2)"
  },
  {
    "comment": "triggers - Statement 28",
    "query": "insert into fkeys2 values (40, '4', 5)",
    "expected": "INSERT INTO fkeys2 VALUES (40, '4', 5)"
  },
  {
    "comment": "triggers - Statement 29",
    "query": "insert into fkeys2 values (50, '5', 3)",
    "expected": "INSERT INTO fkeys2 VALUES (50, '5', 3)"
  },
  {
    "comment": "triggers - Statement 30",
    "query": "insert into fkeys2 values (70, '5', 3)",
    "expected": "INSERT INTO fkeys2 VALUES (70, '5', 3)"
  },
  {
    "comment": "triggers - Statement 31",
    "query": "insert into fkeys values (10, '1', 2)",
    "expected": "INSERT INTO fkeys VALUES (10, '1', 2)"
  },
  {
    "comment": "triggers - Statement 32",
    "query": "insert into fkeys values (30, '3', 3)",
    "expected": "INSERT INTO fkeys VALUES (30, '3', 3)"
  },
  {
    "comment": "triggers - Statement 33",
    "query": "insert into fkeys values (40, '4', 2)",
    "expected": "INSERT INTO fkeys VALUES (40, '4', 2)"
  },
  {
    "comment": "triggers - Statement 34",
    "query": "insert into fkeys values (50, '5', 2)",
    "expected": "INSERT INTO fkeys VALUES (50, '5', 2)"
  },
  {
    "comment": "triggers - Statement 35",
    "query": "insert into fkeys values (70, '5', 1)",
    "expected": "INSERT INTO fkeys VALUES (70, '5', 1)"
  },
  {
    "comment": "triggers - Statement 36",
    "query": "insert into fkeys values (60, '6', 4)",
    "expected": "INSERT INTO fkeys VALUES (60, '6', 4)"
  },
  {
    "comment": "triggers - Statement 37",
    "query": "delete from pkeys where pkey1 = 30 and pkey2 = '3'",
    "expected": "DELETE FROM pkeys WHERE pkey1 = 30 AND pkey2 = '3'"
  },
  {
    "comment": "triggers - Statement 38",
    "query": "delete from pkeys where pkey1 = 40 and pkey2 = '4'",
    "expected": "DELETE FROM pkeys WHERE pkey1 = 40 AND pkey2 = '4'"
  },
  {
    "comment": "triggers - Statement 39",
    "query": "update pkeys set pkey1 = 7, pkey2 = '70' where pkey1 = 50 and pkey2 = '5'",
    "expected": "UPDATE pkeys SET pkey1 = 7, pkey2 = '70' WHERE pkey1 = 50 AND pkey2 = '5'"
  },
  {
    "comment": "triggers - Statement 40",
    "query": "update pkeys set pkey1 = 7, pkey2 = '70' where pkey1 = 10 and pkey2 = '1'",
    "expected": "UPDATE pkeys SET pkey1 = 7, pkey2 = '70' WHERE pkey1 = 10 AND pkey2 = '1'"
  },
  {
    "comment": "triggers - Statement 41",
    "query": "SELECT trigger_name, event_manipulation, event_object_schema, event_object_table, action_order, action_condition, action_orientation, action_timing, action_reference_old_table, action_reference_new_table FROM information_schema.triggers WHERE event_object_table in ('pkeys', 'fkeys', 'fkeys2') ORDER BY trigger_name COLLATE \"C\", 2",
    "expected": "SELECT trigger_name, event_manipulation, event_object_schema, event_object_table, action_order, action_condition, action_orientation, action_timing, action_reference_old_table, action_reference_new_table FROM information_schema.triggers WHERE event_object_table IN ('pkeys', 'fkeys', 'fkeys2') ORDER BY trigger_name COLLATE \"C\", 2"
  },
  {
    "comment": "triggers - Statement 42",
    "query": "DROP TABLE pkeys"
  },
  {
    "comment": "triggers - Statement 43",
    "query": "DROP TABLE fkeys"
  },
  {
    "comment": "triggers - Statement 44",
    "query": "DROP TABLE fkeys2"
  },
  {
    "comment": "triggers - Statement 45",
    "query": "create table trigtest (f1 int, f2 text)",
    "expected": "CREATE TABLE trigtest (f1 INT, f2 TEXT)"
  },
  {
    "comment": "triggers - Statement 46",
    "query": "create trigger trigger_return_old before insert or delete or update on trigtest for each row execute procedure trigger_return_old()",
    "expected": "CREATE TRIGGER trigger_return_old BEFORE INSERT OR UPDATE OR DELETE ON trigtest FOR EACH ROW EXECUTE FUNCTION trigger_return_old()"
  },
  {
    "comment": "triggers - Statement 47",
    "query": "insert into trigtest values(1, 'foo')",
    "expected": "INSERT INTO trigtest VALUES (1, 'foo')"
  },
  {
    "comment": "triggers - Statement 48",
    "query": "select * from trigtest",
    "expected": "SELECT * FROM trigtest"
  },
  {
    "comment": "triggers - Statement 49",
    "query": "update trigtest set f2 = f2 || 'bar'",
    "expected": "UPDATE trigtest SET f2 = f2 || 'bar'"
  },
  {
    "comment": "triggers - Statement 50",
    "query": "delete from trigtest",
    "expected": "DELETE FROM trigtest"
  },
  {
    "comment": "triggers - Statement 51",
    "query": "create function f1_times_10() returns trigger as $$ begin new.f1 := new.f1 * 10; return new; end $$ language plpgsql",
    "expected": "CREATE FUNCTION f1_times_10 () RETURNS trigger AS $$ begin new.f1 := new.f1 * 10; return new; end $$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 52",
    "query": "create trigger trigger_alpha before insert or update on trigtest for each row execute procedure f1_times_10()",
    "expected": "CREATE TRIGGER trigger_alpha BEFORE INSERT OR UPDATE ON trigtest FOR EACH ROW EXECUTE FUNCTION f1_times_10()"
  },
  {
    "comment": "triggers - Statement 53",
    "query": "create trigger trigger_zed before insert or update on trigtest for each row execute procedure f1_times_10()",
    "expected": "CREATE TRIGGER trigger_zed BEFORE INSERT OR UPDATE ON trigtest FOR EACH ROW EXECUTE FUNCTION f1_times_10()"
  },
  {
    "comment": "triggers - Statement 54",
    "query": "drop trigger trigger_alpha on trigtest",
    "expected": "DROP TRIGGER trigger_alpha ON trigtest"
  },
  {
    "comment": "triggers - Statement 55",
    "query": "drop table trigtest",
    "expected": "DROP TABLE trigtest"
  },
  {
    "comment": "triggers - Statement 56",
    "query": "create table trigtest ( a integer, b bool default true not null, c text default 'xyzzy' not null)",
    "expected": "CREATE TABLE trigtest (a INT, b BOOLEAN DEFAULT TRUE NOT NULL, c TEXT DEFAULT 'xyzzy' NOT NULL)"
  },
  {
    "comment": "triggers - Statement 57",
    "query": "insert into trigtest values(1)",
    "expected": "INSERT INTO trigtest VALUES (1)"
  },
  {
    "comment": "triggers - Statement 58",
    "query": "alter table trigtest add column d integer default 42 not null",
    "expected": "ALTER TABLE trigtest ADD COLUMN d INT DEFAULT 42 NOT NULL"
  },
  {
    "comment": "triggers - Statement 59",
    "query": "update trigtest set a = 2 where a = 1 returning *",
    "expected": "UPDATE trigtest SET a = 2 WHERE a = 1 RETURNING *"
  },
  {
    "comment": "triggers - Statement 60",
    "query": "alter table trigtest drop column b",
    "expected": "ALTER TABLE trigtest DROP COLUMN b"
  },
  {
    "comment": "triggers - Statement 61",
    "query": "create sequence ttdummy_seq increment 10 start 0 minvalue 0",
    "expected": "CREATE SEQUENCE ttdummy_seq INCREMENT BY 10 START WITH 0 MINVALUE 0"
  },
  {
    "comment": "triggers - Statement 62",
    "query": "create table tttest ( price_id\tint4, price_val\tint4, price_on\tint4, price_off\tint4 default 999999 )",
    "expected": "CREATE TABLE tttest (price_id INT, price_val INT, price_on INT, price_off INT DEFAULT 999999)"
  },
  {
    "comment": "triggers - Statement 63",
    "query": "create trigger ttdummy before delete or update on tttest for each row execute procedure ttdummy (price_on, price_off)",
    "expected": "CREATE TRIGGER ttdummy BEFORE UPDATE OR DELETE ON tttest FOR EACH ROW EXECUTE FUNCTION ttdummy('price_on', 'price_off')"
  },
  {
    "comment": "triggers - Statement 64",
    "query": "create trigger ttserial before insert or update on tttest for each row execute procedure autoinc (price_on, ttdummy_seq)",
    "expected": "CREATE TRIGGER ttserial BEFORE INSERT OR UPDATE ON tttest FOR EACH ROW EXECUTE FUNCTION autoinc('price_on', 'ttdummy_seq')"
  },
  {
    "comment": "triggers - Statement 65",
    "query": "insert into tttest values (1, 1, null)",
    "expected": "INSERT INTO tttest VALUES (1, 1, NULL)"
  },
  {
    "comment": "triggers - Statement 66",
    "query": "insert into tttest values (2, 2, null)",
    "expected": "INSERT INTO tttest VALUES (2, 2, NULL)"
  },
  {
    "comment": "triggers - Statement 67",
    "query": "insert into tttest values (3, 3, 0)",
    "expected": "INSERT INTO tttest VALUES (3, 3, 0)"
  },
  {
    "comment": "triggers - Statement 68",
    "query": "select * from tttest",
    "expected": "SELECT * FROM tttest"
  },
  {
    "comment": "triggers - Statement 69",
    "query": "delete from tttest where price_id = 2",
    "expected": "DELETE FROM tttest WHERE price_id = 2"
  },
  {
    "comment": "triggers - Statement 70",
    "query": "select * from tttest where price_off = 999999",
    "expected": "SELECT * FROM tttest WHERE price_off = 999999"
  },
  {
    "comment": "triggers - Statement 71",
    "query": "update tttest set price_val = 30 where price_id = 3",
    "expected": "UPDATE tttest SET price_val = 30 WHERE price_id = 3"
  },
  {
    "comment": "triggers - Statement 72",
    "query": "update tttest set price_id = 5 where price_id = 3",
    "expected": "UPDATE tttest SET price_id = 5 WHERE price_id = 3"
  },
  {
    "comment": "triggers - Statement 73",
    "query": "select set_ttdummy(0)",
    "expected": "SELECT set_ttdummy(0)"
  },
  {
    "comment": "triggers - Statement 74",
    "query": "delete from tttest where price_id = 5",
    "expected": "DELETE FROM tttest WHERE price_id = 5"
  },
  {
    "comment": "triggers - Statement 75",
    "query": "update tttest set price_off = 999999 where price_val = 30",
    "expected": "UPDATE tttest SET price_off = 999999 WHERE price_val = 30"
  },
  {
    "comment": "triggers - Statement 76",
    "query": "select set_ttdummy(1)",
    "expected": "SELECT set_ttdummy(1)"
  },
  {
    "comment": "triggers - Statement 77",
    "query": "update tttest set price_on = -1 where price_id = 1",
    "expected": "UPDATE tttest SET price_on = -1 WHERE price_id = 1"
  },
  {
    "comment": "triggers - Statement 78",
    "query": "select * from tttest where price_on \u003c= 35 and price_off \u003e 35 and price_id = 5",
    "expected": "SELECT * FROM tttest WHERE price_on \u003c= 35 AND price_off \u003e 35 AND price_id = 5"
  },
  {
    "comment": "triggers - Statement 79",
    "query": "drop table tttest",
    "expected": "DROP TABLE tttest"
  },
  {
    "comment": "triggers - Statement 80",
    "query": "drop sequence ttdummy_seq",
    "expected": "DROP SEQUENCE ttdummy_seq"
  },
  {
    "comment": "triggers - Statement 81",
    "query": "CREATE TABLE log_table (tstamp timestamp default timeofday()::timestamp)",
    "expected": "CREATE TABLE log_table (tstamp TIMESTAMP DEFAULT CAST(timeofday() AS TIMESTAMP))"
  },
  {
    "comment": "triggers - Statement 82",
    "query": "CREATE TABLE main_table (a int unique, b int)",
    "expected": "CREATE TABLE main_table (a INT UNIQUE, b INT)"
  },
  {
    "comment": "triggers - Statement 83",
    "query": "COPY main_table (a,b) FROM stdin",
    "expected": "COPY main_table (a, b) FROM STDIN"
  },
  {
    "comment": "triggers - Statement 84",
    "query": "CREATE FUNCTION trigger_func() RETURNS trigger LANGUAGE plpgsql AS ' BEGIN RAISE NOTICE ''trigger_func(%) called: action = %, when = %, level = %'', TG_ARGV[0], TG_OP, TG_WHEN, TG_LEVEL; RETURN NULL; END;'",
    "expected": "CREATE FUNCTION trigger_func () RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN RAISE NOTICE 'trigger_func(%) called: action = %, when = %, level = %', TG_ARGV[0], TG_OP, TG_WHEN, TG_LEVEL; RETURN NULL; END;$$"
  },
  {
    "comment": "triggers - Statement 85",
    "query": "CREATE TRIGGER before_ins_stmt_trig BEFORE INSERT ON main_table FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func('before_ins_stmt')",
    "expected": "CREATE TRIGGER before_ins_stmt_trig BEFORE INSERT ON main_table EXECUTE FUNCTION trigger_func('before_ins_stmt')"
  },
  {
    "comment": "triggers - Statement 86",
    "query": "CREATE TRIGGER after_ins_stmt_trig AFTER INSERT ON main_table FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func('after_ins_stmt')",
    "expected": "CREATE TRIGGER after_ins_stmt_trig AFTER INSERT ON main_table EXECUTE FUNCTION trigger_func('after_ins_stmt')"
  },
  {
    "comment": "triggers - Statement 87",
    "query": "CREATE TRIGGER after_upd_stmt_trig AFTER UPDATE ON main_table EXECUTE PROCEDURE trigger_func('after_upd_stmt')",
    "expected": "CREATE TRIGGER after_upd_stmt_trig AFTER UPDATE ON main_table EXECUTE FUNCTION trigger_func('after_upd_stmt')"
  },
  {
    "comment": "triggers - Statement 88",
    "query": "INSERT INTO main_table (a, b) VALUES (5, 10) ON CONFLICT (a) DO UPDATE SET b = EXCLUDED.b",
    "expected": "INSERT INTO main_table (a, b) VALUES (5, 10) ON CONFLICT (a) DO UPDATE SET b = excluded.b"
  },
  {
    "comment": "triggers - Statement 89",
    "query": "CREATE TRIGGER after_upd_row_trig AFTER UPDATE ON main_table FOR EACH ROW EXECUTE PROCEDURE trigger_func('after_upd_row')",
    "expected": "CREATE TRIGGER after_upd_row_trig AFTER UPDATE ON main_table FOR EACH ROW EXECUTE FUNCTION trigger_func('after_upd_row')"
  },
  {
    "comment": "triggers - Statement 90",
    "query": "INSERT INTO main_table DEFAULT VALUES"
  },
  {
    "comment": "triggers - Statement 91",
    "query": "UPDATE main_table SET a = a + 1 WHERE b \u003c 30"
  },
  {
    "comment": "triggers - Statement 92",
    "query": "UPDATE main_table SET a = a + 2 WHERE b \u003e 100"
  },
  {
    "comment": "triggers - Statement 93",
    "query": "ALTER TABLE main_table DROP CONSTRAINT main_table_a_key"
  },
  {
    "comment": "triggers - Statement 94",
    "query": "COPY main_table (a, b) FROM stdin",
    "expected": "COPY main_table (a, b) FROM STDIN"
  },
  {
    "comment": "triggers - Statement 95",
    "query": "SELECT * FROM main_table ORDER BY a, b"
  },
  {
    "comment": "triggers - Statement 96",
    "query": "CREATE TRIGGER modified_a BEFORE UPDATE OF a ON main_table FOR EACH ROW WHEN (OLD.a \u003c\u003e NEW.a) EXECUTE PROCEDURE trigger_func('modified_a')",
    "expected": "CREATE TRIGGER modified_a BEFORE UPDATE OF a ON main_table FOR EACH ROW WHEN (old.a \u003c\u003e new.a) EXECUTE FUNCTION trigger_func('modified_a')"
  },
  {
    "comment": "triggers - Statement 97",
    "query": "CREATE TRIGGER modified_any BEFORE UPDATE OF a ON main_table FOR EACH ROW WHEN (OLD.* IS DISTINCT FROM NEW.*) EXECUTE PROCEDURE trigger_func('modified_any')",
    "expected": "CREATE TRIGGER modified_any BEFORE UPDATE OF a ON main_table FOR EACH ROW WHEN (old.* IS DISTINCT FROM new.*) EXECUTE FUNCTION trigger_func('modified_any')"
  },
  {
    "comment": "triggers - Statement 98",
    "query": "CREATE TRIGGER insert_a AFTER INSERT ON main_table FOR EACH ROW WHEN (NEW.a = 123) EXECUTE PROCEDURE trigger_func('insert_a')",
    "expected": "CREATE TRIGGER insert_a AFTER INSERT ON main_table FOR EACH ROW WHEN (new.a = 123) EXECUTE FUNCTION trigger_func('insert_a')"
  },
  {
    "comment": "triggers - Statement 99",
    "query": "CREATE TRIGGER delete_a AFTER DELETE ON main_table FOR EACH ROW WHEN (OLD.a = 123) EXECUTE PROCEDURE trigger_func('delete_a')",
    "expected": "CREATE TRIGGER delete_a AFTER DELETE ON main_table FOR EACH ROW WHEN (old.a = 123) EXECUTE FUNCTION trigger_func('delete_a')"
  },
  {
    "comment": "triggers - Statement 100",
    "query": "CREATE TRIGGER insert_when BEFORE INSERT ON main_table FOR EACH STATEMENT WHEN (true) EXECUTE PROCEDURE trigger_func('insert_when')",
    "expected": "CREATE TRIGGER insert_when BEFORE INSERT ON main_table WHEN (TRUE) EXECUTE FUNCTION trigger_func('insert_when')"
  },
  {
    "comment": "triggers - Statement 101",
    "query": "CREATE TRIGGER delete_when AFTER DELETE ON main_table FOR EACH STATEMENT WHEN (true) EXECUTE PROCEDURE trigger_func('delete_when')",
    "expected": "CREATE TRIGGER delete_when AFTER DELETE ON main_table WHEN (TRUE) EXECUTE FUNCTION trigger_func('delete_when')"
  },
  {
    "comment": "triggers - Statement 102",
    "query": "SELECT trigger_name, event_manipulation, event_object_schema, event_object_table, action_order, action_condition, action_orientation, action_timing, action_reference_old_table, action_reference_new_table FROM information_schema.triggers WHERE event_object_table IN ('main_table') ORDER BY trigger_name COLLATE \"C\", 2"
  },
  {
    "comment": "triggers - Statement 103",
    "query": "INSERT INTO main_table (a) VALUES (123), (456)"
  },
  {
    "comment": "triggers - Statement 104",
    "query": "COPY main_table FROM stdin",
    "expected": "COPY main_table FROM STDIN"
  },
  {
    "comment": "triggers - Statement 105",
    "query": "DELETE FROM main_table WHERE a IN (123, 456)"
  },
  {
    "comment": "triggers - Statement 106",
    "query": "UPDATE main_table SET a = 50, b = 60"
  },
  {
    "comment": "triggers - Statement 107",
    "query": "SELECT * FROM main_table ORDER BY a, b"
  },
  {
    "comment": "triggers - Statement 108",
    "query": "SELECT pg_get_triggerdef(oid, true) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'modified_a'",
    "expected": "SELECT pg_get_triggerdef(oid, TRUE) FROM pg_trigger WHERE tgrelid = CAST('main_table' AS regclass) AND tgname = 'modified_a'"
  },
  {
    "comment": "triggers - Statement 109",
    "query": "SELECT pg_get_triggerdef(oid, false) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'modified_a'",
    "expected": "SELECT pg_get_triggerdef(oid, FALSE) FROM pg_trigger WHERE tgrelid = CAST('main_table' AS regclass) AND tgname = 'modified_a'"
  },
  {
    "comment": "triggers - Statement 110",
    "query": "SELECT pg_get_triggerdef(oid, true) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'modified_any'",
    "expected": "SELECT pg_get_triggerdef(oid, TRUE) FROM pg_trigger WHERE tgrelid = CAST('main_table' AS regclass) AND tgname = 'modified_any'"
  },
  {
    "comment": "triggers - Statement 111",
    "query": "ALTER TRIGGER modified_a ON main_table RENAME TO modified_modified_a"
  },
  {
    "comment": "triggers - Statement 112",
    "query": "SELECT count(*) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'modified_a'",
    "expected": "SELECT COUNT(*) FROM pg_trigger WHERE tgrelid = CAST('main_table' AS regclass) AND tgname = 'modified_a'"
  },
  {
    "comment": "triggers - Statement 113",
    "query": "SELECT count(*) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'modified_modified_a'",
    "expected": "SELECT COUNT(*) FROM pg_trigger WHERE tgrelid = CAST('main_table' AS regclass) AND tgname = 'modified_modified_a'"
  },
  {
    "comment": "triggers - Statement 114",
    "query": "DROP TRIGGER modified_modified_a ON main_table"
  },
  {
    "comment": "triggers - Statement 115",
    "query": "DROP TRIGGER modified_any ON main_table"
  },
  {
    "comment": "triggers - Statement 116",
    "query": "DROP TRIGGER insert_a ON main_table"
  },
  {
    "comment": "triggers - Statement 117",
    "query": "DROP TRIGGER delete_a ON main_table"
  },
  {
    "comment": "triggers - Statement 118",
    "query": "DROP TRIGGER insert_when ON main_table"
  },
  {
    "comment": "triggers - Statement 119",
    "query": "DROP TRIGGER delete_when ON main_table"
  },
  {
    "comment": "triggers - Statement 120",
    "query": "create table table_with_oids(a int)",
    "expected": "CREATE TABLE table_with_oids (a INT)"
  },
  {
    "comment": "triggers - Statement 121",
    "query": "insert into table_with_oids values (1)",
    "expected": "INSERT INTO table_with_oids VALUES (1)"
  },
  {
    "comment": "triggers - Statement 122",
    "query": "create trigger oid_unchanged_trig after update on table_with_oids for each row when (new.tableoid = old.tableoid AND new.tableoid \u003c\u003e 0) execute procedure trigger_func('after_upd_oid_unchanged')",
    "expected": "CREATE TRIGGER oid_unchanged_trig AFTER UPDATE ON table_with_oids FOR EACH ROW WHEN (new.tableoid = old.tableoid AND new.tableoid \u003c\u003e 0) EXECUTE FUNCTION trigger_func('after_upd_oid_unchanged')"
  },
  {
    "comment": "triggers - Statement 123",
    "query": "update table_with_oids set a = a + 1",
    "expected": "UPDATE table_with_oids SET a = a + 1"
  },
  {
    "comment": "triggers - Statement 124",
    "query": "drop table table_with_oids",
    "expected": "DROP TABLE table_with_oids"
  },
  {
    "comment": "triggers - Statement 125",
    "query": "DROP TRIGGER after_upd_row_trig ON main_table"
  },
  {
    "comment": "triggers - Statement 126",
    "query": "CREATE TRIGGER before_upd_a_row_trig BEFORE UPDATE OF a ON main_table FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_upd_a_row')",
    "expected": "CREATE TRIGGER before_upd_a_row_trig BEFORE UPDATE OF a ON main_table FOR EACH ROW EXECUTE FUNCTION trigger_func('before_upd_a_row')"
  },
  {
    "comment": "triggers - Statement 127",
    "query": "CREATE TRIGGER after_upd_b_row_trig AFTER UPDATE OF b ON main_table FOR EACH ROW EXECUTE PROCEDURE trigger_func('after_upd_b_row')",
    "expected": "CREATE TRIGGER after_upd_b_row_trig AFTER UPDATE OF b ON main_table FOR EACH ROW EXECUTE FUNCTION trigger_func('after_upd_b_row')"
  },
  {
    "comment": "triggers - Statement 128",
    "query": "CREATE TRIGGER after_upd_a_b_row_trig AFTER UPDATE OF a, b ON main_table FOR EACH ROW EXECUTE PROCEDURE trigger_func('after_upd_a_b_row')",
    "expected": "CREATE TRIGGER after_upd_a_b_row_trig AFTER UPDATE OF a, b ON main_table FOR EACH ROW EXECUTE FUNCTION trigger_func('after_upd_a_b_row')"
  },
  {
    "comment": "triggers - Statement 129",
    "query": "CREATE TRIGGER before_upd_a_stmt_trig BEFORE UPDATE OF a ON main_table FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func('before_upd_a_stmt')",
    "expected": "CREATE TRIGGER before_upd_a_stmt_trig BEFORE UPDATE OF a ON main_table EXECUTE FUNCTION trigger_func('before_upd_a_stmt')"
  },
  {
    "comment": "triggers - Statement 130",
    "query": "CREATE TRIGGER after_upd_b_stmt_trig AFTER UPDATE OF b ON main_table FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func('after_upd_b_stmt')",
    "expected": "CREATE TRIGGER after_upd_b_stmt_trig AFTER UPDATE OF b ON main_table EXECUTE FUNCTION trigger_func('after_upd_b_stmt')"
  },
  {
    "comment": "triggers - Statement 131",
    "query": "SELECT pg_get_triggerdef(oid) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'after_upd_a_b_row_trig'",
    "expected": "SELECT pg_get_triggerdef(oid) FROM pg_trigger WHERE tgrelid = CAST('main_table' AS regclass) AND tgname = 'after_upd_a_b_row_trig'"
  },
  {
    "comment": "triggers - Statement 132",
    "query": "UPDATE main_table SET a = 50"
  },
  {
    "comment": "triggers - Statement 133",
    "query": "UPDATE main_table SET b = 10"
  },
  {
    "comment": "triggers - Statement 134",
    "query": "CREATE TABLE some_t (some_col boolean NOT NULL)",
    "expected": "CREATE TABLE some_t (some_col BOOLEAN NOT NULL)"
  },
  {
    "comment": "triggers - Statement 135",
    "query": "CREATE FUNCTION dummy_update_func() RETURNS trigger AS $$ BEGIN RAISE NOTICE 'dummy_update_func(%) called: action = %, old = %, new = %', TG_ARGV[0], TG_OP, OLD, NEW; RETURN NEW; END; $$ LANGUAGE plpgsql",
    "expected": "CREATE FUNCTION dummy_update_func () RETURNS trigger AS $$ BEGIN RAISE NOTICE 'dummy_update_func(%) called: action = %, old = %, new = %', TG_ARGV[0], TG_OP, OLD, NEW; RETURN NEW; END; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 136",
    "query": "CREATE TRIGGER some_trig_before BEFORE UPDATE ON some_t FOR EACH ROW EXECUTE PROCEDURE dummy_update_func('before')",
    "expected": "CREATE TRIGGER some_trig_before BEFORE UPDATE ON some_t FOR EACH ROW EXECUTE FUNCTION dummy_update_func('before')"
  },
  {
    "comment": "triggers - Statement 137",
    "query": "CREATE TRIGGER some_trig_aftera AFTER UPDATE ON some_t FOR EACH ROW WHEN (NOT OLD.some_col AND NEW.some_col) EXECUTE PROCEDURE dummy_update_func('aftera')",
    "expected": "CREATE TRIGGER some_trig_aftera AFTER UPDATE ON some_t FOR EACH ROW WHEN (NOT old.some_col AND new.some_col) EXECUTE FUNCTION dummy_update_func('aftera')"
  },
  {
    "comment": "triggers - Statement 138",
    "query": "CREATE TRIGGER some_trig_afterb AFTER UPDATE ON some_t FOR EACH ROW WHEN (NOT NEW.some_col) EXECUTE PROCEDURE dummy_update_func('afterb')",
    "expected": "CREATE TRIGGER some_trig_afterb AFTER UPDATE ON some_t FOR EACH ROW WHEN (NOT new.some_col) EXECUTE FUNCTION dummy_update_func('afterb')"
  },
  {
    "comment": "triggers - Statement 139",
    "query": "INSERT INTO some_t VALUES (TRUE)"
  },
  {
    "comment": "triggers - Statement 140",
    "query": "UPDATE some_t SET some_col = TRUE"
  },
  {
    "comment": "triggers - Statement 141",
    "query": "UPDATE some_t SET some_col = FALSE"
  },
  {
    "comment": "triggers - Statement 142",
    "query": "DROP TABLE some_t"
  },
  {
    "comment": "triggers - Statement 143",
    "query": "CREATE TRIGGER error_upd_and_col BEFORE UPDATE OR UPDATE OF a ON main_table FOR EACH ROW EXECUTE PROCEDURE trigger_func('error_upd_and_col')",
    "expected": "CREATE TRIGGER error_upd_and_col BEFORE UPDATE OF a ON main_table FOR EACH ROW EXECUTE FUNCTION trigger_func('error_upd_and_col')"
  },
  {
    "comment": "triggers - Statement 144",
    "query": "CREATE TRIGGER error_upd_a_a BEFORE UPDATE OF a, a ON main_table FOR EACH ROW EXECUTE PROCEDURE trigger_func('error_upd_a_a')",
    "expected": "CREATE TRIGGER error_upd_a_a BEFORE UPDATE OF a, a ON main_table FOR EACH ROW EXECUTE FUNCTION trigger_func('error_upd_a_a')"
  },
  {
    "comment": "triggers - Statement 145",
    "query": "CREATE TRIGGER error_ins_a BEFORE INSERT OF a ON main_table FOR EACH ROW EXECUTE PROCEDURE trigger_func('error_ins_a')",
    "error": "parse error at position 43: syntax error"
  },
  {
    "comment": "triggers - Statement 146",
    "query": "CREATE TRIGGER error_ins_when BEFORE INSERT OR UPDATE ON main_table FOR EACH ROW WHEN (OLD.a \u003c\u003e NEW.a) EXECUTE PROCEDURE trigger_func('error_ins_old')",
    "expected": "CREATE TRIGGER error_ins_when BEFORE INSERT OR UPDATE ON main_table FOR EACH ROW WHEN (old.a \u003c\u003e new.a) EXECUTE FUNCTION trigger_func('error_ins_old')"
  },
  {
    "comment": "triggers - Statement 147",
    "query": "CREATE TRIGGER error_del_when BEFORE DELETE OR UPDATE ON main_table FOR EACH ROW WHEN (OLD.a \u003c\u003e NEW.a) EXECUTE PROCEDURE trigger_func('error_del_new')",
    "expected": "CREATE TRIGGER error_del_when BEFORE UPDATE OR DELETE ON main_table FOR EACH ROW WHEN (old.a \u003c\u003e new.a) EXECUTE FUNCTION trigger_func('error_del_new')"
  },
  {
    "comment": "triggers - Statement 148",
    "query": "CREATE TRIGGER error_del_when BEFORE INSERT OR UPDATE ON main_table FOR EACH ROW WHEN (NEW.tableoid \u003c\u003e 0) EXECUTE PROCEDURE trigger_func('error_when_sys_column')",
    "expected": "CREATE TRIGGER error_del_when BEFORE INSERT OR UPDATE ON main_table FOR EACH ROW WHEN (new.tableoid \u003c\u003e 0) EXECUTE FUNCTION trigger_func('error_when_sys_column')"
  },
  {
    "comment": "triggers - Statement 149",
    "query": "CREATE TRIGGER error_stmt_when BEFORE UPDATE OF a ON main_table FOR EACH STATEMENT WHEN (OLD.* IS DISTINCT FROM NEW.*) EXECUTE PROCEDURE trigger_func('error_stmt_when')",
    "expected": "CREATE TRIGGER error_stmt_when BEFORE UPDATE OF a ON main_table WHEN (old.* IS DISTINCT FROM new.*) EXECUTE FUNCTION trigger_func('error_stmt_when')"
  },
  {
    "comment": "triggers - Statement 150",
    "query": "ALTER TABLE main_table DROP COLUMN b"
  },
  {
    "comment": "triggers - Statement 151",
    "query": "begin",
    "expected": "BEGIN"
  },
  {
    "comment": "triggers - Statement 152",
    "query": "DROP TRIGGER after_upd_a_b_row_trig ON main_table"
  },
  {
    "comment": "triggers - Statement 153",
    "query": "DROP TRIGGER after_upd_b_row_trig ON main_table"
  },
  {
    "comment": "triggers - Statement 154",
    "query": "DROP TRIGGER after_upd_b_stmt_trig ON main_table"
  },
  {
    "comment": "triggers - Statement 155",
    "query": "rollback",
    "expected": "ROLLBACK"
  },
  {
    "comment": "triggers - Statement 156",
    "query": "create table trigtest (i serial primary key)",
    "expected": "CREATE TABLE trigtest (i serial PRIMARY KEY)"
  },
  {
    "comment": "triggers - Statement 157",
    "query": "create table trigtest2 (i int references trigtest(i) on delete cascade)",
    "expected": "CREATE TABLE trigtest2 (i INT REFERENCES trigtest(i) ON DELETE CASCADE)"
  },
  {
    "comment": "triggers - Statement 158",
    "query": "create function trigtest() returns trigger as $$ begin raise notice '% % % %', TG_TABLE_NAME, TG_OP, TG_WHEN, TG_LEVEL; return new; end;$$ language plpgsql",
    "expected": "CREATE FUNCTION trigtest () RETURNS trigger AS $$ begin raise notice '% % % %', TG_TABLE_NAME, TG_OP, TG_WHEN, TG_LEVEL; return new; end;$$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 159",
    "query": "create trigger trigtest_b_row_tg before insert or update or delete on trigtest for each row execute procedure trigtest()",
    "expected": "CREATE TRIGGER trigtest_b_row_tg BEFORE INSERT OR UPDATE OR DELETE ON trigtest FOR EACH ROW EXECUTE FUNCTION trigtest()"
  },
  {
    "comment": "triggers - Statement 160",
    "query": "create trigger trigtest_a_row_tg after insert or update or delete on trigtest for each row execute procedure trigtest()",
    "expected": "CREATE TRIGGER trigtest_a_row_tg AFTER INSERT OR UPDATE OR DELETE ON trigtest FOR EACH ROW EXECUTE FUNCTION trigtest()"
  },
  {
    "comment": "triggers - Statement 161",
    "query": "create trigger trigtest_b_stmt_tg before insert or update or delete on trigtest for each statement execute procedure trigtest()",
    "expected": "CREATE TRIGGER trigtest_b_stmt_tg BEFORE INSERT OR UPDATE OR DELETE ON trigtest EXECUTE FUNCTION trigtest()"
  },
  {
    "comment": "triggers - Statement 162",
    "query": "create trigger trigtest_a_stmt_tg after insert or update or delete on trigtest for each statement execute procedure trigtest()",
    "expected": "CREATE TRIGGER trigtest_a_stmt_tg AFTER INSERT OR UPDATE OR DELETE ON trigtest EXECUTE FUNCTION trigtest()"
  },
  {
    "comment": "triggers - Statement 163",
    "query": "insert into trigtest default values",
    "expected": "INSERT INTO trigtest DEFAULT VALUES"
  },
  {
    "comment": "triggers - Statement 164",
    "query": "alter table trigtest disable trigger trigtest_b_row_tg",
    "expected": "ALTER TABLE trigtest DISABLE TRIGGER trigtest_b_row_tg"
  },
  {
    "comment": "triggers - Statement 165",
    "query": "alter table trigtest disable trigger user",
    "expected": "ALTER TABLE trigtest DISABLE TRIGGER USER"
  },
  {
    "comment": "triggers - Statement 166",
    "query": "alter table trigtest enable trigger trigtest_a_stmt_tg",
    "expected": "ALTER TABLE trigtest ENABLE TRIGGER trigtest_a_stmt_tg"
  },
  {
    "comment": "triggers - Statement 167",
    "query": "set session_replication_role = replica",
    "expected": "SET session_replication_role = 'replica'"
  },
  {
    "comment": "triggers - Statement 168",
    "query": "alter table trigtest enable always trigger trigtest_a_stmt_tg",
    "expected": "ALTER TABLE trigtest ENABLE ALWAYS TRIGGER trigtest_a_stmt_tg"
  },
  {
    "comment": "triggers - Statement 169",
    "query": "reset session_replication_role",
    "expected": "RESET session_replication_role"
  },
  {
    "comment": "triggers - Statement 170",
    "query": "insert into trigtest2 values(1)",
    "expected": "INSERT INTO trigtest2 VALUES (1)"
  },
  {
    "comment": "triggers - Statement 171",
    "query": "insert into trigtest2 values(2)",
    "expected": "INSERT INTO trigtest2 VALUES (2)"
  },
  {
    "comment": "triggers - Statement 172",
    "query": "delete from trigtest where i=2",
    "expected": "DELETE FROM trigtest WHERE i = 2"
  },
  {
    "comment": "triggers - Statement 173",
    "query": "select * from trigtest2",
    "expected": "SELECT * FROM trigtest2"
  },
  {
    "comment": "triggers - Statement 174",
    "query": "alter table trigtest disable trigger all",
    "expected": "ALTER TABLE trigtest DISABLE TRIGGER ALL"
  },
  {
    "comment": "triggers - Statement 175",
    "query": "delete from trigtest where i=1",
    "expected": "DELETE FROM trigtest WHERE i = 1"
  },
  {
    "comment": "triggers - Statement 176",
    "query": "drop table trigtest2",
    "expected": "DROP TABLE trigtest2"
  },
  {
    "comment": "triggers - Statement 177",
    "query": "CREATE TABLE trigger_test ( i int, v varchar )",
    "expected": "CREATE TABLE trigger_test (i INT, v VARCHAR)"
  },
  {
    "comment": "triggers - Statement 178",
    "query": "CREATE OR REPLACE FUNCTION trigger_data()  RETURNS trigger LANGUAGE plpgsql AS $$  declare  argstr text; relid text;  begin  relid := TG_relid::regclass;     raise NOTICE 'TG_NAME: %', TG_name; raise NOTICE 'TG_WHEN: %', TG_when; raise NOTICE 'TG_LEVEL: %', TG_level; raise NOTICE 'TG_OP: %', TG_op; raise NOTICE 'TG_RELID::regclass: %', relid; raise NOTICE 'TG_RELNAME: %', TG_relname; raise NOTICE 'TG_TABLE_NAME: %', TG_table_name; raise NOTICE 'TG_TABLE_SCHEMA: %', TG_table_schema; raise NOTICE 'TG_NARGS: %', TG_nargs;  argstr := '['; for i in 0 .. TG_nargs - 1 loop if i \u003e 0 then argstr := argstr || ', '; end if; argstr := argstr || TG_argv[i]; end loop; argstr := argstr || ']'; raise NOTICE 'TG_ARGV: %', argstr;  if TG_OP != 'INSERT' then raise NOTICE 'OLD: %', OLD; end if;  if TG_OP != 'DELETE' then raise NOTICE 'NEW: %', NEW; end if;  if TG_OP = 'DELETE' then return OLD; else return NEW; end if;  end; $$",
    "expected": "CREATE OR REPLACE FUNCTION trigger_data () RETURNS trigger LANGUAGE plpgsql AS $$  declare  argstr text; relid text;  begin  relid := TG_relid::regclass;     raise NOTICE 'TG_NAME: %', TG_name; raise NOTICE 'TG_WHEN: %', TG_when; raise NOTICE 'TG_LEVEL: %', TG_level; raise NOTICE 'TG_OP: %', TG_op; raise NOTICE 'TG_RELID::regclass: %', relid; raise NOTICE 'TG_RELNAME: %', TG_relname; raise NOTICE 'TG_TABLE_NAME: %', TG_table_name; raise NOTICE 'TG_TABLE_SCHEMA: %', TG_table_schema; raise NOTICE 'TG_NARGS: %', TG_nargs;  argstr := '['; for i in 0 .. TG_nargs - 1 loop if i \u003e 0 then argstr := argstr || ', '; end if; argstr := argstr || TG_argv[i]; end loop; argstr := argstr || ']'; raise NOTICE 'TG_ARGV: %', argstr;  if TG_OP != 'INSERT' then raise NOTICE 'OLD: %', OLD; end if;  if TG_OP != 'DELETE' then raise NOTICE 'NEW: %', NEW; end if;  if TG_OP = 'DELETE' then return OLD; else return NEW; end if;  end; $$"
  },
  {
    "comment": "triggers - Statement 179",
    "query": "CREATE TRIGGER show_trigger_data_trig BEFORE INSERT OR UPDATE OR DELETE ON trigger_test FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo')",
    "expected": "CREATE TRIGGER show_trigger_data_trig BEFORE INSERT OR UPDATE OR DELETE ON trigger_test FOR EACH ROW EXECUTE FUNCTION trigger_data(23, 'skidoo')"
  },
  {
    "comment": "triggers - Statement 180",
    "query": "insert into trigger_test values(1,'insert')",
    "expected": "INSERT INTO trigger_test VALUES (1, 'insert')"
  },
  {
    "comment": "triggers - Statement 181",
    "query": "update trigger_test set v = 'update' where i = 1",
    "expected": "UPDATE trigger_test SET v = 'update' WHERE i = 1"
  },
  {
    "comment": "triggers - Statement 182",
    "query": "delete from trigger_test",
    "expected": "DELETE FROM trigger_test"
  },
  {
    "comment": "triggers - Statement 183",
    "query": "DROP TRIGGER show_trigger_data_trig on trigger_test",
    "expected": "DROP TRIGGER show_trigger_data_trig ON trigger_test"
  },
  {
    "comment": "triggers - Statement 184",
    "query": "DROP FUNCTION trigger_data()"
  },
  {
    "comment": "triggers - Statement 185",
    "query": "DROP TABLE trigger_test"
  },
  {
    "comment": "triggers - Statement 186",
    "query": "CREATE TABLE trigger_test (f1 int, f2 text, f3 text)",
    "expected": "CREATE TABLE trigger_test (f1 INT, f2 TEXT, f3 TEXT)"
  },
  {
    "comment": "triggers - Statement 187",
    "query": "CREATE FUNCTION mytrigger() RETURNS trigger LANGUAGE plpgsql as $$ begin if row(old.*) = row(new.*) then raise notice 'row % not changed', new.f1; else raise notice 'row % changed', new.f1; end if; return new; end$$",
    "expected": "CREATE FUNCTION mytrigger () RETURNS trigger LANGUAGE plpgsql AS $$ begin if row(old.*) = row(new.*) then raise notice 'row % not changed', new.f1; else raise notice 'row % changed', new.f1; end if; return new; end$$"
  },
  {
    "comment": "triggers - Statement 188",
    "query": "CREATE TRIGGER t BEFORE UPDATE ON trigger_test FOR EACH ROW EXECUTE PROCEDURE mytrigger()",
    "expected": "CREATE TRIGGER t BEFORE UPDATE ON trigger_test FOR EACH ROW EXECUTE FUNCTION mytrigger()"
  },
  {
    "comment": "triggers - Statement 189",
    "query": "INSERT INTO trigger_test VALUES(1, 'foo', 'bar')",
    "expected": "INSERT INTO trigger_test VALUES (1, 'foo', 'bar')"
  },
  {
    "comment": "triggers - Statement 190",
    "query": "INSERT INTO trigger_test VALUES(2, 'baz', 'quux')",
    "expected": "INSERT INTO trigger_test VALUES (2, 'baz', 'quux')"
  },
  {
    "comment": "triggers - Statement 191",
    "query": "UPDATE trigger_test SET f3 = 'bar'"
  },
  {
    "comment": "triggers - Statement 192",
    "query": "UPDATE trigger_test SET f3 = NULL"
  },
  {
    "comment": "triggers - Statement 193",
    "query": "CREATE OR REPLACE FUNCTION mytrigger() RETURNS trigger LANGUAGE plpgsql as $$ begin if row(old.*) is distinct from row(new.*) then raise notice 'row % changed', new.f1; else raise notice 'row % not changed', new.f1; end if; return new; end$$",
    "expected": "CREATE OR REPLACE FUNCTION mytrigger () RETURNS trigger LANGUAGE plpgsql AS $$ begin if row(old.*) is distinct from row(new.*) then raise notice 'row % changed', new.f1; else raise notice 'row % not changed', new.f1; end if; return new; end$$"
  },
  {
    "comment": "triggers - Statement 194",
    "query": "DROP FUNCTION mytrigger()"
  },
  {
    "comment": "triggers - Statement 195",
    "query": "CREATE FUNCTION serializable_update_trig() RETURNS trigger LANGUAGE plpgsql AS $$ declare rec record; begin new.description = 'updated in trigger'; return new; end; $$",
    "expected": "CREATE FUNCTION serializable_update_trig () RETURNS trigger LANGUAGE plpgsql AS $$ declare rec record; begin new.description = 'updated in trigger'; return new; end; $$"
  },
  {
    "comment": "triggers - Statement 196",
    "query": "CREATE TABLE serializable_update_tab ( id int, filler  text, description text )",
    "expected": "CREATE TABLE serializable_update_tab (id INT, filler TEXT, description TEXT)"
  },
  {
    "comment": "triggers - Statement 197",
    "query": "CREATE TRIGGER serializable_update_trig BEFORE UPDATE ON serializable_update_tab FOR EACH ROW EXECUTE PROCEDURE serializable_update_trig()",
    "expected": "CREATE TRIGGER serializable_update_trig BEFORE UPDATE ON serializable_update_tab FOR EACH ROW EXECUTE FUNCTION serializable_update_trig()"
  },
  {
    "comment": "triggers - Statement 198",
    "query": "INSERT INTO serializable_update_tab SELECT a, repeat('xyzxz', 100), 'new' FROM generate_series(1, 50) a",
    "expected": "INSERT INTO serializable_update_tab SELECT a, repeat('xyzxz', 100), 'new' FROM generate_series(1, 50) AS a"
  },
  {
    "comment": "triggers - Statement 199",
    "query": "SET TRANSACTION ISOLATION LEVEL SERIALIZABLE"
  },
  {
    "comment": "triggers - Statement 200",
    "query": "UPDATE serializable_update_tab SET description = 'no no', id = 1 WHERE id = 1"
  },
  {
    "comment": "triggers - Statement 201",
    "query": "COMMIT"
  },
  {
    "comment": "triggers - Statement 202",
    "query": "SELECT description FROM serializable_update_tab WHERE id = 1"
  },
  {
    "comment": "triggers - Statement 203",
    "query": "DROP TABLE serializable_update_tab"
  },
  {
    "comment": "triggers - Statement 204",
    "query": "CREATE TABLE min_updates_test ( f1\ttext, f2 int, f3 int)",
    "expected": "CREATE TABLE min_updates_test (f1 TEXT, f2 INT, f3 INT)"
  },
  {
    "comment": "triggers - Statement 205",
    "query": "INSERT INTO min_updates_test VALUES ('a',1,2),('b','2',null)",
    "expected": "INSERT INTO min_updates_test VALUES ('a', 1, 2), ('b', '2', NULL)"
  },
  {
    "comment": "triggers - Statement 206",
    "query": "CREATE TRIGGER z_min_update BEFORE UPDATE ON min_updates_test FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger()",
    "expected": "CREATE TRIGGER z_min_update BEFORE UPDATE ON min_updates_test FOR EACH ROW EXECUTE FUNCTION suppress_redundant_updates_trigger()"
  },
  {
    "comment": "triggers - Statement 207",
    "query": "UPDATE min_updates_test SET f2 = f2 + 1"
  },
  {
    "comment": "triggers - Statement 208",
    "query": "UPDATE min_updates_test SET f3 = 2 WHERE f3 is null",
    "expected": "UPDATE min_updates_test SET f3 = 2 WHERE f3 IS NULL"
  },
  {
    "comment": "triggers - Statement 209",
    "query": "DROP TABLE min_updates_test"
  },
  {
    "comment": "triggers - Statement 210",
    "query": "CREATE VIEW main_view AS SELECT a, b FROM main_table"
  },
  {
    "comment": "triggers - Statement 211",
    "query": "CREATE OR REPLACE FUNCTION view_trigger() RETURNS trigger LANGUAGE plpgsql AS $$ declare argstr text := ''; begin for i in 0 .. TG_nargs - 1 loop if i \u003e 0 then argstr := argstr || ', '; end if; argstr := argstr || TG_argv[i]; end loop;  raise notice '% % % % (%)', TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL, argstr;  if TG_LEVEL = 'ROW' then if TG_OP = 'INSERT' then raise NOTICE 'NEW: %', NEW; INSERT INTO main_table VALUES (NEW.a, NEW.b); RETURN NEW; end if;  if TG_OP = 'UPDATE' then raise NOTICE 'OLD: %, NEW: %', OLD, NEW; UPDATE main_table SET a = NEW.a, b = NEW.b WHERE a = OLD.a AND b = OLD.b; if NOT FOUND then RETURN NULL; end if; RETURN NEW; end if;  if TG_OP = 'DELETE' then raise NOTICE 'OLD: %', OLD; DELETE FROM main_table WHERE a = OLD.a AND b = OLD.b; if NOT FOUND then RETURN NULL; end if; RETURN OLD; end if; end if;  RETURN NULL; end; $$",
    "expected": "CREATE OR REPLACE FUNCTION view_trigger () RETURNS trigger LANGUAGE plpgsql AS $$ declare argstr text := ''; begin for i in 0 .. TG_nargs - 1 loop if i \u003e 0 then argstr := argstr || ', '; end if; argstr := argstr || TG_argv[i]; end loop;  raise notice '% % % % (%)', TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL, argstr;  if TG_LEVEL = 'ROW' then if TG_OP = 'INSERT' then raise NOTICE 'NEW: %', NEW; INSERT INTO main_table VALUES (NEW.a, NEW.b); RETURN NEW; end if;  if TG_OP = 'UPDATE' then raise NOTICE 'OLD: %, NEW: %', OLD, NEW; UPDATE main_table SET a = NEW.a, b = NEW.b WHERE a = OLD.a AND b = OLD.b; if NOT FOUND then RETURN NULL; end if; RETURN NEW; end if;  if TG_OP = 'DELETE' then raise NOTICE 'OLD: %', OLD; DELETE FROM main_table WHERE a = OLD.a AND b = OLD.b; if NOT FOUND then RETURN NULL; end if; RETURN OLD; end if; end if;  RETURN NULL; end; $$"
  },
  {
    "comment": "triggers - Statement 212",
    "query": "CREATE TRIGGER invalid_trig BEFORE INSERT ON main_view FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_ins_row')",
    "expected": "CREATE TRIGGER invalid_trig BEFORE INSERT ON main_view FOR EACH ROW EXECUTE FUNCTION trigger_func('before_ins_row')"
  },
  {
    "comment": "triggers - Statement 213",
    "query": "CREATE TRIGGER invalid_trig BEFORE UPDATE ON main_view FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_upd_row')",
    "expected": "CREATE TRIGGER invalid_trig BEFORE UPDATE ON main_view FOR EACH ROW EXECUTE FUNCTION trigger_func('before_upd_row')"
  },
  {
    "comment": "triggers - Statement 214",
    "query": "CREATE TRIGGER invalid_trig BEFORE DELETE ON main_view FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_del_row')",
    "expected": "CREATE TRIGGER invalid_trig BEFORE DELETE ON main_view FOR EACH ROW EXECUTE FUNCTION trigger_func('before_del_row')"
  },
  {
    "comment": "triggers - Statement 215",
    "query": "CREATE TRIGGER invalid_trig AFTER INSERT ON main_view FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_ins_row')",
    "expected": "CREATE TRIGGER invalid_trig AFTER INSERT ON main_view FOR EACH ROW EXECUTE FUNCTION trigger_func('before_ins_row')"
  },
  {
    "comment": "triggers - Statement 216",
    "query": "CREATE TRIGGER invalid_trig AFTER UPDATE ON main_view FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_upd_row')",
    "expected": "CREATE TRIGGER invalid_trig AFTER UPDATE ON main_view FOR EACH ROW EXECUTE FUNCTION trigger_func('before_upd_row')"
  },
  {
    "comment": "triggers - Statement 217",
    "query": "CREATE TRIGGER invalid_trig AFTER DELETE ON main_view FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_del_row')",
    "expected": "CREATE TRIGGER invalid_trig AFTER DELETE ON main_view FOR EACH ROW EXECUTE FUNCTION trigger_func('before_del_row')"
  },
  {
    "comment": "triggers - Statement 218",
    "query": "CREATE TRIGGER invalid_trig BEFORE TRUNCATE ON main_view EXECUTE PROCEDURE trigger_func('before_tru_row')",
    "expected": "CREATE TRIGGER invalid_trig BEFORE TRUNCATE ON main_view EXECUTE FUNCTION trigger_func('before_tru_row')"
  },
  {
    "comment": "triggers - Statement 219",
    "query": "CREATE TRIGGER invalid_trig AFTER TRUNCATE ON main_view EXECUTE PROCEDURE trigger_func('before_tru_row')",
    "expected": "CREATE TRIGGER invalid_trig AFTER TRUNCATE ON main_view EXECUTE FUNCTION trigger_func('before_tru_row')"
  },
  {
    "comment": "triggers - Statement 220",
    "query": "CREATE TRIGGER invalid_trig INSTEAD OF INSERT ON main_table FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_ins')",
    "expected": "CREATE TRIGGER invalid_trig INSTEAD OF INSERT ON main_table FOR EACH ROW EXECUTE FUNCTION view_trigger('instead_of_ins')"
  },
  {
    "comment": "triggers - Statement 221",
    "query": "CREATE TRIGGER invalid_trig INSTEAD OF UPDATE ON main_table FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_upd')",
    "expected": "CREATE TRIGGER invalid_trig INSTEAD OF UPDATE ON main_table FOR EACH ROW EXECUTE FUNCTION view_trigger('instead_of_upd')"
  },
  {
    "comment": "triggers - Statement 222",
    "query": "CREATE TRIGGER invalid_trig INSTEAD OF DELETE ON main_table FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_del')",
    "expected": "CREATE TRIGGER invalid_trig INSTEAD OF DELETE ON main_table FOR EACH ROW EXECUTE FUNCTION view_trigger('instead_of_del')"
  },
  {
    "comment": "triggers - Statement 223",
    "query": "CREATE TRIGGER invalid_trig INSTEAD OF UPDATE ON main_view FOR EACH ROW WHEN (OLD.a \u003c\u003e NEW.a) EXECUTE PROCEDURE view_trigger('instead_of_upd')",
    "expected": "CREATE TRIGGER invalid_trig INSTEAD OF UPDATE ON main_view FOR EACH ROW WHEN (old.a \u003c\u003e new.a) EXECUTE FUNCTION view_trigger('instead_of_upd')"
  },
  {
    "comment": "triggers - Statement 224",
    "query": "CREATE TRIGGER invalid_trig INSTEAD OF UPDATE OF a ON main_view FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_upd')",
    "expected": "CREATE TRIGGER invalid_trig INSTEAD OF UPDATE OF a ON main_view FOR EACH ROW EXECUTE FUNCTION view_trigger('instead_of_upd')"
  },
  {
    "comment": "triggers - Statement 225",
    "query": "CREATE TRIGGER invalid_trig INSTEAD OF UPDATE ON main_view EXECUTE PROCEDURE view_trigger('instead_of_upd')",
    "expected": "CREATE TRIGGER invalid_trig INSTEAD OF UPDATE ON main_view EXECUTE FUNCTION view_trigger('instead_of_upd')"
  },
  {
    "comment": "triggers - Statement 226",
    "query": "CREATE TRIGGER instead_of_insert_trig INSTEAD OF INSERT ON main_view FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_ins')",
    "expected": "CREATE TRIGGER instead_of_insert_trig INSTEAD OF INSERT ON main_view FOR EACH ROW EXECUTE FUNCTION view_trigger('instead_of_ins')"
  },
  {
    "comment": "triggers - Statement 227",
    "query": "CREATE TRIGGER instead_of_update_trig INSTEAD OF UPDATE ON main_view FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_upd')",
    "expected": "CREATE TRIGGER instead_of_update_trig INSTEAD OF UPDATE ON main_view FOR EACH ROW EXECUTE FUNCTION view_trigger('instead_of_upd')"
  },
  {
    "comment": "triggers - Statement 228",
    "query": "CREATE TRIGGER instead_of_delete_trig INSTEAD OF DELETE ON main_view FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_del')",
    "expected": "CREATE TRIGGER instead_of_delete_trig INSTEAD OF DELETE ON main_view FOR EACH ROW EXECUTE FUNCTION view_trigger('instead_of_del')"
  },
  {
    "comment": "triggers - Statement 229",
    "query": "CREATE TRIGGER before_ins_stmt_trig BEFORE INSERT ON main_view FOR EACH STATEMENT EXECUTE PROCEDURE view_trigger('before_view_ins_stmt')",
    "expected": "CREATE TRIGGER before_ins_stmt_trig BEFORE INSERT ON main_view EXECUTE FUNCTION view_trigger('before_view_ins_stmt')"
  },
  {
    "comment": "triggers - Statement 230",
    "query": "CREATE TRIGGER before_upd_stmt_trig BEFORE UPDATE ON main_view FOR EACH STATEMENT EXECUTE PROCEDURE view_trigger('before_view_upd_stmt')",
    "expected": "CREATE TRIGGER before_upd_stmt_trig BEFORE UPDATE ON main_view EXECUTE FUNCTION view_trigger('before_view_upd_stmt')"
  },
  {
    "comment": "triggers - Statement 231",
    "query": "CREATE TRIGGER before_del_stmt_trig BEFORE DELETE ON main_view FOR EACH STATEMENT EXECUTE PROCEDURE view_trigger('before_view_del_stmt')",
    "expected": "CREATE TRIGGER before_del_stmt_trig BEFORE DELETE ON main_view EXECUTE FUNCTION view_trigger('before_view_del_stmt')"
  },
  {
    "comment": "triggers - Statement 232",
    "query": "CREATE TRIGGER after_ins_stmt_trig AFTER INSERT ON main_view FOR EACH STATEMENT EXECUTE PROCEDURE view_trigger('after_view_ins_stmt')",
    "expected": "CREATE TRIGGER after_ins_stmt_trig AFTER INSERT ON main_view EXECUTE FUNCTION view_trigger('after_view_ins_stmt')"
  },
  {
    "comment": "triggers - Statement 233",
    "query": "CREATE TRIGGER after_upd_stmt_trig AFTER UPDATE ON main_view FOR EACH STATEMENT EXECUTE PROCEDURE view_trigger('after_view_upd_stmt')",
    "expected": "CREATE TRIGGER after_upd_stmt_trig AFTER UPDATE ON main_view EXECUTE FUNCTION view_trigger('after_view_upd_stmt')"
  },
  {
    "comment": "triggers - Statement 234",
    "query": "CREATE TRIGGER after_del_stmt_trig AFTER DELETE ON main_view FOR EACH STATEMENT EXECUTE PROCEDURE view_trigger('after_view_del_stmt')",
    "expected": "CREATE TRIGGER after_del_stmt_trig AFTER DELETE ON main_view EXECUTE FUNCTION view_trigger('after_view_del_stmt')"
  },
  {
    "comment": "triggers - Statement 235",
    "query": "INSERT INTO main_view VALUES (21, 31) RETURNING a, b"
  },
  {
    "comment": "triggers - Statement 236",
    "query": "UPDATE main_view SET b = 31 WHERE a = 20"
  },
  {
    "comment": "triggers - Statement 237",
    "query": "UPDATE main_view SET b = 32 WHERE a = 21 AND b = 31 RETURNING a, b"
  },
  {
    "comment": "triggers - Statement 238",
    "query": "DROP TRIGGER before_upd_a_row_trig ON main_table"
  },
  {
    "comment": "triggers - Statement 239",
    "query": "UPDATE main_view SET b = 0 WHERE false",
    "expected": "UPDATE main_view SET b = 0 WHERE FALSE"
  },
  {
    "comment": "triggers - Statement 240",
    "query": "DELETE FROM main_view WHERE a IN (20,21)",
    "expected": "DELETE FROM main_view WHERE a IN (20, 21)"
  },
  {
    "comment": "triggers - Statement 241",
    "query": "DELETE FROM main_view WHERE a = 31 RETURNING a, b"
  },
  {
    "comment": "triggers - Statement 242",
    "query": "DROP TRIGGER instead_of_delete_trig ON main_view"
  },
  {
    "comment": "triggers - Statement 243",
    "query": "CREATE TABLE country_table ( country_id        serial primary key, country_name    text unique not null, continent        text not null )",
    "expected": "CREATE TABLE country_table (country_id serial PRIMARY KEY, country_name TEXT UNIQUE NOT NULL, continent TEXT NOT NULL)"
  },
  {
    "comment": "triggers - Statement 244",
    "query": "INSERT INTO country_table (country_name, continent) VALUES ('Japan', 'Asia'), ('UK', 'Europe'), ('USA', 'North America') RETURNING *"
  },
  {
    "comment": "triggers - Statement 245",
    "query": "CREATE TABLE city_table ( city_id        serial primary key, city_name    text not null, population    bigint, country_id    int references country_table )",
    "expected": "CREATE TABLE city_table (city_id serial PRIMARY KEY, city_name TEXT NOT NULL, population BIGINT, country_id INT REFERENCES country_table)"
  },
  {
    "comment": "triggers - Statement 246",
    "query": "CREATE VIEW city_view AS SELECT city_id, city_name, population, country_name, continent FROM city_table ci LEFT JOIN country_table co ON co.country_id = ci.country_id",
    "expected": "CREATE VIEW city_view AS SELECT city_id, city_name, population, country_name, continent FROM city_table AS ci LEFT OUTER JOIN country_table AS co ON co.country_id = ci.country_id"
  },
  {
    "comment": "triggers - Statement 247",
    "query": "CREATE FUNCTION city_insert() RETURNS trigger LANGUAGE plpgsql AS $$ declare ctry_id int; begin if NEW.country_name IS NOT NULL then SELECT country_id, continent INTO ctry_id, NEW.continent FROM country_table WHERE country_name = NEW.country_name; if NOT FOUND then raise exception 'No such country: \"%\"', NEW.country_name; end if; else NEW.continent := NULL; end if;  if NEW.city_id IS NOT NULL then INSERT INTO city_table VALUES(NEW.city_id, NEW.city_name, NEW.population, ctry_id); else INSERT INTO city_table(city_name, population, country_id) VALUES(NEW.city_name, NEW.population, ctry_id) RETURNING city_id INTO NEW.city_id; end if;  RETURN NEW; end; $$",
    "expected": "CREATE FUNCTION city_insert () RETURNS trigger LANGUAGE plpgsql AS $$ declare ctry_id int; begin if NEW.country_name IS NOT NULL then SELECT country_id, continent INTO ctry_id, NEW.continent FROM country_table WHERE country_name = NEW.country_name; if NOT FOUND then raise exception 'No such country: \"%\"', NEW.country_name; end if; else NEW.continent := NULL; end if;  if NEW.city_id IS NOT NULL then INSERT INTO city_table VALUES(NEW.city_id, NEW.city_name, NEW.population, ctry_id); else INSERT INTO city_table(city_name, population, country_id) VALUES(NEW.city_name, NEW.population, ctry_id) RETURNING city_id INTO NEW.city_id; end if;  RETURN NEW; end; $$"
  },
  {
    "comment": "triggers - Statement 248",
    "query": "CREATE TRIGGER city_insert_trig INSTEAD OF INSERT ON city_view FOR EACH ROW EXECUTE PROCEDURE city_insert()",
    "expected": "CREATE TRIGGER city_insert_trig INSTEAD OF INSERT ON city_view FOR EACH ROW EXECUTE FUNCTION city_insert()"
  },
  {
    "comment": "triggers - Statement 249",
    "query": "CREATE FUNCTION city_delete() RETURNS trigger LANGUAGE plpgsql AS $$ begin DELETE FROM city_table WHERE city_id = OLD.city_id; if NOT FOUND then RETURN NULL; end if; RETURN OLD; end; $$",
    "expected": "CREATE FUNCTION city_delete () RETURNS trigger LANGUAGE plpgsql AS $$ begin DELETE FROM city_table WHERE city_id = OLD.city_id; if NOT FOUND then RETURN NULL; end if; RETURN OLD; end; $$"
  },
  {
    "comment": "triggers - Statement 250",
    "query": "CREATE TRIGGER city_delete_trig INSTEAD OF DELETE ON city_view FOR EACH ROW EXECUTE PROCEDURE city_delete()",
    "expected": "CREATE TRIGGER city_delete_trig INSTEAD OF DELETE ON city_view FOR EACH ROW EXECUTE FUNCTION city_delete()"
  },
  {
    "comment": "triggers - Statement 251",
    "query": "CREATE FUNCTION city_update() RETURNS trigger LANGUAGE plpgsql AS $$ declare ctry_id int; begin if NEW.country_name IS DISTINCT FROM OLD.country_name then SELECT country_id, continent INTO ctry_id, NEW.continent FROM country_table WHERE country_name = NEW.country_name; if NOT FOUND then raise exception 'No such country: \"%\"', NEW.country_name; end if;  UPDATE city_table SET city_name = NEW.city_name, population = NEW.population, country_id = ctry_id WHERE city_id = OLD.city_id; else UPDATE city_table SET city_name = NEW.city_name, population = NEW.population WHERE city_id = OLD.city_id; NEW.continent := OLD.continent; end if;  if NOT FOUND then RETURN NULL; end if; RETURN NEW; end; $$",
    "expected": "CREATE FUNCTION city_update () RETURNS trigger LANGUAGE plpgsql AS $$ declare ctry_id int; begin if NEW.country_name IS DISTINCT FROM OLD.country_name then SELECT country_id, continent INTO ctry_id, NEW.continent FROM country_table WHERE country_name = NEW.country_name; if NOT FOUND then raise exception 'No such country: \"%\"', NEW.country_name; end if;  UPDATE city_table SET city_name = NEW.city_name, population = NEW.population, country_id = ctry_id WHERE city_id = OLD.city_id; else UPDATE city_table SET city_name = NEW.city_name, population = NEW.population WHERE city_id = OLD.city_id; NEW.continent := OLD.continent; end if;  if NOT FOUND then RETURN NULL; end if; RETURN NEW; end; $$"
  },
  {
    "comment": "triggers - Statement 252",
    "query": "CREATE TRIGGER city_update_trig INSTEAD OF UPDATE ON city_view FOR EACH ROW EXECUTE PROCEDURE city_update()",
    "expected": "CREATE TRIGGER city_update_trig INSTEAD OF UPDATE ON city_view FOR EACH ROW EXECUTE FUNCTION city_update()"
  },
  {
    "comment": "triggers - Statement 253",
    "query": "INSERT INTO city_view(city_name, population) VALUES('London', 7556900) RETURNING *",
    "expected": "INSERT INTO city_view (city_name, population) VALUES ('London', 7556900) RETURNING *"
  },
  {
    "comment": "triggers - Statement 254",
    "query": "INSERT INTO city_view(city_name, country_name) VALUES('Washington DC', 'USA') RETURNING *",
    "expected": "INSERT INTO city_view (city_name, country_name) VALUES ('Washington DC', 'USA') RETURNING *"
  },
  {
    "comment": "triggers - Statement 255",
    "query": "INSERT INTO city_view(city_id, city_name) VALUES(123456, 'New York') RETURNING *",
    "expected": "INSERT INTO city_view (city_id, city_name) VALUES (123456, 'New York') RETURNING *"
  },
  {
    "comment": "triggers - Statement 256",
    "query": "INSERT INTO city_view VALUES(234567, 'Birmingham', 1016800, 'UK', 'EU') RETURNING *",
    "expected": "INSERT INTO city_view VALUES (234567, 'Birmingham', 1016800, 'UK', 'EU') RETURNING *"
  },
  {
    "comment": "triggers - Statement 257",
    "query": "UPDATE city_view SET country_name = 'Japon' WHERE city_name = 'Tokyo'"
  },
  {
    "comment": "triggers - Statement 258",
    "query": "UPDATE city_view SET country_name = 'Japan' WHERE city_name = 'Takyo'"
  },
  {
    "comment": "triggers - Statement 259",
    "query": "UPDATE city_view SET country_name = 'Japan' WHERE city_name = 'Tokyo' RETURNING *"
  },
  {
    "comment": "triggers - Statement 260",
    "query": "UPDATE city_view SET population = 13010279 WHERE city_name = 'Tokyo' RETURNING *"
  },
  {
    "comment": "triggers - Statement 261",
    "query": "UPDATE city_view SET country_name = 'UK' WHERE city_name = 'New York' RETURNING *"
  },
  {
    "comment": "triggers - Statement 262",
    "query": "UPDATE city_view SET country_name = 'USA', population = 8391881 WHERE city_name = 'New York' RETURNING *"
  },
  {
    "comment": "triggers - Statement 263",
    "query": "UPDATE city_view SET continent = 'EU' WHERE continent = 'Europe' RETURNING *"
  },
  {
    "comment": "triggers - Statement 264",
    "query": "UPDATE city_view v1 SET country_name = v2.country_name FROM city_view v2 WHERE v2.city_name = 'Birmingham' AND v1.city_name = 'London' RETURNING *",
    "expected": "UPDATE city_view AS v1 SET country_name = v2.country_name FROM city_view AS v2 WHERE v2.city_name = 'Birmingham' AND v1.city_name = 'London' RETURNING *"
  },
  {
    "comment": "triggers - Statement 265",
    "query": "DELETE FROM city_view WHERE city_name = 'Birmingham' RETURNING *"
  },
  {
    "comment": "triggers - Statement 266",
    "query": "SELECT count(*) FROM european_city_view",
    "expected": "SELECT COUNT(*) FROM european_city_view"
  },
  {
    "comment": "triggers - Statement 267",
    "query": "CREATE FUNCTION no_op_trig_fn() RETURNS trigger LANGUAGE plpgsql AS 'begin RETURN NULL; end'",
    "expected": "CREATE FUNCTION no_op_trig_fn () RETURNS trigger LANGUAGE plpgsql AS $$begin RETURN NULL; end$$"
  },
  {
    "comment": "triggers - Statement 268",
    "query": "CREATE TRIGGER no_op_trig INSTEAD OF INSERT OR UPDATE OR DELETE ON european_city_view FOR EACH ROW EXECUTE PROCEDURE no_op_trig_fn()",
    "expected": "CREATE TRIGGER no_op_trig INSTEAD OF INSERT OR UPDATE OR DELETE ON european_city_view FOR EACH ROW EXECUTE FUNCTION no_op_trig_fn()"
  },
  {
    "comment": "triggers - Statement 269",
    "query": "UPDATE european_city_view SET population = 10000"
  },
  {
    "comment": "triggers - Statement 270",
    "query": "DELETE FROM european_city_view"
  },
  {
    "comment": "triggers - Statement 271",
    "query": "CREATE RULE european_city_update_rule AS ON UPDATE TO european_city_view DO INSTEAD UPDATE city_view SET city_name = NEW.city_name, population = NEW.population, country_name = NEW.country_name WHERE city_id = OLD.city_id RETURNING NEW.*",
    "expected": "CREATE RULE european_city_update_rule AS ON UPDATE TO european_city_view DO INSTEAD UPDATE city_view SET city_name = new.city_name, population = new.population, country_name = new.country_name WHERE city_id = old.city_id RETURNING new.*"
  },
  {
    "comment": "triggers - Statement 272",
    "query": "CREATE RULE european_city_delete_rule AS ON DELETE TO european_city_view DO INSTEAD DELETE FROM city_view WHERE city_id = OLD.city_id RETURNING *",
    "expected": "CREATE RULE european_city_delete_rule AS ON DELETE TO european_city_view DO INSTEAD DELETE FROM city_view WHERE city_id = old.city_id RETURNING *"
  },
  {
    "comment": "triggers - Statement 273",
    "query": "UPDATE european_city_view SET country_name = 'UK' WHERE city_name = 'Cambridge'"
  },
  {
    "comment": "triggers - Statement 274",
    "query": "DELETE FROM european_city_view WHERE city_name = 'Cambridge'"
  },
  {
    "comment": "triggers - Statement 275",
    "query": "UPDATE city_view SET country_name = 'UK' WHERE city_name = 'Cambridge' RETURNING *"
  },
  {
    "comment": "triggers - Statement 276",
    "query": "UPDATE european_city_view SET population = 122800 WHERE city_name = 'Cambridge' RETURNING *"
  },
  {
    "comment": "triggers - Statement 277",
    "query": "DELETE FROM european_city_view WHERE city_name = 'Cambridge' RETURNING *"
  },
  {
    "comment": "triggers - Statement 278",
    "query": "UPDATE city_view v SET population = 599657 FROM city_table ci, country_table co WHERE ci.city_name = 'Washington DC' and co.country_name = 'USA' AND v.city_id = ci.city_id AND v.country_name = co.country_name RETURNING co.country_id, v.country_name, v.city_id, v.city_name, v.population",
    "expected": "UPDATE city_view AS v SET population = 599657 FROM city_table AS ci, country_table AS co WHERE ci.city_name = 'Washington DC' AND co.country_name = 'USA' AND v.city_id = ci.city_id AND v.country_name = co.country_name RETURNING co.country_id, v.country_name, v.city_id, v.city_name, v.population"
  },
  {
    "comment": "triggers - Statement 279",
    "query": "DROP TABLE city_table CASCADE"
  },
  {
    "comment": "triggers - Statement 280",
    "query": "DROP TABLE country_table"
  },
  {
    "comment": "triggers - Statement 281",
    "query": "create table depth_a (id int not null primary key)",
    "expected": "CREATE TABLE depth_a (id INT NOT NULL PRIMARY KEY)"
  },
  {
    "comment": "triggers - Statement 282",
    "query": "create table depth_b (id int not null primary key)",
    "expected": "CREATE TABLE depth_b (id INT NOT NULL PRIMARY KEY)"
  },
  {
    "comment": "triggers - Statement 283",
    "query": "create table depth_c (id int not null primary key)",
    "expected": "CREATE TABLE depth_c (id INT NOT NULL PRIMARY KEY)"
  },
  {
    "comment": "triggers - Statement 284",
    "query": "create function depth_a_tf() returns trigger language plpgsql as $$ begin raise notice '%: depth = %', tg_name, pg_trigger_depth(); insert into depth_b values (new.id); raise notice '%: depth = %', tg_name, pg_trigger_depth(); return new; end; $$",
    "expected": "CREATE FUNCTION depth_a_tf () RETURNS trigger LANGUAGE plpgsql AS $$ begin raise notice '%: depth = %', tg_name, pg_trigger_depth(); insert into depth_b values (new.id); raise notice '%: depth = %', tg_name, pg_trigger_depth(); return new; end; $$"
  },
  {
    "comment": "triggers - Statement 285",
    "query": "create trigger depth_a_tr before insert on depth_a for each row execute procedure depth_a_tf()",
    "expected": "CREATE TRIGGER depth_a_tr BEFORE INSERT ON depth_a FOR EACH ROW EXECUTE FUNCTION depth_a_tf()"
  },
  {
    "comment": "triggers - Statement 286",
    "query": "create function depth_b_tf() returns trigger language plpgsql as $$ begin raise notice '%: depth = %', tg_name, pg_trigger_depth(); begin execute 'insert into depth_c values (' || new.id::text || ')'; exception when sqlstate 'U9999' then raise notice 'SQLSTATE = U9999: depth = %', pg_trigger_depth(); end; raise notice '%: depth = %', tg_name, pg_trigger_depth(); if new.id = 1 then execute 'insert into depth_c values (' || new.id::text || ')'; end if; return new; end; $$",
    "expected": "CREATE FUNCTION depth_b_tf () RETURNS trigger LANGUAGE plpgsql AS $$ begin raise notice '%: depth = %', tg_name, pg_trigger_depth(); begin execute 'insert into depth_c values (' || new.id::text || ')'; exception when sqlstate 'U9999' then raise notice 'SQLSTATE = U9999: depth = %', pg_trigger_depth(); end; raise notice '%: depth = %', tg_name, pg_trigger_depth(); if new.id = 1 then execute 'insert into depth_c values (' || new.id::text || ')'; end if; return new; end; $$"
  },
  {
    "comment": "triggers - Statement 287",
    "query": "create trigger depth_b_tr before insert on depth_b for each row execute procedure depth_b_tf()",
    "expected": "CREATE TRIGGER depth_b_tr BEFORE INSERT ON depth_b FOR EACH ROW EXECUTE FUNCTION depth_b_tf()"
  },
  {
    "comment": "triggers - Statement 288",
    "query": "create function depth_c_tf() returns trigger language plpgsql as $$ begin raise notice '%: depth = %', tg_name, pg_trigger_depth(); if new.id = 1 then raise exception sqlstate 'U9999'; end if; raise notice '%: depth = %', tg_name, pg_trigger_depth(); return new; end; $$",
    "expected": "CREATE FUNCTION depth_c_tf () RETURNS trigger LANGUAGE plpgsql AS $$ begin raise notice '%: depth = %', tg_name, pg_trigger_depth(); if new.id = 1 then raise exception sqlstate 'U9999'; end if; raise notice '%: depth = %', tg_name, pg_trigger_depth(); return new; end; $$"
  },
  {
    "comment": "triggers - Statement 289",
    "query": "create trigger depth_c_tr before insert on depth_c for each row execute procedure depth_c_tf()",
    "expected": "CREATE TRIGGER depth_c_tr BEFORE INSERT ON depth_c FOR EACH ROW EXECUTE FUNCTION depth_c_tf()"
  },
  {
    "comment": "triggers - Statement 290",
    "query": "select pg_trigger_depth()",
    "expected": "SELECT pg_trigger_depth()"
  },
  {
    "comment": "triggers - Statement 291",
    "query": "insert into depth_a values (1)",
    "expected": "INSERT INTO depth_a VALUES (1)"
  },
  {
    "comment": "triggers - Statement 292",
    "query": "insert into depth_a values (2)",
    "expected": "INSERT INTO depth_a VALUES (2)"
  },
  {
    "comment": "triggers - Statement 293",
    "query": "drop table depth_a, depth_b, depth_c",
    "expected": "DROP TABLE depth_a, depth_b, depth_c"
  },
  {
    "comment": "triggers - Statement 294",
    "query": "drop function depth_a_tf()",
    "expected": "DROP FUNCTION depth_a_tf()"
  },
  {
    "comment": "triggers - Statement 295",
    "query": "drop function depth_b_tf()",
    "expected": "DROP FUNCTION depth_b_tf()"
  },
  {
    "comment": "triggers - Statement 296",
    "query": "drop function depth_c_tf()",
    "expected": "DROP FUNCTION depth_c_tf()"
  },
  {
    "comment": "triggers - Statement 297",
    "query": "create temp table parent ( aid int not null primary key, val1 text, val2 text, val3 text, val4 text, bcnt int not null default 0)",
    "expected": "CREATE TEMPORARY TABLE parent (aid INT NOT NULL PRIMARY KEY, val1 TEXT, val2 TEXT, val3 TEXT, val4 TEXT, bcnt INT NOT NULL DEFAULT 0)"
  },
  {
    "comment": "triggers - Statement 298",
    "query": "create temp table child ( bid int not null primary key, aid int not null, val1 text)",
    "expected": "CREATE TEMPORARY TABLE child (bid INT NOT NULL PRIMARY KEY, aid INT NOT NULL, val1 TEXT)"
  },
  {
    "comment": "triggers - Statement 299",
    "query": "create function parent_upd_func() returns trigger language plpgsql as $$ begin if old.val1 \u003c\u003e new.val1 then new.val2 = new.val1; delete from child where child.aid = new.aid and child.val1 = new.val1; end if; return new; end; $$",
    "expected": "CREATE FUNCTION parent_upd_func () RETURNS trigger LANGUAGE plpgsql AS $$ begin if old.val1 \u003c\u003e new.val1 then new.val2 = new.val1; delete from child where child.aid = new.aid and child.val1 = new.val1; end if; return new; end; $$"
  },
  {
    "comment": "triggers - Statement 300",
    "query": "create trigger parent_upd_trig before update on parent for each row execute procedure parent_upd_func()",
    "expected": "CREATE TRIGGER parent_upd_trig BEFORE UPDATE ON parent FOR EACH ROW EXECUTE FUNCTION parent_upd_func()"
  },
  {
    "comment": "triggers - Statement 301",
    "query": "create function parent_del_func() returns trigger language plpgsql as $$ begin delete from child where aid = old.aid; return old; end; $$",
    "expected": "CREATE FUNCTION parent_del_func () RETURNS trigger LANGUAGE plpgsql AS $$ begin delete from child where aid = old.aid; return old; end; $$"
  },
  {
    "comment": "triggers - Statement 302",
    "query": "create trigger parent_del_trig before delete on parent for each row execute procedure parent_del_func()",
    "expected": "CREATE TRIGGER parent_del_trig BEFORE DELETE ON parent FOR EACH ROW EXECUTE FUNCTION parent_del_func()"
  },
  {
    "comment": "triggers - Statement 303",
    "query": "create function child_ins_func() returns trigger language plpgsql as $$ begin update parent set bcnt = bcnt + 1 where aid = new.aid; return new; end; $$",
    "expected": "CREATE FUNCTION child_ins_func () RETURNS trigger LANGUAGE plpgsql AS $$ begin update parent set bcnt = bcnt + 1 where aid = new.aid; return new; end; $$"
  },
  {
    "comment": "triggers - Statement 304",
    "query": "create trigger child_ins_trig after insert on child for each row execute procedure child_ins_func()",
    "expected": "CREATE TRIGGER child_ins_trig AFTER INSERT ON child FOR EACH ROW EXECUTE FUNCTION child_ins_func()"
  },
  {
    "comment": "triggers - Statement 305",
    "query": "create function child_del_func() returns trigger language plpgsql as $$ begin update parent set bcnt = bcnt - 1 where aid = old.aid; return old; end; $$",
    "expected": "CREATE FUNCTION child_del_func () RETURNS trigger LANGUAGE plpgsql AS $$ begin update parent set bcnt = bcnt - 1 where aid = old.aid; return old; end; $$"
  },
  {
    "comment": "triggers - Statement 306",
    "query": "create trigger child_del_trig after delete on child for each row execute procedure child_del_func()",
    "expected": "CREATE TRIGGER child_del_trig AFTER DELETE ON child FOR EACH ROW EXECUTE FUNCTION child_del_func()"
  },
  {
    "comment": "triggers - Statement 307",
    "query": "insert into parent values (1, 'a', 'a', 'a', 'a', 0)",
    "expected": "INSERT INTO parent VALUES (1, 'a', 'a', 'a', 'a', 0)"
  },
  {
    "comment": "triggers - Statement 308",
    "query": "insert into child values (10, 1, 'b')",
    "expected": "INSERT INTO child VALUES (10, 1, 'b')"
  },
  {
    "comment": "triggers - Statement 309",
    "query": "select * from parent; select * from child",
    "expected": "SELECT * FROM parent; SELECT * FROM child"
  },
  {
    "comment": "triggers - Statement 310",
    "query": "update parent set val1 = 'b' where aid = 1",
    "expected": "UPDATE parent SET val1 = 'b' WHERE aid = 1"
  },
  {
    "comment": "triggers - Statement 311",
    "query": "merge into parent p using (values (1)) as v(id) on p.aid = v.id when matched then update set val1 = 'b'",
    "expected": "MERGE INTO parent AS p USING (VALUES (1)) AS v(id) ON p.aid = v.id WHEN MATCHED THEN UPDATE SET val1 = 'b'"
  },
  {
    "comment": "triggers - Statement 312",
    "query": "delete from parent where aid = 1",
    "expected": "DELETE FROM parent WHERE aid = 1"
  },
  {
    "comment": "triggers - Statement 313",
    "query": "merge into parent p using (values (1)) as v(id) on p.aid = v.id when matched then delete",
    "expected": "MERGE INTO parent AS p USING (VALUES (1)) AS v(id) ON p.aid = v.id WHEN MATCHED THEN DELETE"
  },
  {
    "comment": "triggers - Statement 314",
    "query": "create or replace function parent_del_func() returns trigger language plpgsql as $$ begin delete from child where aid = old.aid; if found then delete from parent where aid = old.aid; return null; end if; return old; end; $$",
    "expected": "CREATE OR REPLACE FUNCTION parent_del_func () RETURNS trigger LANGUAGE plpgsql AS $$ begin delete from child where aid = old.aid; if found then delete from parent where aid = old.aid; return null; end if; return old; end; $$"
  },
  {
    "comment": "triggers - Statement 315",
    "query": "drop table parent, child",
    "expected": "DROP TABLE parent, child"
  },
  {
    "comment": "triggers - Statement 316",
    "query": "drop function parent_upd_func()",
    "expected": "DROP FUNCTION parent_upd_func()"
  },
  {
    "comment": "triggers - Statement 317",
    "query": "drop function parent_del_func()",
    "expected": "DROP FUNCTION parent_del_func()"
  },
  {
    "comment": "triggers - Statement 318",
    "query": "drop function child_ins_func()",
    "expected": "DROP FUNCTION child_ins_func()"
  },
  {
    "comment": "triggers - Statement 319",
    "query": "drop function child_del_func()",
    "expected": "DROP FUNCTION child_del_func()"
  },
  {
    "comment": "triggers - Statement 320",
    "query": "create temp table self_ref_trigger ( id int primary key, parent int references self_ref_trigger, data text, nchildren int not null default 0 )",
    "expected": "CREATE TEMPORARY TABLE self_ref_trigger (id INT PRIMARY KEY, parent INT REFERENCES self_ref_trigger, data TEXT, nchildren INT NOT NULL DEFAULT 0)"
  },
  {
    "comment": "triggers - Statement 321",
    "query": "create function self_ref_trigger_ins_func() returns trigger language plpgsql as $$ begin if new.parent is not null then update self_ref_trigger set nchildren = nchildren + 1 where id = new.parent; end if; return new; end; $$",
    "expected": "CREATE FUNCTION self_ref_trigger_ins_func () RETURNS trigger LANGUAGE plpgsql AS $$ begin if new.parent is not null then update self_ref_trigger set nchildren = nchildren + 1 where id = new.parent; end if; return new; end; $$"
  },
  {
    "comment": "triggers - Statement 322",
    "query": "create trigger self_ref_trigger_ins_trig before insert on self_ref_trigger for each row execute procedure self_ref_trigger_ins_func()",
    "expected": "CREATE TRIGGER self_ref_trigger_ins_trig BEFORE INSERT ON self_ref_trigger FOR EACH ROW EXECUTE FUNCTION self_ref_trigger_ins_func()"
  },
  {
    "comment": "triggers - Statement 323",
    "query": "create function self_ref_trigger_del_func() returns trigger language plpgsql as $$ begin if old.parent is not null then update self_ref_trigger set nchildren = nchildren - 1 where id = old.parent; end if; return old; end; $$",
    "expected": "CREATE FUNCTION self_ref_trigger_del_func () RETURNS trigger LANGUAGE plpgsql AS $$ begin if old.parent is not null then update self_ref_trigger set nchildren = nchildren - 1 where id = old.parent; end if; return old; end; $$"
  },
  {
    "comment": "triggers - Statement 324",
    "query": "create trigger self_ref_trigger_del_trig before delete on self_ref_trigger for each row execute procedure self_ref_trigger_del_func()",
    "expected": "CREATE TRIGGER self_ref_trigger_del_trig BEFORE DELETE ON self_ref_trigger FOR EACH ROW EXECUTE FUNCTION self_ref_trigger_del_func()"
  },
  {
    "comment": "triggers - Statement 325",
    "query": "insert into self_ref_trigger values (1, null, 'root')",
    "expected": "INSERT INTO self_ref_trigger VALUES (1, NULL, 'root')"
  },
  {
    "comment": "triggers - Statement 326",
    "query": "insert into self_ref_trigger values (2, 1, 'root child A')",
    "expected": "INSERT INTO self_ref_trigger VALUES (2, 1, 'root child A')"
  },
  {
    "comment": "triggers - Statement 327",
    "query": "insert into self_ref_trigger values (3, 1, 'root child B')",
    "expected": "INSERT INTO self_ref_trigger VALUES (3, 1, 'root child B')"
  },
  {
    "comment": "triggers - Statement 328",
    "query": "insert into self_ref_trigger values (4, 2, 'grandchild 1')",
    "expected": "INSERT INTO self_ref_trigger VALUES (4, 2, 'grandchild 1')"
  },
  {
    "comment": "triggers - Statement 329",
    "query": "insert into self_ref_trigger values (5, 3, 'grandchild 2')",
    "expected": "INSERT INTO self_ref_trigger VALUES (5, 3, 'grandchild 2')"
  },
  {
    "comment": "triggers - Statement 330",
    "query": "update self_ref_trigger set data = 'root!' where id = 1",
    "expected": "UPDATE self_ref_trigger SET data = 'root!' WHERE id = 1"
  },
  {
    "comment": "triggers - Statement 331",
    "query": "select * from self_ref_trigger",
    "expected": "SELECT * FROM self_ref_trigger"
  },
  {
    "comment": "triggers - Statement 332",
    "query": "delete from self_ref_trigger",
    "expected": "DELETE FROM self_ref_trigger"
  },
  {
    "comment": "triggers - Statement 333",
    "query": "drop table self_ref_trigger",
    "expected": "DROP TABLE self_ref_trigger"
  },
  {
    "comment": "triggers - Statement 334",
    "query": "drop function self_ref_trigger_ins_func()",
    "expected": "DROP FUNCTION self_ref_trigger_ins_func()"
  },
  {
    "comment": "triggers - Statement 335",
    "query": "drop function self_ref_trigger_del_func()",
    "expected": "DROP FUNCTION self_ref_trigger_del_func()"
  },
  {
    "comment": "triggers - Statement 336",
    "query": "create table stmt_trig_on_empty_upd (a int)",
    "expected": "CREATE TABLE stmt_trig_on_empty_upd (a INT)"
  },
  {
    "comment": "triggers - Statement 337",
    "query": "create table stmt_trig_on_empty_upd1 () inherits (stmt_trig_on_empty_upd)",
    "expected": "CREATE TABLE stmt_trig_on_empty_upd1 () INHERITS (stmt_trig_on_empty_upd)"
  },
  {
    "comment": "triggers - Statement 338",
    "query": "create function update_stmt_notice() returns trigger as $$ begin raise notice 'updating %', TG_TABLE_NAME; return null; end; $$ language plpgsql",
    "expected": "CREATE FUNCTION update_stmt_notice () RETURNS trigger AS $$ begin raise notice 'updating %', TG_TABLE_NAME; return null; end; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 339",
    "query": "create trigger before_stmt_trigger before update on stmt_trig_on_empty_upd execute procedure update_stmt_notice()",
    "expected": "CREATE TRIGGER before_stmt_trigger BEFORE UPDATE ON stmt_trig_on_empty_upd EXECUTE FUNCTION update_stmt_notice()"
  },
  {
    "comment": "triggers - Statement 340",
    "query": "create trigger before_stmt_trigger before update on stmt_trig_on_empty_upd1 execute procedure update_stmt_notice()",
    "expected": "CREATE TRIGGER before_stmt_trigger BEFORE UPDATE ON stmt_trig_on_empty_upd1 EXECUTE FUNCTION update_stmt_notice()"
  },
  {
    "comment": "triggers - Statement 341",
    "query": "update stmt_trig_on_empty_upd set a = a where false returning a+1 as aa",
    "expected": "UPDATE stmt_trig_on_empty_upd SET a = a WHERE FALSE RETURNING a + 1 AS aa"
  },
  {
    "comment": "triggers - Statement 342",
    "query": "update stmt_trig_on_empty_upd1 set a = a where false returning a+1 as aa",
    "expected": "UPDATE stmt_trig_on_empty_upd1 SET a = a WHERE FALSE RETURNING a + 1 AS aa"
  },
  {
    "comment": "triggers - Statement 343",
    "query": "drop table stmt_trig_on_empty_upd cascade",
    "expected": "DROP TABLE stmt_trig_on_empty_upd CASCADE"
  },
  {
    "comment": "triggers - Statement 344",
    "query": "drop function update_stmt_notice()",
    "expected": "DROP FUNCTION update_stmt_notice()"
  },
  {
    "comment": "triggers - Statement 345",
    "query": "create table trigger_ddl_table ( col1 integer, col2 integer )",
    "expected": "CREATE TABLE trigger_ddl_table (col1 INT, col2 INT)"
  },
  {
    "comment": "triggers - Statement 346",
    "query": "create function trigger_ddl_func() returns trigger as $$ begin alter table trigger_ddl_table add primary key (col1); return new; end$$ language plpgsql",
    "expected": "CREATE FUNCTION trigger_ddl_func () RETURNS trigger AS $$ begin alter table trigger_ddl_table add primary key (col1); return new; end$$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 347",
    "query": "create trigger trigger_ddl_func before insert on trigger_ddl_table for each row execute procedure trigger_ddl_func()",
    "expected": "CREATE TRIGGER trigger_ddl_func BEFORE INSERT ON trigger_ddl_table FOR EACH ROW EXECUTE FUNCTION trigger_ddl_func()"
  },
  {
    "comment": "triggers - Statement 348",
    "query": "insert into trigger_ddl_table values (1, 42)",
    "expected": "INSERT INTO trigger_ddl_table VALUES (1, 42)"
  },
  {
    "comment": "triggers - Statement 349",
    "query": "create or replace function trigger_ddl_func() returns trigger as $$ begin create index on trigger_ddl_table (col2); return new; end$$ language plpgsql",
    "expected": "CREATE OR REPLACE FUNCTION trigger_ddl_func () RETURNS trigger AS $$ begin create index on trigger_ddl_table (col2); return new; end$$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 350",
    "query": "drop table trigger_ddl_table",
    "expected": "DROP TABLE trigger_ddl_table"
  },
  {
    "comment": "triggers - Statement 351",
    "query": "drop function trigger_ddl_func()",
    "expected": "DROP FUNCTION trigger_ddl_func()"
  },
  {
    "comment": "triggers - Statement 352",
    "query": "create table upsert (key int4 primary key, color text)",
    "expected": "CREATE TABLE upsert (\"key\" INT PRIMARY KEY, color TEXT)"
  },
  {
    "comment": "triggers - Statement 353",
    "query": "create function upsert_before_func() returns trigger language plpgsql as $$ begin if (TG_OP = 'UPDATE') then raise warning 'before update (old): %', old.*::text; raise warning 'before update (new): %', new.*::text; elsif (TG_OP = 'INSERT') then raise warning 'before insert (new): %', new.*::text; if new.key % 2 = 0 then new.key := new.key + 1; new.color := new.color || ' trig modified'; raise warning 'before insert (new, modified): %', new.*::text; end if; end if; return new; end; $$",
    "expected": "CREATE FUNCTION upsert_before_func () RETURNS trigger LANGUAGE plpgsql AS $$ begin if (TG_OP = 'UPDATE') then raise warning 'before update (old): %', old.*::text; raise warning 'before update (new): %', new.*::text; elsif (TG_OP = 'INSERT') then raise warning 'before insert (new): %', new.*::text; if new.key % 2 = 0 then new.key := new.key + 1; new.color := new.color || ' trig modified'; raise warning 'before insert (new, modified): %', new.*::text; end if; end if; return new; end; $$"
  },
  {
    "comment": "triggers - Statement 354",
    "query": "create trigger upsert_before_trig before insert or update on upsert for each row execute procedure upsert_before_func()",
    "expected": "CREATE TRIGGER upsert_before_trig BEFORE INSERT OR UPDATE ON upsert FOR EACH ROW EXECUTE FUNCTION upsert_before_func()"
  },
  {
    "comment": "triggers - Statement 355",
    "query": "create function upsert_after_func() returns trigger language plpgsql as $$ begin if (TG_OP = 'UPDATE') then raise warning 'after update (old): %', old.*::text; raise warning 'after update (new): %', new.*::text; elsif (TG_OP = 'INSERT') then raise warning 'after insert (new): %', new.*::text; end if; return null; end; $$",
    "expected": "CREATE FUNCTION upsert_after_func () RETURNS trigger LANGUAGE plpgsql AS $$ begin if (TG_OP = 'UPDATE') then raise warning 'after update (old): %', old.*::text; raise warning 'after update (new): %', new.*::text; elsif (TG_OP = 'INSERT') then raise warning 'after insert (new): %', new.*::text; end if; return null; end; $$"
  },
  {
    "comment": "triggers - Statement 356",
    "query": "create trigger upsert_after_trig after insert or update on upsert for each row execute procedure upsert_after_func()",
    "expected": "CREATE TRIGGER upsert_after_trig AFTER INSERT OR UPDATE ON upsert FOR EACH ROW EXECUTE FUNCTION upsert_after_func()"
  },
  {
    "comment": "triggers - Statement 357",
    "query": "insert into upsert values(1, 'black') on conflict (key) do update set color = 'updated ' || upsert.color",
    "expected": "INSERT INTO upsert VALUES (1, 'black') ON CONFLICT (\"key\") DO UPDATE SET color = 'updated ' || upsert.color"
  },
  {
    "comment": "triggers - Statement 358",
    "query": "insert into upsert values(2, 'red') on conflict (key) do update set color = 'updated ' || upsert.color",
    "expected": "INSERT INTO upsert VALUES (2, 'red') ON CONFLICT (\"key\") DO UPDATE SET color = 'updated ' || upsert.color"
  },
  {
    "comment": "triggers - Statement 359",
    "query": "insert into upsert values(3, 'orange') on conflict (key) do update set color = 'updated ' || upsert.color",
    "expected": "INSERT INTO upsert VALUES (3, 'orange') ON CONFLICT (\"key\") DO UPDATE SET color = 'updated ' || upsert.color"
  },
  {
    "comment": "triggers - Statement 360",
    "query": "insert into upsert values(4, 'green') on conflict (key) do update set color = 'updated ' || upsert.color",
    "expected": "INSERT INTO upsert VALUES (4, 'green') ON CONFLICT (\"key\") DO UPDATE SET color = 'updated ' || upsert.color"
  },
  {
    "comment": "triggers - Statement 361",
    "query": "insert into upsert values(5, 'purple') on conflict (key) do update set color = 'updated ' || upsert.color",
    "expected": "INSERT INTO upsert VALUES (5, 'purple') ON CONFLICT (\"key\") DO UPDATE SET color = 'updated ' || upsert.color"
  },
  {
    "comment": "triggers - Statement 362",
    "query": "insert into upsert values(6, 'white') on conflict (key) do update set color = 'updated ' || upsert.color",
    "expected": "INSERT INTO upsert VALUES (6, 'white') ON CONFLICT (\"key\") DO UPDATE SET color = 'updated ' || upsert.color"
  },
  {
    "comment": "triggers - Statement 363",
    "query": "insert into upsert values(7, 'pink') on conflict (key) do update set color = 'updated ' || upsert.color",
    "expected": "INSERT INTO upsert VALUES (7, 'pink') ON CONFLICT (\"key\") DO UPDATE SET color = 'updated ' || upsert.color"
  },
  {
    "comment": "triggers - Statement 364",
    "query": "insert into upsert values(8, 'yellow') on conflict (key) do update set color = 'updated ' || upsert.color",
    "expected": "INSERT INTO upsert VALUES (8, 'yellow') ON CONFLICT (\"key\") DO UPDATE SET color = 'updated ' || upsert.color"
  },
  {
    "comment": "triggers - Statement 365",
    "query": "select * from upsert",
    "expected": "SELECT * FROM upsert"
  },
  {
    "comment": "triggers - Statement 366",
    "query": "drop table upsert",
    "expected": "DROP TABLE upsert"
  },
  {
    "comment": "triggers - Statement 367",
    "query": "drop function upsert_before_func()",
    "expected": "DROP FUNCTION upsert_before_func()"
  },
  {
    "comment": "triggers - Statement 368",
    "query": "drop function upsert_after_func()",
    "expected": "DROP FUNCTION upsert_after_func()"
  },
  {
    "comment": "triggers - Statement 369",
    "query": "create table my_table (i int)",
    "expected": "CREATE TABLE my_table (i INT)"
  },
  {
    "comment": "triggers - Statement 370",
    "query": "create view my_view as select * from my_table",
    "expected": "CREATE VIEW my_view AS SELECT * FROM my_table"
  },
  {
    "comment": "triggers - Statement 371",
    "query": "create function my_trigger_function() returns trigger as $$ begin end; $$ language plpgsql",
    "expected": "CREATE FUNCTION my_trigger_function () RETURNS trigger AS $$ begin end; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 372",
    "query": "create trigger my_trigger after update on my_view referencing old table as old_table for each statement execute procedure my_trigger_function()",
    "expected": "CREATE TRIGGER my_trigger AFTER UPDATE ON my_view REFERENCING OLD TABLE AS old_table EXECUTE FUNCTION my_trigger_function()"
  },
  {
    "comment": "triggers - Statement 373",
    "query": "drop function my_trigger_function()",
    "expected": "DROP FUNCTION my_trigger_function()"
  },
  {
    "comment": "triggers - Statement 374",
    "query": "drop view my_view",
    "expected": "DROP VIEW my_view"
  },
  {
    "comment": "triggers - Statement 375",
    "query": "drop table my_table",
    "expected": "DROP TABLE my_table"
  },
  {
    "comment": "triggers - Statement 376",
    "query": "create table parted_trig (a int) partition by list (a)",
    "expected": "CREATE TABLE parted_trig (a INT) PARTITION BY list (a)"
  },
  {
    "comment": "triggers - Statement 377",
    "query": "create function trigger_nothing() returns trigger language plpgsql as $$ begin end; $$",
    "expected": "CREATE FUNCTION trigger_nothing () RETURNS trigger LANGUAGE plpgsql AS $$ begin end; $$"
  },
  {
    "comment": "triggers - Statement 378",
    "query": "create trigger failed instead of update on parted_trig for each row execute procedure trigger_nothing()",
    "expected": "CREATE TRIGGER failed INSTEAD OF UPDATE ON parted_trig FOR EACH ROW EXECUTE FUNCTION trigger_nothing()"
  },
  {
    "comment": "triggers - Statement 379",
    "query": "create trigger failed after update on parted_trig referencing old table as old_table for each row execute procedure trigger_nothing()",
    "expected": "CREATE TRIGGER failed AFTER UPDATE ON parted_trig REFERENCING OLD TABLE AS old_table FOR EACH ROW EXECUTE FUNCTION trigger_nothing()"
  },
  {
    "comment": "triggers - Statement 380",
    "query": "drop table parted_trig",
    "expected": "DROP TABLE parted_trig"
  },
  {
    "comment": "triggers - Statement 381",
    "query": "create table trigpart (a int, b int) partition by range (a)",
    "expected": "CREATE TABLE trigpart (a INT, b INT) PARTITION BY range (a)"
  },
  {
    "comment": "triggers - Statement 382",
    "query": "create table trigpart1 partition of trigpart for values from (0) to (1000)",
    "expected": "CREATE TABLE trigpart1 PARTITION OF trigpart FOR VALUES FROM (0) TO (1000)"
  },
  {
    "comment": "triggers - Statement 383",
    "query": "create trigger trg1 after insert on trigpart for each row execute procedure trigger_nothing()",
    "expected": "CREATE TRIGGER trg1 AFTER INSERT ON trigpart FOR EACH ROW EXECUTE FUNCTION trigger_nothing()"
  },
  {
    "comment": "triggers - Statement 384",
    "query": "create table trigpart2 partition of trigpart for values from (1000) to (2000)",
    "expected": "CREATE TABLE trigpart2 PARTITION OF trigpart FOR VALUES FROM (1000) TO (2000)"
  },
  {
    "comment": "triggers - Statement 385",
    "query": "create table trigpart3 (like trigpart)",
    "expected": "CREATE TABLE trigpart3 (LIKE trigpart)"
  },
  {
    "comment": "triggers - Statement 386",
    "query": "alter table trigpart attach partition trigpart3 for values from (2000) to (3000)",
    "expected": "ALTER TABLE trigpart ATTACH PARTITION trigpart3 FOR VALUES FROM (2000) TO (3000)"
  },
  {
    "comment": "triggers - Statement 387",
    "query": "create table trigpart4 partition of trigpart for values from (3000) to (4000) partition by range (a)",
    "expected": "CREATE TABLE trigpart4 PARTITION OF trigpart FOR VALUES FROM (3000) TO (4000) PARTITION BY range (a)"
  },
  {
    "comment": "triggers - Statement 388",
    "query": "create table trigpart41 partition of trigpart4 for values from (3000) to (3500)",
    "expected": "CREATE TABLE trigpart41 PARTITION OF trigpart4 FOR VALUES FROM (3000) TO (3500)"
  },
  {
    "comment": "triggers - Statement 389",
    "query": "create table trigpart42 (like trigpart)",
    "expected": "CREATE TABLE trigpart42 (LIKE trigpart)"
  },
  {
    "comment": "triggers - Statement 390",
    "query": "alter table trigpart4 attach partition trigpart42 for values from (3500) to (4000)",
    "expected": "ALTER TABLE trigpart4 ATTACH PARTITION trigpart42 FOR VALUES FROM (3500) TO (4000)"
  },
  {
    "comment": "triggers - Statement 391",
    "query": "select tgrelid::regclass, tgname, tgfoid::regproc from pg_trigger where tgrelid::regclass::text like 'trigpart%' order by tgrelid::regclass::text",
    "expected": "SELECT CAST(tgrelid AS regclass), tgname, CAST(tgfoid AS regproc) FROM pg_trigger WHERE CAST(CAST(tgrelid AS regclass) AS TEXT) LIKE 'trigpart%' ORDER BY CAST(CAST(tgrelid AS regclass) AS TEXT)"
  },
  {
    "comment": "triggers - Statement 392",
    "query": "drop trigger trg1 on trigpart1",
    "expected": "DROP TRIGGER trg1 ON trigpart1"
  },
  {
    "comment": "triggers - Statement 393",
    "query": "drop trigger trg1 on trigpart2",
    "expected": "DROP TRIGGER trg1 ON trigpart2"
  },
  {
    "comment": "triggers - Statement 394",
    "query": "drop trigger trg1 on trigpart3",
    "expected": "DROP TRIGGER trg1 ON trigpart3"
  },
  {
    "comment": "triggers - Statement 395",
    "query": "drop table trigpart2",
    "expected": "DROP TABLE trigpart2"
  },
  {
    "comment": "triggers - Statement 396",
    "query": "drop trigger trg1 on trigpart",
    "expected": "DROP TRIGGER trg1 ON trigpart"
  },
  {
    "comment": "triggers - Statement 397",
    "query": "alter table trigpart detach partition trigpart4",
    "expected": "ALTER TABLE trigpart DETACH PARTITION trigpart4"
  },
  {
    "comment": "triggers - Statement 398",
    "query": "drop trigger trg1 on trigpart41",
    "expected": "DROP TRIGGER trg1 ON trigpart41"
  },
  {
    "comment": "triggers - Statement 399",
    "query": "drop table trigpart4",
    "expected": "DROP TABLE trigpart4"
  },
  {
    "comment": "triggers - Statement 400",
    "query": "alter table trigpart detach partition trigpart3",
    "expected": "ALTER TABLE trigpart DETACH PARTITION trigpart3"
  },
  {
    "comment": "triggers - Statement 401",
    "query": "drop table trigpart3",
    "expected": "DROP TABLE trigpart3"
  },
  {
    "comment": "triggers - Statement 402",
    "query": "select tgrelid::regclass::text, tgname, tgfoid::regproc, tgenabled, tgisinternal from pg_trigger where tgname ~ '^trg1' order by 1",
    "expected": "SELECT CAST(CAST(tgrelid AS regclass) AS TEXT), tgname, CAST(tgfoid AS regproc), tgenabled, tgisinternal FROM pg_trigger WHERE tgname ~ '^trg1' ORDER BY 1"
  },
  {
    "comment": "triggers - Statement 403",
    "query": "create trigger trg1 after insert on trigpart3 for each row execute procedure trigger_nothing()",
    "expected": "CREATE TRIGGER trg1 AFTER INSERT ON trigpart3 FOR EACH ROW EXECUTE FUNCTION trigger_nothing()"
  },
  {
    "comment": "triggers - Statement 404",
    "query": "create trigger samename after delete on trigpart execute function trigger_nothing()",
    "expected": "CREATE TRIGGER samename AFTER DELETE ON trigpart EXECUTE FUNCTION trigger_nothing()"
  },
  {
    "comment": "triggers - Statement 405",
    "query": "create trigger samename after delete on trigpart1 execute function trigger_nothing()",
    "expected": "CREATE TRIGGER samename AFTER DELETE ON trigpart1 EXECUTE FUNCTION trigger_nothing()"
  },
  {
    "comment": "triggers - Statement 406",
    "query": "drop function trigger_nothing()",
    "expected": "DROP FUNCTION trigger_nothing()"
  },
  {
    "comment": "triggers - Statement 407",
    "query": "create table parted_stmt_trig (a int) partition by list (a)",
    "expected": "CREATE TABLE parted_stmt_trig (a INT) PARTITION BY list (a)"
  },
  {
    "comment": "triggers - Statement 408",
    "query": "create table parted_stmt_trig1 partition of parted_stmt_trig for values in (1)",
    "expected": "CREATE TABLE parted_stmt_trig1 PARTITION OF parted_stmt_trig FOR VALUES IN (1)"
  },
  {
    "comment": "triggers - Statement 409",
    "query": "create table parted_stmt_trig2 partition of parted_stmt_trig for values in (2)",
    "expected": "CREATE TABLE parted_stmt_trig2 PARTITION OF parted_stmt_trig FOR VALUES IN (2)"
  },
  {
    "comment": "triggers - Statement 410",
    "query": "create table parted2_stmt_trig (a int) partition by list (a)",
    "expected": "CREATE TABLE parted2_stmt_trig (a INT) PARTITION BY list (a)"
  },
  {
    "comment": "triggers - Statement 411",
    "query": "create table parted2_stmt_trig1 partition of parted2_stmt_trig for values in (1)",
    "expected": "CREATE TABLE parted2_stmt_trig1 PARTITION OF parted2_stmt_trig FOR VALUES IN (1)"
  },
  {
    "comment": "triggers - Statement 412",
    "query": "create table parted2_stmt_trig2 partition of parted2_stmt_trig for values in (2)",
    "expected": "CREATE TABLE parted2_stmt_trig2 PARTITION OF parted2_stmt_trig FOR VALUES IN (2)"
  },
  {
    "comment": "triggers - Statement 413",
    "query": "create or replace function trigger_notice() returns trigger as $$ begin raise notice 'trigger % on % % % for %', TG_NAME, TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL; if TG_LEVEL = 'ROW' then return NEW; end if; return null; end; $$ language plpgsql",
    "expected": "CREATE OR REPLACE FUNCTION trigger_notice () RETURNS trigger AS $$ begin raise notice 'trigger % on % % % for %', TG_NAME, TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL; if TG_LEVEL = 'ROW' then return NEW; end if; return null; end; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 414",
    "query": "create trigger trig_ins_before before insert on parted_stmt_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_ins_before BEFORE INSERT ON parted_stmt_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 415",
    "query": "create trigger trig_ins_after after insert on parted_stmt_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_ins_after AFTER INSERT ON parted_stmt_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 416",
    "query": "create trigger trig_upd_before before update on parted_stmt_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_upd_before BEFORE UPDATE ON parted_stmt_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 417",
    "query": "create trigger trig_upd_after after update on parted_stmt_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_upd_after AFTER UPDATE ON parted_stmt_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 418",
    "query": "create trigger trig_del_before before delete on parted_stmt_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_del_before BEFORE DELETE ON parted_stmt_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 419",
    "query": "create trigger trig_del_after after delete on parted_stmt_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_del_after AFTER DELETE ON parted_stmt_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 420",
    "query": "create trigger trig_ins_after_parent after insert on parted_stmt_trig for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_ins_after_parent AFTER INSERT ON parted_stmt_trig FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 421",
    "query": "create trigger trig_upd_after_parent after update on parted_stmt_trig for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_upd_after_parent AFTER UPDATE ON parted_stmt_trig FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 422",
    "query": "create trigger trig_del_after_parent after delete on parted_stmt_trig for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_del_after_parent AFTER DELETE ON parted_stmt_trig FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 423",
    "query": "create trigger trig_ins_before_child before insert on parted_stmt_trig1 for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_ins_before_child BEFORE INSERT ON parted_stmt_trig1 FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 424",
    "query": "create trigger trig_ins_after_child after insert on parted_stmt_trig1 for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_ins_after_child AFTER INSERT ON parted_stmt_trig1 FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 425",
    "query": "create trigger trig_upd_before_child before update on parted_stmt_trig1 for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_upd_before_child BEFORE UPDATE ON parted_stmt_trig1 FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 426",
    "query": "create trigger trig_upd_after_child after update on parted_stmt_trig1 for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_upd_after_child AFTER UPDATE ON parted_stmt_trig1 FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 427",
    "query": "create trigger trig_del_before_child before delete on parted_stmt_trig1 for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_del_before_child BEFORE DELETE ON parted_stmt_trig1 FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 428",
    "query": "create trigger trig_del_after_child after delete on parted_stmt_trig1 for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_del_after_child AFTER DELETE ON parted_stmt_trig1 FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 429",
    "query": "create trigger trig_ins_before_3 before insert on parted2_stmt_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_ins_before_3 BEFORE INSERT ON parted2_stmt_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 430",
    "query": "create trigger trig_ins_after_3 after insert on parted2_stmt_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_ins_after_3 AFTER INSERT ON parted2_stmt_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 431",
    "query": "create trigger trig_upd_before_3 before update on parted2_stmt_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_upd_before_3 BEFORE UPDATE ON parted2_stmt_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 432",
    "query": "create trigger trig_upd_after_3 after update on parted2_stmt_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_upd_after_3 AFTER UPDATE ON parted2_stmt_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 433",
    "query": "create trigger trig_del_before_3 before delete on parted2_stmt_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_del_before_3 BEFORE DELETE ON parted2_stmt_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 434",
    "query": "create trigger trig_del_after_3 after delete on parted2_stmt_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER trig_del_after_3 AFTER DELETE ON parted2_stmt_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 435",
    "query": "with ins (a) as ( insert into parted2_stmt_trig values (1), (2) returning a ) insert into parted_stmt_trig select a from ins returning tableoid::regclass, a",
    "expected": "WITH ins(a) AS (INSERT INTO parted2_stmt_trig VALUES (1), (2) RETURNING a) INSERT INTO parted_stmt_trig SELECT a FROM ins RETURNING CAST(tableoid AS regclass), a"
  },
  {
    "comment": "triggers - Statement 436",
    "query": "with upd as ( update parted2_stmt_trig set a = a ) update parted_stmt_trig  set a = a",
    "expected": "WITH upd AS (UPDATE parted2_stmt_trig SET a = a) UPDATE parted_stmt_trig SET a = a"
  },
  {
    "comment": "triggers - Statement 437",
    "query": "delete from parted_stmt_trig",
    "expected": "DELETE FROM parted_stmt_trig"
  },
  {
    "comment": "triggers - Statement 438",
    "query": "copy parted_stmt_trig(a) from stdin",
    "expected": "COPY parted_stmt_trig (a) FROM STDIN"
  },
  {
    "comment": "triggers - Statement 439",
    "query": "copy parted_stmt_trig1(a) from stdin",
    "expected": "COPY parted_stmt_trig1 (a) FROM STDIN"
  },
  {
    "comment": "triggers - Statement 440",
    "query": "alter table parted_stmt_trig disable trigger trig_ins_after_parent",
    "expected": "ALTER TABLE parted_stmt_trig DISABLE TRIGGER trig_ins_after_parent"
  },
  {
    "comment": "triggers - Statement 441",
    "query": "insert into parted_stmt_trig values (1)",
    "expected": "INSERT INTO parted_stmt_trig VALUES (1)"
  },
  {
    "comment": "triggers - Statement 442",
    "query": "alter table parted_stmt_trig enable trigger trig_ins_after_parent",
    "expected": "ALTER TABLE parted_stmt_trig ENABLE TRIGGER trig_ins_after_parent"
  },
  {
    "comment": "triggers - Statement 443",
    "query": "drop table parted_stmt_trig, parted2_stmt_trig",
    "expected": "DROP TABLE parted_stmt_trig, parted2_stmt_trig"
  },
  {
    "comment": "triggers - Statement 444",
    "query": "create table parted_trig (a int) partition by range (a)",
    "expected": "CREATE TABLE parted_trig (a INT) PARTITION BY range (a)"
  },
  {
    "comment": "triggers - Statement 445",
    "query": "create table parted_trig_1 partition of parted_trig for values from (0) to (1000) partition by range (a)",
    "expected": "CREATE TABLE parted_trig_1 PARTITION OF parted_trig FOR VALUES FROM (0) TO (1000) PARTITION BY range (a)"
  },
  {
    "comment": "triggers - Statement 446",
    "query": "create table parted_trig_1_1 partition of parted_trig_1 for values from (0) to (100)",
    "expected": "CREATE TABLE parted_trig_1_1 PARTITION OF parted_trig_1 FOR VALUES FROM (0) TO (100)"
  },
  {
    "comment": "triggers - Statement 447",
    "query": "create table parted_trig_2 partition of parted_trig for values from (1000) to (2000)",
    "expected": "CREATE TABLE parted_trig_2 PARTITION OF parted_trig FOR VALUES FROM (1000) TO (2000)"
  },
  {
    "comment": "triggers - Statement 448",
    "query": "create trigger zzz after insert on parted_trig for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER zzz AFTER INSERT ON parted_trig FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 449",
    "query": "create trigger mmm after insert on parted_trig_1_1 for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER mmm AFTER INSERT ON parted_trig_1_1 FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 450",
    "query": "create trigger aaa after insert on parted_trig_1 for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER aaa AFTER INSERT ON parted_trig_1 FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 451",
    "query": "create trigger bbb after insert on parted_trig for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER bbb AFTER INSERT ON parted_trig FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 452",
    "query": "create trigger qqq after insert on parted_trig_1_1 for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER qqq AFTER INSERT ON parted_trig_1_1 FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 453",
    "query": "insert into parted_trig values (50), (1500)",
    "expected": "INSERT INTO parted_trig VALUES (50), (1500)"
  },
  {
    "comment": "triggers - Statement 454",
    "query": "create table parted_trig1 partition of parted_trig for values in (1)",
    "expected": "CREATE TABLE parted_trig1 PARTITION OF parted_trig FOR VALUES IN (1)"
  },
  {
    "comment": "triggers - Statement 455",
    "query": "create table parted_trig2 partition of parted_trig for values in (2)",
    "expected": "CREATE TABLE parted_trig2 PARTITION OF parted_trig FOR VALUES IN (2)"
  },
  {
    "comment": "triggers - Statement 456",
    "query": "insert into parted_trig values (1)",
    "expected": "INSERT INTO parted_trig VALUES (1)"
  },
  {
    "comment": "triggers - Statement 457",
    "query": "create or replace function trigger_notice() returns trigger as $$ begin raise notice 'trigger % on % % % for %', TG_NAME, TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL; if TG_LEVEL = 'ROW' then if TG_OP = 'DELETE' then return OLD; else return NEW; end if; end if; return null; end; $$ language plpgsql",
    "expected": "CREATE OR REPLACE FUNCTION trigger_notice () RETURNS trigger AS $$ begin raise notice 'trigger % on % % % for %', TG_NAME, TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL; if TG_LEVEL = 'ROW' then if TG_OP = 'DELETE' then return OLD; else return NEW; end if; end if; return null; end; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 458",
    "query": "create trigger parted_trig_before_stmt before insert or update or delete on parted_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER parted_trig_before_stmt BEFORE INSERT OR UPDATE OR DELETE ON parted_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 459",
    "query": "create trigger parted_trig_before_row before insert or update or delete on parted_trig for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER parted_trig_before_row BEFORE INSERT OR UPDATE OR DELETE ON parted_trig FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 460",
    "query": "create trigger parted_trig_after_row after insert or update or delete on parted_trig for each row execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER parted_trig_after_row AFTER INSERT OR UPDATE OR DELETE ON parted_trig FOR EACH ROW EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 461",
    "query": "create trigger parted_trig_after_stmt after insert or update or delete on parted_trig for each statement execute procedure trigger_notice()",
    "expected": "CREATE TRIGGER parted_trig_after_stmt AFTER INSERT OR UPDATE OR DELETE ON parted_trig EXECUTE FUNCTION trigger_notice()"
  },
  {
    "comment": "triggers - Statement 462",
    "query": "update parted_trig set a = 2 where a = 1",
    "expected": "UPDATE parted_trig SET a = 2 WHERE a = 1"
  },
  {
    "comment": "triggers - Statement 463",
    "query": "merge into parted_trig using (select 1) as ss on true when matched and a = 2 then update set a = 1",
    "expected": "MERGE INTO parted_trig USING (SELECT 1) AS ss ON TRUE WHEN MATCHED AND a = 2 THEN UPDATE SET a = 1"
  },
  {
    "comment": "triggers - Statement 464",
    "query": "create or replace function trigger_notice() returns trigger as $$ declare arg1 text = TG_ARGV[0]; arg2 integer = TG_ARGV[1]; begin raise notice 'trigger % on % % % for % args % %', TG_NAME, TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL, arg1, arg2; return null; end; $$ language plpgsql",
    "expected": "CREATE OR REPLACE FUNCTION trigger_notice () RETURNS trigger AS $$ declare arg1 text = TG_ARGV[0]; arg2 integer = TG_ARGV[1]; begin raise notice 'trigger % on % % % for % args % %', TG_NAME, TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL, arg1, arg2; return null; end; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 465",
    "query": "create trigger aaa after insert on parted_trig for each row execute procedure trigger_notice('quirky', 1)",
    "expected": "CREATE TRIGGER aaa AFTER INSERT ON parted_trig FOR EACH ROW EXECUTE FUNCTION trigger_notice('quirky', 1)"
  },
  {
    "comment": "triggers - Statement 466",
    "query": "create table parted_trig3 (like parted_trig)",
    "expected": "CREATE TABLE parted_trig3 (LIKE parted_trig)"
  },
  {
    "comment": "triggers - Statement 467",
    "query": "alter table parted_trig attach partition parted_trig3 for values in (3)",
    "expected": "ALTER TABLE parted_trig ATTACH PARTITION parted_trig3 FOR VALUES IN (3)"
  },
  {
    "comment": "triggers - Statement 468",
    "query": "insert into parted_trig values (1), (2), (3)",
    "expected": "INSERT INTO parted_trig VALUES (1), (2), (3)"
  },
  {
    "comment": "triggers - Statement 469",
    "query": "create function bark(text) returns bool language plpgsql immutable as $$ begin raise notice '% \u003c- woof!', $1; return true; end; $$",
    "expected": "CREATE FUNCTION bark (TEXT) RETURNS BOOLEAN LANGUAGE plpgsql IMMUTABLE AS $$ begin raise notice '% \u003c- woof!', $1; return true; end; $$"
  },
  {
    "comment": "triggers - Statement 470",
    "query": "create or replace function trigger_notice_ab() returns trigger as $$ begin raise notice 'trigger % on % % % for %: (a,b)=(%,%)', TG_NAME, TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL, NEW.a, NEW.b; if TG_LEVEL = 'ROW' then return NEW; end if; return null; end; $$ language plpgsql",
    "expected": "CREATE OR REPLACE FUNCTION trigger_notice_ab () RETURNS trigger AS $$ begin raise notice 'trigger % on % % % for %: (a,b)=(%,%)', TG_NAME, TG_TABLE_NAME, TG_WHEN, TG_OP, TG_LEVEL, NEW.a, NEW.b; if TG_LEVEL = 'ROW' then return NEW; end if; return null; end; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 471",
    "query": "create table parted_irreg_ancestor (fd text, b text, fd2 int, fd3 int, a int) partition by range (b)",
    "expected": "CREATE TABLE parted_irreg_ancestor (fd TEXT, b TEXT, fd2 INT, fd3 INT, a INT) PARTITION BY range (b)"
  },
  {
    "comment": "triggers - Statement 472",
    "query": "alter table parted_irreg_ancestor drop column fd, drop column fd2, drop column fd3",
    "expected": "ALTER TABLE parted_irreg_ancestor DROP COLUMN fd, DROP COLUMN fd2, DROP COLUMN fd3"
  },
  {
    "comment": "triggers - Statement 473",
    "query": "create table parted_irreg (fd int, a int, fd2 int, b text) partition by range (b)",
    "expected": "CREATE TABLE parted_irreg (fd INT, a INT, fd2 INT, b TEXT) PARTITION BY range (b)"
  },
  {
    "comment": "triggers - Statement 474",
    "query": "alter table parted_irreg drop column fd, drop column fd2",
    "expected": "ALTER TABLE parted_irreg DROP COLUMN fd, DROP COLUMN fd2"
  },
  {
    "comment": "triggers - Statement 475",
    "query": "alter table parted_irreg_ancestor attach partition parted_irreg for values from ('aaaa') to ('zzzz')",
    "expected": "ALTER TABLE parted_irreg_ancestor ATTACH PARTITION parted_irreg FOR VALUES FROM ('aaaa') TO ('zzzz')"
  },
  {
    "comment": "triggers - Statement 476",
    "query": "create table parted1_irreg (b text, fd int, a int)",
    "expected": "CREATE TABLE parted1_irreg (b TEXT, fd INT, a INT)"
  },
  {
    "comment": "triggers - Statement 477",
    "query": "alter table parted1_irreg drop column fd",
    "expected": "ALTER TABLE parted1_irreg DROP COLUMN fd"
  },
  {
    "comment": "triggers - Statement 478",
    "query": "alter table parted_irreg attach partition parted1_irreg for values from ('aaaa') to ('bbbb')",
    "expected": "ALTER TABLE parted_irreg ATTACH PARTITION parted1_irreg FOR VALUES FROM ('aaaa') TO ('bbbb')"
  },
  {
    "comment": "triggers - Statement 479",
    "query": "create trigger parted_trig after insert on parted_irreg for each row execute procedure trigger_notice_ab()",
    "expected": "CREATE TRIGGER parted_trig AFTER INSERT ON parted_irreg FOR EACH ROW EXECUTE FUNCTION trigger_notice_ab()"
  },
  {
    "comment": "triggers - Statement 480",
    "query": "create trigger parted_trig_odd after insert on parted_irreg for each row when (bark(new.b) AND new.a % 2 = 1) execute procedure trigger_notice_ab()",
    "expected": "CREATE TRIGGER parted_trig_odd AFTER INSERT ON parted_irreg FOR EACH ROW WHEN (bark(new.b) AND new.a % 2 = 1) EXECUTE FUNCTION trigger_notice_ab()"
  },
  {
    "comment": "triggers - Statement 481",
    "query": "insert into parted_irreg values (1, 'aardvark'), (2, 'aanimals')",
    "expected": "INSERT INTO parted_irreg VALUES (1, 'aardvark'), (2, 'aanimals')"
  },
  {
    "comment": "triggers - Statement 482",
    "query": "insert into parted1_irreg values ('aardwolf', 2)",
    "expected": "INSERT INTO parted1_irreg VALUES ('aardwolf', 2)"
  },
  {
    "comment": "triggers - Statement 483",
    "query": "insert into parted_irreg_ancestor values ('aasvogel', 3)",
    "expected": "INSERT INTO parted_irreg_ancestor VALUES ('aasvogel', 3)"
  },
  {
    "comment": "triggers - Statement 484",
    "query": "drop table parted_irreg_ancestor",
    "expected": "DROP TABLE parted_irreg_ancestor"
  },
  {
    "comment": "triggers - Statement 485",
    "query": "create table parted (a int, b int, c text) partition by list (a)",
    "expected": "CREATE TABLE parted (a INT, b INT, c TEXT) PARTITION BY list (a)"
  },
  {
    "comment": "triggers - Statement 486",
    "query": "create table parted_1 partition of parted for values in (1) partition by list (b)",
    "expected": "CREATE TABLE parted_1 PARTITION OF parted FOR VALUES IN (1) PARTITION BY list (b)"
  },
  {
    "comment": "triggers - Statement 487",
    "query": "create table parted_1_1 partition of parted_1 for values in (1)",
    "expected": "CREATE TABLE parted_1_1 PARTITION OF parted_1 FOR VALUES IN (1)"
  },
  {
    "comment": "triggers - Statement 488",
    "query": "create function parted_trigfunc() returns trigger language plpgsql as $$ begin new.a = new.a + 1; return new; end; $$",
    "expected": "CREATE FUNCTION parted_trigfunc () RETURNS trigger LANGUAGE plpgsql AS $$ begin new.a = new.a + 1; return new; end; $$"
  },
  {
    "comment": "triggers - Statement 489",
    "query": "insert into parted values (1, 1, 'uno uno v1')",
    "expected": "INSERT INTO parted VALUES (1, 1, 'uno uno v1')"
  },
  {
    "comment": "triggers - Statement 490",
    "query": "create trigger t before insert or update or delete on parted for each row execute function parted_trigfunc()",
    "expected": "CREATE TRIGGER t BEFORE INSERT OR UPDATE OR DELETE ON parted FOR EACH ROW EXECUTE FUNCTION parted_trigfunc()"
  },
  {
    "comment": "triggers - Statement 491",
    "query": "insert into parted values (1, 1, 'uno uno v2')",
    "expected": "INSERT INTO parted VALUES (1, 1, 'uno uno v2')"
  },
  {
    "comment": "triggers - Statement 492",
    "query": "update parted set c = c || 'v3'",
    "expected": "UPDATE parted SET c = c || 'v3'"
  },
  {
    "comment": "triggers - Statement 493",
    "query": "create or replace function parted_trigfunc() returns trigger language plpgsql as $$ begin new.b = new.b + 1; return new; end; $$",
    "expected": "CREATE OR REPLACE FUNCTION parted_trigfunc () RETURNS trigger LANGUAGE plpgsql AS $$ begin new.b = new.b + 1; return new; end; $$"
  },
  {
    "comment": "triggers - Statement 494",
    "query": "insert into parted values (1, 1, 'uno uno v4')",
    "expected": "INSERT INTO parted VALUES (1, 1, 'uno uno v4')"
  },
  {
    "comment": "triggers - Statement 495",
    "query": "update parted set c = c || 'v5'",
    "expected": "UPDATE parted SET c = c || 'v5'"
  },
  {
    "comment": "triggers - Statement 496",
    "query": "create or replace function parted_trigfunc() returns trigger language plpgsql as $$ begin new.c = new.c || ' did '|| TG_OP; return new; end; $$",
    "expected": "CREATE OR REPLACE FUNCTION parted_trigfunc () RETURNS trigger LANGUAGE plpgsql AS $$ begin new.c = new.c || ' did '|| TG_OP; return new; end; $$"
  },
  {
    "comment": "triggers - Statement 497",
    "query": "insert into parted values (1, 1, 'uno uno')",
    "expected": "INSERT INTO parted VALUES (1, 1, 'uno uno')"
  },
  {
    "comment": "triggers - Statement 498",
    "query": "update parted set c = c || ' v6'",
    "expected": "UPDATE parted SET c = c || ' v6'"
  },
  {
    "comment": "triggers - Statement 499",
    "query": "select tableoid::regclass, * from parted",
    "expected": "SELECT CAST(tableoid AS regclass), * FROM parted"
  },
  {
    "comment": "triggers - Statement 500",
    "query": "truncate table parted",
    "expected": "TRUNCATE TABLE parted CONTINUE IDENTITY RESTRICT"
  },
  {
    "comment": "triggers - Statement 501",
    "query": "create table parted_2 partition of parted for values in (2)",
    "expected": "CREATE TABLE parted_2 PARTITION OF parted FOR VALUES IN (2)"
  },
  {
    "comment": "triggers - Statement 502",
    "query": "insert into parted values (1, 1, 'uno uno v5')",
    "expected": "INSERT INTO parted VALUES (1, 1, 'uno uno v5')"
  },
  {
    "comment": "triggers - Statement 503",
    "query": "update parted set a = 2",
    "expected": "UPDATE parted SET a = 2"
  },
  {
    "comment": "triggers - Statement 504",
    "query": "create or replace function parted_trigfunc2() returns trigger language plpgsql as $$ begin new.a = new.a + 1; return new; end; $$",
    "expected": "CREATE OR REPLACE FUNCTION parted_trigfunc2 () RETURNS trigger LANGUAGE plpgsql AS $$ begin new.a = new.a + 1; return new; end; $$"
  },
  {
    "comment": "triggers - Statement 505",
    "query": "create trigger t2 before update on parted for each row execute function parted_trigfunc2()",
    "expected": "CREATE TRIGGER t2 BEFORE UPDATE ON parted FOR EACH ROW EXECUTE FUNCTION parted_trigfunc2()"
  },
  {
    "comment": "triggers - Statement 506",
    "query": "insert into parted values (1, 1, 'uno uno v6')",
    "expected": "INSERT INTO parted VALUES (1, 1, 'uno uno v6')"
  },
  {
    "comment": "triggers - Statement 507",
    "query": "create table parted_3 partition of parted for values in (3)",
    "expected": "CREATE TABLE parted_3 PARTITION OF parted FOR VALUES IN (3)"
  },
  {
    "comment": "triggers - Statement 508",
    "query": "update parted set a = a + 1",
    "expected": "UPDATE parted SET a = a + 1"
  },
  {
    "comment": "triggers - Statement 509",
    "query": "update parted set a = 0",
    "expected": "UPDATE parted SET a = 0"
  },
  {
    "comment": "triggers - Statement 510",
    "query": "drop table parted",
    "expected": "DROP TABLE parted"
  },
  {
    "comment": "triggers - Statement 511",
    "query": "create table parted (a int, b int, c text) partition by list ((a + b))",
    "expected": "CREATE TABLE parted (a INT, b INT, c TEXT) PARTITION BY list ((a + b))"
  },
  {
    "comment": "triggers - Statement 512",
    "query": "create or replace function parted_trigfunc() returns trigger language plpgsql as $$ begin new.a = new.a + new.b; return new; end; $$",
    "expected": "CREATE OR REPLACE FUNCTION parted_trigfunc () RETURNS trigger LANGUAGE plpgsql AS $$ begin new.a = new.a + new.b; return new; end; $$"
  },
  {
    "comment": "triggers - Statement 513",
    "query": "create table parted_1 partition of parted for values in (1, 2)",
    "expected": "CREATE TABLE parted_1 PARTITION OF parted FOR VALUES IN (1, 2)"
  },
  {
    "comment": "triggers - Statement 514",
    "query": "create table parted_2 partition of parted for values in (3, 4)",
    "expected": "CREATE TABLE parted_2 PARTITION OF parted FOR VALUES IN (3, 4)"
  },
  {
    "comment": "triggers - Statement 515",
    "query": "create trigger t before insert or update on parted for each row execute function parted_trigfunc()",
    "expected": "CREATE TRIGGER t BEFORE INSERT OR UPDATE ON parted FOR EACH ROW EXECUTE FUNCTION parted_trigfunc()"
  },
  {
    "comment": "triggers - Statement 516",
    "query": "insert into parted values (0, 1, 'zero win')",
    "expected": "INSERT INTO parted VALUES (0, 1, 'zero win')"
  },
  {
    "comment": "triggers - Statement 517",
    "query": "insert into parted values (1, 1, 'one fail')",
    "expected": "INSERT INTO parted VALUES (1, 1, 'one fail')"
  },
  {
    "comment": "triggers - Statement 518",
    "query": "insert into parted values (1, 2, 'two fail')",
    "expected": "INSERT INTO parted VALUES (1, 2, 'two fail')"
  },
  {
    "comment": "triggers - Statement 519",
    "query": "select * from parted",
    "expected": "SELECT * FROM parted"
  },
  {
    "comment": "triggers - Statement 520",
    "query": "drop function parted_trigfunc()",
    "expected": "DROP FUNCTION parted_trigfunc()"
  },
  {
    "comment": "triggers - Statement 521",
    "query": "create table parted_constr_ancestor (a int, b text) partition by range (b)",
    "expected": "CREATE TABLE parted_constr_ancestor (a INT, b TEXT) PARTITION BY range (b)"
  },
  {
    "comment": "triggers - Statement 522",
    "query": "create table parted_constr (a int, b text) partition by range (b)",
    "expected": "CREATE TABLE parted_constr (a INT, b TEXT) PARTITION BY range (b)"
  },
  {
    "comment": "triggers - Statement 523",
    "query": "alter table parted_constr_ancestor attach partition parted_constr for values from ('aaaa') to ('zzzz')",
    "expected": "ALTER TABLE parted_constr_ancestor ATTACH PARTITION parted_constr FOR VALUES FROM ('aaaa') TO ('zzzz')"
  },
  {
    "comment": "triggers - Statement 524",
    "query": "create table parted1_constr (a int, b text)",
    "expected": "CREATE TABLE parted1_constr (a INT, b TEXT)"
  },
  {
    "comment": "triggers - Statement 525",
    "query": "alter table parted_constr attach partition parted1_constr for values from ('aaaa') to ('bbbb')",
    "expected": "ALTER TABLE parted_constr ATTACH PARTITION parted1_constr FOR VALUES FROM ('aaaa') TO ('bbbb')"
  },
  {
    "comment": "triggers - Statement 526",
    "query": "create constraint trigger parted_trig after insert on parted_constr_ancestor deferrable for each row execute procedure trigger_notice_ab()",
    "expected": "CREATE CONSTRAINT TRIGGER parted_trig AFTER INSERT ON parted_constr_ancestor DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION trigger_notice_ab()"
  },
  {
    "comment": "triggers - Statement 527",
    "query": "create constraint trigger parted_trig_two after insert on parted_constr deferrable initially deferred for each row when (bark(new.b) AND new.a % 2 = 1) execute procedure trigger_notice_ab()",
    "expected": "CREATE CONSTRAINT TRIGGER parted_trig_two AFTER INSERT ON parted_constr DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW WHEN (bark(new.b) AND new.a % 2 = 1) EXECUTE FUNCTION trigger_notice_ab()"
  },
  {
    "comment": "triggers - Statement 528",
    "query": "insert into parted_constr values (1, 'aardvark')",
    "expected": "INSERT INTO parted_constr VALUES (1, 'aardvark')"
  },
  {
    "comment": "triggers - Statement 529",
    "query": "insert into parted1_constr values (2, 'aardwolf')",
    "expected": "INSERT INTO parted1_constr VALUES (2, 'aardwolf')"
  },
  {
    "comment": "triggers - Statement 530",
    "query": "insert into parted_constr_ancestor values (3, 'aasvogel')",
    "expected": "INSERT INTO parted_constr_ancestor VALUES (3, 'aasvogel')"
  },
  {
    "comment": "triggers - Statement 531",
    "query": "set constraints parted_trig deferred",
    "expected": "SET CONSTRAINTS parted_trig DEFERRED"
  },
  {
    "comment": "triggers - Statement 532",
    "query": "insert into parted1_constr values (2, 'aardwolf'), (3, 'aasvogel')",
    "expected": "INSERT INTO parted1_constr VALUES (2, 'aardwolf'), (3, 'aasvogel')"
  },
  {
    "comment": "triggers - Statement 533",
    "query": "drop table parted_constr_ancestor",
    "expected": "DROP TABLE parted_constr_ancestor"
  },
  {
    "comment": "triggers - Statement 534",
    "query": "drop function bark(text)",
    "expected": "DROP FUNCTION bark(TEXT)"
  },
  {
    "comment": "triggers - Statement 535",
    "query": "create table parted_trigger (a int, b text) partition by range (a)",
    "expected": "CREATE TABLE parted_trigger (a INT, b TEXT) PARTITION BY range (a)"
  },
  {
    "comment": "triggers - Statement 536",
    "query": "create table parted_trigger_1 partition of parted_trigger for values from (0) to (1000)",
    "expected": "CREATE TABLE parted_trigger_1 PARTITION OF parted_trigger FOR VALUES FROM (0) TO (1000)"
  },
  {
    "comment": "triggers - Statement 537",
    "query": "create table parted_trigger_2 (drp int, a int, b text)",
    "expected": "CREATE TABLE parted_trigger_2 (drp INT, a INT, b TEXT)"
  },
  {
    "comment": "triggers - Statement 538",
    "query": "alter table parted_trigger_2 drop column drp",
    "expected": "ALTER TABLE parted_trigger_2 DROP COLUMN drp"
  },
  {
    "comment": "triggers - Statement 539",
    "query": "alter table parted_trigger attach partition parted_trigger_2 for values from (1000) to (2000)",
    "expected": "ALTER TABLE parted_trigger ATTACH PARTITION parted_trigger_2 FOR VALUES FROM (1000) TO (2000)"
  },
  {
    "comment": "triggers - Statement 540",
    "query": "create trigger parted_trigger after update on parted_trigger for each row when (new.a % 2 = 1 and length(old.b) \u003e= 2) execute procedure trigger_notice_ab()",
    "expected": "CREATE TRIGGER parted_trigger AFTER UPDATE ON parted_trigger FOR EACH ROW WHEN (new.a % 2 = 1 AND length(old.b) \u003e= 2) EXECUTE FUNCTION trigger_notice_ab()"
  },
  {
    "comment": "triggers - Statement 541",
    "query": "create table parted_trigger_3 (b text, a int) partition by range (length(b))",
    "expected": "CREATE TABLE parted_trigger_3 (b TEXT, a INT) PARTITION BY range (length(b))"
  },
  {
    "comment": "triggers - Statement 542",
    "query": "create table parted_trigger_3_1 partition of parted_trigger_3 for values from (1) to (3)",
    "expected": "CREATE TABLE parted_trigger_3_1 PARTITION OF parted_trigger_3 FOR VALUES FROM (1) TO (3)"
  },
  {
    "comment": "triggers - Statement 543",
    "query": "create table parted_trigger_3_2 partition of parted_trigger_3 for values from (3) to (5)",
    "expected": "CREATE TABLE parted_trigger_3_2 PARTITION OF parted_trigger_3 FOR VALUES FROM (3) TO (5)"
  },
  {
    "comment": "triggers - Statement 544",
    "query": "alter table parted_trigger attach partition parted_trigger_3 for values from (2000) to (3000)",
    "expected": "ALTER TABLE parted_trigger ATTACH PARTITION parted_trigger_3 FOR VALUES FROM (2000) TO (3000)"
  },
  {
    "comment": "triggers - Statement 545",
    "query": "insert into parted_trigger values (0, 'a'), (1, 'bbb'), (2, 'bcd'), (3, 'c'), (1000, 'c'), (1001, 'ddd'), (1002, 'efg'), (1003, 'f'), (2000, 'e'), (2001, 'fff'), (2002, 'ghi'), (2003, 'h')",
    "expected": "INSERT INTO parted_trigger VALUES (0, 'a'), (1, 'bbb'), (2, 'bcd'), (3, 'c'), (1000, 'c'), (1001, 'ddd'), (1002, 'efg'), (1003, 'f'), (2000, 'e'), (2001, 'fff'), (2002, 'ghi'), (2003, 'h')"
  },
  {
    "comment": "triggers - Statement 546",
    "query": "update parted_trigger set a = a + 2",
    "expected": "UPDATE parted_trigger SET a = a + 2"
  },
  {
    "comment": "triggers - Statement 547",
    "query": "drop table parted_trigger",
    "expected": "DROP TABLE parted_trigger"
  },
  {
    "comment": "triggers - Statement 548",
    "query": "create table parted_referenced (a int)",
    "expected": "CREATE TABLE parted_referenced (a INT)"
  },
  {
    "comment": "triggers - Statement 549",
    "query": "create table unparted_trigger (a int, b text)",
    "expected": "CREATE TABLE unparted_trigger (a INT, b TEXT)"
  },
  {
    "comment": "triggers - Statement 550",
    "query": "create constraint trigger parted_trigger after update on parted_trigger from parted_referenced for each row execute procedure trigger_notice_ab()",
    "expected": "CREATE CONSTRAINT TRIGGER parted_trigger AFTER UPDATE ON parted_trigger FROM parted_referenced DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION trigger_notice_ab()"
  },
  {
    "comment": "triggers - Statement 551",
    "query": "create constraint trigger parted_trigger after update on unparted_trigger from parted_referenced for each row execute procedure trigger_notice_ab()",
    "expected": "CREATE CONSTRAINT TRIGGER parted_trigger AFTER UPDATE ON unparted_trigger FROM parted_referenced DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION trigger_notice_ab()"
  },
  {
    "comment": "triggers - Statement 552",
    "query": "select tgname, conname, t.tgrelid::regclass, t.tgconstrrelid::regclass, c.conrelid::regclass, c.confrelid::regclass from pg_trigger t join pg_constraint c on (t.tgconstraint = c.oid) where tgname = 'parted_trigger' order by t.tgrelid::regclass::text",
    "expected": "SELECT tgname, conname, CAST(t.tgrelid AS regclass), CAST(t.tgconstrrelid AS regclass), CAST(c.conrelid AS regclass), CAST(c.confrelid AS regclass) FROM pg_trigger AS t INNER JOIN pg_constraint AS c ON (t.tgconstraint = c.oid) WHERE tgname = 'parted_trigger' ORDER BY CAST(CAST(t.tgrelid AS regclass) AS TEXT)"
  },
  {
    "comment": "triggers - Statement 553",
    "query": "drop table parted_referenced, parted_trigger, unparted_trigger",
    "expected": "DROP TABLE parted_referenced, parted_trigger, unparted_trigger"
  },
  {
    "comment": "triggers - Statement 554",
    "query": "create trigger parted_trigger after update of b on parted_trigger for each row execute procedure trigger_notice_ab()",
    "expected": "CREATE TRIGGER parted_trigger AFTER UPDATE OF b ON parted_trigger FOR EACH ROW EXECUTE FUNCTION trigger_notice_ab()"
  },
  {
    "comment": "triggers - Statement 555",
    "query": "create table parted_trigger_3_1 partition of parted_trigger_3 for values from (1) to (4)",
    "expected": "CREATE TABLE parted_trigger_3_1 PARTITION OF parted_trigger_3 FOR VALUES FROM (1) TO (4)"
  },
  {
    "comment": "triggers - Statement 556",
    "query": "create table parted_trigger_3_2 partition of parted_trigger_3 for values from (4) to (8)",
    "expected": "CREATE TABLE parted_trigger_3_2 PARTITION OF parted_trigger_3 FOR VALUES FROM (4) TO (8)"
  },
  {
    "comment": "triggers - Statement 557",
    "query": "insert into parted_trigger values (0, 'a'), (1000, 'c'), (2000, 'e'), (2001, 'eeee')",
    "expected": "INSERT INTO parted_trigger VALUES (0, 'a'), (1000, 'c'), (2000, 'e'), (2001, 'eeee')"
  },
  {
    "comment": "triggers - Statement 558",
    "query": "update parted_trigger set b = b || 'b'",
    "expected": "UPDATE parted_trigger SET b = b || 'b'"
  },
  {
    "comment": "triggers - Statement 559",
    "query": "drop function trigger_notice_ab()",
    "expected": "DROP FUNCTION trigger_notice_ab()"
  },
  {
    "comment": "triggers - Statement 560",
    "query": "create table trg_clone (a int) partition by range (a)",
    "expected": "CREATE TABLE trg_clone (a INT) PARTITION BY range (a)"
  },
  {
    "comment": "triggers - Statement 561",
    "query": "create table trg_clone1 partition of trg_clone for values from (0) to (1000)",
    "expected": "CREATE TABLE trg_clone1 PARTITION OF trg_clone FOR VALUES FROM (0) TO (1000)"
  },
  {
    "comment": "triggers - Statement 562",
    "query": "alter table trg_clone add constraint uniq unique (a) deferrable",
    "expected": "ALTER TABLE trg_clone ADD CONSTRAINT uniq UNIQUE (a)"
  },
  {
    "comment": "triggers - Statement 563",
    "query": "create table trg_clone2 partition of trg_clone for values from (1000) to (2000)",
    "expected": "CREATE TABLE trg_clone2 PARTITION OF trg_clone FOR VALUES FROM (1000) TO (2000)"
  },
  {
    "comment": "triggers - Statement 564",
    "query": "create table trg_clone3 partition of trg_clone for values from (2000) to (3000) partition by range (a)",
    "expected": "CREATE TABLE trg_clone3 PARTITION OF trg_clone FOR VALUES FROM (2000) TO (3000) PARTITION BY range (a)"
  },
  {
    "comment": "triggers - Statement 565",
    "query": "create table trg_clone_3_3 partition of trg_clone3 for values from (2000) to (2100)",
    "expected": "CREATE TABLE trg_clone_3_3 PARTITION OF trg_clone3 FOR VALUES FROM (2000) TO (2100)"
  },
  {
    "comment": "triggers - Statement 566",
    "query": "select tgrelid::regclass, count(*) from pg_trigger where tgrelid::regclass in ('trg_clone', 'trg_clone1', 'trg_clone2', 'trg_clone3', 'trg_clone_3_3') group by tgrelid::regclass order by tgrelid::regclass",
    "expected": "SELECT CAST(tgrelid AS regclass), COUNT(*) FROM pg_trigger WHERE CAST(tgrelid AS regclass) IN ('trg_clone', 'trg_clone1', 'trg_clone2', 'trg_clone3', 'trg_clone_3_3') GROUP BY CAST(tgrelid AS regclass) ORDER BY CAST(tgrelid AS regclass)"
  },
  {
    "comment": "triggers - Statement 567",
    "query": "drop table trg_clone",
    "expected": "DROP TABLE trg_clone"
  },
  {
    "comment": "triggers - Statement 568",
    "query": "create table parent (a int)",
    "expected": "CREATE TABLE parent (a INT)"
  },
  {
    "comment": "triggers - Statement 569",
    "query": "create table child1 () inherits (parent)",
    "expected": "CREATE TABLE child1 () INHERITS (parent)"
  },
  {
    "comment": "triggers - Statement 570",
    "query": "create function trig_nothing() returns trigger language plpgsql as $$ begin return null; end $$",
    "expected": "CREATE FUNCTION trig_nothing () RETURNS trigger LANGUAGE plpgsql AS $$ begin return null; end $$"
  },
  {
    "comment": "triggers - Statement 571",
    "query": "create trigger tg after insert on parent for each row execute function trig_nothing()",
    "expected": "CREATE TRIGGER tg AFTER INSERT ON parent FOR EACH ROW EXECUTE FUNCTION trig_nothing()"
  },
  {
    "comment": "triggers - Statement 572",
    "query": "create trigger tg after insert on child1 for each row execute function trig_nothing()",
    "expected": "CREATE TRIGGER tg AFTER INSERT ON child1 FOR EACH ROW EXECUTE FUNCTION trig_nothing()"
  },
  {
    "comment": "triggers - Statement 573",
    "query": "alter table parent disable trigger tg",
    "expected": "ALTER TABLE parent DISABLE TRIGGER tg"
  },
  {
    "comment": "triggers - Statement 574",
    "query": "select tgrelid::regclass, tgname, tgenabled from pg_trigger where tgrelid in ('parent'::regclass, 'child1'::regclass) order by tgrelid::regclass::text",
    "expected": "SELECT CAST(tgrelid AS regclass), tgname, tgenabled FROM pg_trigger WHERE tgrelid IN (CAST('parent' AS regclass), CAST('child1' AS regclass)) ORDER BY CAST(CAST(tgrelid AS regclass) AS TEXT)"
  },
  {
    "comment": "triggers - Statement 575",
    "query": "alter table only parent enable always trigger tg",
    "expected": "ALTER TABLE ONLY parent ENABLE ALWAYS TRIGGER tg"
  },
  {
    "comment": "triggers - Statement 576",
    "query": "drop table parent, child1",
    "expected": "DROP TABLE parent, child1"
  },
  {
    "comment": "triggers - Statement 577",
    "query": "create table parent (a int) partition by list (a)",
    "expected": "CREATE TABLE parent (a INT) PARTITION BY list (a)"
  },
  {
    "comment": "triggers - Statement 578",
    "query": "create table child1 partition of parent for values in (1)",
    "expected": "CREATE TABLE child1 PARTITION OF parent FOR VALUES IN (1)"
  },
  {
    "comment": "triggers - Statement 579",
    "query": "create trigger tg after insert on parent for each row execute procedure trig_nothing()",
    "expected": "CREATE TRIGGER tg AFTER INSERT ON parent FOR EACH ROW EXECUTE FUNCTION trig_nothing()"
  },
  {
    "comment": "triggers - Statement 580",
    "query": "create trigger tg_stmt after insert on parent for statement execute procedure trig_nothing()",
    "expected": "CREATE TRIGGER tg_stmt AFTER INSERT ON parent EXECUTE FUNCTION trig_nothing()"
  },
  {
    "comment": "triggers - Statement 581",
    "query": "select tgrelid::regclass, tgname, tgenabled from pg_trigger where tgrelid in ('parent'::regclass, 'child1'::regclass) order by tgrelid::regclass::text, tgname",
    "expected": "SELECT CAST(tgrelid AS regclass), tgname, tgenabled FROM pg_trigger WHERE tgrelid IN (CAST('parent' AS regclass), CAST('child1' AS regclass)) ORDER BY CAST(CAST(tgrelid AS regclass) AS TEXT), tgname"
  },
  {
    "comment": "triggers - Statement 582",
    "query": "alter table parent enable always trigger tg_stmt",
    "expected": "ALTER TABLE parent ENABLE ALWAYS TRIGGER tg_stmt"
  },
  {
    "comment": "triggers - Statement 583",
    "query": "alter table parent enable always trigger tg",
    "expected": "ALTER TABLE parent ENABLE ALWAYS TRIGGER tg"
  },
  {
    "comment": "triggers - Statement 584",
    "query": "alter table parent disable trigger user",
    "expected": "ALTER TABLE parent DISABLE TRIGGER USER"
  },
  {
    "comment": "triggers - Statement 585",
    "query": "create table parent (a int primary key, f int references parent) partition by list (a)",
    "expected": "CREATE TABLE parent (a INT PRIMARY KEY, f INT REFERENCES parent) PARTITION BY list (a)"
  },
  {
    "comment": "triggers - Statement 586",
    "query": "select tgrelid::regclass, rtrim(tgname, '0123456789') as tgname, tgfoid::regproc, tgenabled from pg_trigger where tgrelid in ('parent'::regclass, 'child1'::regclass) order by tgrelid::regclass::text, tgfoid",
    "expected": "SELECT CAST(tgrelid AS regclass), rtrim(tgname, '0123456789') AS tgname, CAST(tgfoid AS regproc), tgenabled FROM pg_trigger WHERE tgrelid IN (CAST('parent' AS regclass), CAST('child1' AS regclass)) ORDER BY CAST(CAST(tgrelid AS regclass) AS TEXT), tgfoid"
  },
  {
    "comment": "triggers - Statement 587",
    "query": "alter table parent disable trigger all",
    "expected": "ALTER TABLE parent DISABLE TRIGGER ALL"
  },
  {
    "comment": "triggers - Statement 588",
    "query": "CREATE TABLE trgfire (i int) PARTITION BY RANGE (i)",
    "expected": "CREATE TABLE trgfire (i INT) PARTITION BY range (i)"
  },
  {
    "comment": "triggers - Statement 589",
    "query": "CREATE TABLE trgfire1 PARTITION OF trgfire FOR VALUES FROM (1) TO (10)"
  },
  {
    "comment": "triggers - Statement 590",
    "query": "CREATE OR REPLACE FUNCTION tgf() RETURNS trigger LANGUAGE plpgsql AS $$ begin raise exception 'except'; end $$",
    "expected": "CREATE OR REPLACE FUNCTION tgf () RETURNS trigger LANGUAGE plpgsql AS $$ begin raise exception 'except'; end $$"
  },
  {
    "comment": "triggers - Statement 591",
    "query": "CREATE TRIGGER tg AFTER INSERT ON trgfire FOR EACH ROW EXECUTE FUNCTION tgf()"
  },
  {
    "comment": "triggers - Statement 592",
    "query": "INSERT INTO trgfire VALUES (1)"
  },
  {
    "comment": "triggers - Statement 593",
    "query": "ALTER TABLE trgfire DISABLE TRIGGER tg"
  },
  {
    "comment": "triggers - Statement 594",
    "query": "CREATE TABLE trgfire2 PARTITION OF trgfire FOR VALUES FROM (10) TO (20)"
  },
  {
    "comment": "triggers - Statement 595",
    "query": "INSERT INTO trgfire VALUES (11)"
  },
  {
    "comment": "triggers - Statement 596",
    "query": "CREATE TABLE trgfire3 (LIKE trgfire)"
  },
  {
    "comment": "triggers - Statement 597",
    "query": "ALTER TABLE trgfire ATTACH PARTITION trgfire3 FOR VALUES FROM (20) TO (30)"
  },
  {
    "comment": "triggers - Statement 598",
    "query": "INSERT INTO trgfire VALUES (21)"
  },
  {
    "comment": "triggers - Statement 599",
    "query": "CREATE TABLE trgfire4 PARTITION OF trgfire FOR VALUES FROM (30) TO (40) PARTITION BY LIST (i)",
    "expected": "CREATE TABLE trgfire4 PARTITION OF trgfire FOR VALUES FROM (30) TO (40) PARTITION BY list (i)"
  },
  {
    "comment": "triggers - Statement 600",
    "query": "CREATE TABLE trgfire4_30 PARTITION OF trgfire4 FOR VALUES IN (30)"
  },
  {
    "comment": "triggers - Statement 601",
    "query": "INSERT INTO trgfire VALUES (30)"
  },
  {
    "comment": "triggers - Statement 602",
    "query": "CREATE TABLE trgfire5 (LIKE trgfire) PARTITION BY LIST (i)",
    "expected": "CREATE TABLE trgfire5 (LIKE trgfire) PARTITION BY list (i)"
  },
  {
    "comment": "triggers - Statement 603",
    "query": "CREATE TABLE trgfire5_40 PARTITION OF trgfire5 FOR VALUES IN (40)"
  },
  {
    "comment": "triggers - Statement 604",
    "query": "ALTER TABLE trgfire ATTACH PARTITION trgfire5 FOR VALUES FROM (40) TO (50)"
  },
  {
    "comment": "triggers - Statement 605",
    "query": "INSERT INTO trgfire VALUES (40)"
  },
  {
    "comment": "triggers - Statement 606",
    "query": "SELECT tgrelid::regclass, tgenabled FROM pg_trigger WHERE tgrelid::regclass IN (SELECT oid from pg_class where relname LIKE 'trgfire%') ORDER BY tgrelid::regclass::text",
    "expected": "SELECT CAST(tgrelid AS regclass), tgenabled FROM pg_trigger WHERE CAST(tgrelid AS regclass) IN (SELECT oid FROM pg_class WHERE relname LIKE 'trgfire%') ORDER BY CAST(CAST(tgrelid AS regclass) AS TEXT)"
  },
  {
    "comment": "triggers - Statement 607",
    "query": "ALTER TABLE trgfire ENABLE TRIGGER tg"
  },
  {
    "comment": "triggers - Statement 608",
    "query": "DROP TABLE trgfire"
  },
  {
    "comment": "triggers - Statement 609",
    "query": "DROP FUNCTION tgf()"
  },
  {
    "comment": "triggers - Statement 610",
    "query": "create or replace function dump_insert() returns trigger language plpgsql as $$ begin raise notice 'trigger = %, new table = %', TG_NAME, (select string_agg(new_table::text, ', ' order by a) from new_table); return null; end; $$",
    "expected": "CREATE OR REPLACE FUNCTION dump_insert () RETURNS trigger LANGUAGE plpgsql AS $$ begin raise notice 'trigger = %, new table = %', TG_NAME, (select string_agg(new_table::text, ', ' order by a) from new_table); return null; end; $$"
  },
  {
    "comment": "triggers - Statement 611",
    "query": "create or replace function dump_update() returns trigger language plpgsql as $$ begin raise notice 'trigger = %, old table = %, new table = %', TG_NAME, (select string_agg(old_table::text, ', ' order by a) from old_table), (select string_agg(new_table::text, ', ' order by a) from new_table); return null; end; $$",
    "expected": "CREATE OR REPLACE FUNCTION dump_update () RETURNS trigger LANGUAGE plpgsql AS $$ begin raise notice 'trigger = %, old table = %, new table = %', TG_NAME, (select string_agg(old_table::text, ', ' order by a) from old_table), (select string_agg(new_table::text, ', ' order by a) from new_table); return null; end; $$"
  },
  {
    "comment": "triggers - Statement 612",
    "query": "create or replace function dump_delete() returns trigger language plpgsql as $$ begin raise notice 'trigger = %, old table = %', TG_NAME, (select string_agg(old_table::text, ', ' order by a) from old_table); return null; end; $$",
    "expected": "CREATE OR REPLACE FUNCTION dump_delete () RETURNS trigger LANGUAGE plpgsql AS $$ begin raise notice 'trigger = %, old table = %', TG_NAME, (select string_agg(old_table::text, ', ' order by a) from old_table); return null; end; $$"
  },
  {
    "comment": "triggers - Statement 613",
    "query": "create table parent (a text, b int) partition by list (a)",
    "expected": "CREATE TABLE parent (a TEXT, b INT) PARTITION BY list (a)"
  },
  {
    "comment": "triggers - Statement 614",
    "query": "create table child1 partition of parent for values in ('AAA')",
    "expected": "CREATE TABLE child1 PARTITION OF parent FOR VALUES IN ('AAA')"
  },
  {
    "comment": "triggers - Statement 615",
    "query": "create table child2 (x int, a text, b int)",
    "expected": "CREATE TABLE child2 (x INT, a TEXT, b INT)"
  },
  {
    "comment": "triggers - Statement 616",
    "query": "alter table child2 drop column x",
    "expected": "ALTER TABLE child2 DROP COLUMN x"
  },
  {
    "comment": "triggers - Statement 617",
    "query": "alter table parent attach partition child2 for values in ('BBB')",
    "expected": "ALTER TABLE parent ATTACH PARTITION child2 FOR VALUES IN ('BBB')"
  },
  {
    "comment": "triggers - Statement 618",
    "query": "create table child3 (b int, a text)",
    "expected": "CREATE TABLE child3 (b INT, a TEXT)"
  },
  {
    "comment": "triggers - Statement 619",
    "query": "alter table parent attach partition child3 for values in ('CCC')",
    "expected": "ALTER TABLE parent ATTACH PARTITION child3 FOR VALUES IN ('CCC')"
  },
  {
    "comment": "triggers - Statement 620",
    "query": "create trigger parent_insert_trig after insert on parent referencing new table as new_table for each statement execute procedure dump_insert()",
    "expected": "CREATE TRIGGER parent_insert_trig AFTER INSERT ON parent REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 621",
    "query": "create trigger parent_update_trig after update on parent referencing old table as old_table new table as new_table for each statement execute procedure dump_update()",
    "expected": "CREATE TRIGGER parent_update_trig AFTER UPDATE ON parent REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table EXECUTE FUNCTION dump_update()"
  },
  {
    "comment": "triggers - Statement 622",
    "query": "create trigger parent_delete_trig after delete on parent referencing old table as old_table for each statement execute procedure dump_delete()",
    "expected": "CREATE TRIGGER parent_delete_trig AFTER DELETE ON parent REFERENCING OLD TABLE AS old_table EXECUTE FUNCTION dump_delete()"
  },
  {
    "comment": "triggers - Statement 623",
    "query": "create trigger child1_insert_trig after insert on child1 referencing new table as new_table for each statement execute procedure dump_insert()",
    "expected": "CREATE TRIGGER child1_insert_trig AFTER INSERT ON child1 REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 624",
    "query": "create trigger child1_update_trig after update on child1 referencing old table as old_table new table as new_table for each statement execute procedure dump_update()",
    "expected": "CREATE TRIGGER child1_update_trig AFTER UPDATE ON child1 REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table EXECUTE FUNCTION dump_update()"
  },
  {
    "comment": "triggers - Statement 625",
    "query": "create trigger child1_delete_trig after delete on child1 referencing old table as old_table for each statement execute procedure dump_delete()",
    "expected": "CREATE TRIGGER child1_delete_trig AFTER DELETE ON child1 REFERENCING OLD TABLE AS old_table EXECUTE FUNCTION dump_delete()"
  },
  {
    "comment": "triggers - Statement 626",
    "query": "create trigger child2_insert_trig after insert on child2 referencing new table as new_table for each statement execute procedure dump_insert()",
    "expected": "CREATE TRIGGER child2_insert_trig AFTER INSERT ON child2 REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 627",
    "query": "create trigger child2_update_trig after update on child2 referencing old table as old_table new table as new_table for each statement execute procedure dump_update()",
    "expected": "CREATE TRIGGER child2_update_trig AFTER UPDATE ON child2 REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table EXECUTE FUNCTION dump_update()"
  },
  {
    "comment": "triggers - Statement 628",
    "query": "create trigger child2_delete_trig after delete on child2 referencing old table as old_table for each statement execute procedure dump_delete()",
    "expected": "CREATE TRIGGER child2_delete_trig AFTER DELETE ON child2 REFERENCING OLD TABLE AS old_table EXECUTE FUNCTION dump_delete()"
  },
  {
    "comment": "triggers - Statement 629",
    "query": "create trigger child3_insert_trig after insert on child3 referencing new table as new_table for each statement execute procedure dump_insert()",
    "expected": "CREATE TRIGGER child3_insert_trig AFTER INSERT ON child3 REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 630",
    "query": "create trigger child3_update_trig after update on child3 referencing old table as old_table new table as new_table for each statement execute procedure dump_update()",
    "expected": "CREATE TRIGGER child3_update_trig AFTER UPDATE ON child3 REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table EXECUTE FUNCTION dump_update()"
  },
  {
    "comment": "triggers - Statement 631",
    "query": "create trigger child3_delete_trig after delete on child3 referencing old table as old_table for each statement execute procedure dump_delete()",
    "expected": "CREATE TRIGGER child3_delete_trig AFTER DELETE ON child3 REFERENCING OLD TABLE AS old_table EXECUTE FUNCTION dump_delete()"
  },
  {
    "comment": "triggers - Statement 632",
    "query": "SELECT trigger_name, event_manipulation, event_object_schema, event_object_table, action_order, action_condition, action_orientation, action_timing, action_reference_old_table, action_reference_new_table FROM information_schema.triggers WHERE event_object_table IN ('parent', 'child1', 'child2', 'child3') ORDER BY trigger_name COLLATE \"C\", 2"
  },
  {
    "comment": "triggers - Statement 633",
    "query": "insert into child1 values ('AAA', 42)",
    "expected": "INSERT INTO child1 VALUES ('AAA', 42)"
  },
  {
    "comment": "triggers - Statement 634",
    "query": "insert into child2 values ('BBB', 42)",
    "expected": "INSERT INTO child2 VALUES ('BBB', 42)"
  },
  {
    "comment": "triggers - Statement 635",
    "query": "insert into child3 values (42, 'CCC')",
    "expected": "INSERT INTO child3 VALUES (42, 'CCC')"
  },
  {
    "comment": "triggers - Statement 636",
    "query": "update parent set b = b + 1",
    "expected": "UPDATE parent SET b = b + 1"
  },
  {
    "comment": "triggers - Statement 637",
    "query": "delete from parent",
    "expected": "DELETE FROM parent"
  },
  {
    "comment": "triggers - Statement 638",
    "query": "insert into parent values ('AAA', 42)",
    "expected": "INSERT INTO parent VALUES ('AAA', 42)"
  },
  {
    "comment": "triggers - Statement 639",
    "query": "insert into parent values ('BBB', 42)",
    "expected": "INSERT INTO parent VALUES ('BBB', 42)"
  },
  {
    "comment": "triggers - Statement 640",
    "query": "insert into parent values ('CCC', 42)",
    "expected": "INSERT INTO parent VALUES ('CCC', 42)"
  },
  {
    "comment": "triggers - Statement 641",
    "query": "delete from child1",
    "expected": "DELETE FROM child1"
  },
  {
    "comment": "triggers - Statement 642",
    "query": "delete from child2",
    "expected": "DELETE FROM child2"
  },
  {
    "comment": "triggers - Statement 643",
    "query": "delete from child3",
    "expected": "DELETE FROM child3"
  },
  {
    "comment": "triggers - Statement 644",
    "query": "copy parent (a, b) from stdin",
    "expected": "COPY parent (a, b) FROM STDIN"
  },
  {
    "comment": "triggers - Statement 645",
    "query": "drop trigger child1_insert_trig on child1",
    "expected": "DROP TRIGGER child1_insert_trig ON child1"
  },
  {
    "comment": "triggers - Statement 646",
    "query": "drop trigger child1_update_trig on child1",
    "expected": "DROP TRIGGER child1_update_trig ON child1"
  },
  {
    "comment": "triggers - Statement 647",
    "query": "drop trigger child1_delete_trig on child1",
    "expected": "DROP TRIGGER child1_delete_trig ON child1"
  },
  {
    "comment": "triggers - Statement 648",
    "query": "drop trigger child2_insert_trig on child2",
    "expected": "DROP TRIGGER child2_insert_trig ON child2"
  },
  {
    "comment": "triggers - Statement 649",
    "query": "drop trigger child2_update_trig on child2",
    "expected": "DROP TRIGGER child2_update_trig ON child2"
  },
  {
    "comment": "triggers - Statement 650",
    "query": "drop trigger child2_delete_trig on child2",
    "expected": "DROP TRIGGER child2_delete_trig ON child2"
  },
  {
    "comment": "triggers - Statement 651",
    "query": "drop trigger child3_insert_trig on child3",
    "expected": "DROP TRIGGER child3_insert_trig ON child3"
  },
  {
    "comment": "triggers - Statement 652",
    "query": "drop trigger child3_update_trig on child3",
    "expected": "DROP TRIGGER child3_update_trig ON child3"
  },
  {
    "comment": "triggers - Statement 653",
    "query": "drop trigger child3_delete_trig on child3",
    "expected": "DROP TRIGGER child3_delete_trig ON child3"
  },
  {
    "comment": "triggers - Statement 654",
    "query": "create or replace function intercept_insert() returns trigger language plpgsql as $$ begin new.b = new.b + 1000; return new; end; $$",
    "expected": "CREATE OR REPLACE FUNCTION intercept_insert () RETURNS trigger LANGUAGE plpgsql AS $$ begin new.b = new.b + 1000; return new; end; $$"
  },
  {
    "comment": "triggers - Statement 655",
    "query": "create trigger intercept_insert_child3 before insert on child3 for each row execute procedure intercept_insert()",
    "expected": "CREATE TRIGGER intercept_insert_child3 BEFORE INSERT ON child3 FOR EACH ROW EXECUTE FUNCTION intercept_insert()"
  },
  {
    "comment": "triggers - Statement 656",
    "query": "insert into parent values ('AAA', 42), ('BBB', 42), ('CCC', 66)",
    "expected": "INSERT INTO parent VALUES ('AAA', 42), ('BBB', 42), ('CCC', 66)"
  },
  {
    "comment": "triggers - Statement 657",
    "query": "drop table child1, child2, child3, parent",
    "expected": "DROP TABLE child1, child2, child3, parent"
  },
  {
    "comment": "triggers - Statement 658",
    "query": "drop function intercept_insert()",
    "expected": "DROP FUNCTION intercept_insert()"
  },
  {
    "comment": "triggers - Statement 659",
    "query": "create table child partition of parent for values in ('AAA')",
    "expected": "CREATE TABLE child PARTITION OF parent FOR VALUES IN ('AAA')"
  },
  {
    "comment": "triggers - Statement 660",
    "query": "create trigger child_row_trig after insert on child referencing new table as new_table for each row execute procedure dump_insert()",
    "expected": "CREATE TRIGGER child_row_trig AFTER INSERT ON child REFERENCING NEW TABLE AS new_table FOR EACH ROW EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 661",
    "query": "alter table parent detach partition child",
    "expected": "ALTER TABLE parent DETACH PARTITION child"
  },
  {
    "comment": "triggers - Statement 662",
    "query": "alter table parent attach partition child for values in ('AAA')",
    "expected": "ALTER TABLE parent ATTACH PARTITION child FOR VALUES IN ('AAA')"
  },
  {
    "comment": "triggers - Statement 663",
    "query": "drop trigger child_row_trig on child",
    "expected": "DROP TRIGGER child_row_trig ON child"
  },
  {
    "comment": "triggers - Statement 664",
    "query": "drop table child, parent",
    "expected": "DROP TABLE child, parent"
  },
  {
    "comment": "triggers - Statement 665",
    "query": "create or replace function dump_update_new() returns trigger language plpgsql as $$ begin raise notice 'trigger = %, new table = %', TG_NAME, (select string_agg(new_table::text, ', ' order by a) from new_table); return null; end; $$",
    "expected": "CREATE OR REPLACE FUNCTION dump_update_new () RETURNS trigger LANGUAGE plpgsql AS $$ begin raise notice 'trigger = %, new table = %', TG_NAME, (select string_agg(new_table::text, ', ' order by a) from new_table); return null; end; $$"
  },
  {
    "comment": "triggers - Statement 666",
    "query": "create or replace function dump_update_old() returns trigger language plpgsql as $$ begin raise notice 'trigger = %, old table = %', TG_NAME, (select string_agg(old_table::text, ', ' order by a) from old_table); return null; end; $$",
    "expected": "CREATE OR REPLACE FUNCTION dump_update_old () RETURNS trigger LANGUAGE plpgsql AS $$ begin raise notice 'trigger = %, old table = %', TG_NAME, (select string_agg(old_table::text, ', ' order by a) from old_table); return null; end; $$"
  },
  {
    "comment": "triggers - Statement 667",
    "query": "create table trans_tab_parent (a text) partition by list (a)",
    "expected": "CREATE TABLE trans_tab_parent (a TEXT) PARTITION BY list (a)"
  },
  {
    "comment": "triggers - Statement 668",
    "query": "create table trans_tab_child1 partition of trans_tab_parent for values in ('AAA1', 'AAA2')",
    "expected": "CREATE TABLE trans_tab_child1 PARTITION OF trans_tab_parent FOR VALUES IN ('AAA1', 'AAA2')"
  },
  {
    "comment": "triggers - Statement 669",
    "query": "create table trans_tab_child2 partition of trans_tab_parent for values in ('BBB1', 'BBB2')",
    "expected": "CREATE TABLE trans_tab_child2 PARTITION OF trans_tab_parent FOR VALUES IN ('BBB1', 'BBB2')"
  },
  {
    "comment": "triggers - Statement 670",
    "query": "create trigger trans_tab_parent_update_trig after update on trans_tab_parent referencing old table as old_table for each statement execute procedure dump_update_old()",
    "expected": "CREATE TRIGGER trans_tab_parent_update_trig AFTER UPDATE ON trans_tab_parent REFERENCING OLD TABLE AS old_table EXECUTE FUNCTION dump_update_old()"
  },
  {
    "comment": "triggers - Statement 671",
    "query": "create trigger trans_tab_parent_insert_trig after insert on trans_tab_parent referencing new table as new_table for each statement execute procedure dump_insert()",
    "expected": "CREATE TRIGGER trans_tab_parent_insert_trig AFTER INSERT ON trans_tab_parent REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 672",
    "query": "create trigger trans_tab_parent_delete_trig after delete on trans_tab_parent referencing old table as old_table for each statement execute procedure dump_delete()",
    "expected": "CREATE TRIGGER trans_tab_parent_delete_trig AFTER DELETE ON trans_tab_parent REFERENCING OLD TABLE AS old_table EXECUTE FUNCTION dump_delete()"
  },
  {
    "comment": "triggers - Statement 673",
    "query": "insert into trans_tab_parent values ('AAA1'), ('BBB1')",
    "expected": "INSERT INTO trans_tab_parent VALUES ('AAA1'), ('BBB1')"
  },
  {
    "comment": "triggers - Statement 674",
    "query": "update trans_tab_parent set a = 'BBB2' where a = 'AAA1'",
    "expected": "UPDATE trans_tab_parent SET a = 'BBB2' WHERE a = 'AAA1'"
  },
  {
    "comment": "triggers - Statement 675",
    "query": "drop trigger trans_tab_parent_update_trig on trans_tab_parent",
    "expected": "DROP TRIGGER trans_tab_parent_update_trig ON trans_tab_parent"
  },
  {
    "comment": "triggers - Statement 676",
    "query": "create trigger trans_tab_parent_update_trig after update on trans_tab_parent referencing new table as new_table for each statement execute procedure dump_update_new()",
    "expected": "CREATE TRIGGER trans_tab_parent_update_trig AFTER UPDATE ON trans_tab_parent REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_update_new()"
  },
  {
    "comment": "triggers - Statement 677",
    "query": "update trans_tab_parent set a = 'AAA2' where a = 'BBB1'",
    "expected": "UPDATE trans_tab_parent SET a = 'AAA2' WHERE a = 'BBB1'"
  },
  {
    "comment": "triggers - Statement 678",
    "query": "delete from trans_tab_parent",
    "expected": "DELETE FROM trans_tab_parent"
  },
  {
    "comment": "triggers - Statement 679",
    "query": "drop table trans_tab_parent, trans_tab_child1, trans_tab_child2",
    "expected": "DROP TABLE trans_tab_parent, trans_tab_child1, trans_tab_child2"
  },
  {
    "comment": "triggers - Statement 680",
    "query": "drop function dump_update_new, dump_update_old",
    "expected": "DROP FUNCTION dump_update_new, dump_update_old"
  },
  {
    "comment": "triggers - Statement 681",
    "query": "create table parent (a text, b int)",
    "expected": "CREATE TABLE parent (a TEXT, b INT)"
  },
  {
    "comment": "triggers - Statement 682",
    "query": "create table child2 (b int, a text)",
    "expected": "CREATE TABLE child2 (b INT, a TEXT)"
  },
  {
    "comment": "triggers - Statement 683",
    "query": "alter table child2 inherit parent",
    "expected": "ALTER TABLE child2 INHERIT parent"
  },
  {
    "comment": "triggers - Statement 684",
    "query": "create table child3 (c text) inherits (parent)",
    "expected": "CREATE TABLE child3 (c TEXT) INHERITS (parent)"
  },
  {
    "comment": "triggers - Statement 685",
    "query": "insert into child2 values (42, 'BBB')",
    "expected": "INSERT INTO child2 VALUES (42, 'BBB')"
  },
  {
    "comment": "triggers - Statement 686",
    "query": "insert into child3 values ('CCC', 42, 'foo')",
    "expected": "INSERT INTO child3 VALUES ('CCC', 42, 'foo')"
  },
  {
    "comment": "triggers - Statement 687",
    "query": "create index on parent(b)",
    "expected": "CREATE INDEX ON parent USING btree ( b )"
  },
  {
    "comment": "triggers - Statement 688",
    "query": "drop trigger child1_insert_trig on child1",
    "expected": "DROP TRIGGER child1_insert_trig ON child1"
  },
  {
    "comment": "triggers - Statement 689",
    "query": "drop table child1, child2, child3, parent",
    "expected": "DROP TABLE child1, child2, child3, parent"
  },
  {
    "comment": "triggers - Statement 690",
    "query": "create table child () inherits (parent)",
    "expected": "CREATE TABLE child () INHERITS (parent)"
  },
  {
    "comment": "triggers - Statement 691",
    "query": "alter table child no inherit parent",
    "expected": "ALTER TABLE child NO INHERIT parent"
  },
  {
    "comment": "triggers - Statement 692",
    "query": "alter table child inherit parent",
    "expected": "ALTER TABLE child INHERIT parent"
  },
  {
    "comment": "triggers - Statement 693",
    "query": "create table table1 (a int)",
    "expected": "CREATE TABLE table1 (a INT)"
  },
  {
    "comment": "triggers - Statement 694",
    "query": "create table table2 (a text)",
    "expected": "CREATE TABLE table2 (a TEXT)"
  },
  {
    "comment": "triggers - Statement 695",
    "query": "create trigger table1_trig after insert on table1 referencing new table as new_table for each statement execute procedure dump_insert()",
    "expected": "CREATE TRIGGER table1_trig AFTER INSERT ON table1 REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 696",
    "query": "create trigger table2_trig after insert on table2 referencing new table as new_table for each statement execute procedure dump_insert()",
    "expected": "CREATE TRIGGER table2_trig AFTER INSERT ON table2 REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 697",
    "query": "with wcte as (insert into table1 values (42)) insert into table2 values ('hello world')",
    "expected": "WITH wcte AS (INSERT INTO table1 VALUES (42)) INSERT INTO table2 VALUES ('hello world')"
  },
  {
    "comment": "triggers - Statement 698",
    "query": "with wcte as (insert into table1 values (43)) insert into table1 values (44)",
    "expected": "WITH wcte AS (INSERT INTO table1 VALUES (43)) INSERT INTO table1 VALUES (44)"
  },
  {
    "comment": "triggers - Statement 699",
    "query": "select * from table1",
    "expected": "SELECT * FROM table1"
  },
  {
    "comment": "triggers - Statement 700",
    "query": "select * from table2",
    "expected": "SELECT * FROM table2"
  },
  {
    "comment": "triggers - Statement 701",
    "query": "drop table table1",
    "expected": "DROP TABLE table1"
  },
  {
    "comment": "triggers - Statement 702",
    "query": "drop table table2",
    "expected": "DROP TABLE table2"
  },
  {
    "comment": "triggers - Statement 703",
    "query": "create table my_table (a int primary key, b text)",
    "expected": "CREATE TABLE my_table (a INT PRIMARY KEY, b TEXT)"
  },
  {
    "comment": "triggers - Statement 704",
    "query": "create trigger my_table_insert_trig after insert on my_table referencing new table as new_table for each statement execute procedure dump_insert()",
    "expected": "CREATE TRIGGER my_table_insert_trig AFTER INSERT ON my_table REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 705",
    "query": "create trigger my_table_update_trig after update on my_table referencing old table as old_table new table as new_table for each statement execute procedure dump_update()",
    "expected": "CREATE TRIGGER my_table_update_trig AFTER UPDATE ON my_table REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table EXECUTE FUNCTION dump_update()"
  },
  {
    "comment": "triggers - Statement 706",
    "query": "insert into my_table values (1, 'AAA'), (2, 'BBB') on conflict (a) do update set b = my_table.b || ':' || excluded.b",
    "expected": "INSERT INTO my_table VALUES (1, 'AAA'), (2, 'BBB') ON CONFLICT (a) DO UPDATE SET b = my_table.b || ':' || excluded.b"
  },
  {
    "comment": "triggers - Statement 707",
    "query": "insert into my_table values (1, 'AAA'), (2, 'BBB'), (3, 'CCC'), (4, 'DDD') on conflict (a) do update set b = my_table.b || ':' || excluded.b",
    "expected": "INSERT INTO my_table VALUES (1, 'AAA'), (2, 'BBB'), (3, 'CCC'), (4, 'DDD') ON CONFLICT (a) DO UPDATE SET b = my_table.b || ':' || excluded.b"
  },
  {
    "comment": "triggers - Statement 708",
    "query": "insert into my_table values (3, 'CCC'), (4, 'DDD') on conflict (a) do update set b = my_table.b || ':' || excluded.b",
    "expected": "INSERT INTO my_table VALUES (3, 'CCC'), (4, 'DDD') ON CONFLICT (a) DO UPDATE SET b = my_table.b || ':' || excluded.b"
  },
  {
    "comment": "triggers - Statement 709",
    "query": "create table iocdu_tt_parted (a int primary key, b text) partition by list (a)",
    "expected": "CREATE TABLE iocdu_tt_parted (a INT PRIMARY KEY, b TEXT) PARTITION BY list (a)"
  },
  {
    "comment": "triggers - Statement 710",
    "query": "create table iocdu_tt_parted1 partition of iocdu_tt_parted for values in (1)",
    "expected": "CREATE TABLE iocdu_tt_parted1 PARTITION OF iocdu_tt_parted FOR VALUES IN (1)"
  },
  {
    "comment": "triggers - Statement 711",
    "query": "create table iocdu_tt_parted2 partition of iocdu_tt_parted for values in (2)",
    "expected": "CREATE TABLE iocdu_tt_parted2 PARTITION OF iocdu_tt_parted FOR VALUES IN (2)"
  },
  {
    "comment": "triggers - Statement 712",
    "query": "create table iocdu_tt_parted3 partition of iocdu_tt_parted for values in (3)",
    "expected": "CREATE TABLE iocdu_tt_parted3 PARTITION OF iocdu_tt_parted FOR VALUES IN (3)"
  },
  {
    "comment": "triggers - Statement 713",
    "query": "create table iocdu_tt_parted4 partition of iocdu_tt_parted for values in (4)",
    "expected": "CREATE TABLE iocdu_tt_parted4 PARTITION OF iocdu_tt_parted FOR VALUES IN (4)"
  },
  {
    "comment": "triggers - Statement 714",
    "query": "create trigger iocdu_tt_parted_insert_trig after insert on iocdu_tt_parted referencing new table as new_table for each statement execute procedure dump_insert()",
    "expected": "CREATE TRIGGER iocdu_tt_parted_insert_trig AFTER INSERT ON iocdu_tt_parted REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 715",
    "query": "create trigger iocdu_tt_parted_update_trig after update on iocdu_tt_parted referencing old table as old_table new table as new_table for each statement execute procedure dump_update()",
    "expected": "CREATE TRIGGER iocdu_tt_parted_update_trig AFTER UPDATE ON iocdu_tt_parted REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table EXECUTE FUNCTION dump_update()"
  },
  {
    "comment": "triggers - Statement 716",
    "query": "insert into iocdu_tt_parted values (1, 'AAA'), (2, 'BBB') on conflict (a) do update set b = iocdu_tt_parted.b || ':' || excluded.b",
    "expected": "INSERT INTO iocdu_tt_parted VALUES (1, 'AAA'), (2, 'BBB') ON CONFLICT (a) DO UPDATE SET b = iocdu_tt_parted.b || ':' || excluded.b"
  },
  {
    "comment": "triggers - Statement 717",
    "query": "insert into iocdu_tt_parted values (1, 'AAA'), (2, 'BBB'), (3, 'CCC'), (4, 'DDD') on conflict (a) do update set b = iocdu_tt_parted.b || ':' || excluded.b",
    "expected": "INSERT INTO iocdu_tt_parted VALUES (1, 'AAA'), (2, 'BBB'), (3, 'CCC'), (4, 'DDD') ON CONFLICT (a) DO UPDATE SET b = iocdu_tt_parted.b || ':' || excluded.b"
  },
  {
    "comment": "triggers - Statement 718",
    "query": "insert into iocdu_tt_parted values (3, 'CCC'), (4, 'DDD') on conflict (a) do update set b = iocdu_tt_parted.b || ':' || excluded.b",
    "expected": "INSERT INTO iocdu_tt_parted VALUES (3, 'CCC'), (4, 'DDD') ON CONFLICT (a) DO UPDATE SET b = iocdu_tt_parted.b || ':' || excluded.b"
  },
  {
    "comment": "triggers - Statement 719",
    "query": "drop table iocdu_tt_parted",
    "expected": "DROP TABLE iocdu_tt_parted"
  },
  {
    "comment": "triggers - Statement 720",
    "query": "create trigger my_table_multievent_trig after insert or update on my_table referencing new table as new_table for each statement execute procedure dump_insert()",
    "expected": "CREATE TRIGGER my_table_multievent_trig AFTER INSERT OR UPDATE ON my_table REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 721",
    "query": "create trigger my_table_col_update_trig after update of b on my_table referencing new table as new_table for each statement execute procedure dump_insert()",
    "expected": "CREATE TRIGGER my_table_col_update_trig AFTER UPDATE OF b ON my_table REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 722",
    "query": "create table refd_table (a int primary key, b text)",
    "expected": "CREATE TABLE refd_table (a INT PRIMARY KEY, b TEXT)"
  },
  {
    "comment": "triggers - Statement 723",
    "query": "create table trig_table (a int, b text, foreign key (a) references refd_table on update cascade on delete cascade )",
    "expected": "CREATE TABLE trig_table (a INT, b TEXT, FOREIGN KEY (a) REFERENCES refd_table ON DELETE CASCADE ON UPDATE CASCADE)"
  },
  {
    "comment": "triggers - Statement 724",
    "query": "create trigger trig_table_before_trig before insert or update or delete on trig_table for each statement execute procedure trigger_func('trig_table')",
    "expected": "CREATE TRIGGER trig_table_before_trig BEFORE INSERT OR UPDATE OR DELETE ON trig_table EXECUTE FUNCTION trigger_func('trig_table')"
  },
  {
    "comment": "triggers - Statement 725",
    "query": "create trigger trig_table_insert_trig after insert on trig_table referencing new table as new_table for each statement execute procedure dump_insert()",
    "expected": "CREATE TRIGGER trig_table_insert_trig AFTER INSERT ON trig_table REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 726",
    "query": "create trigger trig_table_update_trig after update on trig_table referencing old table as old_table new table as new_table for each statement execute procedure dump_update()",
    "expected": "CREATE TRIGGER trig_table_update_trig AFTER UPDATE ON trig_table REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table EXECUTE FUNCTION dump_update()"
  },
  {
    "comment": "triggers - Statement 727",
    "query": "create trigger trig_table_delete_trig after delete on trig_table referencing old table as old_table for each statement execute procedure dump_delete()",
    "expected": "CREATE TRIGGER trig_table_delete_trig AFTER DELETE ON trig_table REFERENCING OLD TABLE AS old_table EXECUTE FUNCTION dump_delete()"
  },
  {
    "comment": "triggers - Statement 728",
    "query": "insert into refd_table values (1, 'one'), (2, 'two'), (3, 'three')",
    "expected": "INSERT INTO refd_table VALUES (1, 'one'), (2, 'two'), (3, 'three')"
  },
  {
    "comment": "triggers - Statement 729",
    "query": "insert into trig_table values (1, 'one a'), (1, 'one b'), (2, 'two a'), (2, 'two b'), (3, 'three a'), (3, 'three b')",
    "expected": "INSERT INTO trig_table VALUES (1, 'one a'), (1, 'one b'), (2, 'two a'), (2, 'two b'), (3, 'three a'), (3, 'three b')"
  },
  {
    "comment": "triggers - Statement 730",
    "query": "update refd_table set a = 11 where b = 'one'",
    "expected": "UPDATE refd_table SET a = 11 WHERE b = 'one'"
  },
  {
    "comment": "triggers - Statement 731",
    "query": "select * from trig_table",
    "expected": "SELECT * FROM trig_table"
  },
  {
    "comment": "triggers - Statement 732",
    "query": "delete from refd_table where length(b) = 3",
    "expected": "DELETE FROM refd_table WHERE length(b) = 3"
  },
  {
    "comment": "triggers - Statement 733",
    "query": "drop table refd_table, trig_table",
    "expected": "DROP TABLE refd_table, trig_table"
  },
  {
    "comment": "triggers - Statement 734",
    "query": "create table refd_table (id int primary key)",
    "expected": "CREATE TABLE refd_table (id INT PRIMARY KEY)"
  },
  {
    "comment": "triggers - Statement 735",
    "query": "create table trig_table (fk int references refd_table initially deferred)",
    "expected": "CREATE TABLE trig_table (fk INT REFERENCES refd_table)"
  },
  {
    "comment": "triggers - Statement 736",
    "query": "insert into trig_table values (1)",
    "expected": "INSERT INTO trig_table VALUES (1)"
  },
  {
    "comment": "triggers - Statement 737",
    "query": "drop table refd_table cascade",
    "expected": "DROP TABLE refd_table CASCADE"
  },
  {
    "comment": "triggers - Statement 738",
    "query": "drop table trig_table",
    "expected": "DROP TABLE trig_table"
  },
  {
    "comment": "triggers - Statement 739",
    "query": "create table self_ref (a int primary key, b int references self_ref(a) on delete cascade)",
    "expected": "CREATE TABLE self_ref (a INT PRIMARY KEY, b INT REFERENCES self_ref(a) ON DELETE CASCADE)"
  },
  {
    "comment": "triggers - Statement 740",
    "query": "create trigger self_ref_before_trig before delete on self_ref for each statement execute procedure trigger_func('self_ref')",
    "expected": "CREATE TRIGGER self_ref_before_trig BEFORE DELETE ON self_ref EXECUTE FUNCTION trigger_func('self_ref')"
  },
  {
    "comment": "triggers - Statement 741",
    "query": "create trigger self_ref_r_trig after delete on self_ref referencing old table as old_table for each row execute procedure dump_delete()",
    "expected": "CREATE TRIGGER self_ref_r_trig AFTER DELETE ON self_ref REFERENCING OLD TABLE AS old_table FOR EACH ROW EXECUTE FUNCTION dump_delete()"
  },
  {
    "comment": "triggers - Statement 742",
    "query": "create trigger self_ref_s_trig after delete on self_ref referencing old table as old_table for each statement execute procedure dump_delete()",
    "expected": "CREATE TRIGGER self_ref_s_trig AFTER DELETE ON self_ref REFERENCING OLD TABLE AS old_table EXECUTE FUNCTION dump_delete()"
  },
  {
    "comment": "triggers - Statement 743",
    "query": "insert into self_ref values (1, null), (2, 1), (3, 2)",
    "expected": "INSERT INTO self_ref VALUES (1, NULL), (2, 1), (3, 2)"
  },
  {
    "comment": "triggers - Statement 744",
    "query": "delete from self_ref where a = 1",
    "expected": "DELETE FROM self_ref WHERE a = 1"
  },
  {
    "comment": "triggers - Statement 745",
    "query": "drop trigger self_ref_r_trig on self_ref",
    "expected": "DROP TRIGGER self_ref_r_trig ON self_ref"
  },
  {
    "comment": "triggers - Statement 746",
    "query": "insert into self_ref values (1, null), (2, 1), (3, 2), (4, 3)",
    "expected": "INSERT INTO self_ref VALUES (1, NULL), (2, 1), (3, 2), (4, 3)"
  },
  {
    "comment": "triggers - Statement 747",
    "query": "drop table self_ref",
    "expected": "DROP TABLE self_ref"
  },
  {
    "comment": "triggers - Statement 748",
    "query": "create table merge_target_table (a int primary key, b text)",
    "expected": "CREATE TABLE merge_target_table (a INT PRIMARY KEY, b TEXT)"
  },
  {
    "comment": "triggers - Statement 749",
    "query": "create trigger merge_target_table_insert_trig after insert on merge_target_table referencing new table as new_table for each statement execute procedure dump_insert()",
    "expected": "CREATE TRIGGER merge_target_table_insert_trig AFTER INSERT ON merge_target_table REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 750",
    "query": "create trigger merge_target_table_update_trig after update on merge_target_table referencing old table as old_table new table as new_table for each statement execute procedure dump_update()",
    "expected": "CREATE TRIGGER merge_target_table_update_trig AFTER UPDATE ON merge_target_table REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table EXECUTE FUNCTION dump_update()"
  },
  {
    "comment": "triggers - Statement 751",
    "query": "create trigger merge_target_table_delete_trig after delete on merge_target_table referencing old table as old_table for each statement execute procedure dump_delete()",
    "expected": "CREATE TRIGGER merge_target_table_delete_trig AFTER DELETE ON merge_target_table REFERENCING OLD TABLE AS old_table EXECUTE FUNCTION dump_delete()"
  },
  {
    "comment": "triggers - Statement 752",
    "query": "create table merge_source_table (a int, b text)",
    "expected": "CREATE TABLE merge_source_table (a INT, b TEXT)"
  },
  {
    "comment": "triggers - Statement 753",
    "query": "insert into merge_source_table values (1, 'initial1'), (2, 'initial2'), (3, 'initial3'), (4, 'initial4')",
    "expected": "INSERT INTO merge_source_table VALUES (1, 'initial1'), (2, 'initial2'), (3, 'initial3'), (4, 'initial4')"
  },
  {
    "comment": "triggers - Statement 754",
    "query": "merge into merge_target_table t using merge_source_table s on t.a = s.a when not matched then insert values (a, b)",
    "expected": "MERGE INTO merge_target_table AS t USING merge_source_table AS s ON t.a = s.a WHEN NOT MATCHED THEN INSERT VALUES (a, b)"
  },
  {
    "comment": "triggers - Statement 755",
    "query": "merge into merge_target_table t using merge_source_table s on t.a = s.a when matched and s.a \u003c= 2 then update set b = t.b || ' updated by merge' when matched and s.a \u003e 2 then delete when not matched then insert values (a, b)",
    "expected": "MERGE INTO merge_target_table AS t USING merge_source_table AS s ON t.a = s.a WHEN MATCHED AND s.a \u003c= 2 THEN UPDATE SET b = t.b || ' updated by merge' WHEN MATCHED AND s.a \u003e 2 THEN DELETE WHEN NOT MATCHED THEN INSERT VALUES (a, b)"
  },
  {
    "comment": "triggers - Statement 756",
    "query": "merge into merge_target_table t using merge_source_table s on t.a = s.a when matched and s.a \u003c= 2 then update set b = t.b || ' updated again by merge' when matched and s.a \u003e 2 then delete when not matched then insert values (a, b)",
    "expected": "MERGE INTO merge_target_table AS t USING merge_source_table AS s ON t.a = s.a WHEN MATCHED AND s.a \u003c= 2 THEN UPDATE SET b = t.b || ' updated again by merge' WHEN MATCHED AND s.a \u003e 2 THEN DELETE WHEN NOT MATCHED THEN INSERT VALUES (a, b)"
  },
  {
    "comment": "triggers - Statement 757",
    "query": "drop table merge_source_table, merge_target_table",
    "expected": "DROP TABLE merge_source_table, merge_target_table"
  },
  {
    "comment": "triggers - Statement 758",
    "query": "drop function dump_insert()",
    "expected": "DROP FUNCTION dump_insert()"
  },
  {
    "comment": "triggers - Statement 759",
    "query": "drop function dump_update()",
    "expected": "DROP FUNCTION dump_update()"
  },
  {
    "comment": "triggers - Statement 760",
    "query": "drop function dump_delete()",
    "expected": "DROP FUNCTION dump_delete()"
  },
  {
    "comment": "triggers - Statement 761",
    "query": "create table my_table (id integer)",
    "expected": "CREATE TABLE my_table (id INT)"
  },
  {
    "comment": "triggers - Statement 762",
    "query": "create function funcA() returns trigger as $$ begin raise notice 'hello from funcA'; return null; end; $$ language plpgsql",
    "expected": "CREATE FUNCTION funca () RETURNS trigger AS $$ begin raise notice 'hello from funcA'; return null; end; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 763",
    "query": "create function funcB() returns trigger as $$ begin raise notice 'hello from funcB'; return null; end; $$ language plpgsql",
    "expected": "CREATE FUNCTION funcb () RETURNS trigger AS $$ begin raise notice 'hello from funcB'; return null; end; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 764",
    "query": "create trigger my_trig after insert on my_table for each row execute procedure funcA()",
    "expected": "CREATE TRIGGER my_trig AFTER INSERT ON my_table FOR EACH ROW EXECUTE FUNCTION funca()"
  },
  {
    "comment": "triggers - Statement 765",
    "query": "create trigger my_trig before insert on my_table for each row execute procedure funcB()",
    "expected": "CREATE TRIGGER my_trig BEFORE INSERT ON my_table FOR EACH ROW EXECUTE FUNCTION funcb()"
  },
  {
    "comment": "triggers - Statement 766",
    "query": "insert into my_table values (1)",
    "expected": "INSERT INTO my_table VALUES (1)"
  },
  {
    "comment": "triggers - Statement 767",
    "query": "create or replace trigger my_trig before insert on my_table for each row execute procedure funcB()",
    "expected": "CREATE OR REPLACE TRIGGER my_trig BEFORE INSERT ON my_table FOR EACH ROW EXECUTE FUNCTION funcb()"
  },
  {
    "comment": "triggers - Statement 768",
    "query": "insert into my_table values (2)",
    "expected": "INSERT INTO my_table VALUES (2)"
  },
  {
    "comment": "triggers - Statement 769",
    "query": "table my_table",
    "expected": "SELECT * FROM my_table"
  },
  {
    "comment": "triggers - Statement 770",
    "query": "create table default_parted_trig partition of parted_trig default",
    "expected": "CREATE TABLE default_parted_trig PARTITION OF parted_trig DEFAULT"
  },
  {
    "comment": "triggers - Statement 771",
    "query": "create or replace trigger my_trig after insert on parted_trig for each row execute procedure funcA()",
    "expected": "CREATE OR REPLACE TRIGGER my_trig AFTER INSERT ON parted_trig FOR EACH ROW EXECUTE FUNCTION funca()"
  },
  {
    "comment": "triggers - Statement 772",
    "query": "insert into parted_trig (a) values (50)",
    "expected": "INSERT INTO parted_trig (a) VALUES (50)"
  },
  {
    "comment": "triggers - Statement 773",
    "query": "create or replace trigger my_trig after insert on parted_trig for each row execute procedure funcB()",
    "expected": "CREATE OR REPLACE TRIGGER my_trig AFTER INSERT ON parted_trig FOR EACH ROW EXECUTE FUNCTION funcb()"
  },
  {
    "comment": "triggers - Statement 774",
    "query": "create or replace trigger my_trig after insert on parted_trig_1 for each row execute procedure funcB()",
    "expected": "CREATE OR REPLACE TRIGGER my_trig AFTER INSERT ON parted_trig_1 FOR EACH ROW EXECUTE FUNCTION funcb()"
  },
  {
    "comment": "triggers - Statement 775",
    "query": "drop trigger my_trig on parted_trig",
    "expected": "DROP TRIGGER my_trig ON parted_trig"
  },
  {
    "comment": "triggers - Statement 776",
    "query": "create trigger my_trig after insert on parted_trig_1 for each row execute procedure funcA()",
    "expected": "CREATE TRIGGER my_trig AFTER INSERT ON parted_trig_1 FOR EACH ROW EXECUTE FUNCTION funca()"
  },
  {
    "comment": "triggers - Statement 777",
    "query": "create trigger my_trig after insert on parted_trig for each row execute procedure funcB()",
    "expected": "CREATE TRIGGER my_trig AFTER INSERT ON parted_trig FOR EACH ROW EXECUTE FUNCTION funcb()"
  },
  {
    "comment": "triggers - Statement 778",
    "query": "drop function funcA()",
    "expected": "DROP FUNCTION funca()"
  },
  {
    "comment": "triggers - Statement 779",
    "query": "drop function funcB()",
    "expected": "DROP FUNCTION funcb()"
  },
  {
    "comment": "triggers - Statement 780",
    "query": "create table trigger_parted (a int primary key) partition by list (a)",
    "expected": "CREATE TABLE trigger_parted (a INT PRIMARY KEY) PARTITION BY list (a)"
  },
  {
    "comment": "triggers - Statement 781",
    "query": "create function trigger_parted_trigfunc() returns trigger language plpgsql as $$ begin end; $$",
    "expected": "CREATE FUNCTION trigger_parted_trigfunc () RETURNS trigger LANGUAGE plpgsql AS $$ begin end; $$"
  },
  {
    "comment": "triggers - Statement 782",
    "query": "create trigger aft_row after insert or update on trigger_parted for each row execute function trigger_parted_trigfunc()",
    "expected": "CREATE TRIGGER aft_row AFTER INSERT OR UPDATE ON trigger_parted FOR EACH ROW EXECUTE FUNCTION trigger_parted_trigfunc()"
  },
  {
    "comment": "triggers - Statement 783",
    "query": "create table trigger_parted_p1 partition of trigger_parted for values in (1) partition by list (a)",
    "expected": "CREATE TABLE trigger_parted_p1 PARTITION OF trigger_parted FOR VALUES IN (1) PARTITION BY list (a)"
  },
  {
    "comment": "triggers - Statement 784",
    "query": "create table trigger_parted_p1_1 partition of trigger_parted_p1 for values in (1)",
    "expected": "CREATE TABLE trigger_parted_p1_1 PARTITION OF trigger_parted_p1 FOR VALUES IN (1)"
  },
  {
    "comment": "triggers - Statement 785",
    "query": "create table trigger_parted_p2 partition of trigger_parted for values in (2) partition by list (a)",
    "expected": "CREATE TABLE trigger_parted_p2 PARTITION OF trigger_parted FOR VALUES IN (2) PARTITION BY list (a)"
  },
  {
    "comment": "triggers - Statement 786",
    "query": "create table trigger_parted_p2_2 partition of trigger_parted_p2 for values in (2)",
    "expected": "CREATE TABLE trigger_parted_p2_2 PARTITION OF trigger_parted_p2 FOR VALUES IN (2)"
  },
  {
    "comment": "triggers - Statement 787",
    "query": "alter table only trigger_parted_p2 disable trigger aft_row",
    "expected": "ALTER TABLE ONLY trigger_parted_p2 DISABLE TRIGGER aft_row"
  },
  {
    "comment": "triggers - Statement 788",
    "query": "alter table trigger_parted_p2_2 enable always trigger aft_row",
    "expected": "ALTER TABLE trigger_parted_p2_2 ENABLE ALWAYS TRIGGER aft_row"
  },
  {
    "comment": "triggers - Statement 789",
    "query": "create table convslot_test_parent (col1 text primary key)",
    "expected": "CREATE TABLE convslot_test_parent (col1 TEXT PRIMARY KEY)"
  },
  {
    "comment": "triggers - Statement 790",
    "query": "create table convslot_test_child (col1 text primary key, foreign key (col1) references convslot_test_parent(col1) on delete cascade on update cascade )",
    "expected": "CREATE TABLE convslot_test_child (col1 TEXT PRIMARY KEY, FOREIGN KEY (col1) REFERENCES convslot_test_parent(col1) ON DELETE CASCADE ON UPDATE CASCADE)"
  },
  {
    "comment": "triggers - Statement 791",
    "query": "alter table convslot_test_child add column col2 text not null default 'tutu'",
    "expected": "ALTER TABLE convslot_test_child ADD COLUMN col2 TEXT NOT NULL DEFAULT 'tutu'"
  },
  {
    "comment": "triggers - Statement 792",
    "query": "insert into convslot_test_parent(col1) values ('1')",
    "expected": "INSERT INTO convslot_test_parent (col1) VALUES ('1')"
  },
  {
    "comment": "triggers - Statement 793",
    "query": "insert into convslot_test_child(col1) values ('1')",
    "expected": "INSERT INTO convslot_test_child (col1) VALUES ('1')"
  },
  {
    "comment": "triggers - Statement 794",
    "query": "insert into convslot_test_parent(col1) values ('3')",
    "expected": "INSERT INTO convslot_test_parent (col1) VALUES ('3')"
  },
  {
    "comment": "triggers - Statement 795",
    "query": "insert into convslot_test_child(col1) values ('3')",
    "expected": "INSERT INTO convslot_test_child (col1) VALUES ('3')"
  },
  {
    "comment": "triggers - Statement 796",
    "query": "create function convslot_trig1() returns trigger language plpgsql AS $$ begin raise notice 'trigger = %, old_table = %', TG_NAME, (select string_agg(old_table::text, ', ' order by col1) from old_table); return null; end; $$",
    "expected": "CREATE FUNCTION convslot_trig1 () RETURNS trigger LANGUAGE plpgsql AS $$ begin raise notice 'trigger = %, old_table = %', TG_NAME, (select string_agg(old_table::text, ', ' order by col1) from old_table); return null; end; $$"
  },
  {
    "comment": "triggers - Statement 797",
    "query": "create function convslot_trig2() returns trigger language plpgsql AS $$ begin raise notice 'trigger = %, new table = %', TG_NAME, (select string_agg(new_table::text, ', ' order by col1) from new_table); return null; end; $$",
    "expected": "CREATE FUNCTION convslot_trig2 () RETURNS trigger LANGUAGE plpgsql AS $$ begin raise notice 'trigger = %, new table = %', TG_NAME, (select string_agg(new_table::text, ', ' order by col1) from new_table); return null; end; $$"
  },
  {
    "comment": "triggers - Statement 798",
    "query": "create trigger but_trigger after update on convslot_test_child referencing new table as new_table for each statement execute function convslot_trig2()",
    "expected": "CREATE TRIGGER but_trigger AFTER UPDATE ON convslot_test_child REFERENCING NEW TABLE AS new_table EXECUTE FUNCTION convslot_trig2()"
  },
  {
    "comment": "triggers - Statement 799",
    "query": "update convslot_test_parent set col1 = col1 || '1'",
    "expected": "UPDATE convslot_test_parent SET col1 = col1 || '1'"
  },
  {
    "comment": "triggers - Statement 800",
    "query": "create function convslot_trig3() returns trigger language plpgsql AS $$ begin raise notice 'trigger = %, old_table = %, new table = %', TG_NAME, (select string_agg(old_table::text, ', ' order by col1) from old_table), (select string_agg(new_table::text, ', ' order by col1) from new_table); return null; end; $$",
    "expected": "CREATE FUNCTION convslot_trig3 () RETURNS trigger LANGUAGE plpgsql AS $$ begin raise notice 'trigger = %, old_table = %, new table = %', TG_NAME, (select string_agg(old_table::text, ', ' order by col1) from old_table), (select string_agg(new_table::text, ', ' order by col1) from new_table); return null; end; $$"
  },
  {
    "comment": "triggers - Statement 801",
    "query": "create trigger but_trigger2 after update on convslot_test_child referencing old table as old_table new table as new_table for each statement execute function convslot_trig3()",
    "expected": "CREATE TRIGGER but_trigger2 AFTER UPDATE ON convslot_test_child REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table EXECUTE FUNCTION convslot_trig3()"
  },
  {
    "comment": "triggers - Statement 802",
    "query": "create trigger bdt_trigger after delete on convslot_test_child referencing old table as old_table for each statement execute function convslot_trig1()",
    "expected": "CREATE TRIGGER bdt_trigger AFTER DELETE ON convslot_test_child REFERENCING OLD TABLE AS old_table EXECUTE FUNCTION convslot_trig1()"
  },
  {
    "comment": "triggers - Statement 803",
    "query": "delete from convslot_test_parent",
    "expected": "DELETE FROM convslot_test_parent"
  },
  {
    "comment": "triggers - Statement 804",
    "query": "drop table convslot_test_child, convslot_test_parent",
    "expected": "DROP TABLE convslot_test_child, convslot_test_parent"
  },
  {
    "comment": "triggers - Statement 805",
    "query": "drop function convslot_trig1()",
    "expected": "DROP FUNCTION convslot_trig1()"
  },
  {
    "comment": "triggers - Statement 806",
    "query": "drop function convslot_trig2()",
    "expected": "DROP FUNCTION convslot_trig2()"
  },
  {
    "comment": "triggers - Statement 807",
    "query": "drop function convslot_trig3()",
    "expected": "DROP FUNCTION convslot_trig3()"
  },
  {
    "comment": "triggers - Statement 808",
    "query": "create table convslot_test_parent (id int primary key, val int) partition by range (id)",
    "expected": "CREATE TABLE convslot_test_parent (id INT PRIMARY KEY, val INT) PARTITION BY range (id)"
  },
  {
    "comment": "triggers - Statement 809",
    "query": "create table convslot_test_part (val int, id int not null)",
    "expected": "CREATE TABLE convslot_test_part (val INT, id INT NOT NULL)"
  },
  {
    "comment": "triggers - Statement 810",
    "query": "alter table convslot_test_parent attach partition convslot_test_part for values from (1) to (1000)",
    "expected": "ALTER TABLE convslot_test_parent ATTACH PARTITION convslot_test_part FOR VALUES FROM (1) TO (1000)"
  },
  {
    "comment": "triggers - Statement 811",
    "query": "create function convslot_trig4() returns trigger as $$begin raise exception 'BOOM!'; end$$ language plpgsql",
    "expected": "CREATE FUNCTION convslot_trig4 () RETURNS trigger AS $$begin raise exception 'BOOM!'; end$$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers - Statement 812",
    "query": "create trigger convslot_test_parent_update after update on convslot_test_parent referencing old table as old_rows new table as new_rows for each statement execute procedure convslot_trig4()",
    "expected": "CREATE TRIGGER convslot_test_parent_update AFTER UPDATE ON convslot_test_parent REFERENCING OLD TABLE AS old_rows NEW TABLE AS new_rows EXECUTE FUNCTION convslot_trig4()"
  },
  {
    "comment": "triggers - Statement 813",
    "query": "insert into convslot_test_parent (id, val) values (1, 2)",
    "expected": "INSERT INTO convslot_test_parent (id, val) VALUES (1, 2)"
  },
  {
    "comment": "triggers - Statement 814",
    "query": "savepoint svp",
    "expected": "SAVEPOINT svp"
  },
  {
    "comment": "triggers - Statement 815",
    "query": "update convslot_test_parent set val = 3",
    "expected": "UPDATE convslot_test_parent SET val = 3"
  },
  {
    "comment": "triggers - Statement 816",
    "query": "rollback to savepoint svp",
    "expected": "ROLLBACK TO SAVEPOINT svp"
  },
  {
    "comment": "triggers - Statement 817",
    "query": "drop table convslot_test_parent",
    "expected": "DROP TABLE convslot_test_parent"
  },
  {
    "comment": "triggers - Statement 818",
    "query": "drop function convslot_trig4()",
    "expected": "DROP FUNCTION convslot_trig4()"
  },
  {
    "comment": "triggers - Statement 819",
    "query": "create table grandparent (id int, primary key (id)) partition by range (id)",
    "expected": "CREATE TABLE grandparent (id INT, PRIMARY KEY (id)) PARTITION BY range (id)"
  },
  {
    "comment": "triggers - Statement 820",
    "query": "create table middle partition of grandparent for values from (1) to (10) partition by range (id)",
    "expected": "CREATE TABLE middle PARTITION OF grandparent FOR VALUES FROM (1) TO (10) PARTITION BY range (id)"
  },
  {
    "comment": "triggers - Statement 821",
    "query": "create table chi partition of middle for values from (1) to (5)",
    "expected": "CREATE TABLE chi PARTITION OF middle FOR VALUES FROM (1) TO (5)"
  },
  {
    "comment": "triggers - Statement 822",
    "query": "create table cho partition of middle for values from (6) to (10)",
    "expected": "CREATE TABLE cho PARTITION OF middle FOR VALUES FROM (6) TO (10)"
  },
  {
    "comment": "triggers - Statement 823",
    "query": "create function f () returns trigger as $$ begin return new; end; $$ language plpgsql;",
    "expected": "CREATE FUNCTION f () RETURNS trigger AS $$ begin return new; end; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "triggers test",
    "query": "create trigger a after insert on grandparent for each row execute procedure f();  ",
    "expected": "CREATE TRIGGER a AFTER INSERT ON grandparent FOR EACH ROW EXECUTE FUNCTION f()"
  },
  {
    "comment": "triggers test",
    "query": "alter trigger a on grandparent rename to b; ",
    "expected": "ALTER TRIGGER a ON grandparent RENAME TO b"
  },
  {
    "comment": "triggers test",
    "query": "select tgrelid::regclass, tgname, (select tgname from pg_trigger tr where tr.oid = pg_trigger.tgparentid) parent_tgname from pg_trigger where tgrelid in (select relid from pg_partition_tree('grandparent')) order by tgname, tgrelid::regclass::text COLLATE \"C\"; ",
    "expected": "SELECT CAST(tgrelid AS regclass), tgname, (SELECT tgname FROM pg_trigger AS tr WHERE tr.oid = pg_trigger.tgparentid) AS parent_tgname FROM pg_trigger WHERE tgrelid IN (SELECT relid FROM pg_partition_tree('grandparent')) ORDER BY tgname, CAST(CAST(tgrelid AS regclass) AS TEXT) COLLATE \"C\""
  },
  {
    "comment": "triggers test",
    "query": "alter trigger a on only grandparent rename to b; alter trigger b on middle rename to c; ",
    "error": "parse error at position 23: syntax error"
  },
  {
    "comment": "triggers test",
    "query": "create trigger c after insert on middle for each row execute procedure f(); alter trigger b on grandparent rename to c;   ",
    "expected": "CREATE TRIGGER c AFTER INSERT ON middle FOR EACH ROW EXECUTE FUNCTION f(); ALTER TRIGGER b ON grandparent RENAME TO c"
  },
  {
    "comment": "triggers test",
    "query": "create trigger p after insert on grandparent for each statement execute function f(); ",
    "expected": "CREATE TRIGGER p AFTER INSERT ON grandparent EXECUTE FUNCTION f()"
  },
  {
    "comment": "triggers test",
    "query": "create trigger p after insert on middle for each statement execute function f(); ",
    "expected": "CREATE TRIGGER p AFTER INSERT ON middle EXECUTE FUNCTION f()"
  },
  {
    "comment": "triggers test",
    "query": "alter trigger p on grandparent rename to q; select tgrelid::regclass, tgname, (select tgname from pg_trigger tr where tr.oid = pg_trigger.tgparentid) parent_tgname from pg_trigger where tgrelid in (select relid from pg_partition_tree('grandparent')) order by tgname, tgrelid::regclass::text COLLATE \"C\";  ",
    "expected": "ALTER TRIGGER p ON grandparent RENAME TO q; SELECT CAST(tgrelid AS regclass), tgname, (SELECT tgname FROM pg_trigger AS tr WHERE tr.oid = pg_trigger.tgparentid) AS parent_tgname FROM pg_trigger WHERE tgrelid IN (SELECT relid FROM pg_partition_tree('grandparent')) ORDER BY tgname, CAST(CAST(tgrelid AS regclass) AS TEXT) COLLATE \"C\""
  },
  {
    "comment": "triggers test",
    "query": "drop table grandparent;   ",
    "expected": "DROP TABLE grandparent"
  },
  {
    "comment": "triggers test",
    "query": "create table parent (a int); ",
    "expected": "CREATE TABLE parent (a INT)"
  },
  {
    "comment": "triggers test",
    "query": "create table child () inherits (parent); ",
    "expected": "CREATE TABLE child () INHERITS (parent)"
  },
  {
    "comment": "triggers test",
    "query": "create trigger parenttrig after insert on parent for each row execute procedure f(); ",
    "expected": "CREATE TRIGGER parenttrig AFTER INSERT ON parent FOR EACH ROW EXECUTE FUNCTION f()"
  },
  {
    "comment": "triggers test",
    "query": "create trigger parenttrig after insert on child for each row execute procedure f(); ",
    "expected": "CREATE TRIGGER parenttrig AFTER INSERT ON child FOR EACH ROW EXECUTE FUNCTION f()"
  },
  {
    "comment": "triggers test",
    "query": "alter trigger parenttrig on parent rename to anothertrig; ",
    "expected": "ALTER TRIGGER parenttrig ON parent RENAME TO anothertrig"
  },
  {
    "comment": "triggers test",
    "query": "child  drop table parent, child; ",
    "error": "parse error at position 5: syntax error"
  },
  {
    "comment": "triggers test",
    "query": "drop function f()",
    "expected": "DROP FUNCTION f()"
  }
]
