[
  {
    "comment": "copy - Statement 1",
    "query": "insert into copytest values('DOS',E'abc\\r\\ndef',1)"
  },
  {
    "comment": "copy - Statement 2",
    "query": "insert into copytest values('Unix',E'abc\\ndef',2)"
  },
  {
    "comment": "copy - Statement 3",
    "query": "insert into copytest values('Mac',E'abc\\rdef',3)"
  },
  {
    "comment": "copy - Statement 4",
    "query": "insert into copytest values(E'esc\\\\ape',E'a\\\\r\\\\\\r\\\\\\n\\\\nb',4)"
  },
  {
    "comment": "copy - Statement 5",
    "query": "create temp table copytest2 (like copytest)"
  },
  {
    "comment": "copy - Statement 6",
    "query": "copy copytest2 from :'filename' csv"
  },
  {
    "comment": "copy - Statement 7",
    "query": "select * from copytest except select * from copytest2"
  },
  {
    "comment": "copy - Statement 8",
    "query": "truncate copytest2"
  },
  {
    "comment": "copy - Statement 9",
    "query": "copy copytest to :'filename' csv quote '''' escape E'\\\\'"
  },
  {
    "comment": "copy - Statement 10",
    "query": "copy copytest2 from :'filename' csv quote '''' escape E'\\\\'"
  },
  {
    "comment": "copy - Statement 11",
    "query": "create temp table copytest3 ( c1 int, \"col with , comma\" text, \"col with \"\" quote\"  int)"
  },
  {
    "comment": "copy - Statement 12",
    "query": "copy copytest3 from stdin csv header"
  },
  {
    "comment": "copy - Statement 13",
    "query": "this is just a line full of junk that would error out if parsed 1,a,1 2,b,2 \\. copy copytest3 to stdout csv header"
  },
  {
    "comment": "copy - Statement 14",
    "query": "create temp table copytest4 ( c1 int, \"colname with tab: \t\" text)"
  },
  {
    "comment": "copy - Statement 15",
    "query": "copy copytest4 from stdin (header)"
  },
  {
    "comment": "copy - Statement 16",
    "query": "this is just a line full of junk that would error out if parsed 1\ta 2\tb \\. copy copytest4 to stdout (header)"
  },
  {
    "comment": "copy - Statement 17",
    "query": "create table parted_copytest ( a int, b int, c text ) partition by list (b)"
  },
  {
    "comment": "copy - Statement 18",
    "query": "create table parted_copytest_a1 (c text, b int, a int)"
  },
  {
    "comment": "copy - Statement 19",
    "query": "create table parted_copytest_a2 (a int, c text, b int)"
  },
  {
    "comment": "copy - Statement 20",
    "query": "alter table parted_copytest attach partition parted_copytest_a1 for values in(1)"
  },
  {
    "comment": "copy - Statement 21",
    "query": "alter table parted_copytest attach partition parted_copytest_a2 for values in(2)"
  },
  {
    "comment": "copy - Statement 22",
    "query": "insert into parted_copytest select x,1,'One' from generate_series(1,1000) x"
  },
  {
    "comment": "copy - Statement 23",
    "query": "insert into parted_copytest select x,2,'Two' from generate_series(1001,1010) x"
  },
  {
    "comment": "copy - Statement 24",
    "query": "insert into parted_copytest select x,1,'One' from generate_series(1011,1020) x"
  },
  {
    "comment": "copy - Statement 25",
    "query": "truncate parted_copytest"
  },
  {
    "comment": "copy - Statement 26",
    "query": "copy parted_copytest from :'filename'"
  },
  {
    "comment": "copy - Statement 27",
    "query": "begin"
  },
  {
    "comment": "copy - Statement 28",
    "query": "copy parted_copytest from :'filename' (freeze)"
  },
  {
    "comment": "copy - Statement 29",
    "query": "rollback"
  },
  {
    "comment": "copy - Statement 30",
    "query": "select tableoid::regclass,count(*),sum(a) from parted_copytest group by tableoid order by tableoid::regclass::name"
  },
  {
    "comment": "copy - Statement 31",
    "query": "create function part_ins_func() returns trigger language plpgsql as $$ begin return new"
  },
  {
    "comment": "copy - Statement 32",
    "query": "end"
  },
  {
    "comment": "copy - Statement 33",
    "query": "$$"
  },
  {
    "comment": "copy - Statement 34",
    "query": "create trigger part_ins_trig before insert on parted_copytest_a2 for each row execute procedure part_ins_func()"
  },
  {
    "comment": "copy - Statement 35",
    "query": "truncate table parted_copytest"
  },
  {
    "comment": "copy - Statement 36",
    "query": "create index on parted_copytest (b)"
  },
  {
    "comment": "copy - Statement 37",
    "query": "drop trigger part_ins_trig on parted_copytest_a2"
  },
  {
    "comment": "copy - Statement 38",
    "query": "copy parted_copytest from stdin"
  },
  {
    "comment": "copy - Statement 39",
    "query": "1\t1\tstr1 2\t2\tstr2 \\. select * from parted_copytest where b = 1"
  },
  {
    "comment": "copy - Statement 40",
    "query": "select * from parted_copytest where b = 2"
  },
  {
    "comment": "copy - Statement 41",
    "query": "drop table parted_copytest"
  },
  {
    "comment": "copy - Statement 42",
    "query": "create table tab_progress_reporting ( name text, age int4, location point, salary int4, manager name )"
  },
  {
    "comment": "copy - Statement 43",
    "query": "create function notice_after_tab_progress_reporting() returns trigger AS $$ declare report record"
  },
  {
    "comment": "copy - Statement 44",
    "query": "begin with progress_data as ( select relid::regclass::text as relname, command, type, bytes_processed > 0 as has_bytes_processed, bytes_total > 0 as has_bytes_total, tuples_processed, tuples_excluded from pg_stat_progress_copy where pid = pg_backend_pid()) select into report (to_jsonb(r)) as value from progress_data r"
  },
  {
    "comment": "copy - Statement 45",
    "query": "raise info 'progress: %', report.value::text"
  },
  {
    "comment": "copy - Statement 46",
    "query": "return new"
  },
  {
    "comment": "copy - Statement 47",
    "query": "$$ language plpgsql"
  },
  {
    "comment": "copy - Statement 48",
    "query": "create trigger check_after_tab_progress_reporting after insert on tab_progress_reporting for each statement execute function notice_after_tab_progress_reporting()"
  },
  {
    "comment": "copy - Statement 49",
    "query": "copy tab_progress_reporting from stdin"
  },
  {
    "comment": "copy - Statement 50",
    "query": "sharon\t25\t(15,12)\t1000\tsam sam\t30\t(10,5)\t2000\tbill bill\t20\t(11,10)\t1000\tsharon \\. truncate tab_progress_reporting"
  },
  {
    "comment": "copy - Statement 51",
    "query": "drop trigger check_after_tab_progress_reporting on tab_progress_reporting"
  },
  {
    "comment": "copy - Statement 52",
    "query": "drop function notice_after_tab_progress_reporting()"
  },
  {
    "comment": "copy - Statement 53",
    "query": "drop table tab_progress_reporting"
  },
  {
    "comment": "copy - Statement 54",
    "query": "create table header_copytest ( a int, b int, c text )"
  },
  {
    "comment": "copy - Statement 55",
    "query": "alter table header_copytest drop column c"
  },
  {
    "comment": "copy - Statement 56",
    "query": "alter table header_copytest add column c text"
  },
  {
    "comment": "copy - Statement 57",
    "query": "copy header_copytest to stdout with (header match)"
  },
  {
    "comment": "copy - Statement 58",
    "query": "copy header_copytest from stdin with (header wrong_choice)"
  },
  {
    "comment": "copy - Statement 59",
    "query": "copy header_copytest from stdin with (header match)"
  },
  {
    "comment": "copy - Statement 60",
    "query": "a\tb\tc 1\t2\tfoo \\. copy header_copytest (c, a, b) from stdin with (header match)"
  },
  {
    "comment": "copy - Statement 61",
    "query": "c\ta\tb bar\t3\t4 \\. copy header_copytest from stdin with (header match, format csv)"
  },
  {
    "comment": "copy - Statement 62",
    "query": "a,b,c 5,6,baz \\. copy header_copytest (c, b, a) from stdin with (header match)"
  },
  {
    "comment": "copy - Statement 63",
    "query": "a\tb\tc 1\t2\tfoo \\. copy header_copytest from stdin with (header match)"
  },
  {
    "comment": "copy - Statement 64",
    "query": "a\tb\t\\N 1\t2\tfoo \\. copy header_copytest from stdin with (header match)"
  },
  {
    "comment": "copy - Statement 65",
    "query": "a\tb 1\t2 \\. copy header_copytest from stdin with (header match)"
  },
  {
    "comment": "copy - Statement 66",
    "query": "a\tb\tc\td 1\t2\tfoo\tbar \\. copy header_copytest from stdin with (header match)"
  },
  {
    "comment": "copy - Statement 67",
    "query": "a\tb\td 1\t2\tfoo \\. SELECT * FROM header_copytest ORDER BY a"
  },
  {
    "comment": "copy - Statement 68",
    "query": "alter table header_copytest drop column b"
  },
  {
    "comment": "copy - Statement 69",
    "query": "copy header_copytest (c, a) from stdin with (header match)"
  },
  {
    "comment": "copy - Statement 70",
    "query": "c\ta foo\t7 \\. copy header_copytest (a, c) from stdin with (header match)"
  },
  {
    "comment": "copy - Statement 71",
    "query": "a\tc 8\tfoo \\. copy header_copytest from stdin with (header match)"
  },
  {
    "comment": "copy - Statement 72",
    "query": "a\t........pg.dropped.2........\tc 1\t2\tfoo \\. copy header_copytest (a, c) from stdin with (header match)"
  },
  {
    "comment": "copy - Statement 73",
    "query": "a\tc\tb 1\tfoo\t2 \\. SELECT * FROM header_copytest ORDER BY a"
  },
  {
    "comment": "copy - Statement 74",
    "query": "drop table header_copytest"
  },
  {
    "comment": "copy - Statement 75",
    "query": "create temp table oversized_column_default ( col1 varchar(5) DEFAULT 'more than 5 chars', col2 varchar(5))"
  },
  {
    "comment": "copy - Statement 76",
    "query": "copy oversized_column_default from stdin"
  },
  {
    "comment": "copy - Statement 77",
    "query": "CREATE TABLE parted_si ( id int not null, data text not null, rand float8 not null default random() ) PARTITION BY LIST((id % 2))"
  },
  {
    "comment": "copy - Statement 78",
    "query": "CREATE TABLE parted_si_p_even PARTITION OF parted_si FOR VALUES IN (0)"
  },
  {
    "comment": "copy - Statement 79",
    "query": "CREATE TABLE parted_si_p_odd PARTITION OF parted_si FOR VALUES IN (1)"
  },
  {
    "comment": "copy - Statement 80",
    "query": "SELECT tableoid::regclass, id % 2 = 0 is_even, count(*) from parted_si GROUP BY 1, 2 ORDER BY 1"
  },
  {
    "comment": "copy - Statement 81",
    "query": "DROP TABLE parted_si"
  }
]