[
  {
    "comment": "gin - Statement 1",
    "query": "create table gin_test_tbl(i int4[]) with (autovacuum_enabled = off)"
  },
  {
    "comment": "gin - Statement 2",
    "query": "create index gin_test_idx on gin_test_tbl using gin (i) with (fastupdate = on, gin_pending_list_limit = 4096)"
  },
  {
    "comment": "gin - Statement 3",
    "query": "insert into gin_test_tbl select array[1, 2, g] from generate_series(1, 20000) g"
  },
  {
    "comment": "gin - Statement 4",
    "query": "insert into gin_test_tbl select array[1, 3, g] from generate_series(1, 1000) g"
  },
  {
    "comment": "gin - Statement 5",
    "query": "select gin_clean_pending_list('gin_test_idx')>10 as many"
  },
  {
    "comment": "gin - Statement 6",
    "query": "insert into gin_test_tbl select array[3, 1, g] from generate_series(1, 1000) g"
  },
  {
    "comment": "gin - Statement 7",
    "query": "vacuum gin_test_tbl"
  },
  {
    "comment": "gin - Statement 8",
    "query": "select gin_clean_pending_list('gin_test_idx')"
  },
  {
    "comment": "gin - Statement 9",
    "query": "delete from gin_test_tbl where i @> array[2]"
  },
  {
    "comment": "gin - Statement 10",
    "query": "alter index gin_test_idx set (fastupdate = off)"
  },
  {
    "comment": "gin - Statement 11",
    "query": "insert into gin_test_tbl select array[1, 2, g] from generate_series(1, 1000) g"
  },
  {
    "comment": "gin - Statement 12",
    "query": "explain (costs off) select count(*) from gin_test_tbl where i @> array[1, 999]"
  },
  {
    "comment": "gin - Statement 13",
    "query": "select count(*) from gin_test_tbl where i @> array[1, 999]"
  },
  {
    "comment": "gin - Statement 14",
    "query": "set gin_fuzzy_search_limit = 1000"
  },
  {
    "comment": "gin - Statement 15",
    "query": "explain (costs off) select count(*) > 0 as ok from gin_test_tbl where i @> array[1]"
  },
  {
    "comment": "gin - Statement 16",
    "query": "select count(*) > 0 as ok from gin_test_tbl where i @> array[1]"
  },
  {
    "comment": "gin - Statement 17",
    "query": "reset gin_fuzzy_search_limit"
  },
  {
    "comment": "gin - Statement 18",
    "query": "create temp table t_gin_test_tbl(i int4[], j int4[])"
  },
  {
    "comment": "gin - Statement 19",
    "query": "create index on t_gin_test_tbl using gin (i, j)"
  },
  {
    "comment": "gin - Statement 20",
    "query": "insert into t_gin_test_tbl values (null,    null), ('{}',    null), ('{1}',   null), ('{1,2}', null), (null,    '{}'), (null,    '{10}'), ('{1,2}', '{10}'), ('{2}',   '{10}'), ('{1,3}', '{}'), ('{1,1}', '{10}')"
  },
  {
    "comment": "gin - Statement 21",
    "query": "set enable_seqscan = off"
  },
  {
    "comment": "gin - Statement 22",
    "query": "explain (costs off) select * from t_gin_test_tbl where array[0] <@ i"
  },
  {
    "comment": "gin - Statement 23",
    "query": "select * from t_gin_test_tbl where array[0] <@ i"
  },
  {
    "comment": "gin - Statement 24",
    "query": "select * from t_gin_test_tbl where array[0] <@ i and '{}'::int4[] <@ j"
  },
  {
    "comment": "gin - Statement 25",
    "query": "explain (costs off) select * from t_gin_test_tbl where i @> '{}'"
  },
  {
    "comment": "gin - Statement 26",
    "query": "select * from t_gin_test_tbl where i @> '{}'"
  },
  {
    "comment": "gin - Statement 27",
    "query": "create function explain_query_json(query_sql text) returns table (explain_line json) language plpgsql as $$ begin set enable_seqscan = off"
  },
  {
    "comment": "gin - Statement 28",
    "query": "set enable_bitmapscan = on"
  },
  {
    "comment": "gin - Statement 29",
    "query": "return query execute 'EXPLAIN (ANALYZE, FORMAT json) ' || query_sql"
  },
  {
    "comment": "gin - Statement 30",
    "query": "end"
  },
  {
    "comment": "gin - Statement 31",
    "query": "$$"
  },
  {
    "comment": "gin - Statement 32",
    "query": "create function execute_text_query_index(query_sql text) returns setof text language plpgsql as $$ begin set enable_seqscan = off"
  },
  {
    "comment": "gin - Statement 33",
    "query": "return query execute query_sql"
  },
  {
    "comment": "gin - Statement 34",
    "query": "create function execute_text_query_heap(query_sql text) returns setof text language plpgsql as $$ begin set enable_seqscan = on"
  },
  {
    "comment": "gin - Statement 35",
    "query": "set enable_bitmapscan = off"
  },
  {
    "comment": "gin - Statement 36",
    "query": "select query, js->0->'Plan'->'Plans'->0->'Actual Rows' as \"return by index\", js->0->'Plan'->'Rows Removed by Index Recheck' as \"removed by recheck\", (res_index = res_heap) as \"match\" from (values ($$ i @> '{}' $$), ($$ j @> '{}' $$), ($$ i @> '{}' and j @> '{}' $$), ($$ i @> '{1}' $$), ($$ i @> '{1}' and j @> '{}' $$), ($$ i @> '{1}' and i @> '{}' and j @> '{}' $$), ($$ j @> '{10}' $$), ($$ j @> '{10}' and i @> '{}' $$), ($$ j @> '{10}' and j @> '{}' and i @> '{}' $$), ($$ i @> '{1}' and j @> '{10}' $$) ) q(query), lateral explain_query_json($$select * from t_gin_test_tbl where $$ || query) js, lateral execute_text_query_index($$select string_agg((i, j)::text, ' ') from t_gin_test_tbl where $$ || query) res_index, lateral execute_text_query_heap($$select string_agg((i, j)::text, ' ') from t_gin_test_tbl where $$ || query) res_heap"
  },
  {
    "comment": "gin - Statement 37",
    "query": "reset enable_seqscan"
  },
  {
    "comment": "gin - Statement 38",
    "query": "reset enable_bitmapscan"
  },
  {
    "comment": "gin - Statement 39",
    "query": "insert into t_gin_test_tbl select array[1, g, g/10], array[2, g, g/10] from generate_series(1, 20000) g"
  },
  {
    "comment": "gin - Statement 40",
    "query": "select gin_clean_pending_list('t_gin_test_tbl_i_j_idx') is not null"
  },
  {
    "comment": "gin - Statement 41",
    "query": "analyze t_gin_test_tbl"
  },
  {
    "comment": "gin - Statement 42",
    "query": "explain (costs off) select count(*) from t_gin_test_tbl where j @> array[50]"
  },
  {
    "comment": "gin - Statement 43",
    "query": "select count(*) from t_gin_test_tbl where j @> array[50]"
  },
  {
    "comment": "gin - Statement 44",
    "query": "explain (costs off) select count(*) from t_gin_test_tbl where j @> array[2]"
  },
  {
    "comment": "gin - Statement 45",
    "query": "select count(*) from t_gin_test_tbl where j @> array[2]"
  },
  {
    "comment": "gin - Statement 46",
    "query": "explain (costs off) select count(*) from t_gin_test_tbl where j @> '{}'::int[]"
  },
  {
    "comment": "gin - Statement 47",
    "query": "select count(*) from t_gin_test_tbl where j @> '{}'::int[]"
  },
  {
    "comment": "gin - Statement 48",
    "query": "delete from t_gin_test_tbl where j @> array[2]"
  },
  {
    "comment": "gin - Statement 49",
    "query": "vacuum t_gin_test_tbl"
  },
  {
    "comment": "gin - Statement 50",
    "query": "drop table t_gin_test_tbl"
  },
  {
    "comment": "gin - Statement 51",
    "query": "create unlogged table t_gin_test_tbl(i int4[], j int4[])"
  },
  {
    "comment": "gin - Statement 52",
    "query": "insert into t_gin_test_tbl values (null,    null), ('{}',    null), ('{1}',   '{2,3}')"
  }
]