[
  {
    "comment": "copy2 - Statement 1",
    "query": "CREATE TEMP TABLE x ( a serial, b int, c text not null default 'stuff', d text, e text )",
    "expected": "CREATE TEMPORARY TABLE x (a serial, b INT, c TEXT NOT NULL DEFAULT 'stuff', d TEXT, e TEXT)"
  },
  {
    "comment": "copy2 - Statement 2",
    "query": "CREATE FUNCTION fn_x_before () RETURNS TRIGGER AS ' BEGIN NEW.e := ''before trigger fired''::text; return NEW; END;' LANGUAGE plpgsql;",
    "expected": "CREATE FUNCTION fn_x_before () RETURNS trigger AS $$ BEGIN NEW.e := 'before trigger fired'::text; return NEW; END;$$ LANGUAGE plpgsql"
  },
  {
    "comment": "copy2 - Statement 6",
    "query": "CREATE FUNCTION fn_x_after () RETURNS TRIGGER AS ' BEGIN UPDATE x set e=''after trigger fired'' where c=''stuff''; return NULL; END;' LANGUAGE plpgsql;",
    "expected": "CREATE FUNCTION fn_x_after () RETURNS trigger AS $$ BEGIN UPDATE x set e='after trigger fired' where c='stuff'; return NULL; END;$$ LANGUAGE plpgsql"
  },
  {
    "comment": "copy2 - Statement 8",
    "query": "CREATE TRIGGER trg_x_after AFTER INSERT ON x FOR EACH ROW EXECUTE PROCEDURE fn_x_after()",
    "expected": "CREATE TRIGGER trg_x_after AFTER INSERT ON x FOR EACH ROW EXECUTE FUNCTION fn_x_after()"
  },
  {
    "comment": "copy2 - Statement 9",
    "query": "CREATE TRIGGER trg_x_before BEFORE INSERT ON x FOR EACH ROW EXECUTE PROCEDURE fn_x_before()",
    "expected": "CREATE TRIGGER trg_x_before BEFORE INSERT ON x FOR EACH ROW EXECUTE FUNCTION fn_x_before()"
  },
  {
    "comment": "copy2 - Statement 10",
    "query": "COPY x (a, b, c, d, e) from stdin",
    "expected": "COPY x (a, b, c, d, e) FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 11",
    "query": "COPY x (b, d) from stdin",
    "expected": "COPY x (b, d) FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 12",
    "query": "COPY x (b, d) from stdin",
    "expected": "COPY x (b, d) FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 13",
    "query": "COPY x (a, b, c, d, e) from stdin",
    "expected": "COPY x (a, b, c, d, e) FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 14",
    "query": "COPY x (xyz) from stdin",
    "expected": "COPY x (xyz) FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 15",
    "query": "COPY x from stdin (format CSV, FORMAT CSV)",
    "expected": "COPY x FROM STDIN (format 'csv', format 'csv')"
  },
  {
    "comment": "copy2 - Statement 16",
    "query": "COPY x from stdin (freeze off, freeze on)",
    "expected": "COPY x FROM STDIN (freeze false, freeze true)"
  },
  {
    "comment": "copy2 - Statement 17",
    "query": "COPY x from stdin (delimiter ',', delimiter ',')",
    "expected": "COPY x FROM STDIN (delimiter ',', delimiter ',')"
  },
  {
    "comment": "copy2 - Statement 18",
    "query": "COPY x from stdin (null ' ', null ' ')",
    "expected": "COPY x FROM STDIN (null ' ', null ' ')"
  },
  {
    "comment": "copy2 - Statement 19",
    "query": "COPY x from stdin (header off, header on)",
    "expected": "COPY x FROM STDIN (header false, header true)"
  },
  {
    "comment": "copy2 - Statement 20",
    "query": "COPY x from stdin (quote ':', quote ':')",
    "expected": "COPY x FROM STDIN (quote ':', quote ':')"
  },
  {
    "comment": "copy2 - Statement 21",
    "query": "COPY x from stdin (escape ':', escape ':')",
    "expected": "COPY x FROM STDIN (escape ':', escape ':')"
  },
  {
    "comment": "copy2 - Statement 22",
    "query": "COPY x from stdin (force_quote (a), force_quote *)",
    "expected": "COPY x FROM STDIN (force_quote (a), force_quote *)"
  },
  {
    "comment": "copy2 - Statement 23",
    "query": "COPY x from stdin (force_not_null (a), force_not_null (b))",
    "expected": "COPY x FROM STDIN (force_not_null (a), force_not_null (b))"
  },
  {
    "comment": "copy2 - Statement 24",
    "query": "COPY x from stdin (force_null (a), force_null (b))",
    "expected": "COPY x FROM STDIN (force_null (a), force_null (b))"
  },
  {
    "comment": "copy2 - Statement 25",
    "query": "COPY x from stdin (convert_selectively (a), convert_selectively (b))",
    "expected": "COPY x FROM STDIN (convert_selectively (a), convert_selectively (b))"
  },
  {
    "comment": "copy2 - Statement 26",
    "query": "COPY x from stdin (encoding 'sql_ascii', encoding 'sql_ascii')",
    "expected": "COPY x FROM STDIN (encoding 'sql_ascii', encoding 'sql_ascii')"
  },
  {
    "comment": "copy2 - Statement 27",
    "query": "COPY x from stdin (on_error ignore, on_error ignore)",
    "expected": "COPY x FROM STDIN (on_error 'ignore', on_error 'ignore')"
  },
  {
    "comment": "copy2 - Statement 28",
    "query": "COPY x from stdin (log_verbosity default, log_verbosity verbose)",
    "expected": "COPY x FROM STDIN (log_verbosity default, log_verbosity 'verbose')"
  },
  {
    "comment": "copy2 - Statement 29",
    "query": "COPY x from stdin (format BINARY, delimiter ',')",
    "expected": "COPY x FROM STDIN (format 'binary', delimiter ',')"
  },
  {
    "comment": "copy2 - Statement 30",
    "query": "COPY x from stdin (format BINARY, null 'x')",
    "expected": "COPY x FROM STDIN (format 'binary', null 'x')"
  },
  {
    "comment": "copy2 - Statement 31",
    "query": "COPY x from stdin (format BINARY, on_error ignore)",
    "expected": "COPY x FROM STDIN (format 'binary', on_error 'ignore')"
  },
  {
    "comment": "copy2 - Statement 32",
    "query": "COPY x from stdin (on_error unsupported)",
    "expected": "COPY x FROM STDIN (on_error 'unsupported')"
  },
  {
    "comment": "copy2 - Statement 33",
    "query": "COPY x from stdin (format TEXT, force_quote(a))",
    "expected": "COPY x FROM STDIN (format 'text', force_quote (a))"
  },
  {
    "comment": "copy2 - Statement 34",
    "query": "COPY x from stdin (format TEXT, force_quote *)",
    "expected": "COPY x FROM STDIN (format 'text', force_quote *)"
  },
  {
    "comment": "copy2 - Statement 35",
    "query": "COPY x from stdin (format CSV, force_quote(a))",
    "expected": "COPY x FROM STDIN (format 'csv', force_quote (a))"
  },
  {
    "comment": "copy2 - Statement 36",
    "query": "COPY x from stdin (format CSV, force_quote *)",
    "expected": "COPY x FROM STDIN (format 'csv', force_quote *)"
  },
  {
    "comment": "copy2 - Statement 37",
    "query": "COPY x from stdin (format TEXT, force_not_null(a))",
    "expected": "COPY x FROM STDIN (format 'text', force_not_null (a))"
  },
  {
    "comment": "copy2 - Statement 38",
    "query": "COPY x from stdin (format TEXT, force_not_null *)",
    "expected": "COPY x FROM STDIN (format 'text', force_not_null *)"
  },
  {
    "comment": "copy2 - Statement 39",
    "query": "COPY x to stdout (format CSV, force_not_null(a))",
    "expected": "COPY x TO STDOUT (format 'csv', force_not_null (a))"
  },
  {
    "comment": "copy2 - Statement 40",
    "query": "COPY x to stdout (format CSV, force_not_null *)",
    "expected": "COPY x TO STDOUT (format 'csv', force_not_null *)"
  },
  {
    "comment": "copy2 - Statement 41",
    "query": "COPY x from stdin (format TEXT, force_null(a))",
    "expected": "COPY x FROM STDIN (format 'text', force_null (a))"
  },
  {
    "comment": "copy2 - Statement 42",
    "query": "COPY x from stdin (format TEXT, force_null *)",
    "expected": "COPY x FROM STDIN (format 'text', force_null *)"
  },
  {
    "comment": "copy2 - Statement 43",
    "query": "COPY x to stdout (format CSV, force_null(a))",
    "expected": "COPY x TO STDOUT (format 'csv', force_null (a))"
  },
  {
    "comment": "copy2 - Statement 44",
    "query": "COPY x to stdout (format CSV, force_null *)",
    "expected": "COPY x TO STDOUT (format 'csv', force_null *)"
  },
  {
    "comment": "copy2 - Statement 45",
    "query": "COPY x to stdout (format BINARY, on_error unsupported)",
    "expected": "COPY x TO STDOUT (format 'binary', on_error 'unsupported')"
  },
  {
    "comment": "copy2 - Statement 46",
    "query": "COPY x from stdin (log_verbosity unsupported)",
    "expected": "COPY x FROM STDIN (log_verbosity 'unsupported')"
  },
  {
    "comment": "copy2 - Statement 47",
    "query": "COPY x (a, b, c, d, e, d, c) from stdin",
    "expected": "COPY x (a, b, c, d, e, d, c) FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 48",
    "query": "COPY x from stdin",
    "expected": "COPY x FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 49",
    "query": "COPY x from stdin",
    "expected": "COPY x FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 50",
    "query": "COPY x from stdin",
    "expected": "COPY x FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 51",
    "query": "COPY x (b, c, d, e) from stdin delimiter ',' null 'x'",
    "expected": "COPY x (b, c, d, e) FROM STDIN (delimiter ',', null 'x')"
  },
  {
    "comment": "copy2 - Statement 52",
    "query": "COPY x from stdin WITH DELIMITER AS ';' NULL AS ''",
    "expected": "COPY x FROM STDIN (delimiter ';', null '')"
  },
  {
    "comment": "copy2 - Statement 54",
    "query": "COPY x TO stdout WHERE a = 1",
    "expected": "COPY x TO STDOUT"
  },
  {
    "comment": "copy2 - Statement 55",
    "query": "COPY x from stdin WHERE a = 50004",
    "expected": "COPY x FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 56",
    "query": "COPY x from stdin WHERE a \u003e 60003",
    "expected": "COPY x FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 57",
    "query": "COPY x from stdin WHERE f \u003e 60003",
    "expected": "COPY x FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 58",
    "query": "COPY x from stdin WHERE a = max(x.b)",
    "expected": "COPY x FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 59",
    "query": "COPY x from stdin WHERE a IN (SELECT 1 FROM x)",
    "expected": "COPY x FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 60",
    "query": "COPY x from stdin WHERE a IN (generate_series(1,5))",
    "expected": "COPY x FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 61",
    "query": "COPY x from stdin WHERE a = row_number() over(b)",
    "expected": "COPY x FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 62",
    "query": "SELECT * FROM x"
  },
  {
    "comment": "copy2 - Statement 63",
    "query": "COPY x TO stdout",
    "expected": "COPY x TO STDOUT"
  },
  {
    "comment": "copy2 - Statement 64",
    "query": "COPY x (c, e) TO stdout",
    "expected": "COPY x (c, e) TO STDOUT"
  },
  {
    "comment": "copy2 - Statement 65",
    "query": "COPY x (b, e) TO stdout WITH NULL 'I''m null'",
    "expected": "COPY x (b, e) TO STDOUT (null 'I''m null')"
  },
  {
    "comment": "copy2 - Statement 66",
    "query": "CREATE TEMP TABLE y ( col1 text, col2 text )",
    "expected": "CREATE TEMPORARY TABLE y (col1 TEXT, col2 TEXT)"
  },
  {
    "comment": "copy2 - Statement 67",
    "query": "INSERT INTO y VALUES ('Jackson, Sam', E'\\\\h')",
    "expected": "INSERT INTO y VALUES ('Jackson, Sam', '\\h')"
  },
  {
    "comment": "copy2 - Statement 68",
    "query": "INSERT INTO y VALUES ('It is \"perfect\".',E'\\t')",
    "expected": "INSERT INTO y VALUES ('It is \"perfect\".', '\t')"
  },
  {
    "comment": "copy2 - Statement 69",
    "query": "INSERT INTO y VALUES ('', NULL)"
  },
  {
    "comment": "copy2 - Statement 70",
    "query": "COPY y TO stdout WITH CSV",
    "expected": "COPY y TO STDOUT (format 'csv')"
  },
  {
    "comment": "copy2 - Statement 71",
    "query": "COPY y TO stdout WITH CSV QUOTE '''' DELIMITER '|'",
    "expected": "COPY y TO STDOUT (format 'csv', quote '''', delimiter '|')"
  },
  {
    "comment": "copy2 - Statement 72",
    "query": "COPY y TO stdout WITH CSV FORCE QUOTE col2 ESCAPE E'\\\\' ENCODING 'sql_ascii'",
    "expected": "COPY y TO STDOUT (format 'csv', force_quote (col2), escape '\\', encoding 'sql_ascii')"
  },
  {
    "comment": "copy2 - Statement 73",
    "query": "COPY y TO stdout WITH CSV FORCE QUOTE *",
    "expected": "COPY y TO STDOUT (format 'csv', force_quote *)"
  },
  {
    "comment": "copy2 - Statement 74",
    "query": "COPY y TO stdout (FORMAT CSV)",
    "expected": "COPY y TO STDOUT (format 'csv')"
  },
  {
    "comment": "copy2 - Statement 75",
    "query": "COPY y TO stdout (FORMAT CSV, QUOTE '''', DELIMITER '|')",
    "expected": "COPY y TO STDOUT (format 'csv', quote '''', delimiter '|')"
  },
  {
    "comment": "copy2 - Statement 76",
    "query": "COPY y TO stdout (FORMAT CSV, FORCE_QUOTE (col2), ESCAPE E'\\\\')",
    "expected": "COPY y TO STDOUT (format 'csv', force_quote (col2), escape '\\')"
  },
  {
    "comment": "copy2 - Statement 77",
    "query": "COPY y TO stdout (FORMAT CSV, FORCE_QUOTE *)",
    "expected": "COPY y TO STDOUT (format 'csv', force_quote *)"
  },
  {
    "comment": "copy2 - Statement 78",
    "query": "COPY testnl FROM stdin CSV",
    "expected": "COPY testnl FROM STDIN (format 'csv')"
  },
  {
    "comment": "copy2 - Statement 79",
    "query": "CREATE TEMP TABLE testeoc (a text)",
    "expected": "CREATE TEMPORARY TABLE testeoc (a TEXT)"
  },
  {
    "comment": "copy2 - Statement 80",
    "query": "COPY testeoc FROM stdin CSV",
    "expected": "COPY testeoc FROM STDIN (format 'csv')"
  },
  {
    "comment": "copy2 - Statement 81",
    "query": "COPY testeoc TO stdout CSV",
    "expected": "COPY testeoc TO STDOUT (format 'csv')"
  },
  {
    "comment": "copy2 - Statement 82",
    "query": "CREATE TEMP TABLE testnull(a int, b text)",
    "expected": "CREATE TEMPORARY TABLE testnull (a INT, b TEXT)"
  },
  {
    "comment": "copy2 - Statement 83",
    "query": "INSERT INTO testnull VALUES (1, E'\\\\0'), (NULL, NULL)",
    "expected": "INSERT INTO testnull VALUES (1, '\\0'), (NULL, NULL)"
  },
  {
    "comment": "copy2 - Statement 84",
    "query": "COPY testnull TO stdout WITH NULL AS E'\\\\0'",
    "expected": "COPY testnull TO STDOUT (null '\\0')"
  },
  {
    "comment": "copy2 - Statement 85",
    "query": "COPY testnull FROM stdin WITH NULL AS E'\\\\0'",
    "expected": "COPY testnull FROM STDIN (null '\\0')"
  },
  {
    "comment": "copy2 - Statement 86",
    "query": "SELECT * FROM testnull"
  },
  {
    "comment": "copy2 - Statement 87",
    "query": "BEGIN"
  },
  {
    "comment": "copy2 - Statement 88",
    "query": "CREATE TABLE vistest (LIKE testeoc)"
  },
  {
    "comment": "copy2 - Statement 89",
    "query": "COPY vistest FROM stdin CSV",
    "expected": "COPY vistest FROM STDIN (format 'csv')"
  },
  {
    "comment": "copy2 - Statement 90",
    "query": "COMMIT"
  },
  {
    "comment": "copy2 - Statement 91",
    "query": "SELECT * FROM vistest"
  },
  {
    "comment": "copy2 - Statement 92",
    "query": "TRUNCATE vistest",
    "expected": "TRUNCATE TABLE vistest CONTINUE IDENTITY RESTRICT"
  },
  {
    "comment": "copy2 - Statement 93",
    "query": "SELECT * FROM vistest"
  },
  {
    "comment": "copy2 - Statement 94",
    "query": "SAVEPOINT s1"
  },
  {
    "comment": "copy2 - Statement 95",
    "query": "SELECT * FROM vistest"
  },
  {
    "comment": "copy2 - Statement 96",
    "query": "COMMIT"
  },
  {
    "comment": "copy2 - Statement 97",
    "query": "COPY vistest FROM stdin CSV FREEZE",
    "expected": "COPY vistest FROM STDIN (format 'csv', freeze true)"
  },
  {
    "comment": "copy2 - Statement 98",
    "query": "SELECT * FROM vistest"
  },
  {
    "comment": "copy2 - Statement 99",
    "query": "SELECT * FROM vistest"
  },
  {
    "comment": "copy2 - Statement 100",
    "query": "SELECT * FROM vistest"
  },
  {
    "comment": "copy2 - Statement 101",
    "query": "BEGIN"
  },
  {
    "comment": "copy2 - Statement 102",
    "query": "COMMIT"
  },
  {
    "comment": "copy2 - Statement 103",
    "query": "INSERT INTO vistest VALUES ('z')"
  },
  {
    "comment": "copy2 - Statement 104",
    "query": "ROLLBACK TO SAVEPOINT s1"
  },
  {
    "comment": "copy2 - Statement 105",
    "query": "COMMIT"
  },
  {
    "comment": "copy2 - Statement 106",
    "query": "CREATE FUNCTION truncate_in_subxact() RETURNS VOID AS $$ BEGIN TRUNCATE vistest; EXCEPTION WHEN OTHERS THEN INSERT INTO vistest VALUES ('subxact failure'); END; $$ language plpgsql;",
    "expected": "CREATE FUNCTION truncate_in_subxact () RETURNS void AS $$ BEGIN TRUNCATE vistest; EXCEPTION WHEN OTHERS THEN INSERT INTO vistest VALUES ('subxact failure'); END; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "copy2 - Statement 109",
    "query": "SELECT truncate_in_subxact()"
  },
  {
    "comment": "copy2 - Statement 110",
    "query": "SELECT * FROM vistest"
  },
  {
    "comment": "copy2 - Statement 111",
    "query": "CREATE TEMP TABLE forcetest ( a INT NOT NULL, b TEXT NOT NULL, c TEXT, d TEXT, e TEXT )",
    "expected": "CREATE TEMPORARY TABLE forcetest (a INT NOT NULL, b TEXT NOT NULL, c TEXT, d TEXT, e TEXT)"
  },
  {
    "comment": "copy2 - Statement 112",
    "query": "COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(b), FORCE_NULL(c))",
    "expected": "COPY forcetest (a, b, c) FROM STDIN (format 'csv', force_not_null (b), force_null (c))"
  },
  {
    "comment": "copy2 - Statement 113",
    "query": "COMMIT"
  },
  {
    "comment": "copy2 - Statement 114",
    "query": "SELECT b, c FROM forcetest WHERE a = 1"
  },
  {
    "comment": "copy2 - Statement 115",
    "query": "COPY forcetest (a, b, c, d) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(c,d), FORCE_NULL(c,d))",
    "expected": "COPY forcetest (a, b, c, d) FROM STDIN (format 'csv', force_not_null (c, d), force_null (c, d))"
  },
  {
    "comment": "copy2 - Statement 116",
    "query": "COMMIT"
  },
  {
    "comment": "copy2 - Statement 117",
    "query": "SELECT c, d FROM forcetest WHERE a = 2"
  },
  {
    "comment": "copy2 - Statement 118",
    "query": "COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NULL(b), FORCE_NOT_NULL(c))",
    "expected": "COPY forcetest (a, b, c) FROM STDIN (format 'csv', force_null (b), force_not_null (c))"
  },
  {
    "comment": "copy2 - Statement 119",
    "query": "ROLLBACK"
  },
  {
    "comment": "copy2 - Statement 120",
    "query": "COPY forcetest (d, e) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(b))",
    "expected": "COPY forcetest (d, e) FROM STDIN (format 'csv', force_not_null (b))"
  },
  {
    "comment": "copy2 - Statement 121",
    "query": "ROLLBACK"
  },
  {
    "comment": "copy2 - Statement 122",
    "query": "COPY forcetest (d, e) FROM STDIN WITH (FORMAT csv, FORCE_NULL(b))",
    "expected": "COPY forcetest (d, e) FROM STDIN (format 'csv', force_null (b))"
  },
  {
    "comment": "copy2 - Statement 123",
    "query": "COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL *, FORCE_NULL *)",
    "expected": "COPY forcetest (a, b, c) FROM STDIN (format 'csv', force_not_null *, force_null *)"
  },
  {
    "comment": "copy2 - Statement 124",
    "query": "COMMIT"
  },
  {
    "comment": "copy2 - Statement 125",
    "query": "SELECT b, c FROM forcetest WHERE a = 4"
  },
  {
    "comment": "copy2 - Statement 126",
    "query": "COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL *)",
    "expected": "COPY forcetest (a, b, c) FROM STDIN (format 'csv', force_not_null *)"
  },
  {
    "comment": "copy2 - Statement 127",
    "query": "COMMIT"
  },
  {
    "comment": "copy2 - Statement 128",
    "query": "SELECT b, c FROM forcetest WHERE a = 5"
  },
  {
    "comment": "copy2 - Statement 129",
    "query": "COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NULL *)",
    "expected": "COPY forcetest (a, b, c) FROM STDIN (format 'csv', force_null *)"
  },
  {
    "comment": "copy2 - Statement 130",
    "query": "COMMIT"
  },
  {
    "comment": "copy2 - Statement 131",
    "query": "SELECT b, c FROM forcetest WHERE a = 6"
  },
  {
    "comment": "copy2 - Statement 132",
    "query": "COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL *, FORCE_NOT_NULL(b))",
    "expected": "COPY forcetest (a, b, c) FROM STDIN (format 'csv', force_not_null *, force_not_null (b))"
  },
  {
    "comment": "copy2 - Statement 133",
    "query": "COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NULL *, FORCE_NULL(b))",
    "expected": "COPY forcetest (a, b, c) FROM STDIN (format 'csv', force_null *, force_null (b))"
  },
  {
    "comment": "copy2 - Statement 134",
    "query": "create function check_con_function(check_con_tbl) returns bool as $$ begin raise notice 'input = %', row_to_json($1); return $1.f1 \u003e 0; end $$ language plpgsql immutable;",
    "expected": "CREATE FUNCTION check_con_function (check_con_tbl) RETURNS BOOLEAN AS $$ begin raise notice 'input = %', row_to_json($1); return $1.f1 \u003e 0; end $$ LANGUAGE plpgsql IMMUTABLE"
  },
  {
    "comment": "copy2 - Statement 137",
    "query": "alter table check_con_tbl add check (check_con_function(check_con_tbl.*))",
    "expected": "ALTER TABLE check_con_tbl ADD CHECK (check_con_function(check_con_tbl.*))"
  },
  {
    "comment": "copy2 - Statement 138",
    "query": "copy check_con_tbl from stdin",
    "expected": "COPY check_con_tbl FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 139",
    "query": "select * from check_con_tbl",
    "expected": "SELECT * FROM check_con_tbl"
  },
  {
    "comment": "copy2 - Statement 140",
    "query": "CREATE ROLE regress_rls_copy_user"
  },
  {
    "comment": "copy2 - Statement 141",
    "query": "CREATE ROLE regress_rls_copy_user_colperms"
  },
  {
    "comment": "copy2 - Statement 142",
    "query": "CREATE TABLE rls_t1 (a int, b int, c int)",
    "expected": "CREATE TABLE rls_t1 (a INT, b INT, c INT)"
  },
  {
    "comment": "copy2 - Statement 143",
    "query": "COPY rls_t1 (a, b, c) from stdin",
    "expected": "COPY rls_t1 (a, b, c) FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 144",
    "query": "CREATE POLICY p1 ON rls_t1 FOR SELECT USING (a % 2 = 0)",
    "expected": "CREATE POLICY p1 ON rls_t1 AS PERMISSIVE FOR select TO PUBLIC USING ( a % 2 = 0 )"
  },
  {
    "comment": "copy2 - Statement 145",
    "query": "ALTER TABLE rls_t1 ENABLE ROW LEVEL SECURITY"
  },
  {
    "comment": "copy2 - Statement 146",
    "query": "ALTER TABLE rls_t1 FORCE ROW LEVEL SECURITY"
  },
  {
    "comment": "copy2 - Statement 147",
    "query": "GRANT SELECT ON TABLE rls_t1 TO regress_rls_copy_user",
    "expected": "GRANT SELECT ON rls_t1 TO regress_rls_copy_user"
  },
  {
    "comment": "copy2 - Statement 148",
    "query": "GRANT SELECT (a, b) ON TABLE rls_t1 TO regress_rls_copy_user_colperms",
    "expected": "GRANT SELECT (a, b) ON rls_t1 TO regress_rls_copy_user_colperms"
  },
  {
    "comment": "copy2 - Statement 149",
    "query": "COPY rls_t1 TO stdout",
    "expected": "COPY rls_t1 TO STDOUT"
  },
  {
    "comment": "copy2 - Statement 150",
    "query": "COPY rls_t1 (a, b, c) TO stdout",
    "expected": "COPY rls_t1 (a, b, c) TO STDOUT"
  },
  {
    "comment": "copy2 - Statement 151",
    "query": "COPY rls_t1 (a) TO stdout",
    "expected": "COPY rls_t1 (a) TO STDOUT"
  },
  {
    "comment": "copy2 - Statement 152",
    "query": "COPY rls_t1 (a, b) TO stdout",
    "expected": "COPY rls_t1 (a, b) TO STDOUT"
  },
  {
    "comment": "copy2 - Statement 153",
    "query": "COPY rls_t1 (b, a) TO stdout",
    "expected": "COPY rls_t1 (b, a) TO STDOUT"
  },
  {
    "comment": "copy2 - Statement 154",
    "query": "SET SESSION AUTHORIZATION regress_rls_copy_user",
    "expected": "SET SESSION AUTHORIZATION 'regress_rls_copy_user'"
  },
  {
    "comment": "copy2 - Statement 155",
    "query": "RESET SESSION AUTHORIZATION",
    "expected": "RESET session_authorization"
  },
  {
    "comment": "copy2 - Statement 156",
    "query": "SET SESSION AUTHORIZATION regress_rls_copy_user_colperms",
    "expected": "SET SESSION AUTHORIZATION 'regress_rls_copy_user_colperms'"
  },
  {
    "comment": "copy2 - Statement 157",
    "query": "COPY rls_t1 (c) TO stdout",
    "expected": "COPY rls_t1 (c) TO STDOUT"
  },
  {
    "comment": "copy2 - Statement 158",
    "query": "CREATE TABLE instead_of_insert_tbl(id serial, name text)",
    "expected": "CREATE TABLE instead_of_insert_tbl (id serial, name TEXT)"
  },
  {
    "comment": "copy2 - Statement 159",
    "query": "CREATE VIEW instead_of_insert_tbl_view AS SELECT ''::text AS str",
    "expected": "CREATE VIEW instead_of_insert_tbl_view AS SELECT CAST('' AS TEXT) AS str"
  },
  {
    "comment": "copy2 - Statement 160",
    "query": "COPY instead_of_insert_tbl_view FROM stdin",
    "expected": "COPY instead_of_insert_tbl_view FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 161",
    "query": "CREATE FUNCTION fun_instead_of_insert_tbl() RETURNS trigger AS $$ BEGIN INSERT INTO instead_of_insert_tbl (name) VALUES (NEW.str); RETURN NULL; END; $$ LANGUAGE plpgsql;",
    "expected": "CREATE FUNCTION fun_instead_of_insert_tbl () RETURNS trigger AS $$ BEGIN INSERT INTO instead_of_insert_tbl (name) VALUES (NEW.str); RETURN NULL; END; $$ LANGUAGE plpgsql"
  },
  {
    "comment": "copy2 - Statement 162",
    "query": "CREATE TRIGGER trig_instead_of_insert_tbl_view INSTEAD OF INSERT ON instead_of_insert_tbl_view FOR EACH ROW EXECUTE PROCEDURE fun_instead_of_insert_tbl()",
    "expected": "CREATE TRIGGER trig_instead_of_insert_tbl_view INSTEAD OF INSERT ON instead_of_insert_tbl_view FOR EACH ROW EXECUTE FUNCTION fun_instead_of_insert_tbl()"
  },
  {
    "comment": "copy2 - Statement 163",
    "query": "SELECT * FROM instead_of_insert_tbl"
  },
  {
    "comment": "copy2 - Statement 164",
    "query": "CREATE VIEW instead_of_insert_tbl_view_2 as select ''::text as str",
    "expected": "CREATE VIEW instead_of_insert_tbl_view_2 AS SELECT CAST('' AS TEXT) AS str"
  },
  {
    "comment": "copy2 - Statement 165",
    "query": "CREATE TRIGGER trig_instead_of_insert_tbl_view_2 INSTEAD OF INSERT ON instead_of_insert_tbl_view_2 FOR EACH ROW EXECUTE PROCEDURE fun_instead_of_insert_tbl()",
    "expected": "CREATE TRIGGER trig_instead_of_insert_tbl_view_2 INSTEAD OF INSERT ON instead_of_insert_tbl_view_2 FOR EACH ROW EXECUTE FUNCTION fun_instead_of_insert_tbl()"
  },
  {
    "comment": "copy2 - Statement 166",
    "query": "COPY instead_of_insert_tbl_view_2 FROM stdin",
    "expected": "COPY instead_of_insert_tbl_view_2 FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 167",
    "query": "CREATE TABLE check_ign_err (n int, m int[], k int)",
    "expected": "CREATE TABLE check_ign_err (n INT, m INT[], k INT)"
  },
  {
    "comment": "copy2 - Statement 168",
    "query": "COPY check_ign_err FROM STDIN WITH (on_error stop)",
    "expected": "COPY check_ign_err FROM STDIN (on_error 'stop')"
  },
  {
    "comment": "copy2 - Statement 169",
    "query": "COPY check_ign_err FROM STDIN WITH (on_error ignore, log_verbosity verbose)",
    "expected": "COPY check_ign_err FROM STDIN (on_error 'ignore', log_verbosity 'verbose')"
  },
  {
    "comment": "copy2 - Statement 170",
    "query": "CREATE DOMAIN dcheck_ign_err2 varchar(15) NOT NULL",
    "expected": "CREATE DOMAIN dcheck_ign_err2 AS VARCHAR(15) NOT NULL"
  },
  {
    "comment": "copy2 - Statement 171",
    "query": "CREATE TABLE check_ign_err2 (n int, m int[], k int, l dcheck_ign_err2)",
    "expected": "CREATE TABLE check_ign_err2 (n INT, m INT[], k INT, l dcheck_ign_err2)"
  },
  {
    "comment": "copy2 - Statement 172",
    "query": "COPY check_ign_err2 FROM STDIN WITH (on_error ignore, log_verbosity verbose)",
    "expected": "COPY check_ign_err2 FROM STDIN (on_error 'ignore', log_verbosity 'verbose')"
  },
  {
    "comment": "copy2 - Statement 173",
    "query": "SELECT * FROM check_ign_err"
  },
  {
    "comment": "copy2 - Statement 174",
    "query": "SELECT * FROM check_ign_err2"
  },
  {
    "comment": "copy2 - Statement 175",
    "query": "CREATE TABLE hard_err(foo widget)",
    "expected": "CREATE TABLE hard_err (foo widget)"
  },
  {
    "comment": "copy2 - Statement 176",
    "query": "COPY hard_err FROM STDIN WITH (on_error ignore)",
    "expected": "COPY hard_err FROM STDIN (on_error 'ignore')"
  },
  {
    "comment": "copy2 - Statement 177",
    "query": "COPY check_ign_err FROM STDIN WITH (on_error ignore)",
    "expected": "COPY check_ign_err FROM STDIN (on_error 'ignore')"
  },
  {
    "comment": "copy2 - Statement 178",
    "query": "COPY check_ign_err FROM STDIN WITH (on_error ignore)",
    "expected": "COPY check_ign_err FROM STDIN (on_error 'ignore')"
  },
  {
    "comment": "copy2 - Statement 179",
    "query": "DROP TABLE forcetest"
  },
  {
    "comment": "copy2 - Statement 180",
    "query": "DROP TABLE vistest"
  },
  {
    "comment": "copy2 - Statement 181",
    "query": "DROP FUNCTION truncate_in_subxact()"
  },
  {
    "comment": "copy2 - Statement 182",
    "query": "DROP TABLE x, y"
  },
  {
    "comment": "copy2 - Statement 183",
    "query": "DROP TABLE rls_t1 CASCADE"
  },
  {
    "comment": "copy2 - Statement 184",
    "query": "DROP ROLE regress_rls_copy_user"
  },
  {
    "comment": "copy2 - Statement 185",
    "query": "DROP ROLE regress_rls_copy_user_colperms"
  },
  {
    "comment": "copy2 - Statement 186",
    "query": "DROP FUNCTION fn_x_before()"
  },
  {
    "comment": "copy2 - Statement 187",
    "query": "DROP FUNCTION fn_x_after()"
  },
  {
    "comment": "copy2 - Statement 188",
    "query": "DROP TABLE instead_of_insert_tbl"
  },
  {
    "comment": "copy2 - Statement 189",
    "query": "DROP VIEW instead_of_insert_tbl_view"
  },
  {
    "comment": "copy2 - Statement 190",
    "query": "DROP VIEW instead_of_insert_tbl_view_2"
  },
  {
    "comment": "copy2 - Statement 191",
    "query": "DROP FUNCTION fun_instead_of_insert_tbl()"
  },
  {
    "comment": "copy2 - Statement 192",
    "query": "DROP TABLE check_ign_err"
  },
  {
    "comment": "copy2 - Statement 193",
    "query": "DROP TABLE check_ign_err2"
  },
  {
    "comment": "copy2 - Statement 194",
    "query": "DROP DOMAIN dcheck_ign_err2"
  },
  {
    "comment": "copy2 - Statement 195",
    "query": "DROP TABLE hard_err"
  },
  {
    "comment": "copy2 - Statement 196",
    "query": "create temp table copy_default ( id integer primary key, text_value text not null default 'test', ts_value timestamp without time zone not null default '2022-07-05' )",
    "expected": "CREATE TEMPORARY TABLE copy_default (id INT PRIMARY KEY, text_value TEXT NOT NULL DEFAULT 'test', ts_value TIMESTAMP NOT NULL DEFAULT '2022-07-05')"
  },
  {
    "comment": "copy2 - Statement 197",
    "query": "copy copy_default from stdin",
    "expected": "COPY copy_default FROM STDIN"
  },
  {
    "comment": "copy2 - Statement 198",
    "query": "select id, text_value, ts_value from copy_default",
    "expected": "SELECT id, text_value, ts_value FROM copy_default"
  },
  {
    "comment": "copy2 - Statement 199",
    "query": "truncate copy_default",
    "expected": "TRUNCATE TABLE copy_default CONTINUE IDENTITY RESTRICT"
  },
  {
    "comment": "copy2 - Statement 200",
    "query": "copy copy_default from stdin with (format csv)",
    "expected": "COPY copy_default FROM STDIN (format 'csv')"
  },
  {
    "comment": "copy2 - Statement 201",
    "query": "select id, text_value, ts_value from copy_default",
    "expected": "SELECT id, text_value, ts_value FROM copy_default"
  },
  {
    "comment": "copy2 - Statement 202",
    "query": "copy copy_default from stdin with (format binary, default '\\D')",
    "expected": "COPY copy_default FROM STDIN (format 'binary', default '\\D')"
  },
  {
    "comment": "copy2 - Statement 203",
    "query": "copy copy_default from stdin with (default E'\\n')",
    "expected": "COPY copy_default FROM STDIN (default '\n')"
  },
  {
    "comment": "copy2 - Statement 204",
    "query": "copy copy_default from stdin with (default E'\\r')",
    "expected": "COPY copy_default FROM STDIN (default '\r')"
  },
  {
    "comment": "copy2 - Statement 205",
    "query": "copy copy_default from stdin with (delimiter ';', default 'test;test')",
    "expected": "COPY copy_default FROM STDIN (delimiter ';', default 'test;test')"
  },
  {
    "comment": "copy2 - Statement 206",
    "query": "copy copy_default from stdin with (format csv, quote '\"', default 'test\"test')",
    "expected": "COPY copy_default FROM STDIN (format 'csv', quote '\"', default 'test\"test')"
  },
  {
    "comment": "copy2 - Statement 207",
    "query": "copy copy_default from stdin with (default '\\N')",
    "expected": "COPY copy_default FROM STDIN (default '\\N')"
  },
  {
    "comment": "copy2 - Statement 208",
    "query": "copy copy_default from stdin with (default '\\D')",
    "expected": "COPY copy_default FROM STDIN (default '\\D')"
  },
  {
    "comment": "copy2 - Statement 209",
    "query": "select id, text_value, ts_value from copy_default",
    "expected": "SELECT id, text_value, ts_value FROM copy_default"
  },
  {
    "comment": "copy2 - Statement 210",
    "query": "copy copy_default from stdin with (format csv, default '\\D')",
    "expected": "COPY copy_default FROM STDIN (format 'csv', default '\\D')"
  },
  {
    "comment": "copy2 - Statement 211",
    "query": "select id, text_value, ts_value from copy_default",
    "expected": "SELECT id, text_value, ts_value FROM copy_default"
  },
  {
    "comment": "copy2 - Statement 212",
    "query": "select id, text_value, ts_value from copy_default",
    "expected": "SELECT id, text_value, ts_value FROM copy_default"
  },
  {
    "comment": "copy2 - Statement 213",
    "query": "select id, text_value, ts_value from copy_default",
    "expected": "SELECT id, text_value, ts_value FROM copy_default"
  },
  {
    "comment": "copy2 - Statement 214",
    "query": "copy (select 1 as test) TO stdout with (default '\\D')",
    "expected": "COPY (SELECT 1 AS test) TO STDOUT (default '\\D')"
  }
]
