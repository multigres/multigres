[
  {
    "comment": "update - Statement 1",
    "query": "CREATE TABLE update_test ( a   INT DEFAULT 10, b   INT, c   TEXT )"
  },
  {
    "comment": "update - Statement 2",
    "query": "CREATE TABLE upsert_test ( a   INT PRIMARY KEY, b   TEXT )"
  },
  {
    "comment": "update - Statement 3",
    "query": "INSERT INTO update_test VALUES (5, 10, 'foo')"
  },
  {
    "comment": "update - Statement 4",
    "query": "INSERT INTO update_test(b, a) VALUES (15, 10)"
  },
  {
    "comment": "update - Statement 5",
    "query": "SELECT * FROM update_test"
  },
  {
    "comment": "update - Statement 6",
    "query": "UPDATE update_test SET a = DEFAULT, b = DEFAULT"
  },
  {
    "comment": "update - Statement 7",
    "query": "UPDATE update_test AS t SET b = 10 WHERE t.a = 10"
  },
  {
    "comment": "update - Statement 8",
    "query": "UPDATE update_test t SET b = t.b + 10 WHERE t.a = 10"
  },
  {
    "comment": "update - Statement 9",
    "query": "UPDATE update_test t SET t.b = t.b + 10 WHERE t.a = 10"
  },
  {
    "comment": "update - Statement 10",
    "query": "UPDATE update_test SET a=v.i FROM (VALUES(100, 20)) AS v(i, j) WHERE update_test.b = v.j"
  },
  {
    "comment": "update - Statement 11",
    "query": "UPDATE update_test SET a = v.* FROM (VALUES(100, 20)) AS v(i, j) WHERE update_test.b = v.j"
  },
  {
    "comment": "update - Statement 12",
    "query": "INSERT INTO update_test SELECT a,b+1,c FROM update_test"
  },
  {
    "comment": "update - Statement 13",
    "query": "UPDATE update_test SET (c,b,a) = ('bugle', b+11, DEFAULT) WHERE c = 'foo'"
  },
  {
    "comment": "update - Statement 14",
    "query": "UPDATE update_test SET (c,b) = ('car', a+b), a = a + 1 WHERE a = 10"
  },
  {
    "comment": "update - Statement 15",
    "query": "UPDATE update_test SET (c,b) = ('car', a+b), b = a + 1 WHERE a = 10"
  },
  {
    "comment": "update - Statement 16",
    "query": "UPDATE update_test SET (b,a) = (select a,b from update_test where b = 41 and c = 'car') WHERE a = 100 AND b = 20"
  },
  {
    "comment": "update - Statement 17",
    "query": "UPDATE update_test o SET (b,a) = (select a+1,b from update_test i where i.a=o.a and i.b=o.b and i.c is not distinct from o.c)"
  },
  {
    "comment": "update - Statement 18",
    "query": "UPDATE update_test SET (b,a) = (select a+1,b from update_test)"
  },
  {
    "comment": "update - Statement 19",
    "query": "UPDATE update_test SET (b,a) = (select a+1,b from update_test where a = 1000) WHERE a = 11"
  },
  {
    "comment": "update - Statement 20",
    "query": "UPDATE update_test SET (a,b) = ROW(v.*) FROM (VALUES(21, 100)) AS v(i, j) WHERE update_test.a = v.i"
  },
  {
    "comment": "update - Statement 21",
    "query": "UPDATE update_test SET (a,b) = (v.*) FROM (VALUES(21, 101)) AS v(i, j) WHERE update_test.a = v.i"
  },
  {
    "comment": "update - Statement 22",
    "query": "UPDATE update_test AS t SET b = update_test.b + 10 WHERE t.a = 10"
  },
  {
    "comment": "update - Statement 23",
    "query": "UPDATE update_test SET c = repeat('x', 10000) WHERE c = 'car'"
  },
  {
    "comment": "update - Statement 24",
    "query": "SELECT a, b, char_length(c) FROM update_test"
  },
  {
    "comment": "update - Statement 25",
    "query": "EXPLAIN (VERBOSE, COSTS OFF) UPDATE update_test t SET (a, b) = (SELECT b, a FROM update_test s WHERE s.a = t.a) WHERE CURRENT_USER = SESSION_USER"
  },
  {
    "comment": "update - Statement 26",
    "query": "UPDATE update_test t SET (a, b) = (SELECT b, a FROM update_test s WHERE s.a = t.a) WHERE CURRENT_USER = SESSION_USER"
  },
  {
    "comment": "update - Statement 27",
    "query": "INSERT INTO upsert_test VALUES(1, 'Boo'), (3, 'Zoo')"
  },
  {
    "comment": "update - Statement 28",
    "query": "WITH aaa AS (SELECT 1 AS a, 'Foo' AS b) INSERT INTO upsert_test VALUES (1, 'Bar') ON CONFLICT(a) DO UPDATE SET (b, a) = (SELECT b, a FROM aaa) RETURNING *"
  },
  {
    "comment": "update - Statement 29",
    "query": "INSERT INTO upsert_test VALUES (1, 'Baz'), (3, 'Zaz') ON CONFLICT(a) DO UPDATE SET (b, a) = (SELECT b || ', Correlated', a from upsert_test i WHERE i.a = upsert_test.a) RETURNING *"
  },
  {
    "comment": "update - Statement 30",
    "query": "INSERT INTO upsert_test VALUES (1, 'Bat'), (3, 'Zot') ON CONFLICT(a) DO UPDATE SET (b, a) = (SELECT b || ', Excluded', a from upsert_test i WHERE i.a = excluded.a) RETURNING *"
  },
  {
    "comment": "update - Statement 31",
    "query": "INSERT INTO upsert_test VALUES (2, 'Beeble') ON CONFLICT(a) DO UPDATE SET (b, a) = (SELECT b || ', Excluded', a from upsert_test i WHERE i.a = excluded.a) RETURNING tableoid::regclass, xmin = pg_current_xact_id()::xid AS xmin_correct, xmax = 0 AS xmax_correct"
  },
  {
    "comment": "update - Statement 32",
    "query": "INSERT INTO upsert_test VALUES (2, 'Brox') ON CONFLICT(a) DO UPDATE SET (b, a) = (SELECT b || ', Excluded', a from upsert_test i WHERE i.a = excluded.a) RETURNING tableoid::regclass, xmin = pg_current_xact_id()::xid AS xmin_correct, xmax = pg_current_xact_id()::xid AS xmax_correct"
  },
  {
    "comment": "update - Statement 33",
    "query": "DROP TABLE update_test"
  },
  {
    "comment": "update - Statement 34",
    "query": "DROP TABLE upsert_test"
  },
  {
    "comment": "update - Statement 35",
    "query": "CREATE TABLE upsert_test ( a   INT PRIMARY KEY, b   TEXT ) PARTITION BY LIST (a)"
  },
  {
    "comment": "update - Statement 36",
    "query": "CREATE TABLE upsert_test_1 PARTITION OF upsert_test FOR VALUES IN (1)"
  },
  {
    "comment": "update - Statement 37",
    "query": "CREATE TABLE upsert_test_2 (b TEXT, a INT PRIMARY KEY)"
  },
  {
    "comment": "update - Statement 38",
    "query": "ALTER TABLE upsert_test ATTACH PARTITION upsert_test_2 FOR VALUES IN (2)"
  },
  {
    "comment": "update - Statement 39",
    "query": "INSERT INTO upsert_test VALUES(1, 'Boo'), (2, 'Zoo')"
  },
  {
    "comment": "update - Statement 40",
    "query": "WITH aaa AS (SELECT 1 AS ctea, ' Foo' AS cteb) INSERT INTO upsert_test VALUES (1, 'Bar'), (2, 'Baz') ON CONFLICT(a) DO UPDATE SET (b, a) = (SELECT upsert_test.b||cteb, upsert_test.a FROM aaa) RETURNING *"
  },
  {
    "comment": "update - Statement 41",
    "query": "CREATE TABLE range_parted ( a text, b bigint, c numeric, d int, e varchar ) PARTITION BY RANGE (a, b)"
  },
  {
    "comment": "update - Statement 42",
    "query": "CREATE TABLE part_b_20_b_30 (e varchar, c numeric, a text, b bigint, d int)"
  },
  {
    "comment": "update - Statement 43",
    "query": "ALTER TABLE range_parted ATTACH PARTITION part_b_20_b_30 FOR VALUES FROM ('b', 20) TO ('b', 30)"
  },
  {
    "comment": "update - Statement 44",
    "query": "CREATE TABLE part_b_10_b_20 (e varchar, c numeric, a text, b bigint, d int) PARTITION BY RANGE (c)"
  },
  {
    "comment": "update - Statement 45",
    "query": "CREATE TABLE part_b_1_b_10 PARTITION OF range_parted FOR VALUES FROM ('b', 1) TO ('b', 10)"
  },
  {
    "comment": "update - Statement 46",
    "query": "ALTER TABLE range_parted ATTACH PARTITION part_b_10_b_20 FOR VALUES FROM ('b', 10) TO ('b', 20)"
  },
  {
    "comment": "update - Statement 47",
    "query": "CREATE TABLE part_a_10_a_20 PARTITION OF range_parted FOR VALUES FROM ('a', 10) TO ('a', 20)"
  },
  {
    "comment": "update - Statement 48",
    "query": "CREATE TABLE part_a_1_a_10 PARTITION OF range_parted FOR VALUES FROM ('a', 1) TO ('a', 10)"
  },
  {
    "comment": "update - Statement 49",
    "query": "UPDATE part_b_10_b_20 set b = b - 6"
  },
  {
    "comment": "update - Statement 50",
    "query": "CREATE TABLE part_c_100_200 (e varchar, c numeric, a text, b bigint, d int) PARTITION BY range (abs(d))"
  },
  {
    "comment": "update - Statement 51",
    "query": "ALTER TABLE part_c_100_200 DROP COLUMN e, DROP COLUMN c, DROP COLUMN a"
  },
  {
    "comment": "update - Statement 52",
    "query": "ALTER TABLE part_c_100_200 ADD COLUMN c numeric, ADD COLUMN e varchar, ADD COLUMN a text"
  },
  {
    "comment": "update - Statement 53",
    "query": "ALTER TABLE part_c_100_200 DROP COLUMN b"
  },
  {
    "comment": "update - Statement 54",
    "query": "ALTER TABLE part_c_100_200 ADD COLUMN b bigint"
  },
  {
    "comment": "update - Statement 55",
    "query": "CREATE TABLE part_d_1_15 PARTITION OF part_c_100_200 FOR VALUES FROM (1) TO (15)"
  },
  {
    "comment": "update - Statement 56",
    "query": "CREATE TABLE part_d_15_20 PARTITION OF part_c_100_200 FOR VALUES FROM (15) TO (20)"
  },
  {
    "comment": "update - Statement 57",
    "query": "ALTER TABLE part_b_10_b_20 ATTACH PARTITION part_c_100_200 FOR VALUES FROM (100) TO (200)"
  },
  {
    "comment": "update - Statement 58",
    "query": "CREATE TABLE part_c_1_100 (e varchar, d int, c numeric, b bigint, a text)"
  },
  {
    "comment": "update - Statement 59",
    "query": "ALTER TABLE part_b_10_b_20 ATTACH PARTITION part_c_1_100 FOR VALUES FROM (1) TO (100)"
  },
  {
    "comment": "update - Statement 60",
    "query": ":show_data"
  },
  {
    "comment": "update - Statement 61",
    "query": "EXPLAIN (costs off) UPDATE range_parted set c = c - 50 WHERE c > 97"
  },
  {
    "comment": "update - Statement 62",
    "query": "UPDATE part_c_100_200 set c = c - 20, d = c WHERE c = 105"
  },
  {
    "comment": "update - Statement 63",
    "query": "UPDATE part_b_10_b_20 set a = 'a'"
  },
  {
    "comment": "update - Statement 64",
    "query": "UPDATE range_parted set d = d - 10 WHERE d > 10"
  },
  {
    "comment": "update - Statement 65",
    "query": "UPDATE range_parted set e = d"
  },
  {
    "comment": "update - Statement 66",
    "query": "UPDATE part_c_1_100 set c = c + 20 WHERE c = 98"
  },
  {
    "comment": "update - Statement 67",
    "query": "UPDATE part_b_10_b_20 set c = c + 20 returning c, b, a"
  },
  {
    "comment": "update - Statement 68",
    "query": "UPDATE part_b_10_b_20 set b = b - 6 WHERE c > 116 returning *"
  },
  {
    "comment": "update - Statement 69",
    "query": "UPDATE range_parted set b = b - 6 WHERE c > 116 returning a, b + c"
  },
  {
    "comment": "update - Statement 70",
    "query": "CREATE TABLE mintab(c1 int)"
  },
  {
    "comment": "update - Statement 71",
    "query": "INSERT into mintab VALUES (120)"
  },
  {
    "comment": "update - Statement 72",
    "query": "CREATE VIEW upview AS SELECT * FROM range_parted WHERE (select c > c1 FROM mintab) WITH CHECK OPTION"
  },
  {
    "comment": "update - Statement 73",
    "query": "UPDATE upview set c = 199 WHERE b = 4"
  },
  {
    "comment": "update - Statement 74",
    "query": "UPDATE upview set c = 120 WHERE b = 4"
  },
  {
    "comment": "update - Statement 75",
    "query": "UPDATE upview set a = 'b', b = 15, c = 120 WHERE b = 4"
  },
  {
    "comment": "update - Statement 76",
    "query": "UPDATE upview set a = 'b', b = 15 WHERE b = 4"
  },
  {
    "comment": "update - Statement 77",
    "query": "DROP VIEW upview"
  },
  {
    "comment": "update - Statement 78",
    "query": ":init_range_parted"
  },
  {
    "comment": "update - Statement 79",
    "query": "UPDATE range_parted set c = 95 WHERE a = 'b' and b > 10 and c > 100 returning (range_parted), *"
  },
  {
    "comment": "update - Statement 80",
    "query": "CREATE FUNCTION trans_updatetrigfunc() RETURNS trigger LANGUAGE plpgsql AS $$ begin raise notice 'trigger = %, old table = %, new table = %', TG_NAME, (select string_agg(old_table::text, ', ' ORDER BY a) FROM old_table), (select string_agg(new_table::text, ', ' ORDER BY a) FROM new_table)"
  },
  {
    "comment": "update - Statement 81",
    "query": "return null"
  },
  {
    "comment": "update - Statement 82",
    "query": "end"
  },
  {
    "comment": "update - Statement 83",
    "query": "$$"
  },
  {
    "comment": "update - Statement 84",
    "query": "CREATE TRIGGER trans_updatetrig AFTER UPDATE ON range_parted REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table FOR EACH STATEMENT EXECUTE PROCEDURE trans_updatetrigfunc()"
  },
  {
    "comment": "update - Statement 85",
    "query": "UPDATE range_parted set c = (case when c = 96 then 110 else c + 1 end ) WHERE a = 'b' and b > 10 and c >= 96"
  },
  {
    "comment": "update - Statement 86",
    "query": "CREATE TRIGGER trans_deletetrig AFTER DELETE ON range_parted REFERENCING OLD TABLE AS old_table FOR EACH STATEMENT EXECUTE PROCEDURE trans_updatetrigfunc()"
  },
  {
    "comment": "update - Statement 87",
    "query": "CREATE TRIGGER trans_inserttrig AFTER INSERT ON range_parted REFERENCING NEW TABLE AS new_table FOR EACH STATEMENT EXECUTE PROCEDURE trans_updatetrigfunc()"
  },
  {
    "comment": "update - Statement 88",
    "query": "UPDATE range_parted set c = c + 50 WHERE a = 'b' and b > 10 and c >= 96"
  },
  {
    "comment": "update - Statement 89",
    "query": "DROP TRIGGER trans_deletetrig ON range_parted"
  },
  {
    "comment": "update - Statement 90",
    "query": "DROP TRIGGER trans_inserttrig ON range_parted"
  },
  {
    "comment": "update - Statement 91",
    "query": "CREATE FUNCTION func_parted_mod_b() RETURNS trigger AS $$ BEGIN NEW.b = NEW.b + 1"
  },
  {
    "comment": "update - Statement 92",
    "query": "return NEW"
  },
  {
    "comment": "update - Statement 93",
    "query": "END $$ language plpgsql"
  },
  {
    "comment": "update - Statement 94",
    "query": "CREATE TRIGGER trig_c1_100 BEFORE UPDATE OR INSERT ON part_c_1_100 FOR EACH ROW EXECUTE PROCEDURE func_parted_mod_b()"
  },
  {
    "comment": "update - Statement 95",
    "query": "CREATE TRIGGER trig_d1_15 BEFORE UPDATE OR INSERT ON part_d_1_15 FOR EACH ROW EXECUTE PROCEDURE func_parted_mod_b()"
  },
  {
    "comment": "update - Statement 96",
    "query": "CREATE TRIGGER trig_d15_20 BEFORE UPDATE OR INSERT ON part_d_15_20 FOR EACH ROW EXECUTE PROCEDURE func_parted_mod_b()"
  },
  {
    "comment": "update - Statement 97",
    "query": "UPDATE range_parted set c = (case when c = 96 then 110 else c + 1 end) WHERE a = 'b' and b > 10 and c >= 96"
  },
  {
    "comment": "update - Statement 98",
    "query": "UPDATE range_parted set b = 15 WHERE b = 1"
  },
  {
    "comment": "update - Statement 99",
    "query": "DROP TRIGGER trans_updatetrig ON range_parted"
  },
  {
    "comment": "update - Statement 100",
    "query": "DROP TRIGGER trig_c1_100 ON part_c_1_100"
  },
  {
    "comment": "update - Statement 101",
    "query": "DROP TRIGGER trig_d1_15 ON part_d_1_15"
  },
  {
    "comment": "update - Statement 102",
    "query": "DROP TRIGGER trig_d15_20 ON part_d_15_20"
  },
  {
    "comment": "update - Statement 103",
    "query": "DROP FUNCTION func_parted_mod_b()"
  },
  {
    "comment": "update - Statement 104",
    "query": "ALTER TABLE range_parted ENABLE ROW LEVEL SECURITY"
  },
  {
    "comment": "update - Statement 105",
    "query": "CREATE USER regress_range_parted_user"
  },
  {
    "comment": "update - Statement 106",
    "query": "GRANT ALL ON range_parted, mintab TO regress_range_parted_user"
  },
  {
    "comment": "update - Statement 107",
    "query": "CREATE POLICY seeall ON range_parted AS PERMISSIVE FOR SELECT USING (true)"
  },
  {
    "comment": "update - Statement 108",
    "query": "CREATE POLICY policy_range_parted ON range_parted for UPDATE USING (true) WITH CHECK (c % 2 = 0)"
  },
  {
    "comment": "update - Statement 109",
    "query": "SET SESSION AUTHORIZATION regress_range_parted_user"
  },
  {
    "comment": "update - Statement 110",
    "query": "UPDATE range_parted set a = 'b', c = 151 WHERE a = 'a' and c = 200"
  },
  {
    "comment": "update - Statement 111",
    "query": "RESET SESSION AUTHORIZATION"
  },
  {
    "comment": "update - Statement 112",
    "query": "CREATE FUNCTION func_d_1_15() RETURNS trigger AS $$ BEGIN NEW.c = NEW.c + 1"
  },
  {
    "comment": "update - Statement 113",
    "query": "CREATE TRIGGER trig_d_1_15 BEFORE INSERT ON part_d_1_15 FOR EACH ROW EXECUTE PROCEDURE func_d_1_15()"
  },
  {
    "comment": "update - Statement 114",
    "query": "UPDATE range_parted set a = 'b', c = 150 WHERE a = 'a' and c = 200"
  },
  {
    "comment": "update - Statement 115",
    "query": "DROP TRIGGER trig_d_1_15 ON part_d_1_15"
  },
  {
    "comment": "update - Statement 116",
    "query": "DROP FUNCTION func_d_1_15()"
  },
  {
    "comment": "update - Statement 117",
    "query": "CREATE POLICY policy_range_parted_subplan on range_parted AS RESTRICTIVE for UPDATE USING (true) WITH CHECK ((SELECT range_parted.c <= c1 FROM mintab))"
  },
  {
    "comment": "update - Statement 118",
    "query": "UPDATE range_parted set a = 'b', c = 122 WHERE a = 'a' and c = 200"
  },
  {
    "comment": "update - Statement 119",
    "query": "UPDATE range_parted set a = 'b', c = 120 WHERE a = 'a' and c = 200"
  },
  {
    "comment": "update - Statement 120",
    "query": "CREATE POLICY policy_range_parted_wholerow on range_parted AS RESTRICTIVE for UPDATE USING (true) WITH CHECK (range_parted = row('b', 10, 112, 1, NULL)::range_parted)"
  },
  {
    "comment": "update - Statement 121",
    "query": "UPDATE range_parted set a = 'b', c = 112 WHERE a = 'a' and c = 200"
  },
  {
    "comment": "update - Statement 122",
    "query": "UPDATE range_parted set a = 'b', c = 116 WHERE a = 'a' and c = 200"
  },
  {
    "comment": "update - Statement 123",
    "query": "DROP POLICY policy_range_parted ON range_parted"
  },
  {
    "comment": "update - Statement 124",
    "query": "DROP POLICY policy_range_parted_subplan ON range_parted"
  },
  {
    "comment": "update - Statement 125",
    "query": "DROP POLICY policy_range_parted_wholerow ON range_parted"
  },
  {
    "comment": "update - Statement 126",
    "query": "REVOKE ALL ON range_parted, mintab FROM regress_range_parted_user"
  },
  {
    "comment": "update - Statement 127",
    "query": "DROP USER regress_range_parted_user"
  },
  {
    "comment": "update - Statement 128",
    "query": "DROP TABLE mintab"
  },
  {
    "comment": "update - Statement 129",
    "query": "CREATE FUNCTION trigfunc() returns trigger language plpgsql as $$ begin raise notice 'trigger = % fired on table % during %', TG_NAME, TG_TABLE_NAME, TG_OP"
  },
  {
    "comment": "update - Statement 130",
    "query": "CREATE TRIGGER parent_delete_trig AFTER DELETE ON range_parted for each statement execute procedure trigfunc()"
  },
  {
    "comment": "update - Statement 131",
    "query": "CREATE TRIGGER parent_update_trig AFTER UPDATE ON range_parted for each statement execute procedure trigfunc()"
  },
  {
    "comment": "update - Statement 132",
    "query": "CREATE TRIGGER parent_insert_trig AFTER INSERT ON range_parted for each statement execute procedure trigfunc()"
  },
  {
    "comment": "update - Statement 133",
    "query": "CREATE TRIGGER c1_delete_trig AFTER DELETE ON part_c_1_100 for each statement execute procedure trigfunc()"
  },
  {
    "comment": "update - Statement 134",
    "query": "CREATE TRIGGER c1_update_trig AFTER UPDATE ON part_c_1_100 for each statement execute procedure trigfunc()"
  },
  {
    "comment": "update - Statement 135",
    "query": "CREATE TRIGGER c1_insert_trig AFTER INSERT ON part_c_1_100 for each statement execute procedure trigfunc()"
  },
  {
    "comment": "update - Statement 136",
    "query": "CREATE TRIGGER d1_delete_trig AFTER DELETE ON part_d_1_15 for each statement execute procedure trigfunc()"
  },
  {
    "comment": "update - Statement 137",
    "query": "CREATE TRIGGER d1_update_trig AFTER UPDATE ON part_d_1_15 for each statement execute procedure trigfunc()"
  },
  {
    "comment": "update - Statement 138",
    "query": "CREATE TRIGGER d1_insert_trig AFTER INSERT ON part_d_1_15 for each statement execute procedure trigfunc()"
  },
  {
    "comment": "update - Statement 139",
    "query": "CREATE TRIGGER d15_delete_trig AFTER DELETE ON part_d_15_20 for each statement execute procedure trigfunc()"
  },
  {
    "comment": "update - Statement 140",
    "query": "CREATE TRIGGER d15_update_trig AFTER UPDATE ON part_d_15_20 for each statement execute procedure trigfunc()"
  },
  {
    "comment": "update - Statement 141",
    "query": "CREATE TRIGGER d15_insert_trig AFTER INSERT ON part_d_15_20 for each statement execute procedure trigfunc()"
  },
  {
    "comment": "update - Statement 142",
    "query": "UPDATE range_parted set c = c - 50 WHERE c > 97"
  },
  {
    "comment": "update - Statement 143",
    "query": "DROP TRIGGER parent_delete_trig ON range_parted"
  },
  {
    "comment": "update - Statement 144",
    "query": "DROP TRIGGER parent_update_trig ON range_parted"
  },
  {
    "comment": "update - Statement 145",
    "query": "DROP TRIGGER parent_insert_trig ON range_parted"
  },
  {
    "comment": "update - Statement 146",
    "query": "DROP TRIGGER c1_delete_trig ON part_c_1_100"
  },
  {
    "comment": "update - Statement 147",
    "query": "DROP TRIGGER c1_update_trig ON part_c_1_100"
  },
  {
    "comment": "update - Statement 148",
    "query": "DROP TRIGGER c1_insert_trig ON part_c_1_100"
  },
  {
    "comment": "update - Statement 149",
    "query": "DROP TRIGGER d1_delete_trig ON part_d_1_15"
  },
  {
    "comment": "update - Statement 150",
    "query": "DROP TRIGGER d1_update_trig ON part_d_1_15"
  },
  {
    "comment": "update - Statement 151",
    "query": "DROP TRIGGER d1_insert_trig ON part_d_1_15"
  },
  {
    "comment": "update - Statement 152",
    "query": "DROP TRIGGER d15_delete_trig ON part_d_15_20"
  },
  {
    "comment": "update - Statement 153",
    "query": "DROP TRIGGER d15_update_trig ON part_d_15_20"
  },
  {
    "comment": "update - Statement 154",
    "query": "DROP TRIGGER d15_insert_trig ON part_d_15_20"
  },
  {
    "comment": "update - Statement 155",
    "query": "create table part_def partition of range_parted default"
  },
  {
    "comment": "update - Statement 156",
    "query": "update part_def set a = 'd' where a = 'c'"
  },
  {
    "comment": "update - Statement 157",
    "query": "update part_def set a = 'a' where a = 'd'"
  },
  {
    "comment": "update - Statement 158",
    "query": "UPDATE part_a_10_a_20 set a = 'ad' WHERE a = 'a'"
  },
  {
    "comment": "update - Statement 159",
    "query": "UPDATE range_parted set a = 'ad' WHERE a = 'a'"
  },
  {
    "comment": "update - Statement 160",
    "query": "UPDATE range_parted set a = 'bd' WHERE a = 'b'"
  },
  {
    "comment": "update - Statement 161",
    "query": "UPDATE range_parted set a = 'a' WHERE a = 'ad'"
  },
  {
    "comment": "update - Statement 162",
    "query": "UPDATE range_parted set a = 'b' WHERE a = 'bd'"
  },
  {
    "comment": "update - Statement 163",
    "query": "DROP TABLE range_parted"
  },
  {
    "comment": "update - Statement 164",
    "query": "CREATE TABLE list_parted ( a text, b int ) PARTITION BY list (a)"
  },
  {
    "comment": "update - Statement 165",
    "query": "CREATE TABLE list_part1  PARTITION OF list_parted for VALUES in ('a', 'b')"
  },
  {
    "comment": "update - Statement 166",
    "query": "CREATE TABLE list_default PARTITION OF list_parted default"
  },
  {
    "comment": "update - Statement 167",
    "query": "INSERT into list_part1 VALUES ('a', 1)"
  },
  {
    "comment": "update - Statement 168",
    "query": "INSERT into list_default VALUES ('d', 10)"
  },
  {
    "comment": "update - Statement 169",
    "query": "UPDATE list_default set a = 'a' WHERE a = 'd'"
  },
  {
    "comment": "update - Statement 170",
    "query": "UPDATE list_default set a = 'x' WHERE a = 'd'"
  },
  {
    "comment": "update - Statement 171",
    "query": "DROP TABLE list_parted"
  },
  {
    "comment": "update - Statement 172",
    "query": "create table utrtest (a int, b text) partition by list (a)"
  },
  {
    "comment": "update - Statement 173",
    "query": "create table utr1 (a int check (a in (1)), q text, b text)"
  },
  {
    "comment": "update - Statement 174",
    "query": "create table utr2 (a int check (a in (2)), b text)"
  },
  {
    "comment": "update - Statement 175",
    "query": "alter table utr1 drop column q"
  },
  {
    "comment": "update - Statement 176",
    "query": "alter table utrtest attach partition utr1 for values in (1)"
  },
  {
    "comment": "update - Statement 177",
    "query": "alter table utrtest attach partition utr2 for values in (2)"
  },
  {
    "comment": "update - Statement 178",
    "query": "insert into utrtest values (1, 'foo') returning *, tableoid::regclass, xmin = pg_current_xact_id()::xid as xmin_ok"
  },
  {
    "comment": "update - Statement 179",
    "query": "insert into utrtest values (2, 'bar') returning *, tableoid::regclass, xmin = pg_current_xact_id()::xid as xmin_ok"
  },
  {
    "comment": "update - Statement 180",
    "query": "insert into utrtest values (2, 'bar') returning *, tableoid::regclass"
  },
  {
    "comment": "update - Statement 181",
    "query": "update utrtest set b = b || b from (values (1), (2)) s(x) where a = s.x returning *, tableoid::regclass, xmin = pg_current_xact_id()::xid as xmin_ok"
  },
  {
    "comment": "update - Statement 182",
    "query": "update utrtest set a = 3 - a from (values (1), (2)) s(x) where a = s.x returning *, tableoid::regclass, xmin = pg_current_xact_id()::xid as xmin_ok"
  },
  {
    "comment": "update - Statement 183",
    "query": "update utrtest set a = 3 - a from (values (1), (2)) s(x) where a = s.x returning *, tableoid::regclass"
  },
  {
    "comment": "update - Statement 184",
    "query": "delete from utrtest returning *, tableoid::regclass, xmax = pg_current_xact_id()::xid as xmax_ok"
  },
  {
    "comment": "update - Statement 185",
    "query": "drop table utrtest"
  },
  {
    "comment": "update - Statement 186",
    "query": "CREATE TABLE list_parted (a numeric, b int, c int8) PARTITION BY list (a)"
  },
  {
    "comment": "update - Statement 187",
    "query": "CREATE TABLE sub_parted PARTITION OF list_parted for VALUES in (1) PARTITION BY list (b)"
  },
  {
    "comment": "update - Statement 188",
    "query": "CREATE TABLE sub_part1(b int, c int8, a numeric)"
  },
  {
    "comment": "update - Statement 189",
    "query": "ALTER TABLE sub_parted ATTACH PARTITION sub_part1 for VALUES in (1)"
  },
  {
    "comment": "update - Statement 190",
    "query": "CREATE TABLE sub_part2(b int, c int8, a numeric)"
  },
  {
    "comment": "update - Statement 191",
    "query": "ALTER TABLE sub_parted ATTACH PARTITION sub_part2 for VALUES in (2)"
  },
  {
    "comment": "update - Statement 192",
    "query": "CREATE TABLE list_part1(a numeric, b int, c int8)"
  },
  {
    "comment": "update - Statement 193",
    "query": "ALTER TABLE list_parted ATTACH PARTITION list_part1 for VALUES in (2,3)"
  },
  {
    "comment": "update - Statement 194",
    "query": "INSERT into list_parted VALUES (2,5,50)"
  },
  {
    "comment": "update - Statement 195",
    "query": "INSERT into list_parted VALUES (3,6,60)"
  },
  {
    "comment": "update - Statement 196",
    "query": "INSERT into sub_parted VALUES (1,1,60)"
  },
  {
    "comment": "update - Statement 197",
    "query": "INSERT into sub_parted VALUES (1,2,10)"
  },
  {
    "comment": "update - Statement 198",
    "query": "UPDATE sub_parted set a = 2 WHERE c = 10"
  },
  {
    "comment": "update - Statement 199",
    "query": "SELECT tableoid::regclass::text, * FROM list_parted WHERE a = 2 ORDER BY 1"
  },
  {
    "comment": "update - Statement 200",
    "query": "UPDATE list_parted set b = c + a WHERE a = 2"
  },
  {
    "comment": "update - Statement 201",
    "query": "CREATE FUNCTION func_parted_mod_b() returns trigger as $$ BEGIN NEW.b = 2"
  },
  {
    "comment": "update - Statement 202",
    "query": "CREATE TRIGGER parted_mod_b before update on sub_part1 for each row execute procedure func_parted_mod_b()"
  },
  {
    "comment": "update - Statement 203",
    "query": "SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4"
  },
  {
    "comment": "update - Statement 204",
    "query": "UPDATE list_parted set c = 70 WHERE b  = 1"
  },
  {
    "comment": "update - Statement 205",
    "query": "DROP TRIGGER parted_mod_b ON sub_part1"
  },
  {
    "comment": "update - Statement 206",
    "query": "CREATE OR REPLACE FUNCTION func_parted_mod_b() returns trigger as $$ BEGIN raise notice 'Trigger: Got OLD row %, but returning NULL', OLD"
  },
  {
    "comment": "update - Statement 207",
    "query": "CREATE TRIGGER trig_skip_delete before delete on sub_part2 for each row execute procedure func_parted_mod_b()"
  },
  {
    "comment": "update - Statement 208",
    "query": "UPDATE list_parted set b = 1 WHERE c = 70"
  },
  {
    "comment": "update - Statement 209",
    "query": "DROP TRIGGER trig_skip_delete ON sub_part2"
  },
  {
    "comment": "update - Statement 210",
    "query": "CREATE TABLE non_parted (id int)"
  },
  {
    "comment": "update - Statement 211",
    "query": "INSERT into non_parted VALUES (1), (1), (1), (2), (2), (2), (3), (3), (3)"
  },
  {
    "comment": "update - Statement 212",
    "query": "UPDATE list_parted t1 set a = 2 FROM non_parted t2 WHERE t1.a = t2.id and a = 1"
  },
  {
    "comment": "update - Statement 213",
    "query": "DROP TABLE non_parted"
  },
  {
    "comment": "update - Statement 214",
    "query": "create or replace function dummy_hashint4(a int4, seed int8) returns int8 as $$ begin return (a + seed); end; $$ language 'plpgsql' immutable"
  },
  {
    "comment": "update - Statement 215",
    "query": "create operator class custom_opclass for type int4 using hash as operator 1 = , function 2 dummy_hashint4(int4, int8)"
  },
  {
    "comment": "update - Statement 216",
    "query": "create table hash_parted ( a int, b int ) partition by hash (a custom_opclass, b custom_opclass)"
  },
  {
    "comment": "update - Statement 217",
    "query": "create table hpart1 partition of hash_parted for values with (modulus 2, remainder 1)"
  },
  {
    "comment": "update - Statement 218",
    "query": "create table hpart2 partition of hash_parted for values with (modulus 4, remainder 2)"
  },
  {
    "comment": "update - Statement 219",
    "query": "create table hpart3 partition of hash_parted for values with (modulus 8, remainder 0)"
  },
  {
    "comment": "update - Statement 220",
    "query": "create table hpart4 partition of hash_parted for values with (modulus 8, remainder 4)"
  },
  {
    "comment": "update - Statement 221",
    "query": "insert into hpart1 values (1, 1)"
  },
  {
    "comment": "update - Statement 222",
    "query": "insert into hpart2 values (2, 5)"
  },
  {
    "comment": "update - Statement 223",
    "query": "insert into hpart4 values (3, 4)"
  },
  {
    "comment": "update - Statement 224",
    "query": "update hpart1 set a = 3, b=4 where a = 1"
  },
  {
    "comment": "update - Statement 225",
    "query": "update hash_parted set b = b - 1 where b = 1"
  },
  {
    "comment": "update - Statement 226",
    "query": "update hash_parted set b = b + 8 where b = 1"
  },
  {
    "comment": "update - Statement 227",
    "query": "drop table hash_parted"
  },
  {
    "comment": "update - Statement 228",
    "query": "drop operator class custom_opclass using hash"
  },
  {
    "comment": "update - Statement 229",
    "query": "drop function dummy_hashint4(a int4, seed int8)"
  }
]