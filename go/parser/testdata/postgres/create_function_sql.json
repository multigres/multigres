[
  {
    "comment": "create_function_sql - Statement 1",
    "query": "CREATE USER regress_unpriv_user"
  },
  {
    "comment": "create_function_sql - Statement 2",
    "query": "CREATE SCHEMA temp_func_test"
  },
  {
    "comment": "create_function_sql - Statement 3",
    "query": "GRANT ALL ON SCHEMA temp_func_test TO public",
    "expected": "GRANT ALL ON SCHEMA temp_func_test TO PUBLIC"
  },
  {
    "comment": "create_function_sql - Statement 4",
    "query": "SET search_path TO temp_func_test, public",
    "expected": "SET search_path = 'temp_func_test', 'public'"
  },
  {
    "comment": "create_function_sql - Statement 5",
    "query": "CREATE FUNCTION functest_A_1(text, date) RETURNS bool LANGUAGE 'sql' AS 'SELECT $1 = ''abcd'' AND $2 \u003e ''2001-01-01'''",
    "expected": "CREATE FUNCTION functest_a_1 (TEXT, DATE) RETURNS BOOLEAN LANGUAGE sql AS $$SELECT $1 = 'abcd' AND $2 \u003e '2001-01-01'$$"
  },
  {
    "comment": "create_function_sql - Statement 6",
    "query": "CREATE FUNCTION functest_A_2(text[]) RETURNS int LANGUAGE 'sql' AS 'SELECT $1[1]::int'",
    "expected": "CREATE FUNCTION functest_a_2 (TEXT[]) RETURNS INT LANGUAGE sql AS $$SELECT $1[1]::int$$"
  },
  {
    "comment": "create_function_sql - Statement 7",
    "query": "CREATE FUNCTION functest_A_3() RETURNS bool LANGUAGE 'sql' AS 'SELECT false'",
    "expected": "CREATE FUNCTION functest_a_3 () RETURNS BOOLEAN LANGUAGE sql AS $$SELECT false$$"
  },
  {
    "comment": "create_function_sql - Statement 8",
    "query": "SELECT proname, prorettype::regtype, proargtypes::regtype[] FROM pg_proc WHERE oid in ('functest_A_1'::regproc, 'functest_A_2'::regproc, 'functest_A_3'::regproc) ORDER BY proname",
    "expected": "SELECT proname, CAST(prorettype AS regtype), CAST(proargtypes AS regtype[]) FROM pg_proc WHERE oid IN (CAST('functest_A_1' AS regproc), CAST('functest_A_2' AS regproc), CAST('functest_A_3' AS regproc)) ORDER BY proname"
  },
  {
    "comment": "create_function_sql - Statement 9",
    "query": "SELECT functest_A_1('abcd', '2020-01-01')",
    "expected": "SELECT functest_a_1('abcd', '2020-01-01')"
  },
  {
    "comment": "create_function_sql - Statement 10",
    "query": "SELECT functest_A_2(ARRAY['1', '2', '3'])",
    "expected": "SELECT functest_a_2(ARRAY['1','2','3'])"
  },
  {
    "comment": "create_function_sql - Statement 11",
    "query": "SELECT functest_A_3()",
    "expected": "SELECT functest_a_3()"
  },
  {
    "comment": "create_function_sql - Statement 12",
    "query": "CREATE FUNCTION functest_B_1(int) RETURNS bool LANGUAGE 'sql' AS 'SELECT $1 \u003e 0'",
    "expected": "CREATE FUNCTION functest_b_1 (INT) RETURNS BOOLEAN LANGUAGE sql AS $$SELECT $1 \u003e 0$$"
  },
  {
    "comment": "create_function_sql - Statement 13",
    "query": "CREATE FUNCTION functest_B_2(int) RETURNS bool LANGUAGE 'sql' IMMUTABLE AS 'SELECT $1 \u003e 0'",
    "expected": "CREATE FUNCTION functest_b_2 (INT) RETURNS BOOLEAN LANGUAGE sql IMMUTABLE AS $$SELECT $1 \u003e 0$$"
  },
  {
    "comment": "create_function_sql - Statement 14",
    "query": "CREATE FUNCTION functest_B_3(int) RETURNS bool LANGUAGE 'sql' STABLE AS 'SELECT $1 = 0'",
    "expected": "CREATE FUNCTION functest_b_3 (INT) RETURNS BOOLEAN LANGUAGE sql STABLE AS $$SELECT $1 = 0$$"
  },
  {
    "comment": "create_function_sql - Statement 15",
    "query": "CREATE FUNCTION functest_B_4(int) RETURNS bool LANGUAGE 'sql' VOLATILE AS 'SELECT $1 \u003c 0'",
    "expected": "CREATE FUNCTION functest_b_4 (INT) RETURNS BOOLEAN LANGUAGE sql VOLATILE AS $$SELECT $1 \u003c 0$$"
  },
  {
    "comment": "create_function_sql - Statement 16",
    "query": "SELECT proname, provolatile FROM pg_proc WHERE oid in ('functest_B_1'::regproc, 'functest_B_2'::regproc, 'functest_B_3'::regproc, 'functest_B_4'::regproc) ORDER BY proname",
    "expected": "SELECT proname, provolatile FROM pg_proc WHERE oid IN (CAST('functest_B_1' AS regproc), CAST('functest_B_2' AS regproc), CAST('functest_B_3' AS regproc), CAST('functest_B_4' AS regproc)) ORDER BY proname"
  },
  {
    "comment": "create_function_sql - Statement 17",
    "query": "ALTER FUNCTION functest_B_2(int) VOLATILE",
    "expected": "ALTER FUNCTION functest_b_2(INT) VOLATILE"
  },
  {
    "comment": "create_function_sql - Statement 18",
    "query": "ALTER FUNCTION functest_B_3(int) COST 100",
    "expected": "ALTER FUNCTION functest_b_3(INT) COST 100"
  },
  {
    "comment": "create_function_sql - Statement 19",
    "query": "CREATE FUNCTION functest_C_1(int) RETURNS bool LANGUAGE 'sql' AS 'SELECT $1 \u003e 0'",
    "expected": "CREATE FUNCTION functest_c_1 (INT) RETURNS BOOLEAN LANGUAGE sql AS $$SELECT $1 \u003e 0$$"
  },
  {
    "comment": "create_function_sql - Statement 20",
    "query": "CREATE FUNCTION functest_C_2(int) RETURNS bool LANGUAGE 'sql' SECURITY DEFINER AS 'SELECT $1 = 0'",
    "expected": "CREATE FUNCTION functest_c_2 (INT) RETURNS BOOLEAN LANGUAGE sql SECURITY DEFINER AS $$SELECT $1 = 0$$"
  },
  {
    "comment": "create_function_sql - Statement 21",
    "query": "CREATE FUNCTION functest_C_3(int) RETURNS bool LANGUAGE 'sql' SECURITY INVOKER AS 'SELECT $1 \u003c 0'",
    "expected": "CREATE FUNCTION functest_c_3 (INT) RETURNS BOOLEAN LANGUAGE sql SECURITY INVOKER AS $$SELECT $1 \u003c 0$$"
  },
  {
    "comment": "create_function_sql - Statement 22",
    "query": "SELECT proname, prosecdef FROM pg_proc WHERE oid in ('functest_C_1'::regproc, 'functest_C_2'::regproc, 'functest_C_3'::regproc) ORDER BY proname",
    "expected": "SELECT proname, prosecdef FROM pg_proc WHERE oid IN (CAST('functest_C_1' AS regproc), CAST('functest_C_2' AS regproc), CAST('functest_C_3' AS regproc)) ORDER BY proname"
  },
  {
    "comment": "create_function_sql - Statement 23",
    "query": "ALTER FUNCTION functest_C_1(int) IMMUTABLE",
    "expected": "ALTER FUNCTION functest_c_1(INT) IMMUTABLE"
  },
  {
    "comment": "create_function_sql - Statement 24",
    "query": "ALTER FUNCTION functest_C_2(int) SECURITY INVOKER",
    "expected": "ALTER FUNCTION functest_c_2(INT) SECURITY INVOKER"
  },
  {
    "comment": "create_function_sql - Statement 25",
    "query": "ALTER FUNCTION functest_C_3(int) SECURITY DEFINER",
    "expected": "ALTER FUNCTION functest_c_3(INT) SECURITY DEFINER"
  },
  {
    "comment": "create_function_sql - Statement 26",
    "query": "CREATE FUNCTION functest_E_1(int) RETURNS bool LANGUAGE 'sql' AS 'SELECT $1 \u003e 100'",
    "expected": "CREATE FUNCTION functest_e_1 (INT) RETURNS BOOLEAN LANGUAGE sql AS $$SELECT $1 \u003e 100$$"
  },
  {
    "comment": "create_function_sql - Statement 27",
    "query": "CREATE FUNCTION functest_E_2(int) RETURNS bool LANGUAGE 'sql' LEAKPROOF AS 'SELECT $1 \u003e 100'",
    "expected": "CREATE FUNCTION functest_e_2 (INT) RETURNS BOOLEAN LANGUAGE sql LEAKPROOF AS $$SELECT $1 \u003e 100$$"
  },
  {
    "comment": "create_function_sql - Statement 28",
    "query": "SELECT proname, proleakproof FROM pg_proc WHERE oid in ('functest_E_1'::regproc, 'functest_E_2'::regproc) ORDER BY proname",
    "expected": "SELECT proname, proleakproof FROM pg_proc WHERE oid IN (CAST('functest_E_1' AS regproc), CAST('functest_E_2' AS regproc)) ORDER BY proname"
  },
  {
    "comment": "create_function_sql - Statement 29",
    "query": "ALTER FUNCTION functest_E_1(int) LEAKPROOF",
    "expected": "ALTER FUNCTION functest_e_1(INT) LEAKPROOF"
  },
  {
    "comment": "create_function_sql - Statement 30",
    "query": "ALTER FUNCTION functest_E_2(int) STABLE",
    "expected": "ALTER FUNCTION functest_e_2(INT) STABLE"
  },
  {
    "comment": "create_function_sql - Statement 31",
    "query": "ALTER FUNCTION functest_E_2(int) NOT LEAKPROOF",
    "expected": "ALTER FUNCTION functest_e_2(INT) NOT LEAKPROOF"
  },
  {
    "comment": "create_function_sql - Statement 32",
    "query": "ALTER FUNCTION functest_E_1(int) OWNER TO regress_unpriv_user",
    "expected": "ALTER FUNCTION functest_e_1(INT) OWNER TO regress_unpriv_user"
  },
  {
    "comment": "create_function_sql - Statement 33",
    "query": "ALTER FUNCTION functest_E_2(int) OWNER TO regress_unpriv_user",
    "expected": "ALTER FUNCTION functest_e_2(INT) OWNER TO regress_unpriv_user"
  },
  {
    "comment": "create_function_sql - Statement 34",
    "query": "SET SESSION AUTHORIZATION regress_unpriv_user",
    "expected": "SET SESSION AUTHORIZATION 'regress_unpriv_user'"
  },
  {
    "comment": "create_function_sql - Statement 35",
    "query": "ALTER FUNCTION functest_E_1(int) NOT LEAKPROOF",
    "expected": "ALTER FUNCTION functest_e_1(INT) NOT LEAKPROOF"
  },
  {
    "comment": "create_function_sql - Statement 36",
    "query": "ALTER FUNCTION functest_E_2(int) LEAKPROOF",
    "expected": "ALTER FUNCTION functest_e_2(INT) LEAKPROOF"
  },
  {
    "comment": "create_function_sql - Statement 37",
    "query": "CREATE FUNCTION functest_E_3(int) RETURNS bool LANGUAGE 'sql' LEAKPROOF AS 'SELECT $1 \u003c 200'",
    "expected": "CREATE FUNCTION functest_e_3 (INT) RETURNS BOOLEAN LANGUAGE sql LEAKPROOF AS $$SELECT $1 \u003c 200$$"
  },
  {
    "comment": "create_function_sql - Statement 38",
    "query": "RESET SESSION AUTHORIZATION",
    "expected": "RESET session_authorization"
  },
  {
    "comment": "create_function_sql - Statement 39",
    "query": "CREATE FUNCTION functest_F_1(int) RETURNS bool LANGUAGE 'sql' AS 'SELECT $1 \u003e 50'",
    "expected": "CREATE FUNCTION functest_f_1 (INT) RETURNS BOOLEAN LANGUAGE sql AS $$SELECT $1 \u003e 50$$"
  },
  {
    "comment": "create_function_sql - Statement 40",
    "query": "CREATE FUNCTION functest_F_2(int) RETURNS bool LANGUAGE 'sql' CALLED ON NULL INPUT AS 'SELECT $1 = 50'",
    "expected": "CREATE FUNCTION functest_f_2 (INT) RETURNS BOOLEAN LANGUAGE sql CALLED ON NULL INPUT AS $$SELECT $1 = 50$$"
  },
  {
    "comment": "create_function_sql - Statement 41",
    "query": "CREATE FUNCTION functest_F_3(int) RETURNS bool LANGUAGE 'sql' RETURNS NULL ON NULL INPUT AS 'SELECT $1 \u003c 50'",
    "expected": "CREATE FUNCTION functest_f_3 (INT) RETURNS BOOLEAN LANGUAGE sql STRICT AS $$SELECT $1 \u003c 50$$"
  },
  {
    "comment": "create_function_sql - Statement 42",
    "query": "CREATE FUNCTION functest_F_4(int) RETURNS bool LANGUAGE 'sql' STRICT AS 'SELECT $1 = 50'",
    "expected": "CREATE FUNCTION functest_f_4 (INT) RETURNS BOOLEAN LANGUAGE sql STRICT AS $$SELECT $1 = 50$$"
  },
  {
    "comment": "create_function_sql - Statement 43",
    "query": "SELECT proname, proisstrict FROM pg_proc WHERE oid in ('functest_F_1'::regproc, 'functest_F_2'::regproc, 'functest_F_3'::regproc, 'functest_F_4'::regproc) ORDER BY proname",
    "expected": "SELECT proname, proisstrict FROM pg_proc WHERE oid IN (CAST('functest_F_1' AS regproc), CAST('functest_F_2' AS regproc), CAST('functest_F_3' AS regproc), CAST('functest_F_4' AS regproc)) ORDER BY proname"
  },
  {
    "comment": "create_function_sql - Statement 44",
    "query": "ALTER FUNCTION functest_F_1(int) IMMUTABLE",
    "expected": "ALTER FUNCTION functest_f_1(INT) IMMUTABLE"
  },
  {
    "comment": "create_function_sql - Statement 45",
    "query": "ALTER FUNCTION functest_F_2(int) STRICT",
    "expected": "ALTER FUNCTION functest_f_2(INT) STRICT"
  },
  {
    "comment": "create_function_sql - Statement 46",
    "query": "ALTER FUNCTION functest_F_3(int) CALLED ON NULL INPUT",
    "expected": "ALTER FUNCTION functest_f_3(INT) CALLED ON NULL INPUT"
  },
  {
    "comment": "create_function_sql - Statement 47",
    "query": "SELECT pg_get_functiondef('functest_A_1'::regproc)",
    "expected": "SELECT pg_get_functiondef(CAST('functest_A_1' AS regproc))"
  },
  {
    "comment": "create_function_sql - Statement 48",
    "query": "SELECT pg_get_functiondef('functest_B_3'::regproc)",
    "expected": "SELECT pg_get_functiondef(CAST('functest_B_3' AS regproc))"
  },
  {
    "comment": "create_function_sql - Statement 49",
    "query": "SELECT pg_get_functiondef('functest_C_3'::regproc)",
    "expected": "SELECT pg_get_functiondef(CAST('functest_C_3' AS regproc))"
  },
  {
    "comment": "create_function_sql - Statement 50",
    "query": "SELECT pg_get_functiondef('functest_F_2'::regproc)",
    "expected": "SELECT pg_get_functiondef(CAST('functest_F_2' AS regproc))"
  },
  {
    "comment": "create_function_sql - Statement 51",
    "query": "CREATE FUNCTION functest_S_1(a text, b date) RETURNS boolean LANGUAGE SQL RETURN a = 'abcd' AND b \u003e '2001-01-01'",
    "expected": "CREATE FUNCTION functest_s_1 (a TEXT, b DATE) RETURNS BOOLEAN LANGUAGE sql RETURN a = 'abcd' AND b \u003e '2001-01-01'"
  },
  {
    "comment": "create_function_sql - Statement 52",
    "query": "CREATE FUNCTION functest_S_2(a text[]) RETURNS int RETURN a[1]::int",
    "expected": "CREATE FUNCTION functest_s_2 (a TEXT[]) RETURNS INT RETURN CAST(a[1] AS INT)"
  },
  {
    "comment": "create_function_sql - Statement 53",
    "query": "CREATE FUNCTION functest_S_3() RETURNS boolean RETURN false",
    "expected": "CREATE FUNCTION functest_s_3 () RETURNS BOOLEAN RETURN FALSE"
  },
  {
    "comment": "create_function_sql - Statement 54",
    "query": "CREATE FUNCTION functest_S_3a() RETURNS boolean BEGIN ATOMIC ;;RETURN false; END",
    "expected": "CREATE FUNCTION functest_s_3a () RETURNS BOOLEAN LANGUAGE sql BEGIN ATOMIC RETURN FALSE; END"
  },
  {
    "comment": "create_function_sql - Statement 56",
    "query": "CREATE FUNCTION functest_S_10(a text, b date) RETURNS boolean LANGUAGE SQL BEGIN ATOMIC SELECT a = 'abcd' AND b \u003e '2001-01-01'; END;",
    "expected": "CREATE FUNCTION functest_s_10 (a TEXT, b DATE) RETURNS BOOLEAN LANGUAGE sql BEGIN ATOMIC SELECT a = 'abcd' AND b \u003e '2001-01-01'; END"
  },
  {
    "comment": "create_function_sql - Statement 57",
    "query": "CREATE FUNCTION functest_S_13() RETURNS boolean BEGIN ATOMIC SELECT 1; SELECT false; END;",
    "expected": "CREATE FUNCTION functest_s_13 () RETURNS BOOLEAN LANGUAGE sql BEGIN ATOMIC SELECT 1; SELECT FALSE; END"
  },
  {
    "comment": "create_function_sql - Statement 59",
    "query": "CREATE TABLE functest1 (i int)",
    "expected": "CREATE TABLE functest1 (i INT)"
  },
  {
    "comment": "create_function_sql - Statement 60",
    "query": "CREATE FUNCTION functest_S_16(a int, b int) RETURNS void LANGUAGE SQL BEGIN ATOMIC INSERT INTO functest1 SELECT a + $2; END;",
    "expected": "CREATE FUNCTION functest_s_16 (a INT, b INT) RETURNS void LANGUAGE sql BEGIN ATOMIC INSERT INTO functest1 SELECT a + $2; END"
  },
  {
    "comment": "create_function_sql - Statement 61",
    "query": "CREATE FUNCTION functest_S_xxx(x int) RETURNS int LANGUAGE SQL AS $$ SELECT x * 2 $$ RETURN x * 3",
    "expected": "CREATE FUNCTION functest_s_xxx (x INT) RETURNS INT LANGUAGE sql AS $$ SELECT x * 2 $$ RETURN x * 3"
  },
  {
    "comment": "create_function_sql - Statement 62",
    "query": "CREATE FUNCTION functest_S_xx(x anyarray) RETURNS anyelement LANGUAGE SQL RETURN x[1]",
    "expected": "CREATE FUNCTION functest_s_xx (x anyarray) RETURNS anyelement LANGUAGE sql RETURN x[1]"
  },
  {
    "comment": "create_function_sql - Statement 63",
    "query": "CREATE FUNCTION functest_S_xx(x date) RETURNS boolean LANGUAGE SQL RETURN x \u003e 1",
    "expected": "CREATE FUNCTION functest_s_xx (x DATE) RETURNS BOOLEAN LANGUAGE sql RETURN x \u003e 1"
  },
  {
    "comment": "create_function_sql - Statement 64",
    "query": "CREATE FUNCTION functest_S_15(x int) RETURNS boolean LANGUAGE SQL BEGIN ATOMIC select case when x % 2 = 0 then true else false end; end;",
    "expected": "CREATE FUNCTION functest_s_15 (x INT) RETURNS BOOLEAN LANGUAGE sql BEGIN ATOMIC SELECT CASE WHEN x % 2 = 0 THEN TRUE ELSE FALSE END; END"
  },
  {
    "comment": "create_function_sql - Statement 65",
    "query": "SELECT functest_S_1('abcd', '2020-01-01')",
    "expected": "SELECT functest_s_1('abcd', '2020-01-01')"
  },
  {
    "comment": "create_function_sql - Statement 66",
    "query": "SELECT functest_S_2(ARRAY['1', '2', '3'])",
    "expected": "SELECT functest_s_2(ARRAY['1','2','3'])"
  },
  {
    "comment": "create_function_sql - Statement 67",
    "query": "SELECT functest_S_3()",
    "expected": "SELECT functest_s_3()"
  },
  {
    "comment": "create_function_sql - Statement 68",
    "query": "SELECT functest_S_10('abcd', '2020-01-01')",
    "expected": "SELECT functest_s_10('abcd', '2020-01-01')"
  },
  {
    "comment": "create_function_sql - Statement 69",
    "query": "SELECT functest_S_13()",
    "expected": "SELECT functest_s_13()"
  },
  {
    "comment": "create_function_sql - Statement 70",
    "query": "SELECT pg_get_functiondef('functest_S_1'::regproc)",
    "expected": "SELECT pg_get_functiondef(CAST('functest_S_1' AS regproc))"
  },
  {
    "comment": "create_function_sql - Statement 71",
    "query": "SELECT pg_get_functiondef('functest_S_2'::regproc)",
    "expected": "SELECT pg_get_functiondef(CAST('functest_S_2' AS regproc))"
  },
  {
    "comment": "create_function_sql - Statement 72",
    "query": "SELECT pg_get_functiondef('functest_S_3'::regproc)",
    "expected": "SELECT pg_get_functiondef(CAST('functest_S_3' AS regproc))"
  },
  {
    "comment": "create_function_sql - Statement 73",
    "query": "SELECT pg_get_functiondef('functest_S_3a'::regproc)",
    "expected": "SELECT pg_get_functiondef(CAST('functest_S_3a' AS regproc))"
  },
  {
    "comment": "create_function_sql - Statement 74",
    "query": "SELECT pg_get_functiondef('functest_S_10'::regproc)",
    "expected": "SELECT pg_get_functiondef(CAST('functest_S_10' AS regproc))"
  },
  {
    "comment": "create_function_sql - Statement 75",
    "query": "SELECT pg_get_functiondef('functest_S_13'::regproc)",
    "expected": "SELECT pg_get_functiondef(CAST('functest_S_13' AS regproc))"
  },
  {
    "comment": "create_function_sql - Statement 76",
    "query": "SELECT pg_get_functiondef('functest_S_15'::regproc)",
    "expected": "SELECT pg_get_functiondef(CAST('functest_S_15' AS regproc))"
  },
  {
    "comment": "create_function_sql - Statement 77",
    "query": "SELECT pg_get_functiondef('functest_S_16'::regproc)",
    "expected": "SELECT pg_get_functiondef(CAST('functest_S_16' AS regproc))"
  },
  {
    "comment": "create_function_sql - Statement 78",
    "query": "DROP TABLE functest1 CASCADE"
  },
  {
    "comment": "create_function_sql - Statement 79",
    "query": "CREATE TABLE functest3 (a int)",
    "expected": "CREATE TABLE functest3 (a INT)"
  },
  {
    "comment": "create_function_sql - Statement 80",
    "query": "INSERT INTO functest3 VALUES (1), (2)"
  },
  {
    "comment": "create_function_sql - Statement 81",
    "query": "CREATE VIEW functestv3 AS SELECT * FROM functest3"
  },
  {
    "comment": "create_function_sql - Statement 82",
    "query": "CREATE FUNCTION functest_S_14() RETURNS bigint RETURN (SELECT count(*) FROM functestv3)",
    "expected": "CREATE FUNCTION functest_s_14 () RETURNS BIGINT RETURN (SELECT COUNT(*) FROM functestv3)"
  },
  {
    "comment": "create_function_sql - Statement 83",
    "query": "SELECT functest_S_14()",
    "expected": "SELECT functest_s_14()"
  },
  {
    "comment": "create_function_sql - Statement 84",
    "query": "DROP TABLE functest3 CASCADE"
  },
  {
    "comment": "create_function_sql - Statement 85",
    "query": "CREATE FUNCTION functest_IS_1(a int, b int default 1, c text default 'foo') RETURNS int LANGUAGE SQL AS 'SELECT $1 + $2'",
    "expected": "CREATE FUNCTION functest_is_1 (a INT, b INT DEFAULT 1, c TEXT DEFAULT 'foo') RETURNS INT LANGUAGE sql AS $$SELECT $1 + $2$$"
  },
  {
    "comment": "create_function_sql - Statement 86",
    "query": "CREATE FUNCTION functest_IS_2(out a int, b int default 1) RETURNS int LANGUAGE SQL AS 'SELECT $1'",
    "expected": "CREATE FUNCTION functest_is_2 (OUT a INT, b INT DEFAULT 1) RETURNS INT LANGUAGE sql AS $$SELECT $1$$"
  },
  {
    "comment": "create_function_sql - Statement 87",
    "query": "CREATE FUNCTION functest_IS_3(a int default 1, out b int) RETURNS int LANGUAGE SQL AS 'SELECT $1'",
    "expected": "CREATE FUNCTION functest_is_3 (a INT DEFAULT 1, OUT b INT) RETURNS INT LANGUAGE sql AS $$SELECT $1$$"
  },
  {
    "comment": "create_function_sql - Statement 88",
    "query": "SELECT routine_name, ordinal_position, parameter_name, parameter_default FROM information_schema.parameters JOIN information_schema.routines USING (specific_schema, specific_name) WHERE routine_schema = 'temp_func_test' AND routine_name ~ '^functest_is_' ORDER BY 1, 2",
    "expected": "SELECT routine_name, ordinal_position, parameter_name, parameter_default FROM information_schema.parameters INNER JOIN information_schema.routines USING (specific_schema, specific_name) WHERE routine_schema = 'temp_func_test' AND routine_name ~ '^functest_is_' ORDER BY 1, 2"
  },
  {
    "comment": "create_function_sql - Statement 89",
    "query": "DROP FUNCTION functest_IS_1(int, int, text), functest_IS_2(int), functest_IS_3(int)",
    "expected": "DROP FUNCTION functest_is_1(INT, INT, TEXT), functest_is_2(INT), functest_is_3(INT)"
  },
  {
    "comment": "create_function_sql - Statement 90",
    "query": "CREATE FUNCTION functest_IS_4a() RETURNS int LANGUAGE SQL AS 'SELECT 1'",
    "expected": "CREATE FUNCTION functest_is_4a () RETURNS INT LANGUAGE sql AS $$SELECT 1$$"
  },
  {
    "comment": "create_function_sql - Statement 91",
    "query": "CREATE FUNCTION functest_IS_4b(x int DEFAULT functest_IS_4a()) RETURNS int LANGUAGE SQL AS 'SELECT x'",
    "expected": "CREATE FUNCTION functest_is_4b (x INT DEFAULT functest_is_4a()) RETURNS INT LANGUAGE sql AS $$SELECT x$$"
  },
  {
    "comment": "create_function_sql - Statement 92",
    "query": "CREATE SEQUENCE functest1"
  },
  {
    "comment": "create_function_sql - Statement 93",
    "query": "CREATE FUNCTION functest_IS_5(x int DEFAULT nextval('functest1')) RETURNS int LANGUAGE SQL AS 'SELECT x'",
    "expected": "CREATE FUNCTION functest_is_5 (x INT DEFAULT nextval('functest1')) RETURNS INT LANGUAGE sql AS $$SELECT x$$"
  },
  {
    "comment": "create_function_sql - Statement 94",
    "query": "CREATE FUNCTION functest_IS_6() RETURNS int LANGUAGE SQL RETURN nextval('functest1')",
    "expected": "CREATE FUNCTION functest_is_6 () RETURNS INT LANGUAGE sql RETURN nextval('functest1')"
  },
  {
    "comment": "create_function_sql - Statement 95",
    "query": "CREATE TABLE functest2 (a int, b int)",
    "expected": "CREATE TABLE functest2 (a INT, b INT)"
  },
  {
    "comment": "create_function_sql - Statement 96",
    "query": "CREATE FUNCTION functest_IS_7() RETURNS int LANGUAGE SQL RETURN (SELECT count(a) FROM functest2)",
    "expected": "CREATE FUNCTION functest_is_7 () RETURNS INT LANGUAGE sql RETURN (SELECT COUNT(a) FROM functest2)"
  },
  {
    "comment": "create_function_sql - Statement 97",
    "query": "SELECT r0.routine_name, r1.routine_name FROM information_schema.routine_routine_usage rru JOIN information_schema.routines r0 ON r0.specific_name = rru.specific_name JOIN information_schema.routines r1 ON r1.specific_name = rru.routine_name WHERE r0.routine_schema = 'temp_func_test' AND r1.routine_schema = 'temp_func_test' ORDER BY 1, 2",
    "expected": "SELECT r0.routine_name, r1.routine_name FROM information_schema.routine_routine_usage AS rru INNER JOIN information_schema.routines AS r0 ON r0.specific_name = rru.specific_name INNER JOIN information_schema.routines AS r1 ON r1.specific_name = rru.routine_name WHERE r0.routine_schema = 'temp_func_test' AND r1.routine_schema = 'temp_func_test' ORDER BY 1, 2"
  },
  {
    "comment": "create_function_sql - Statement 98",
    "query": "SELECT routine_name, sequence_name FROM information_schema.routine_sequence_usage WHERE routine_schema = 'temp_func_test' ORDER BY 1, 2"
  },
  {
    "comment": "create_function_sql - Statement 99",
    "query": "SELECT routine_name, table_name, column_name FROM information_schema.routine_column_usage WHERE routine_schema = 'temp_func_test' ORDER BY 1, 2"
  },
  {
    "comment": "create_function_sql - Statement 100",
    "query": "SELECT routine_name, table_name FROM information_schema.routine_table_usage WHERE routine_schema = 'temp_func_test' ORDER BY 1, 2"
  },
  {
    "comment": "create_function_sql - Statement 101",
    "query": "DROP FUNCTION functest_IS_4a CASCADE",
    "expected": "DROP FUNCTION functest_is_4a CASCADE"
  },
  {
    "comment": "create_function_sql - Statement 102",
    "query": "DROP SEQUENCE functest1 CASCADE"
  },
  {
    "comment": "create_function_sql - Statement 103",
    "query": "DROP TABLE functest2 CASCADE"
  },
  {
    "comment": "create_function_sql - Statement 104",
    "query": "CREATE FUNCTION functest_B_2(bigint) RETURNS bool LANGUAGE 'sql' IMMUTABLE AS 'SELECT $1 \u003e 0'",
    "expected": "CREATE FUNCTION functest_b_2 (BIGINT) RETURNS BOOLEAN LANGUAGE sql IMMUTABLE AS $$SELECT $1 \u003e 0$$"
  },
  {
    "comment": "create_function_sql - Statement 105",
    "query": "DROP FUNCTION functest_b_1"
  },
  {
    "comment": "create_function_sql - Statement 106",
    "query": "DROP FUNCTION functest_b_2"
  },
  {
    "comment": "create_function_sql - Statement 107",
    "query": "CREATE FUNCTION functest1(a int) RETURNS int LANGUAGE SQL AS 'SELECT $1'",
    "expected": "CREATE FUNCTION functest1 (a INT) RETURNS INT LANGUAGE sql AS $$SELECT $1$$"
  },
  {
    "comment": "create_function_sql - Statement 108",
    "query": "CREATE OR REPLACE FUNCTION functest1(a int) RETURNS int LANGUAGE SQL WINDOW AS 'SELECT $1'",
    "expected": "CREATE OR REPLACE FUNCTION functest1 (a INT) RETURNS INT LANGUAGE sql WINDOW AS $$SELECT $1$$"
  },
  {
    "comment": "create_function_sql - Statement 109",
    "query": "CREATE OR REPLACE PROCEDURE functest1(a int) LANGUAGE SQL AS 'SELECT $1'",
    "expected": "CREATE OR REPLACE PROCEDURE functest1 (a INT) LANGUAGE sql AS $$SELECT $1$$"
  },
  {
    "comment": "create_function_sql - Statement 110",
    "query": "DROP FUNCTION functest1(a int)",
    "expected": "DROP FUNCTION functest1(a INT)"
  },
  {
    "comment": "create_function_sql - Statement 111",
    "query": "INSERT INTO functest3 VALUES (1), (2), (3)"
  },
  {
    "comment": "create_function_sql - Statement 112",
    "query": "CREATE FUNCTION functest_sri1() RETURNS SETOF int LANGUAGE SQL STABLE AS ' SELECT * FROM functest3';",
    "expected": "CREATE FUNCTION functest_sri1 () RETURNS SETOF INT LANGUAGE sql STABLE AS $$ SELECT * FROM functest3$$"
  },
  {
    "comment": "create_function_sql - Statement 114",
    "query": "SELECT * FROM functest_sri1()"
  },
  {
    "comment": "create_function_sql - Statement 115",
    "query": "EXPLAIN (verbose, costs off) SELECT * FROM functest_sri1()",
    "expected": "EXPLAIN (VERBOSE true, COSTS false) SELECT * FROM functest_sri1()"
  },
  {
    "comment": "create_function_sql - Statement 116",
    "query": "CREATE FUNCTION functest_sri2() RETURNS SETOF int LANGUAGE SQL STABLE BEGIN ATOMIC SELECT * FROM functest3",
    "error": "parse error at position 106: syntax error"
  },
  {
    "comment": "create_function_sql - Statement 117",
    "query": "SELECT * FROM functest_sri2()"
  },
  {
    "comment": "create_function_sql - Statement 118",
    "query": "EXPLAIN (verbose, costs off) SELECT * FROM functest_sri2()",
    "expected": "EXPLAIN (VERBOSE true, COSTS false) SELECT * FROM functest_sri2()"
  },
  {
    "comment": "create_function_sql - Statement 119",
    "query": "CREATE FUNCTION voidtest1(a int) RETURNS VOID LANGUAGE SQL AS $$ SELECT a + 1 $$",
    "expected": "CREATE FUNCTION voidtest1 (a INT) RETURNS void LANGUAGE sql AS $$ SELECT a + 1 $$"
  },
  {
    "comment": "create_function_sql - Statement 120",
    "query": "SELECT voidtest1(42)"
  },
  {
    "comment": "create_function_sql - Statement 121",
    "query": "CREATE FUNCTION voidtest2(a int, b int) RETURNS VOID LANGUAGE SQL AS $$ SELECT voidtest1(a + b) $$",
    "expected": "CREATE FUNCTION voidtest2 (a INT, b INT) RETURNS void LANGUAGE sql AS $$ SELECT voidtest1(a + b) $$"
  },
  {
    "comment": "create_function_sql - Statement 122",
    "query": "SELECT voidtest2(11,22)",
    "expected": "SELECT voidtest2(11, 22)"
  },
  {
    "comment": "create_function_sql - Statement 123",
    "query": "EXPLAIN (verbose, costs off) SELECT voidtest2(11,22)",
    "expected": "EXPLAIN (VERBOSE true, COSTS false) SELECT voidtest2(11, 22)"
  },
  {
    "comment": "create_function_sql - Statement 124",
    "query": "CREATE TEMP TABLE sometable(f1 int)",
    "expected": "CREATE TEMPORARY TABLE sometable (f1 INT)"
  },
  {
    "comment": "create_function_sql - Statement 125",
    "query": "CREATE FUNCTION voidtest3(a int) RETURNS VOID LANGUAGE SQL AS $$ INSERT INTO sometable VALUES(a + 1) $$",
    "expected": "CREATE FUNCTION voidtest3 (a INT) RETURNS void LANGUAGE sql AS $$ INSERT INTO sometable VALUES(a + 1) $$"
  },
  {
    "comment": "create_function_sql - Statement 126",
    "query": "SELECT voidtest3(17)"
  },
  {
    "comment": "create_function_sql - Statement 127",
    "query": "CREATE FUNCTION voidtest4(a int) RETURNS VOID LANGUAGE SQL AS $$ INSERT INTO sometable VALUES(a - 1) RETURNING f1 $$",
    "expected": "CREATE FUNCTION voidtest4 (a INT) RETURNS void LANGUAGE sql AS $$ INSERT INTO sometable VALUES(a - 1) RETURNING f1 $$"
  },
  {
    "comment": "create_function_sql - Statement 128",
    "query": "SELECT voidtest4(39)"
  },
  {
    "comment": "create_function_sql - Statement 129",
    "query": "TABLE sometable",
    "expected": "SELECT * FROM sometable"
  },
  {
    "comment": "create_function_sql - Statement 130",
    "query": "CREATE FUNCTION voidtest5(a int) RETURNS SETOF VOID LANGUAGE SQL AS $$ SELECT generate_series(1, a) $$ STABLE",
    "expected": "CREATE FUNCTION voidtest5 (a INT) RETURNS SETOF void LANGUAGE sql AS $$ SELECT generate_series(1, a) $$ STABLE"
  },
  {
    "comment": "create_function_sql - Statement 131",
    "query": "SELECT * FROM voidtest5(3)"
  },
  {
    "comment": "create_function_sql - Statement 132",
    "query": "CREATE FUNCTION double_append(anyarray, anyelement) RETURNS SETOF anyarray LANGUAGE SQL IMMUTABLE AS $$ SELECT array_append($1, $2) || array_append($1, $2) $$",
    "expected": "CREATE FUNCTION double_append (anyarray, anyelement) RETURNS SETOF anyarray LANGUAGE sql IMMUTABLE AS $$ SELECT array_append($1, $2) || array_append($1, $2) $$"
  },
  {
    "comment": "create_function_sql - Statement 133",
    "query": "SELECT double_append(array_append(ARRAY[q1], q2), q3) FROM (VALUES(1,2,3), (4,5,6)) v(q1,q2,q3)",
    "expected": "SELECT double_append(array_append(ARRAY[q1], q2), q3) FROM (VALUES (1, 2, 3), (4, 5, 6)) AS v(q1, q2, q3)"
  },
  {
    "comment": "create_function_sql - Statement 134",
    "query": "CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL AS 'SELECT ''not an integer'';'",
    "expected": "CREATE FUNCTION test1 (INT) RETURNS INT LANGUAGE sql AS $$SELECT 'not an integer';$$"
  },
  {
    "comment": "create_function_sql - Statement 135",
    "query": "CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL AS 'not even SQL'",
    "expected": "CREATE FUNCTION test1 (INT) RETURNS INT LANGUAGE sql AS $$not even SQL$$"
  },
  {
    "comment": "create_function_sql - Statement 136",
    "query": "CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL AS 'SELECT 1, 2, 3;'",
    "expected": "CREATE FUNCTION test1 (INT) RETURNS INT LANGUAGE sql AS $$SELECT 1, 2, 3;$$"
  },
  {
    "comment": "create_function_sql - Statement 137",
    "query": "CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL AS 'SELECT $2;'",
    "expected": "CREATE FUNCTION test1 (INT) RETURNS INT LANGUAGE sql AS $$SELECT $2;$$"
  },
  {
    "comment": "create_function_sql - Statement 138",
    "query": "CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL AS 'a', 'b'",
    "expected": "CREATE FUNCTION test1 (INT) RETURNS INT LANGUAGE sql AS $$a$$"
  },
  {
    "comment": "create_function_sql - Statement 139",
    "query": "DROP SCHEMA temp_func_test CASCADE"
  },
  {
    "comment": "create_function_sql - Statement 140",
    "query": "DROP USER regress_unpriv_user",
    "expected": "DROP ROLE regress_unpriv_user"
  },
  {
    "comment": "create_function_sql - Statement 141",
    "query": "RESET search_path"
  }
]
