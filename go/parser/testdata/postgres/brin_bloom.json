[
  {
    "comment": "brin_bloom - Statement 1",
    "query": "CREATE TABLE brintest_bloom (byteacol bytea, charcol \"char\", namecol name, int8col bigint, int2col smallint, int4col integer, textcol text, oidcol oid, float4col real, float8col double precision, macaddrcol macaddr, inetcol inet, cidrcol cidr, bpcharcol character, datecol date, timecol time without time zone, timestampcol timestamp without time zone, timestamptzcol timestamp with time zone, intervalcol interval, timetzcol time with time zone, numericcol numeric, uuidcol uuid, lsncol pg_lsn ) WITH (fillfactor=10)"
  },
  {
    "comment": "brin_bloom - Statement 2",
    "query": "INSERT INTO brintest_bloom SELECT repeat(stringu1, 8)::bytea, substr(stringu1, 1, 1)::\"char\", stringu1::name, 142857 * tenthous, thousand, twothousand, repeat(stringu1, 8), unique1::oid, (four + 1.0)/(hundred+1), odd::float8 / (tenthous + 1), format('%s:00:%s:00:%s:00', to_hex(odd), to_hex(even), to_hex(hundred))::macaddr, inet '10.2.3.4/24' + tenthous, cidr '10.2.3/24' + tenthous, substr(stringu1, 1, 1)::bpchar, date '1995-08-15' + tenthous, time '01:20:30' + thousand * interval '18.5 second', timestamp '1942-07-23 03:05:09' + tenthous * interval '36.38 hours', timestamptz '1972-10-10 03:00' + thousand * interval '1 hour', justify_days(justify_hours(tenthous * interval '12 minutes')), timetz '01:30:20+02' + hundred * interval '15 seconds', tenthous::numeric(36,30) * fivethous * even / (hundred + 1), format('%s%s-%s-%s-%s-%s%s%s', to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'))::uuid, format('%s/%s%s', odd, even, tenthous)::pg_lsn FROM tenk1 ORDER BY unique2 LIMIT 100"
  },
  {
    "comment": "brin_bloom - Statement 3",
    "query": "INSERT INTO brintest_bloom (inetcol, cidrcol) SELECT inet 'fe80::6e40:8ff:fea9:8c46' + tenthous, cidr 'fe80::6e40:8ff:fea9:8c46' + tenthous FROM tenk1 ORDER BY thousand, tenthous LIMIT 25"
  },
  {
    "comment": "brin_bloom - Statement 4",
    "query": "CREATE INDEX brinidx_bloom ON brintest_bloom USING brin ( byteacol bytea_bloom_ops(n_distinct_per_range = -1.1) )"
  },
  {
    "comment": "brin_bloom - Statement 5",
    "query": "CREATE INDEX brinidx_bloom ON brintest_bloom USING brin ( byteacol bytea_bloom_ops(false_positive_rate = 0.00009) )"
  },
  {
    "comment": "brin_bloom - Statement 6",
    "query": "CREATE INDEX brinidx_bloom ON brintest_bloom USING brin ( byteacol bytea_bloom_ops(false_positive_rate = 0.26) )"
  },
  {
    "comment": "brin_bloom - Statement 7",
    "query": "CREATE INDEX brinidx_bloom ON brintest_bloom USING brin ( byteacol bytea_bloom_ops, charcol char_bloom_ops, namecol name_bloom_ops, int8col int8_bloom_ops, int2col int2_bloom_ops, int4col int4_bloom_ops, textcol text_bloom_ops, oidcol oid_bloom_ops, float4col float4_bloom_ops, float8col float8_bloom_ops, macaddrcol macaddr_bloom_ops, inetcol inet_bloom_ops, cidrcol inet_bloom_ops, bpcharcol bpchar_bloom_ops, datecol date_bloom_ops, timecol time_bloom_ops, timestampcol timestamp_bloom_ops, timestamptzcol timestamptz_bloom_ops, intervalcol interval_bloom_ops, timetzcol timetz_bloom_ops, numericcol numeric_bloom_ops, uuidcol uuid_bloom_ops, lsncol pg_lsn_bloom_ops ) with (pages_per_range = 1)"
  },
  {
    "comment": "brin_bloom - Statement 8",
    "query": "CREATE TABLE brinopers_bloom (colname name, typ text, op text[], value text[], matches int[], check (cardinality(op) = cardinality(value)), check (cardinality(op) = cardinality(matches)))"
  },
  {
    "comment": "brin_bloom - Statement 9",
    "query": "INSERT INTO brinopers_bloom VALUES ('byteacol', 'bytea', '{=}', '{BNAAAABNAAAABNAAAABNAAAABNAAAABNAAAABNAAAABNAAAA}', '{1}'), ('charcol', '\"char\"', '{=}', '{M}', '{6}'), ('namecol', 'name', '{=}', '{MAAAAA}', '{2}'), ('int2col', 'int2', '{=}', '{800}', '{1}'), ('int4col', 'int4', '{=}', '{800}', '{1}'), ('int8col', 'int8', '{=}', '{1257141600}', '{1}'), ('textcol', 'text', '{=}', '{BNAAAABNAAAABNAAAABNAAAABNAAAABNAAAABNAAAABNAAAA}', '{1}'), ('oidcol', 'oid', '{=}', '{8800}', '{1}'), ('float4col', 'float4', '{=}', '{1}', '{4}'), ('float8col', 'float8', '{=}', '{0}', '{1}'), ('macaddrcol', 'macaddr', '{=}', '{2c:00:2d:00:16:00}', '{2}'), ('inetcol', 'inet', '{=}', '{10.2.14.231/24}', '{1}'), ('inetcol', 'cidr', '{=}', '{fe80::6e40:8ff:fea9:8c46}', '{1}'), ('cidrcol', 'inet', '{=}', '{10.2.14/24}', '{2}'), ('cidrcol', 'inet', '{=}', '{fe80::6e40:8ff:fea9:8c46}', '{1}'), ('cidrcol', 'cidr', '{=}', '{10.2.14/24}', '{2}'), ('cidrcol', 'cidr', '{=}', '{fe80::6e40:8ff:fea9:8c46}', '{1}'), ('bpcharcol', 'bpchar', '{=}', '{W}', '{6}'), ('datecol', 'date', '{=}', '{2009-12-01}', '{1}'), ('timecol', 'time', '{=}', '{02:28:57}', '{1}'), ('timestampcol', 'timestamp', '{=}', '{1964-03-24 19:26:45}', '{1}'), ('timestamptzcol', 'timestamptz', '{=}', '{1972-10-19 09:00:00-07}', '{1}'), ('intervalcol', 'interval', '{=}', '{1 mons 13 days 12:24}', '{1}'), ('timetzcol', 'timetz', '{=}', '{01:35:50+02}', '{2}'), ('numericcol', 'numeric', '{=}', '{2268164.347826086956521739130434782609}', '{1}'), ('uuidcol', 'uuid', '{=}', '{52225222-5222-5222-5222-522252225222}', '{1}'), ('lsncol', 'pg_lsn', '{=, IS, IS NOT}', '{44/455222, NULL, NULL}', '{1, 25, 100}')"
  },
  {
    "comment": "brin_bloom - Statement 10",
    "query": "DO $x$ DECLARE r record"
  },
  {
    "comment": "brin_bloom - Statement 11",
    "query": "r2 record"
  },
  {
    "comment": "brin_bloom - Statement 12",
    "query": "cond text"
  },
  {
    "comment": "brin_bloom - Statement 13",
    "query": "idx_ctids tid[]"
  },
  {
    "comment": "brin_bloom - Statement 14",
    "query": "ss_ctids tid[]"
  },
  {
    "comment": "brin_bloom - Statement 15",
    "query": "count int"
  },
  {
    "comment": "brin_bloom - Statement 16",
    "query": "plan_ok bool"
  },
  {
    "comment": "brin_bloom - Statement 17",
    "query": "plan_line text"
  },
  {
    "comment": "brin_bloom - Statement 18",
    "query": "BEGIN FOR r IN SELECT colname, oper, typ, value[ordinality], matches[ordinality] FROM brinopers_bloom, unnest(op) WITH ORDINALITY AS oper LOOP IF r.value IS NULL THEN cond := format('%I %s %L', r.colname, r.oper, r.value)"
  },
  {
    "comment": "brin_bloom - Statement 19",
    "query": "ELSE cond := format('%I %s %L::%s', r.colname, r.oper, r.value, r.typ)"
  },
  {
    "comment": "brin_bloom - Statement 20",
    "query": "END IF"
  },
  {
    "comment": "brin_bloom - Statement 21",
    "query": "SET enable_seqscan = 0"
  },
  {
    "comment": "brin_bloom - Statement 22",
    "query": "SET enable_bitmapscan = 1"
  },
  {
    "comment": "brin_bloom - Statement 23",
    "query": "plan_ok := false"
  },
  {
    "comment": "brin_bloom - Statement 24",
    "query": "FOR plan_line IN EXECUTE format($y$EXPLAIN SELECT array_agg(ctid) FROM brintest_bloom WHERE %s $y$, cond) LOOP IF plan_line LIKE '%Bitmap Heap Scan on brintest_bloom%' THEN plan_ok := true"
  },
  {
    "comment": "brin_bloom - Statement 25",
    "query": "END LOOP"
  },
  {
    "comment": "brin_bloom - Statement 26",
    "query": "IF NOT plan_ok THEN RAISE WARNING 'did not get bitmap indexscan plan for %', r"
  },
  {
    "comment": "brin_bloom - Statement 27",
    "query": "EXECUTE format($y$SELECT array_agg(ctid) FROM brintest_bloom WHERE %s $y$, cond) INTO idx_ctids"
  },
  {
    "comment": "brin_bloom - Statement 28",
    "query": "SET enable_seqscan = 1"
  },
  {
    "comment": "brin_bloom - Statement 29",
    "query": "SET enable_bitmapscan = 0"
  },
  {
    "comment": "brin_bloom - Statement 30",
    "query": "FOR plan_line IN EXECUTE format($y$EXPLAIN SELECT array_agg(ctid) FROM brintest_bloom WHERE %s $y$, cond) LOOP IF plan_line LIKE '%Seq Scan on brintest_bloom%' THEN plan_ok := true"
  },
  {
    "comment": "brin_bloom - Statement 31",
    "query": "IF NOT plan_ok THEN RAISE WARNING 'did not get seqscan plan for %', r"
  },
  {
    "comment": "brin_bloom - Statement 32",
    "query": "EXECUTE format($y$SELECT array_agg(ctid) FROM brintest_bloom WHERE %s $y$, cond) INTO ss_ctids"
  },
  {
    "comment": "brin_bloom - Statement 33",
    "query": "count := array_length(idx_ctids, 1)"
  },
  {
    "comment": "brin_bloom - Statement 34",
    "query": "IF NOT (count = array_length(ss_ctids, 1) AND idx_ctids @> ss_ctids AND idx_ctids <@ ss_ctids) THEN RAISE WARNING 'something not right in %: count %', r, count"
  },
  {
    "comment": "brin_bloom - Statement 35",
    "query": "FOR r2 IN EXECUTE 'SELECT ' || r.colname || ' FROM brintest_bloom WHERE ' || cond LOOP RAISE NOTICE 'seqscan: %', r2"
  },
  {
    "comment": "brin_bloom - Statement 36",
    "query": "FOR r2 IN EXECUTE 'SELECT ' || r.colname || ' FROM brintest_bloom WHERE ' || cond LOOP RAISE NOTICE 'bitmapscan: %', r2"
  },
  {
    "comment": "brin_bloom - Statement 37",
    "query": "IF count != r.matches THEN RAISE WARNING 'unexpected number of results % for %', count, r; END IF"
  },
  {
    "comment": "brin_bloom - Statement 38",
    "query": "END"
  },
  {
    "comment": "brin_bloom - Statement 39",
    "query": "$x$"
  },
  {
    "comment": "brin_bloom - Statement 40",
    "query": "RESET enable_seqscan"
  },
  {
    "comment": "brin_bloom - Statement 41",
    "query": "RESET enable_bitmapscan"
  },
  {
    "comment": "brin_bloom - Statement 42",
    "query": "INSERT INTO brintest_bloom SELECT repeat(stringu1, 42)::bytea, substr(stringu1, 1, 1)::\"char\", stringu1::name, 142857 * tenthous, thousand, twothousand, repeat(stringu1, 42), unique1::oid, (four + 1.0)/(hundred+1), odd::float8 / (tenthous + 1), format('%s:00:%s:00:%s:00', to_hex(odd), to_hex(even), to_hex(hundred))::macaddr, inet '10.2.3.4' + tenthous, cidr '10.2.3/24' + tenthous, substr(stringu1, 1, 1)::bpchar, date '1995-08-15' + tenthous, time '01:20:30' + thousand * interval '18.5 second', timestamp '1942-07-23 03:05:09' + tenthous * interval '36.38 hours', timestamptz '1972-10-10 03:00' + thousand * interval '1 hour', justify_days(justify_hours(tenthous * interval '12 minutes')), timetz '01:30:20' + hundred * interval '15 seconds', tenthous::numeric(36,30) * fivethous * even / (hundred + 1), format('%s%s-%s-%s-%s-%s%s%s', to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'))::uuid, format('%s/%s%s', odd, even, tenthous)::pg_lsn FROM tenk1 ORDER BY unique2 LIMIT 5 OFFSET 5"
  },
  {
    "comment": "brin_bloom - Statement 43",
    "query": "SELECT brin_desummarize_range('brinidx_bloom', 0)"
  },
  {
    "comment": "brin_bloom - Statement 44",
    "query": "VACUUM brintest_bloom"
  },
  {
    "comment": "brin_bloom - Statement 45",
    "query": "UPDATE brintest_bloom SET int8col = int8col * int4col"
  },
  {
    "comment": "brin_bloom - Statement 46",
    "query": "UPDATE brintest_bloom SET textcol = '' WHERE textcol IS NOT NULL"
  },
  {
    "comment": "brin_bloom - Statement 47",
    "query": "SELECT brin_summarize_new_values('brintest_bloom')"
  },
  {
    "comment": "brin_bloom - Statement 48",
    "query": "SELECT brin_summarize_new_values('tenk1_unique1')"
  },
  {
    "comment": "brin_bloom - Statement 49",
    "query": "SELECT brin_summarize_new_values('brinidx_bloom')"
  },
  {
    "comment": "brin_bloom - Statement 50",
    "query": "SELECT brin_desummarize_range('brinidx_bloom', -1)"
  },
  {
    "comment": "brin_bloom - Statement 51",
    "query": "SELECT brin_desummarize_range('brinidx_bloom', 100000000)"
  },
  {
    "comment": "brin_bloom - Statement 52",
    "query": "CREATE TABLE brin_summarize_bloom ( value int ) WITH (fillfactor=10, autovacuum_enabled=false)"
  },
  {
    "comment": "brin_bloom - Statement 53",
    "query": "CREATE INDEX brin_summarize_bloom_idx ON brin_summarize_bloom USING brin (value) WITH (pages_per_range=2)"
  },
  {
    "comment": "brin_bloom - Statement 54",
    "query": "DO $$ DECLARE curtid tid"
  },
  {
    "comment": "brin_bloom - Statement 55",
    "query": "BEGIN LOOP INSERT INTO brin_summarize_bloom VALUES (1) RETURNING ctid INTO curtid"
  },
  {
    "comment": "brin_bloom - Statement 56",
    "query": "EXIT WHEN curtid > tid '(2, 0)'"
  },
  {
    "comment": "brin_bloom - Statement 57",
    "query": "$$"
  },
  {
    "comment": "brin_bloom - Statement 58",
    "query": "SELECT brin_summarize_range('brin_summarize_bloom_idx', 0)"
  },
  {
    "comment": "brin_bloom - Statement 59",
    "query": "SELECT brin_summarize_range('brin_summarize_bloom_idx', 1)"
  },
  {
    "comment": "brin_bloom - Statement 60",
    "query": "SELECT brin_summarize_range('brin_summarize_bloom_idx', 2)"
  },
  {
    "comment": "brin_bloom - Statement 61",
    "query": "SELECT brin_summarize_range('brin_summarize_bloom_idx', 4294967295)"
  },
  {
    "comment": "brin_bloom - Statement 62",
    "query": "SELECT brin_summarize_range('brin_summarize_bloom_idx', -1)"
  },
  {
    "comment": "brin_bloom - Statement 63",
    "query": "SELECT brin_summarize_range('brin_summarize_bloom_idx', 4294967296)"
  },
  {
    "comment": "brin_bloom - Statement 64",
    "query": "CREATE TABLE brin_test_bloom (a INT, b INT)"
  },
  {
    "comment": "brin_bloom - Statement 65",
    "query": "INSERT INTO brin_test_bloom SELECT x/100,x%100 FROM generate_series(1,10000) x(x)"
  },
  {
    "comment": "brin_bloom - Statement 66",
    "query": "CREATE INDEX brin_test_bloom_a_idx ON brin_test_bloom USING brin (a) WITH (pages_per_range = 2)"
  },
  {
    "comment": "brin_bloom - Statement 67",
    "query": "CREATE INDEX brin_test_bloom_b_idx ON brin_test_bloom USING brin (b) WITH (pages_per_range = 2)"
  },
  {
    "comment": "brin_bloom - Statement 68",
    "query": "VACUUM ANALYZE brin_test_bloom"
  },
  {
    "comment": "brin_bloom - Statement 69",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM brin_test_bloom WHERE a = 1"
  },
  {
    "comment": "brin_bloom - Statement 70",
    "query": "EXPLAIN (COSTS OFF) SELECT * FROM brin_test_bloom WHERE b = 1"
  }
]