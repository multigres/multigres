[
  {
    "comment": "create_table_like - Statement 1",
    "query": "/* Test inheritance of structure (LIKE) */ CREATE TABLE inhx (xx text DEFAULT 'text')",
    "expected": "CREATE TABLE inhx (xx TEXT DEFAULT 'text')"
  },
  {
    "comment": "create_table_like - Statement 2",
    "query": "/* * Test double inheritance * * Ensure that defaults are NOT included unless * INCLUDING DEFAULTS is specified */ CREATE TABLE ctla (aa TEXT)",
    "expected": "CREATE TABLE ctla (aa TEXT)"
  },
  {
    "comment": "create_table_like - Statement 3",
    "query": "CREATE TABLE ctlb (bb TEXT) INHERITS (ctla)"
  },
  {
    "comment": "create_table_like - Statement 4",
    "query": "CREATE TABLE foo (LIKE nonexistent)"
  },
  {
    "comment": "create_table_like - Statement 5",
    "query": "CREATE TABLE inhe (ee text, LIKE inhx) inherits (ctlb)",
    "expected": "CREATE TABLE inhe (ee TEXT, LIKE inhx) INHERITS (ctlb)"
  },
  {
    "comment": "create_table_like - Statement 6",
    "query": "INSERT INTO inhe VALUES ('ee-col1', 'ee-col2', DEFAULT, 'ee-col4')"
  },
  {
    "comment": "create_table_like - Statement 7",
    "query": "SELECT * FROM inhe; /* Columns aa, bb, xx value NULL, ee */ SELECT * FROM inhx; /* Empty set since LIKE inherits structure only */ SELECT * FROM ctlb; /* Has ee entry */ SELECT * FROM ctla; /* Has ee entry */ CREATE TABLE inhf (LIKE inhx, LIKE inhx); /* Throw error */ CREATE TABLE inhf (LIKE inhx INCLUDING DEFAULTS INCLUDING CONSTRAINTS)",
    "expected": "SELECT * FROM inhe; SELECT * FROM inhx; SELECT * FROM ctlb; SELECT * FROM ctla; CREATE TABLE inhf (LIKE inhx, LIKE inhx); CREATE TABLE inhf (LIKE inhx INCLUDING CONSTRAINTS INCLUDING DEFAULTS)"
  },
  {
    "comment": "create_table_like - Statement 8",
    "query": "INSERT INTO inhf DEFAULT VALUES"
  },
  {
    "comment": "create_table_like - Statement 9",
    "query": "SELECT * FROM inhf; /* Single entry with value 'text' */ ALTER TABLE inhx add constraint foo CHECK (xx = 'text')",
    "expected": "SELECT * FROM inhf; ALTER TABLE inhx ADD CONSTRAINT foo CHECK (xx = 'text')"
  },
  {
    "comment": "create_table_like - Statement 10",
    "query": "ALTER TABLE inhx ADD PRIMARY KEY (xx)"
  },
  {
    "comment": "create_table_like - Statement 11",
    "query": "CREATE TABLE inhg (LIKE inhx); /* Doesn't copy constraint */ INSERT INTO inhg VALUES ('foo')",
    "expected": "CREATE TABLE inhg (LIKE inhx); INSERT INTO inhg VALUES ('foo')"
  },
  {
    "comment": "create_table_like - Statement 12",
    "query": "DROP TABLE inhg"
  },
  {
    "comment": "create_table_like - Statement 13",
    "query": "CREATE TABLE inhg (x text, LIKE inhx INCLUDING CONSTRAINTS, y text); /* Copies constraints */ INSERT INTO inhg VALUES ('x', 'text', 'y'); /* Succeeds */ INSERT INTO inhg VALUES ('x', 'text', 'y'); /* Succeeds INSERT INTO inhg VALUES ('x', 'foo',  'y');  /* fails due to constraint */ SELECT * FROM inhg; /* Two records with three columns in order x=x, xx=text, y=y */ DROP TABLE inhg",
    "error": "unterminated /* comment"
  },
  {
    "comment": "create_table_like - Statement 14",
    "query": "CREATE TABLE test_like_id_1 (a bigint GENERATED ALWAYS AS IDENTITY, b text)",
    "expected": "CREATE TABLE test_like_id_1 (a BIGINT GENERATED ALWAYS AS IDENTITY, b TEXT)"
  },
  {
    "comment": "create_table_like - Statement 15",
    "query": "SELECT * FROM test_like_id_1"
  },
  {
    "comment": "create_table_like - Statement 16",
    "query": "CREATE TABLE test_like_id_2 (LIKE test_like_id_1)"
  },
  {
    "comment": "create_table_like - Statement 17",
    "query": "SELECT * FROM test_like_id_2"
  },
  {
    "comment": "create_table_like - Statement 18",
    "query": "CREATE TABLE test_like_id_3 (LIKE test_like_id_1 INCLUDING IDENTITY)"
  },
  {
    "comment": "create_table_like - Statement 19",
    "query": "SELECT * FROM test_like_id_3"
  },
  {
    "comment": "create_table_like - Statement 20",
    "query": "DROP TABLE test_like_id_1, test_like_id_2, test_like_id_3"
  },
  {
    "comment": "create_table_like - Statement 21",
    "query": "CREATE TABLE test_like_gen_1 (a int, b int GENERATED ALWAYS AS (a * 2) STORED)",
    "expected": "CREATE TABLE test_like_gen_1 (a INT, b INT GENERATED ALWAYS AS (a * 2) STORED)"
  },
  {
    "comment": "create_table_like - Statement 22",
    "query": "SELECT * FROM test_like_gen_1"
  },
  {
    "comment": "create_table_like - Statement 23",
    "query": "CREATE TABLE test_like_gen_2 (LIKE test_like_gen_1)"
  },
  {
    "comment": "create_table_like - Statement 24",
    "query": "SELECT * FROM test_like_gen_2"
  },
  {
    "comment": "create_table_like - Statement 25",
    "query": "CREATE TABLE test_like_gen_3 (LIKE test_like_gen_1 INCLUDING GENERATED)"
  },
  {
    "comment": "create_table_like - Statement 26",
    "query": "SELECT * FROM test_like_gen_3"
  },
  {
    "comment": "create_table_like - Statement 27",
    "query": "DROP TABLE test_like_gen_1, test_like_gen_2, test_like_gen_3"
  },
  {
    "comment": "create_table_like - Statement 28",
    "query": "CREATE TABLE test_like_4 (b int DEFAULT 42, c int GENERATED ALWAYS AS (a * 2) STORED, a int CHECK (a \u003e 0))",
    "expected": "CREATE TABLE test_like_4 (b INT DEFAULT 42, c INT GENERATED ALWAYS AS (a * 2) STORED, a INT CHECK (a \u003e 0))"
  },
  {
    "comment": "create_table_like - Statement 29",
    "query": "CREATE TABLE test_like_4b (LIKE test_like_4 INCLUDING DEFAULTS)"
  },
  {
    "comment": "create_table_like - Statement 30",
    "query": "CREATE TABLE test_like_4c (LIKE test_like_4 INCLUDING GENERATED)"
  },
  {
    "comment": "create_table_like - Statement 31",
    "query": "CREATE TABLE test_like_4d (LIKE test_like_4 INCLUDING DEFAULTS INCLUDING GENERATED)"
  },
  {
    "comment": "create_table_like - Statement 32",
    "query": "SELECT a, b, c FROM test_like_4a"
  },
  {
    "comment": "create_table_like - Statement 33",
    "query": "SELECT a, b, c FROM test_like_4b"
  },
  {
    "comment": "create_table_like - Statement 34",
    "query": "SELECT a, b, c FROM test_like_4c"
  },
  {
    "comment": "create_table_like - Statement 35",
    "query": "SELECT a, b, c FROM test_like_4d"
  },
  {
    "comment": "create_table_like - Statement 36",
    "query": "CREATE TABLE test_like_5 (x point, y point, z point)"
  },
  {
    "comment": "create_table_like - Statement 37",
    "query": "CREATE TABLE test_like_5x (p int CHECK (p \u003e 0), q int GENERATED ALWAYS AS (p * 2) STORED)",
    "expected": "CREATE TABLE test_like_5x (p INT CHECK (p \u003e 0), q INT GENERATED ALWAYS AS (p * 2) STORED)"
  },
  {
    "comment": "create_table_like - Statement 38",
    "query": "CREATE TABLE test_like_5c (LIKE test_like_4 INCLUDING ALL) INHERITS (test_like_5, test_like_5x)"
  },
  {
    "comment": "create_table_like - Statement 39",
    "query": "CREATE STATISTICS ext_stat ON (a || b) FROM test_like_6"
  },
  {
    "comment": "create_table_like - Statement 40",
    "query": "ALTER TABLE test_like_6 DROP COLUMN c"
  },
  {
    "comment": "create_table_like - Statement 41",
    "query": "CREATE TABLE test_like_6c (LIKE test_like_6 INCLUDING ALL)"
  },
  {
    "comment": "create_table_like - Statement 42",
    "query": "DROP TABLE test_like_5, test_like_5x, test_like_5c"
  },
  {
    "comment": "create_table_like - Statement 43",
    "query": "DROP TABLE test_like_6, test_like_6c"
  },
  {
    "comment": "create_table_like - Statement 44",
    "query": "CREATE TABLE inhg (x text, LIKE inhx INCLUDING INDEXES, y text); /* copies indexes */ INSERT INTO inhg VALUES (5, 10)",
    "expected": "CREATE TABLE inhg (x TEXT, LIKE inhx INCLUDING INDEXES, y TEXT); INSERT INTO inhg VALUES (5, 10)"
  },
  {
    "comment": "create_table_like - Statement 45",
    "query": "INSERT INTO inhg VALUES (20, 10)"
  },
  {
    "comment": "create_table_like - Statement 46",
    "query": "/* Multiple primary keys creation should fail */ CREATE TABLE inhg (x text, LIKE inhx INCLUDING INDEXES, PRIMARY KEY(x)); /* fails */ CREATE TABLE inhz (xx text DEFAULT 'text', yy int UNIQUE)",
    "expected": "CREATE TABLE inhg (x TEXT, LIKE inhx INCLUDING INDEXES, PRIMARY KEY (x)); CREATE TABLE inhz (xx TEXT DEFAULT 'text', yy INT UNIQUE)"
  },
  {
    "comment": "create_table_like - Statement 47",
    "query": "CREATE UNIQUE INDEX inhz_xx_idx on inhz (xx) WHERE xx \u003c\u003e 'test'",
    "expected": "CREATE UNIQUE INDEX inhz_xx_idx ON inhz USING btree ( xx ) WHERE xx \u003c\u003e 'test'"
  },
  {
    "comment": "create_table_like - Statement 48",
    "query": "/* Ok to create multiple unique indexes */ CREATE TABLE inhg (x text UNIQUE, LIKE inhz INCLUDING INDEXES)",
    "expected": "CREATE TABLE inhg (x TEXT UNIQUE, LIKE inhz INCLUDING INDEXES)"
  },
  {
    "comment": "create_table_like - Statement 49",
    "query": "INSERT INTO inhg (xx, yy, x) VALUES ('test', 5, 10)"
  },
  {
    "comment": "create_table_like - Statement 50",
    "query": "INSERT INTO inhg (xx, yy, x) VALUES ('test', 10, 15)"
  },
  {
    "comment": "create_table_like - Statement 51",
    "query": "INSERT INTO inhg (xx, yy, x) VALUES ('foo', 10, 15)"
  },
  {
    "comment": "create_table_like - Statement 52",
    "query": "DROP TABLE inhz"
  },
  {
    "comment": "create_table_like - Statement 53",
    "query": "/* Use primary key imported by LIKE for self-referential FK constraint */ CREATE TABLE inhz (x text REFERENCES inhz, LIKE inhx INCLUDING INDEXES)",
    "expected": "CREATE TABLE inhz (x TEXT REFERENCES inhz, LIKE inhx INCLUDING INDEXES)"
  },
  {
    "comment": "create_table_like - Statement 54",
    "query": "CREATE TABLE ctlt1 (a text CHECK (length(a) \u003e 2) PRIMARY KEY, b text)",
    "expected": "CREATE TABLE ctlt1 (a TEXT CHECK (length(a) \u003e 2) PRIMARY KEY, b TEXT)"
  },
  {
    "comment": "create_table_like - Statement 55",
    "query": "CREATE INDEX ctlt1_b_key ON ctlt1 (b)",
    "expected": "CREATE INDEX ctlt1_b_key ON ctlt1 USING btree ( b )"
  },
  {
    "comment": "create_table_like - Statement 56",
    "query": "CREATE INDEX ctlt1_fnidx ON ctlt1 ((a || b))",
    "expected": "CREATE INDEX ctlt1_fnidx ON ctlt1 USING btree ( (a || b) )"
  },
  {
    "comment": "create_table_like - Statement 57",
    "query": "CREATE STATISTICS ctlt1_a_b_stat ON a,b FROM ctlt1",
    "expected": "CREATE STATISTICS ctlt1_a_b_stat ON a, b FROM ctlt1"
  },
  {
    "comment": "create_table_like - Statement 58",
    "query": "CREATE STATISTICS ctlt1_expr_stat ON (a || b) FROM ctlt1"
  },
  {
    "comment": "create_table_like - Statement 59",
    "query": "COMMENT ON STATISTICS ctlt1_a_b_stat IS 'ab stats'"
  },
  {
    "comment": "create_table_like - Statement 60",
    "query": "COMMENT ON STATISTICS ctlt1_expr_stat IS 'ab expr stats'"
  },
  {
    "comment": "create_table_like - Statement 61",
    "query": "COMMENT ON COLUMN ctlt1.a IS 'A'"
  },
  {
    "comment": "create_table_like - Statement 62",
    "query": "COMMENT ON COLUMN ctlt1.b IS 'B'"
  },
  {
    "comment": "create_table_like - Statement 63",
    "query": "COMMENT ON CONSTRAINT ctlt1_a_check ON ctlt1 IS 't1_a_check'"
  },
  {
    "comment": "create_table_like - Statement 64",
    "query": "COMMENT ON INDEX ctlt1_pkey IS 'index pkey'"
  },
  {
    "comment": "create_table_like - Statement 65",
    "query": "COMMENT ON INDEX ctlt1_b_key IS 'index b_key'"
  },
  {
    "comment": "create_table_like - Statement 66",
    "query": "ALTER TABLE ctlt1 ALTER COLUMN a SET STORAGE MAIN",
    "expected": "ALTER TABLE ctlt1 ALTER COLUMN a SET STORAGE main"
  },
  {
    "comment": "create_table_like - Statement 67",
    "query": "CREATE TABLE ctlt2 (c text)",
    "expected": "CREATE TABLE ctlt2 (c TEXT)"
  },
  {
    "comment": "create_table_like - Statement 68",
    "query": "ALTER TABLE ctlt2 ALTER COLUMN c SET STORAGE EXTERNAL",
    "expected": "ALTER TABLE ctlt2 ALTER COLUMN c SET STORAGE external"
  },
  {
    "comment": "create_table_like - Statement 69",
    "query": "COMMENT ON COLUMN ctlt2.c IS 'C'"
  },
  {
    "comment": "create_table_like - Statement 70",
    "query": "CREATE TABLE ctlt3 (a text CHECK (length(a) \u003c 5), c text CHECK (length(c) \u003c 7))",
    "expected": "CREATE TABLE ctlt3 (a TEXT CHECK (length(a) \u003c 5), c TEXT CHECK (length(c) \u003c 7))"
  },
  {
    "comment": "create_table_like - Statement 71",
    "query": "ALTER TABLE ctlt3 ALTER COLUMN c SET STORAGE EXTERNAL",
    "expected": "ALTER TABLE ctlt3 ALTER COLUMN c SET STORAGE external"
  },
  {
    "comment": "create_table_like - Statement 72",
    "query": "ALTER TABLE ctlt3 ALTER COLUMN a SET STORAGE MAIN",
    "expected": "ALTER TABLE ctlt3 ALTER COLUMN a SET STORAGE main"
  },
  {
    "comment": "create_table_like - Statement 73",
    "query": "CREATE INDEX ctlt3_fnidx ON ctlt3 ((a || c))",
    "expected": "CREATE INDEX ctlt3_fnidx ON ctlt3 USING btree ( (a || c) )"
  },
  {
    "comment": "create_table_like - Statement 74",
    "query": "COMMENT ON COLUMN ctlt3.a IS 'A3'"
  },
  {
    "comment": "create_table_like - Statement 75",
    "query": "COMMENT ON COLUMN ctlt3.c IS 'C'"
  },
  {
    "comment": "create_table_like - Statement 76",
    "query": "COMMENT ON CONSTRAINT ctlt3_a_check ON ctlt3 IS 't3_a_check'"
  },
  {
    "comment": "create_table_like - Statement 77",
    "query": "CREATE TABLE ctlt4 (a text, c text)",
    "expected": "CREATE TABLE ctlt4 (a TEXT, c TEXT)"
  },
  {
    "comment": "create_table_like - Statement 78",
    "query": "ALTER TABLE ctlt4 ALTER COLUMN c SET STORAGE EXTERNAL",
    "expected": "ALTER TABLE ctlt4 ALTER COLUMN c SET STORAGE external"
  },
  {
    "comment": "create_table_like - Statement 79",
    "query": "CREATE TABLE ctlt12_storage (LIKE ctlt1 INCLUDING STORAGE, LIKE ctlt2 INCLUDING STORAGE)"
  },
  {
    "comment": "create_table_like - Statement 80",
    "query": "CREATE TABLE ctlt13_inh () INHERITS (ctlt1, ctlt3)"
  },
  {
    "comment": "create_table_like - Statement 81",
    "query": "CREATE TABLE ctlt_all (LIKE ctlt1 INCLUDING ALL)"
  },
  {
    "comment": "create_table_like - Statement 82",
    "query": "SELECT s.stxname, objsubid, description FROM pg_description, pg_statistic_ext s WHERE classoid = 'pg_statistic_ext'::regclass AND objoid = s.oid AND s.stxrelid = 'ctlt_all'::regclass ORDER BY s.stxname, objsubid",
    "expected": "SELECT s.stxname, objsubid, description FROM pg_description, pg_statistic_ext AS s WHERE classoid = CAST('pg_statistic_ext' AS regclass) AND objoid = s.oid AND s.stxrelid = CAST('ctlt_all' AS regclass) ORDER BY s.stxname, objsubid"
  },
  {
    "comment": "create_table_like - Statement 83",
    "query": "CREATE TABLE inh_error1 () INHERITS (ctlt1, ctlt4)"
  },
  {
    "comment": "create_table_like - Statement 84",
    "query": "CREATE TABLE inh_error2 (LIKE ctlt4 INCLUDING STORAGE) INHERITS (ctlt1)"
  },
  {
    "comment": "create_table_like - Statement 85",
    "query": "CREATE TABLE pg_attrdef (LIKE ctlt1 INCLUDING ALL)"
  },
  {
    "comment": "create_table_like - Statement 86",
    "query": "BEGIN"
  },
  {
    "comment": "create_table_like - Statement 87",
    "query": "CREATE SCHEMA ctl_schema"
  },
  {
    "comment": "create_table_like - Statement 88",
    "query": "SET LOCAL search_path = ctl_schema, public",
    "expected": "SET LOCAL search_path = 'ctl_schema', 'public'"
  },
  {
    "comment": "create_table_like - Statement 89",
    "query": "CREATE TABLE ctlt1 (LIKE ctlt1 INCLUDING ALL)"
  },
  {
    "comment": "create_table_like - Statement 90",
    "query": "DROP TABLE ctlt1, ctlt2, ctlt3, ctlt4, ctlt12_storage, ctlt12_comments, ctlt1_inh, ctlt13_inh, ctlt13_like, ctlt_all, ctla, ctlb CASCADE"
  },
  {
    "comment": "create_table_like - Statement 91",
    "query": "CREATE TABLE noinh_con_copy (a int CHECK (a \u003e 0) NO INHERIT)",
    "expected": "CREATE TABLE noinh_con_copy (a INT CHECK (a \u003e 0))"
  },
  {
    "comment": "create_table_like - Statement 92",
    "query": "CREATE TABLE noinh_con_copy1 (LIKE noinh_con_copy INCLUDING CONSTRAINTS)"
  },
  {
    "comment": "create_table_like - Statement 93",
    "query": "DROP TABLE noinh_con_copy, noinh_con_copy1"
  },
  {
    "comment": "create_table_like - Statement 94",
    "query": "/* LIKE with other relation kinds */ CREATE TABLE ctlt4 (a int, b text)",
    "expected": "CREATE TABLE ctlt4 (a INT, b TEXT)"
  },
  {
    "comment": "create_table_like - Statement 95",
    "query": "CREATE SEQUENCE ctlseq1"
  },
  {
    "comment": "create_table_like - Statement 96",
    "query": "CREATE TABLE ctlt10 (LIKE ctlseq1)"
  },
  {
    "comment": "create_table_like - Statement 97",
    "query": "CREATE VIEW ctlv1 AS SELECT * FROM ctlt4"
  },
  {
    "comment": "create_table_like - Statement 98",
    "query": "CREATE TABLE ctlt11 (LIKE ctlv1)"
  },
  {
    "comment": "create_table_like - Statement 99",
    "query": "CREATE TABLE ctlt11a (LIKE ctlv1 INCLUDING ALL)"
  },
  {
    "comment": "create_table_like - Statement 100",
    "query": "CREATE TYPE ctlty1 AS (a int, b text)",
    "expected": "CREATE TYPE ctlty1 AS (a INT, b TEXT)"
  },
  {
    "comment": "create_table_like - Statement 101",
    "query": "CREATE TABLE ctlt12 (LIKE ctlty1)"
  },
  {
    "comment": "create_table_like - Statement 102",
    "query": "DROP SEQUENCE ctlseq1"
  },
  {
    "comment": "create_table_like - Statement 103",
    "query": "DROP TYPE ctlty1"
  },
  {
    "comment": "create_table_like - Statement 104",
    "query": "DROP VIEW ctlv1"
  },
  {
    "comment": "create_table_like - Statement 105",
    "query": "DROP TABLE IF EXISTS ctlt4, ctlt10, ctlt11, ctlt11a, ctlt12"
  }
]
