[
  {
    "comment": "rowtypes - Statement 1",
    "query": "create type complex as (r float8, i float8)"
  },
  {
    "comment": "rowtypes - Statement 2",
    "query": "create temp table fullname (first text, last text)"
  },
  {
    "comment": "rowtypes - Statement 3",
    "query": "create type quad as (c1 complex, c2 complex)"
  },
  {
    "comment": "rowtypes - Statement 4",
    "query": "select (1.1,2.2)::complex, row((3.3,4.4),(5.5,null))::quad"
  },
  {
    "comment": "rowtypes - Statement 5",
    "query": "select row('Joe', 'Blow')::fullname, '(Joe,Blow)'::fullname"
  },
  {
    "comment": "rowtypes - Statement 6",
    "query": "select '(Joe,von Blow)'::fullname, '(Joe,d''Blow)'::fullname"
  },
  {
    "comment": "rowtypes - Statement 7",
    "query": "select '(Joe,\"von\"\"Blow\")'::fullname, E'(Joe,d\\\\\\\\Blow)'::fullname"
  },
  {
    "comment": "rowtypes - Statement 8",
    "query": "select '(Joe,\"Blow,Jr\")'::fullname"
  },
  {
    "comment": "rowtypes - Statement 9",
    "query": "select '(Joe,)'::fullname"
  },
  {
    "comment": "rowtypes - Statement 10",
    "query": "select '(Joe)'::fullname"
  },
  {
    "comment": "rowtypes - Statement 11",
    "query": "select '(Joe,,)'::fullname"
  },
  {
    "comment": "rowtypes - Statement 12",
    "query": "select '[]'::fullname"
  },
  {
    "comment": "rowtypes - Statement 13",
    "query": "select ' (Joe,Blow)  '::fullname"
  },
  {
    "comment": "rowtypes - Statement 14",
    "query": "select '(Joe,Blow) /'::fullname"
  },
  {
    "comment": "rowtypes - Statement 15",
    "query": "SELECT pg_input_is_valid('(1,2)', 'complex')"
  },
  {
    "comment": "rowtypes - Statement 16",
    "query": "SELECT pg_input_is_valid('(1,2', 'complex')"
  },
  {
    "comment": "rowtypes - Statement 17",
    "query": "SELECT pg_input_is_valid('(1,zed)', 'complex')"
  },
  {
    "comment": "rowtypes - Statement 18",
    "query": "SELECT * FROM pg_input_error_info('(1,zed)', 'complex')"
  },
  {
    "comment": "rowtypes - Statement 19",
    "query": "SELECT * FROM pg_input_error_info('(1,1e400)', 'complex')"
  },
  {
    "comment": "rowtypes - Statement 20",
    "query": "create temp table quadtable(f1 int, q quad)"
  },
  {
    "comment": "rowtypes - Statement 21",
    "query": "insert into quadtable values (1, ((3.3,4.4),(5.5,6.6)))"
  },
  {
    "comment": "rowtypes - Statement 22",
    "query": "insert into quadtable values (2, ((null,4.4),(5.5,6.6)))"
  },
  {
    "comment": "rowtypes - Statement 23",
    "query": "select * from quadtable"
  },
  {
    "comment": "rowtypes - Statement 24",
    "query": "select f1, q.c1 from quadtable"
  },
  {
    "comment": "rowtypes - Statement 25",
    "query": "select f1, (q).c1, (qq.q).c1.i from quadtable qq"
  },
  {
    "comment": "rowtypes - Statement 26",
    "query": "create temp table people (fn fullname, bd date)"
  },
  {
    "comment": "rowtypes - Statement 27",
    "query": "insert into people values ('(Joe,Blow)', '1984-01-10')"
  },
  {
    "comment": "rowtypes - Statement 28",
    "query": "select * from people"
  },
  {
    "comment": "rowtypes - Statement 29",
    "query": "alter table fullname add column suffix text default ''"
  },
  {
    "comment": "rowtypes - Statement 30",
    "query": "alter table fullname add column suffix text default null"
  },
  {
    "comment": "rowtypes - Statement 31",
    "query": "update people set fn.suffix = 'Jr'"
  },
  {
    "comment": "rowtypes - Statement 32",
    "query": "insert into quadtable (f1, q.c1.r, q.c2.i) values(44,55,66)"
  },
  {
    "comment": "rowtypes - Statement 33",
    "query": "update quadtable set q.c1.r = 12 where f1 = 2"
  },
  {
    "comment": "rowtypes - Statement 34",
    "query": "update quadtable set q.c1 = 12"
  },
  {
    "comment": "rowtypes - Statement 35",
    "query": "create temp table pp (f1 text)"
  },
  {
    "comment": "rowtypes - Statement 36",
    "query": "insert into pp values (repeat('abcdefghijkl', 100000))"
  },
  {
    "comment": "rowtypes - Statement 37",
    "query": "insert into people select ('Jim', f1, null)::fullname, current_date from pp"
  },
  {
    "comment": "rowtypes - Statement 38",
    "query": "select (fn).first, substr((fn).last, 1, 20), length((fn).last) from people"
  },
  {
    "comment": "rowtypes - Statement 39",
    "query": "update people set fn.first = 'Jack'"
  },
  {
    "comment": "rowtypes - Statement 40",
    "query": "select ROW(1,2) < ROW(1,3) as true"
  },
  {
    "comment": "rowtypes - Statement 41",
    "query": "select ROW(1,2) < ROW(1,1) as false"
  },
  {
    "comment": "rowtypes - Statement 42",
    "query": "select ROW(1,2) < ROW(1,NULL) as null"
  },
  {
    "comment": "rowtypes - Statement 43",
    "query": "select ROW(1,2,3) < ROW(1,3,NULL) as true"
  },
  {
    "comment": "rowtypes - Statement 44",
    "query": "select ROW(11,'ABC') < ROW(11,'DEF') as true"
  },
  {
    "comment": "rowtypes - Statement 45",
    "query": "select ROW(11,'ABC') > ROW(11,'DEF') as false"
  },
  {
    "comment": "rowtypes - Statement 46",
    "query": "select ROW(12,'ABC') > ROW(11,'DEF') as true"
  },
  {
    "comment": "rowtypes - Statement 47",
    "query": "select ROW(1,2,3) < ROW(1,NULL,4) as null"
  },
  {
    "comment": "rowtypes - Statement 48",
    "query": "select ROW(1,2,3) = ROW(1,NULL,4) as false"
  },
  {
    "comment": "rowtypes - Statement 49",
    "query": "select ROW(1,2,3) <> ROW(1,NULL,4) as true"
  },
  {
    "comment": "rowtypes - Statement 50",
    "query": "select ROW('ABC','DEF') ~<=~ ROW('DEF','ABC') as true"
  },
  {
    "comment": "rowtypes - Statement 51",
    "query": "select ROW('ABC','DEF') ~>=~ ROW('DEF','ABC') as false"
  },
  {
    "comment": "rowtypes - Statement 52",
    "query": "select ROW('ABC','DEF') ~~ ROW('DEF','ABC') as fail"
  },
  {
    "comment": "rowtypes - Statement 53",
    "query": "select ROW(1,2) = ROW(1,2::int8)"
  },
  {
    "comment": "rowtypes - Statement 54",
    "query": "select ROW(1,2) in (ROW(3,4), ROW(1,2))"
  },
  {
    "comment": "rowtypes - Statement 55",
    "query": "select ROW(1,2) in (ROW(3,4), ROW(1,2::int8))"
  },
  {
    "comment": "rowtypes - Statement 56",
    "query": "select unique1, unique2 from tenk1 where (unique1, unique2) < any (select ten, ten from tenk1 where hundred < 3) and unique1 <= 20 order by 1"
  },
  {
    "comment": "rowtypes - Statement 57",
    "query": "explain (costs off) select thousand, tenthous from tenk1 where (thousand, tenthous) >= (997, 5000) order by thousand, tenthous"
  },
  {
    "comment": "rowtypes - Statement 58",
    "query": "select thousand, tenthous from tenk1 where (thousand, tenthous) >= (997, 5000) order by thousand, tenthous"
  },
  {
    "comment": "rowtypes - Statement 59",
    "query": "explain (costs off) select thousand, tenthous, four from tenk1 where (thousand, tenthous, four) > (998, 5000, 3) order by thousand, tenthous"
  },
  {
    "comment": "rowtypes - Statement 60",
    "query": "select thousand, tenthous, four from tenk1 where (thousand, tenthous, four) > (998, 5000, 3) order by thousand, tenthous"
  },
  {
    "comment": "rowtypes - Statement 61",
    "query": "explain (costs off) select thousand, tenthous from tenk1 where (998, 5000) < (thousand, tenthous) order by thousand, tenthous"
  },
  {
    "comment": "rowtypes - Statement 62",
    "query": "select thousand, tenthous from tenk1 where (998, 5000) < (thousand, tenthous) order by thousand, tenthous"
  },
  {
    "comment": "rowtypes - Statement 63",
    "query": "explain (costs off) select thousand, hundred from tenk1 where (998, 5000) < (thousand, hundred) order by thousand, hundred"
  },
  {
    "comment": "rowtypes - Statement 64",
    "query": "select thousand, hundred from tenk1 where (998, 5000) < (thousand, hundred) order by thousand, hundred"
  },
  {
    "comment": "rowtypes - Statement 65",
    "query": "create temp table test_table (a text, b text)"
  },
  {
    "comment": "rowtypes - Statement 66",
    "query": "insert into test_table values ('a', 'b')"
  },
  {
    "comment": "rowtypes - Statement 67",
    "query": "insert into test_table select 'a', null from generate_series(1,1000)"
  },
  {
    "comment": "rowtypes - Statement 68",
    "query": "insert into test_table values ('b', 'a')"
  },
  {
    "comment": "rowtypes - Statement 69",
    "query": "create index on test_table (a,b)"
  },
  {
    "comment": "rowtypes - Statement 70",
    "query": "set enable_sort = off"
  },
  {
    "comment": "rowtypes - Statement 71",
    "query": "explain (costs off) select a,b from test_table where (a,b) > ('a','a') order by a,b"
  },
  {
    "comment": "rowtypes - Statement 72",
    "query": "select a,b from test_table where (a,b) > ('a','a') order by a,b"
  },
  {
    "comment": "rowtypes - Statement 73",
    "query": "reset enable_sort"
  },
  {
    "comment": "rowtypes - Statement 74",
    "query": "select * from int8_tbl i8 where i8 in (row(123,456))"
  },
  {
    "comment": "rowtypes - Statement 75",
    "query": "explain (costs off) select * from int8_tbl i8 where i8 in (row(123,456)::int8_tbl, '(4567890123456789,123)')"
  },
  {
    "comment": "rowtypes - Statement 76",
    "query": "select * from int8_tbl i8 where i8 in (row(123,456)::int8_tbl, '(4567890123456789,123)')"
  },
  {
    "comment": "rowtypes - Statement 77",
    "query": "select (row(1, 2.0)).f1"
  },
  {
    "comment": "rowtypes - Statement 78",
    "query": "select (row(1, 2.0)).f2"
  },
  {
    "comment": "rowtypes - Statement 79",
    "query": "select (row(1, 2.0)).nosuch"
  },
  {
    "comment": "rowtypes - Statement 80",
    "query": "select (row(1, 2.0)).*"
  },
  {
    "comment": "rowtypes - Statement 81",
    "query": "select (r).f1 from (select row(1, 2.0) as r) ss"
  },
  {
    "comment": "rowtypes - Statement 82",
    "query": "select (r).f3 from (select row(1, 2.0) as r) ss"
  },
  {
    "comment": "rowtypes - Statement 83",
    "query": "select (r).* from (select row(1, 2.0) as r) ss"
  },
  {
    "comment": "rowtypes - Statement 84",
    "query": "select ROW()"
  },
  {
    "comment": "rowtypes - Statement 85",
    "query": "select ROW() IS NULL"
  },
  {
    "comment": "rowtypes - Statement 86",
    "query": "select ROW() = ROW()"
  },
  {
    "comment": "rowtypes - Statement 87",
    "query": "select array[ row(1,2), row(3,4), row(5,6) ]"
  },
  {
    "comment": "rowtypes - Statement 88",
    "query": "select row(1,1.1) = any (array[ row(7,7.7), row(1,1.1), row(0,0.0) ])"
  },
  {
    "comment": "rowtypes - Statement 89",
    "query": "select row(1,1.1) = any (array[ row(7,7.7), row(1,1.0), row(0,0.0) ])"
  },
  {
    "comment": "rowtypes - Statement 90",
    "query": "create type cantcompare as (p point, r float8)"
  },
  {
    "comment": "rowtypes - Statement 91",
    "query": "create temp table cc (f1 cantcompare)"
  },
  {
    "comment": "rowtypes - Statement 92",
    "query": "insert into cc values('(\"(1,2)\",3)')"
  },
  {
    "comment": "rowtypes - Statement 93",
    "query": "insert into cc values('(\"(4,5)\",6)')"
  },
  {
    "comment": "rowtypes - Statement 94",
    "query": "select * from cc order by f1"
  },
  {
    "comment": "rowtypes - Statement 95",
    "query": "create type testtype1 as (a int, b int)"
  },
  {
    "comment": "rowtypes - Statement 96",
    "query": "select row(1, 2)::testtype1 < row(1, 3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 97",
    "query": "select row(1, 2)::testtype1 <= row(1, 3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 98",
    "query": "select row(1, 2)::testtype1 = row(1, 2)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 99",
    "query": "select row(1, 2)::testtype1 <> row(1, 3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 100",
    "query": "select row(1, 3)::testtype1 >= row(1, 2)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 101",
    "query": "select row(1, 3)::testtype1 > row(1, 2)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 102",
    "query": "select row(1, -2)::testtype1 < row(1, -3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 103",
    "query": "select row(1, -2)::testtype1 <= row(1, -3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 104",
    "query": "select row(1, -2)::testtype1 = row(1, -3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 105",
    "query": "select row(1, -2)::testtype1 <> row(1, -2)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 106",
    "query": "select row(1, -3)::testtype1 >= row(1, -2)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 107",
    "query": "select row(1, -3)::testtype1 > row(1, -2)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 108",
    "query": "select row(1, -2)::testtype1 < row(1, 3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 109",
    "query": "create type testtype3 as (a int, b text)"
  },
  {
    "comment": "rowtypes - Statement 110",
    "query": "select row(1, 2)::testtype1 < row(1, 'abc')::testtype3"
  },
  {
    "comment": "rowtypes - Statement 111",
    "query": "select row(1, 2)::testtype1 <> row(1, 'abc')::testtype3"
  },
  {
    "comment": "rowtypes - Statement 112",
    "query": "create type testtype5 as (a int)"
  },
  {
    "comment": "rowtypes - Statement 113",
    "query": "select row(1, 2)::testtype1 < row(1)::testtype5"
  },
  {
    "comment": "rowtypes - Statement 114",
    "query": "select row(1, 2)::testtype1 <> row(1)::testtype5"
  },
  {
    "comment": "rowtypes - Statement 115",
    "query": "create type testtype6 as (a int, b point)"
  },
  {
    "comment": "rowtypes - Statement 116",
    "query": "select row(1, '(1,2)')::testtype6 < row(1, '(1,3)')::testtype6"
  },
  {
    "comment": "rowtypes - Statement 117",
    "query": "select row(1, '(1,2)')::testtype6 <> row(1, '(1,3)')::testtype6"
  },
  {
    "comment": "rowtypes - Statement 118",
    "query": "drop type testtype1, testtype3, testtype5, testtype6"
  },
  {
    "comment": "rowtypes - Statement 119",
    "query": "select row(1, 2)::testtype1 *< row(1, 3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 120",
    "query": "select row(1, 2)::testtype1 *<= row(1, 3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 121",
    "query": "select row(1, 2)::testtype1 *= row(1, 2)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 122",
    "query": "select row(1, 2)::testtype1 *<> row(1, 3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 123",
    "query": "select row(1, 3)::testtype1 *>= row(1, 2)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 124",
    "query": "select row(1, 3)::testtype1 *> row(1, 2)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 125",
    "query": "select row(1, -2)::testtype1 *< row(1, -3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 126",
    "query": "select row(1, -2)::testtype1 *<= row(1, -3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 127",
    "query": "select row(1, -2)::testtype1 *= row(1, -3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 128",
    "query": "select row(1, -2)::testtype1 *<> row(1, -2)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 129",
    "query": "select row(1, -3)::testtype1 *>= row(1, -2)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 130",
    "query": "select row(1, -3)::testtype1 *> row(1, -2)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 131",
    "query": "select row(1, -2)::testtype1 *< row(1, 3)::testtype1"
  },
  {
    "comment": "rowtypes - Statement 132",
    "query": "create type testtype2 as (a smallint, b bool)"
  },
  {
    "comment": "rowtypes - Statement 133",
    "query": "select row(1, true)::testtype2 *< row(2, true)::testtype2"
  },
  {
    "comment": "rowtypes - Statement 134",
    "query": "select row(-2, true)::testtype2 *< row(-1, true)::testtype2"
  },
  {
    "comment": "rowtypes - Statement 135",
    "query": "select row(0, false)::testtype2 *< row(0, true)::testtype2"
  },
  {
    "comment": "rowtypes - Statement 136",
    "query": "select row(0, false)::testtype2 *<> row(0, true)::testtype2"
  },
  {
    "comment": "rowtypes - Statement 137",
    "query": "select row(1, 'abc')::testtype3 *< row(1, 'abd')::testtype3"
  },
  {
    "comment": "rowtypes - Statement 138",
    "query": "select row(1, 'abc')::testtype3 *< row(1, 'abcd')::testtype3"
  },
  {
    "comment": "rowtypes - Statement 139",
    "query": "select row(1, 'abc')::testtype3 *> row(1, 'abd')::testtype3"
  },
  {
    "comment": "rowtypes - Statement 140",
    "query": "select row(1, 'abc')::testtype3 *<> row(1, 'abd')::testtype3"
  },
  {
    "comment": "rowtypes - Statement 141",
    "query": "create type testtype4 as (a int, b point)"
  },
  {
    "comment": "rowtypes - Statement 142",
    "query": "select row(1, '(1,2)')::testtype4 *< row(1, '(1,3)')::testtype4"
  },
  {
    "comment": "rowtypes - Statement 143",
    "query": "select row(1, '(1,2)')::testtype4 *<> row(1, '(1,3)')::testtype4"
  },
  {
    "comment": "rowtypes - Statement 144",
    "query": "select row(1, 2)::testtype1 *< row(1, 'abc')::testtype3"
  },
  {
    "comment": "rowtypes - Statement 145",
    "query": "select row(1, 2)::testtype1 *<> row(1, 'abc')::testtype3"
  },
  {
    "comment": "rowtypes - Statement 146",
    "query": "select row(1, 2)::testtype1 *< row(1)::testtype5"
  },
  {
    "comment": "rowtypes - Statement 147",
    "query": "select row(1, 2)::testtype1 *<> row(1)::testtype5"
  },
  {
    "comment": "rowtypes - Statement 148",
    "query": "select row(1, '(1,2)')::testtype6 *< row(1, '(1,3)')::testtype6"
  },
  {
    "comment": "rowtypes - Statement 149",
    "query": "select row(1, '(1,2)')::testtype6 *>= row(1, '(1,3)')::testtype6"
  },
  {
    "comment": "rowtypes - Statement 150",
    "query": "select row(1, '(1,2)')::testtype6 *<> row(1, '(1,3)')::testtype6"
  },
  {
    "comment": "rowtypes - Statement 151",
    "query": "select q.a, q.b = row(2), q.c = array[row(3)], q.d = row(row(4)) from unnest(array[row(1, row(2), array[row(3)], row(row(4))), row(2, row(3), array[row(4)], row(row(5)))]) as q(a int, b record, c record[], d record)"
  },
  {
    "comment": "rowtypes - Statement 152",
    "query": "drop type testtype1, testtype2, testtype3, testtype4, testtype5, testtype6"
  },
  {
    "comment": "rowtypes - Statement 153",
    "query": "BEGIN"
  },
  {
    "comment": "rowtypes - Statement 154",
    "query": "CREATE TABLE price ( id SERIAL PRIMARY KEY, active BOOLEAN NOT NULL, price NUMERIC )"
  },
  {
    "comment": "rowtypes - Statement 155",
    "query": "CREATE TYPE price_input AS ( id INTEGER, price NUMERIC )"
  },
  {
    "comment": "rowtypes - Statement 156",
    "query": "CREATE TYPE price_key AS ( id INTEGER )"
  },
  {
    "comment": "rowtypes - Statement 157",
    "query": "CREATE FUNCTION price_key_from_table(price) RETURNS price_key AS $$ SELECT $1.id $$ LANGUAGE SQL"
  },
  {
    "comment": "rowtypes - Statement 158",
    "query": "CREATE FUNCTION price_key_from_input(price_input) RETURNS price_key AS $$ SELECT $1.id $$ LANGUAGE SQL"
  },
  {
    "comment": "rowtypes - Statement 159",
    "query": "insert into price values (1,false,42), (10,false,100), (11,true,17.99)"
  },
  {
    "comment": "rowtypes - Statement 160",
    "query": "UPDATE price SET active = true, price = input_prices.price FROM unnest(ARRAY[(10, 123.00), (11, 99.99)]::price_input[]) input_prices WHERE price_key_from_table(price.*) = price_key_from_input(input_prices.*)"
  },
  {
    "comment": "rowtypes - Statement 161",
    "query": "select * from price"
  },
  {
    "comment": "rowtypes - Statement 162",
    "query": "rollback"
  },
  {
    "comment": "rowtypes - Statement 163",
    "query": "create temp table compos (f1 int, f2 text)"
  },
  {
    "comment": "rowtypes - Statement 164",
    "query": "create function fcompos1(v compos) returns void as $$ insert into compos values (v); $$ language sql"
  },
  {
    "comment": "rowtypes - Statement 165",
    "query": "create function fcompos1(v compos) returns void as $$ insert into compos values (v.*); $$ language sql"
  },
  {
    "comment": "rowtypes - Statement 166",
    "query": "create function fcompos2(v compos) returns void as $$ select fcompos1(v); $$ language sql"
  },
  {
    "comment": "rowtypes - Statement 167",
    "query": "create function fcompos3(v compos) returns void as $$ select fcompos1(fcompos3.v.*); $$ language sql"
  },
  {
    "comment": "rowtypes - Statement 168",
    "query": "select fcompos1(row(1,'one'))"
  },
  {
    "comment": "rowtypes - Statement 169",
    "query": "select fcompos2(row(2,'two'))"
  },
  {
    "comment": "rowtypes - Statement 170",
    "query": "select fcompos3(row(3,'three'))"
  },
  {
    "comment": "rowtypes - Statement 171",
    "query": "select * from compos"
  },
  {
    "comment": "rowtypes - Statement 172",
    "query": "select cast (fullname as text) from fullname"
  },
  {
    "comment": "rowtypes - Statement 173",
    "query": "select fullname::text from fullname"
  },
  {
    "comment": "rowtypes - Statement 174",
    "query": "select text(fullname) from fullname"
  },
  {
    "comment": "rowtypes - Statement 175",
    "query": "select fullname.text from fullname"
  },
  {
    "comment": "rowtypes - Statement 176",
    "query": "select cast (row('Jim', 'Beam') as text)"
  },
  {
    "comment": "rowtypes - Statement 177",
    "query": "select (row('Jim', 'Beam'))::text"
  },
  {
    "comment": "rowtypes - Statement 178",
    "query": "select text(row('Jim', 'Beam'))"
  },
  {
    "comment": "rowtypes - Statement 179",
    "query": "select (row('Jim', 'Beam')).text"
  },
  {
    "comment": "rowtypes - Statement 180",
    "query": "insert into fullname values ('Joe', 'Blow')"
  },
  {
    "comment": "rowtypes - Statement 181",
    "query": "select f.last from fullname f"
  },
  {
    "comment": "rowtypes - Statement 182",
    "query": "select last(f) from fullname f"
  },
  {
    "comment": "rowtypes - Statement 183",
    "query": "create function longname(fullname) returns text language sql as $$select $1.first || ' ' || $1.last$$"
  },
  {
    "comment": "rowtypes - Statement 184",
    "query": "select f.longname from fullname f"
  },
  {
    "comment": "rowtypes - Statement 185",
    "query": "select longname(f) from fullname f"
  },
  {
    "comment": "rowtypes - Statement 186",
    "query": "alter table fullname add column longname text"
  },
  {
    "comment": "rowtypes - Statement 187",
    "query": "select row_to_json(i) from int8_tbl i"
  },
  {
    "comment": "rowtypes - Statement 188",
    "query": "select row_to_json(i) from int8_tbl i(x,y)"
  },
  {
    "comment": "rowtypes - Statement 189",
    "query": "select row_to_json(ss) from (select q1, q2 from int8_tbl) as ss"
  },
  {
    "comment": "rowtypes - Statement 190",
    "query": "select row_to_json(ss) from (select q1, q2 from int8_tbl offset 0) as ss"
  },
  {
    "comment": "rowtypes - Statement 191",
    "query": "select row_to_json(ss) from (select q1 as a, q2 as b from int8_tbl) as ss"
  },
  {
    "comment": "rowtypes - Statement 192",
    "query": "select row_to_json(ss) from (select q1 as a, q2 as b from int8_tbl offset 0) as ss"
  },
  {
    "comment": "rowtypes - Statement 193",
    "query": "select row_to_json(ss) from (select q1 as a, q2 as b from int8_tbl) as ss(x,y)"
  },
  {
    "comment": "rowtypes - Statement 194",
    "query": "select row_to_json(ss) from (select q1 as a, q2 as b from int8_tbl offset 0) as ss(x,y)"
  },
  {
    "comment": "rowtypes - Statement 195",
    "query": "explain (costs off) select row_to_json(q) from (select thousand, tenthous from tenk1 where thousand = 42 and tenthous < 2000 offset 0) q"
  },
  {
    "comment": "rowtypes - Statement 196",
    "query": "select row_to_json(q) from (select thousand, tenthous from tenk1 where thousand = 42 and tenthous < 2000 offset 0) q"
  },
  {
    "comment": "rowtypes - Statement 197",
    "query": "select row_to_json(q) from (select thousand as x, tenthous as y from tenk1 where thousand = 42 and tenthous < 2000 offset 0) q"
  },
  {
    "comment": "rowtypes - Statement 198",
    "query": "select row_to_json(q) from (select thousand as x, tenthous as y from tenk1 where thousand = 42 and tenthous < 2000 offset 0) q(a,b)"
  },
  {
    "comment": "rowtypes - Statement 199",
    "query": "create temp table tt1 as select * from int8_tbl limit 2"
  },
  {
    "comment": "rowtypes - Statement 200",
    "query": "create temp table tt2 () inherits(tt1)"
  },
  {
    "comment": "rowtypes - Statement 201",
    "query": "insert into tt2 values(0,0)"
  },
  {
    "comment": "rowtypes - Statement 202",
    "query": "select row_to_json(r) from (select q2,q1 from tt1 offset 0) r"
  },
  {
    "comment": "rowtypes - Statement 203",
    "query": "create temp table tt3 () inherits(tt2)"
  },
  {
    "comment": "rowtypes - Statement 204",
    "query": "insert into tt3 values(33,44)"
  },
  {
    "comment": "rowtypes - Statement 205",
    "query": "select row_to_json(tt3::tt2::tt1) from tt3"
  },
  {
    "comment": "rowtypes - Statement 206",
    "query": "explain (verbose, costs off) select r, r is null as isnull, r is not null as isnotnull from (values (1,row(1,2)), (1,row(null,null)), (1,null), (null,row(1,2)), (null,row(null,null)), (null,null) ) r(a,b)"
  },
  {
    "comment": "rowtypes - Statement 207",
    "query": "select r, r is null as isnull, r is not null as isnotnull from (values (1,row(1,2)), (1,row(null,null)), (1,null), (null,row(1,2)), (null,row(null,null)), (null,null) ) r(a,b)"
  },
  {
    "comment": "rowtypes - Statement 208",
    "query": "explain (verbose, costs off) with r(a,b) as materialized (values (1,row(1,2)), (1,row(null,null)), (1,null), (null,row(1,2)), (null,row(null,null)), (null,null) ) select r, r is null as isnull, r is not null as isnotnull from r"
  },
  {
    "comment": "rowtypes - Statement 209",
    "query": "with r(a,b) as materialized (values (1,row(1,2)), (1,row(null,null)), (1,null), (null,row(1,2)), (null,row(null,null)), (null,null) ) select r, r is null as isnull, r is not null as isnotnull from r"
  },
  {
    "comment": "rowtypes - Statement 210",
    "query": "explain (verbose, costs off) with cte(c) as materialized (select row(1, 2)), cte2(c) as (select * from cte) select * from cte2 as t where (select * from (select c as c1) s where (select (c1).f1 > 0)) is not null"
  },
  {
    "comment": "rowtypes - Statement 211",
    "query": "with cte(c) as materialized (select row(1, 2)), cte2(c) as (select * from cte) select * from cte2 as t where (select * from (select c as c1) s where (select (c1).f1 > 0)) is not null"
  },
  {
    "comment": "rowtypes - Statement 212",
    "query": "create view composite_v as with cte(c) as materialized (select row(1, 2)), cte2(c) as (select * from cte) select 1 as one from cte2 as t where (select * from (select c as c1) s where (select (c1).f1 > 0)) is not null"
  },
  {
    "comment": "rowtypes - Statement 213",
    "query": "select pg_get_viewdef('composite_v', true)"
  },
  {
    "comment": "rowtypes - Statement 214",
    "query": "drop view composite_v"
  },
  {
    "comment": "rowtypes - Statement 215",
    "query": "explain (verbose, costs off) select (ss.a).x, (ss.a).n from (select information_schema._pg_expandarray(array[1,2]) AS a) ss"
  },
  {
    "comment": "rowtypes - Statement 216",
    "query": "explain (verbose, costs off) select (ss.a).x, (ss.a).n from (select information_schema._pg_expandarray(array[1,2]) AS a) ss where false"
  },
  {
    "comment": "rowtypes - Statement 217",
    "query": "explain (verbose, costs off) with cte(c) as materialized (select row(1, 2)), cte2(c) as (select * from cte) select (c).f1 from cte2 as t"
  },
  {
    "comment": "rowtypes - Statement 218",
    "query": "explain (verbose, costs off) with cte(c) as materialized (select row(1, 2)), cte2(c) as (select * from cte) select (c).f1 from cte2 as t where false"
  },
  {
    "comment": "rowtypes - Statement 219",
    "query": "CREATE TABLE compositetable(a text, b text)"
  },
  {
    "comment": "rowtypes - Statement 220",
    "query": "INSERT INTO compositetable(a, b) VALUES('fa', 'fb')"
  },
  {
    "comment": "rowtypes - Statement 221",
    "query": "SELECT d.a FROM (SELECT compositetable AS d FROM compositetable) s"
  },
  {
    "comment": "rowtypes - Statement 222",
    "query": "SELECT (d).a, (d).b FROM (SELECT compositetable AS d FROM compositetable) s"
  },
  {
    "comment": "rowtypes - Statement 223",
    "query": "SELECT (d).ctid FROM (SELECT compositetable AS d FROM compositetable) s"
  },
  {
    "comment": "rowtypes - Statement 224",
    "query": "SELECT (NULL::compositetable).nonexistent"
  },
  {
    "comment": "rowtypes - Statement 225",
    "query": "SELECT (NULL::compositetable).a"
  },
  {
    "comment": "rowtypes - Statement 226",
    "query": "SELECT (NULL::compositetable).oid"
  },
  {
    "comment": "rowtypes - Statement 227",
    "query": "DROP TABLE compositetable"
  }
]