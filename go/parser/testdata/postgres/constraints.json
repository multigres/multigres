[
  {
    "comment": "constraints - Statement 1",
    "query": "INSERT INTO DEFAULT_TBL VALUES (1, 'thomas', 57.0613)"
  },
  {
    "comment": "constraints - Statement 2",
    "query": "INSERT INTO DEFAULT_TBL VALUES (1, 'bruce')"
  },
  {
    "comment": "constraints - Statement 3",
    "query": "INSERT INTO DEFAULT_TBL (i, f) VALUES (2, 987.654)"
  },
  {
    "comment": "constraints - Statement 4",
    "query": "INSERT INTO DEFAULT_TBL (x) VALUES ('marc')"
  },
  {
    "comment": "constraints - Statement 5",
    "query": "INSERT INTO DEFAULT_TBL VALUES (3, null, 1.0)"
  },
  {
    "comment": "constraints - Statement 6",
    "query": "SELECT * FROM DEFAULT_TBL"
  },
  {
    "comment": "constraints - Statement 7",
    "query": "CREATE SEQUENCE DEFAULT_SEQ"
  },
  {
    "comment": "constraints - Statement 8",
    "query": "CREATE TABLE DEFAULTEXPR_TBL (i1 int DEFAULT 100 + (200-199) * 2, i2 int DEFAULT nextval('default_seq'))"
  },
  {
    "comment": "constraints - Statement 9",
    "query": "INSERT INTO DEFAULTEXPR_TBL VALUES (-1, -2)"
  },
  {
    "comment": "constraints - Statement 10",
    "query": "INSERT INTO DEFAULTEXPR_TBL (i1) VALUES (-3)"
  },
  {
    "comment": "constraints - Statement 11",
    "query": "INSERT INTO DEFAULTEXPR_TBL (i2) VALUES (-4)"
  },
  {
    "comment": "constraints - Statement 12",
    "query": "INSERT INTO DEFAULTEXPR_TBL (i2) VALUES (NULL)"
  },
  {
    "comment": "constraints - Statement 13",
    "query": "SELECT * FROM DEFAULTEXPR_TBL"
  },
  {
    "comment": "constraints - Statement 14",
    "query": "CREATE TABLE error_tbl (i int DEFAULT (100, ))"
  },
  {
    "comment": "constraints - Statement 15",
    "query": "CREATE TABLE error_tbl (b1 bool DEFAULT 1 IN (1, 2))"
  },
  {
    "comment": "constraints - Statement 16",
    "query": "CREATE TABLE error_tbl (b1 bool DEFAULT (1 IN (1, 2)))"
  },
  {
    "comment": "constraints - Statement 17",
    "query": "DROP TABLE error_tbl"
  },
  {
    "comment": "constraints - Statement 18",
    "query": "CREATE TABLE CHECK_TBL (x int, CONSTRAINT CHECK_CON CHECK (x > 3))"
  },
  {
    "comment": "constraints - Statement 19",
    "query": "INSERT INTO CHECK_TBL VALUES (5)"
  },
  {
    "comment": "constraints - Statement 20",
    "query": "INSERT INTO CHECK_TBL VALUES (4)"
  },
  {
    "comment": "constraints - Statement 21",
    "query": "INSERT INTO CHECK_TBL VALUES (3)"
  },
  {
    "comment": "constraints - Statement 22",
    "query": "INSERT INTO CHECK_TBL VALUES (2)"
  },
  {
    "comment": "constraints - Statement 23",
    "query": "INSERT INTO CHECK_TBL VALUES (6)"
  },
  {
    "comment": "constraints - Statement 24",
    "query": "INSERT INTO CHECK_TBL VALUES (1)"
  },
  {
    "comment": "constraints - Statement 25",
    "query": "SELECT * FROM CHECK_TBL"
  },
  {
    "comment": "constraints - Statement 26",
    "query": "CREATE SEQUENCE CHECK_SEQ"
  },
  {
    "comment": "constraints - Statement 27",
    "query": "CREATE TABLE CHECK2_TBL (x int, y text, z int, CONSTRAINT SEQUENCE_CON CHECK (x > 3 and y <> 'check failed' and z < 8))"
  },
  {
    "comment": "constraints - Statement 28",
    "query": "INSERT INTO CHECK2_TBL VALUES (4, 'check ok', -2)"
  },
  {
    "comment": "constraints - Statement 29",
    "query": "INSERT INTO CHECK2_TBL VALUES (1, 'x check failed', -2)"
  },
  {
    "comment": "constraints - Statement 30",
    "query": "INSERT INTO CHECK2_TBL VALUES (5, 'z check failed', 10)"
  },
  {
    "comment": "constraints - Statement 31",
    "query": "INSERT INTO CHECK2_TBL VALUES (0, 'check failed', -2)"
  },
  {
    "comment": "constraints - Statement 32",
    "query": "INSERT INTO CHECK2_TBL VALUES (6, 'check failed', 11)"
  },
  {
    "comment": "constraints - Statement 33",
    "query": "INSERT INTO CHECK2_TBL VALUES (7, 'check ok', 7)"
  },
  {
    "comment": "constraints - Statement 34",
    "query": "SELECT * from CHECK2_TBL"
  },
  {
    "comment": "constraints - Statement 35",
    "query": "CREATE SEQUENCE INSERT_SEQ"
  },
  {
    "comment": "constraints - Statement 36",
    "query": "CREATE TABLE INSERT_TBL (x INT DEFAULT nextval('insert_seq'), y TEXT DEFAULT '-NULL-', z INT DEFAULT -1 * currval('insert_seq'), CONSTRAINT INSERT_TBL_CON CHECK (x >= 3 AND y <> 'check failed' AND x < 8), CHECK (x + z = 0))"
  },
  {
    "comment": "constraints - Statement 37",
    "query": "INSERT INTO INSERT_TBL(x,z) VALUES (2, -2)"
  },
  {
    "comment": "constraints - Statement 38",
    "query": "SELECT * FROM INSERT_TBL"
  },
  {
    "comment": "constraints - Statement 39",
    "query": "SELECT 'one' AS one, nextval('insert_seq')"
  },
  {
    "comment": "constraints - Statement 40",
    "query": "INSERT INTO INSERT_TBL(y) VALUES ('Y')"
  },
  {
    "comment": "constraints - Statement 41",
    "query": "INSERT INTO INSERT_TBL(x,z) VALUES (1, -2)"
  },
  {
    "comment": "constraints - Statement 42",
    "query": "INSERT INTO INSERT_TBL(z,x) VALUES (-7,  7)"
  },
  {
    "comment": "constraints - Statement 43",
    "query": "INSERT INTO INSERT_TBL VALUES (5, 'check failed', -5)"
  },
  {
    "comment": "constraints - Statement 44",
    "query": "INSERT INTO INSERT_TBL VALUES (7, '!check failed', -7)"
  },
  {
    "comment": "constraints - Statement 45",
    "query": "INSERT INTO INSERT_TBL(y) VALUES ('-!NULL-')"
  },
  {
    "comment": "constraints - Statement 46",
    "query": "INSERT INTO INSERT_TBL(y,z) VALUES ('check failed', 4)"
  },
  {
    "comment": "constraints - Statement 47",
    "query": "INSERT INTO INSERT_TBL(x,y) VALUES (5, 'check failed')"
  },
  {
    "comment": "constraints - Statement 48",
    "query": "INSERT INTO INSERT_TBL(x,y) VALUES (5, '!check failed')"
  },
  {
    "comment": "constraints - Statement 49",
    "query": "SELECT 'seven' AS one, nextval('insert_seq')"
  },
  {
    "comment": "constraints - Statement 50",
    "query": "SELECT 'eight' AS one, currval('insert_seq')"
  },
  {
    "comment": "constraints - Statement 51",
    "query": "INSERT INTO INSERT_TBL VALUES (null, null, null)"
  },
  {
    "comment": "constraints - Statement 52",
    "query": "CREATE TABLE SYS_COL_CHECK_TBL (city text, state text, is_capital bool, altitude int, CHECK (NOT (is_capital AND tableoid::regclass::text = 'sys_col_check_tbl')))"
  },
  {
    "comment": "constraints - Statement 53",
    "query": "INSERT INTO SYS_COL_CHECK_TBL VALUES ('Seattle', 'Washington', false, 100)"
  },
  {
    "comment": "constraints - Statement 54",
    "query": "INSERT INTO SYS_COL_CHECK_TBL VALUES ('Olympia', 'Washington', true, 100)"
  },
  {
    "comment": "constraints - Statement 55",
    "query": "SELECT *, tableoid::regclass::text FROM SYS_COL_CHECK_TBL"
  },
  {
    "comment": "constraints - Statement 56",
    "query": "DROP TABLE SYS_COL_CHECK_TBL"
  },
  {
    "comment": "constraints - Statement 57",
    "query": "CREATE TABLE SYS_COL_CHECK_TBL (city text, state text, is_capital bool, altitude int, CHECK (NOT (is_capital AND ctid::text = 'sys_col_check_tbl')))"
  },
  {
    "comment": "constraints - Statement 58",
    "query": "CREATE TABLE INSERT_CHILD (cx INT default 42, cy INT CHECK (cy > x)) INHERITS (INSERT_TBL)"
  },
  {
    "comment": "constraints - Statement 59",
    "query": "INSERT INTO INSERT_CHILD(x,z,cy) VALUES (7,-7,11)"
  },
  {
    "comment": "constraints - Statement 60",
    "query": "INSERT INTO INSERT_CHILD(x,z,cy) VALUES (7,-7,6)"
  },
  {
    "comment": "constraints - Statement 61",
    "query": "INSERT INTO INSERT_CHILD(x,z,cy) VALUES (6,-7,7)"
  },
  {
    "comment": "constraints - Statement 62",
    "query": "INSERT INTO INSERT_CHILD(x,y,z,cy) VALUES (6,'check failed',-6,7)"
  },
  {
    "comment": "constraints - Statement 63",
    "query": "SELECT * FROM INSERT_CHILD"
  },
  {
    "comment": "constraints - Statement 64",
    "query": "DROP TABLE INSERT_CHILD"
  },
  {
    "comment": "constraints - Statement 65",
    "query": "CREATE TABLE ATACC1 (TEST INT CHECK (TEST > 0) NO INHERIT)"
  },
  {
    "comment": "constraints - Statement 66",
    "query": "CREATE TABLE ATACC2 (TEST2 INT) INHERITS (ATACC1)"
  },
  {
    "comment": "constraints - Statement 67",
    "query": "INSERT INTO ATACC2 (TEST) VALUES (-3)"
  },
  {
    "comment": "constraints - Statement 68",
    "query": "INSERT INTO ATACC1 (TEST) VALUES (-3)"
  },
  {
    "comment": "constraints - Statement 69",
    "query": "DROP TABLE ATACC1 CASCADE"
  },
  {
    "comment": "constraints - Statement 70",
    "query": "CREATE TABLE ATACC1 (TEST INT, TEST2 INT CHECK (TEST > 0), CHECK (TEST2 > 10) NO INHERIT)"
  },
  {
    "comment": "constraints - Statement 71",
    "query": "CREATE TABLE ATACC2 () INHERITS (ATACC1)"
  },
  {
    "comment": "constraints - Statement 72",
    "query": "INSERT INTO ATACC2 (TEST2) VALUES (3)"
  },
  {
    "comment": "constraints - Statement 73",
    "query": "INSERT INTO ATACC1 (TEST2) VALUES (3)"
  },
  {
    "comment": "constraints - Statement 74",
    "query": "DELETE FROM INSERT_TBL"
  },
  {
    "comment": "constraints - Statement 75",
    "query": "ALTER SEQUENCE INSERT_SEQ RESTART WITH 4"
  },
  {
    "comment": "constraints - Statement 76",
    "query": "CREATE TEMP TABLE tmp (xd INT, yd TEXT, zd INT)"
  },
  {
    "comment": "constraints - Statement 77",
    "query": "INSERT INTO tmp VALUES (null, 'Y', null)"
  },
  {
    "comment": "constraints - Statement 78",
    "query": "INSERT INTO tmp VALUES (5, '!check failed', null)"
  },
  {
    "comment": "constraints - Statement 79",
    "query": "INSERT INTO tmp VALUES (null, 'try again', null)"
  },
  {
    "comment": "constraints - Statement 80",
    "query": "INSERT INTO INSERT_TBL(y) select yd from tmp"
  },
  {
    "comment": "constraints - Statement 81",
    "query": "INSERT INTO INSERT_TBL SELECT * FROM tmp WHERE yd = 'try again'"
  },
  {
    "comment": "constraints - Statement 82",
    "query": "INSERT INTO INSERT_TBL(y,z) SELECT yd, -7 FROM tmp WHERE yd = 'try again'"
  },
  {
    "comment": "constraints - Statement 83",
    "query": "INSERT INTO INSERT_TBL(y,z) SELECT yd, -8 FROM tmp WHERE yd = 'try again'"
  },
  {
    "comment": "constraints - Statement 84",
    "query": "DROP TABLE tmp"
  },
  {
    "comment": "constraints - Statement 85",
    "query": "UPDATE INSERT_TBL SET x = NULL WHERE x = 5"
  },
  {
    "comment": "constraints - Statement 86",
    "query": "UPDATE INSERT_TBL SET x = 6 WHERE x = 6"
  },
  {
    "comment": "constraints - Statement 87",
    "query": "UPDATE INSERT_TBL SET x = -z, z = -x"
  },
  {
    "comment": "constraints - Statement 88",
    "query": "UPDATE INSERT_TBL SET x = z, z = x"
  },
  {
    "comment": "constraints - Statement 89",
    "query": "CREATE TABLE COPY_TBL (x INT, y TEXT, z INT, CONSTRAINT COPY_CON CHECK (x > 3 AND y <> 'check failed' AND x < 7 ))"
  },
  {
    "comment": "constraints - Statement 90",
    "query": "SELECT * FROM COPY_TBL"
  },
  {
    "comment": "constraints - Statement 91",
    "query": "CREATE TABLE PRIMARY_TBL (i int PRIMARY KEY, t text)"
  },
  {
    "comment": "constraints - Statement 92",
    "query": "INSERT INTO PRIMARY_TBL VALUES (1, 'one')"
  },
  {
    "comment": "constraints - Statement 93",
    "query": "INSERT INTO PRIMARY_TBL VALUES (2, 'two')"
  },
  {
    "comment": "constraints - Statement 94",
    "query": "INSERT INTO PRIMARY_TBL VALUES (1, 'three')"
  },
  {
    "comment": "constraints - Statement 95",
    "query": "INSERT INTO PRIMARY_TBL VALUES (4, 'three')"
  },
  {
    "comment": "constraints - Statement 96",
    "query": "INSERT INTO PRIMARY_TBL VALUES (5, 'one')"
  },
  {
    "comment": "constraints - Statement 97",
    "query": "INSERT INTO PRIMARY_TBL (t) VALUES ('six')"
  },
  {
    "comment": "constraints - Statement 98",
    "query": "SELECT * FROM PRIMARY_TBL"
  },
  {
    "comment": "constraints - Statement 99",
    "query": "DROP TABLE PRIMARY_TBL"
  },
  {
    "comment": "constraints - Statement 100",
    "query": "CREATE TABLE PRIMARY_TBL (i int, t text, PRIMARY KEY(i,t))"
  },
  {
    "comment": "constraints - Statement 101",
    "query": "CREATE TABLE UNIQUE_TBL (i int UNIQUE, t text)"
  },
  {
    "comment": "constraints - Statement 102",
    "query": "INSERT INTO UNIQUE_TBL VALUES (1, 'one')"
  },
  {
    "comment": "constraints - Statement 103",
    "query": "INSERT INTO UNIQUE_TBL VALUES (2, 'two')"
  },
  {
    "comment": "constraints - Statement 104",
    "query": "INSERT INTO UNIQUE_TBL VALUES (1, 'three')"
  },
  {
    "comment": "constraints - Statement 105",
    "query": "INSERT INTO UNIQUE_TBL VALUES (4, 'four')"
  },
  {
    "comment": "constraints - Statement 106",
    "query": "INSERT INTO UNIQUE_TBL VALUES (5, 'one')"
  },
  {
    "comment": "constraints - Statement 107",
    "query": "INSERT INTO UNIQUE_TBL (t) VALUES ('six')"
  },
  {
    "comment": "constraints - Statement 108",
    "query": "INSERT INTO UNIQUE_TBL (t) VALUES ('seven')"
  },
  {
    "comment": "constraints - Statement 109",
    "query": "INSERT INTO UNIQUE_TBL VALUES (5, 'five-upsert-insert') ON CONFLICT (i) DO UPDATE SET t = 'five-upsert-update'"
  },
  {
    "comment": "constraints - Statement 110",
    "query": "INSERT INTO UNIQUE_TBL VALUES (6, 'six-upsert-insert') ON CONFLICT (i) DO UPDATE SET t = 'six-upsert-update'"
  },
  {
    "comment": "constraints - Statement 111",
    "query": "INSERT INTO UNIQUE_TBL VALUES (1, 'a'), (2, 'b'), (2, 'b') ON CONFLICT (i) DO UPDATE SET t = 'fails'"
  },
  {
    "comment": "constraints - Statement 112",
    "query": "SELECT * FROM UNIQUE_TBL"
  },
  {
    "comment": "constraints - Statement 113",
    "query": "DROP TABLE UNIQUE_TBL"
  },
  {
    "comment": "constraints - Statement 114",
    "query": "CREATE TABLE UNIQUE_TBL (i int UNIQUE NULLS NOT DISTINCT, t text)"
  },
  {
    "comment": "constraints - Statement 115",
    "query": "INSERT INTO UNIQUE_TBL (t) VALUES ('eight') ON CONFLICT DO NOTHING"
  },
  {
    "comment": "constraints - Statement 116",
    "query": "CREATE TABLE UNIQUE_TBL (i int, t text, UNIQUE(i,t))"
  },
  {
    "comment": "constraints - Statement 117",
    "query": "CREATE TABLE unique_tbl (i int UNIQUE DEFERRABLE, t text)"
  },
  {
    "comment": "constraints - Statement 118",
    "query": "INSERT INTO unique_tbl VALUES (0, 'one')"
  },
  {
    "comment": "constraints - Statement 119",
    "query": "INSERT INTO unique_tbl VALUES (1, 'two')"
  },
  {
    "comment": "constraints - Statement 120",
    "query": "INSERT INTO unique_tbl VALUES (2, 'tree')"
  },
  {
    "comment": "constraints - Statement 121",
    "query": "INSERT INTO unique_tbl VALUES (3, 'four')"
  },
  {
    "comment": "constraints - Statement 122",
    "query": "INSERT INTO unique_tbl VALUES (4, 'five')"
  },
  {
    "comment": "constraints - Statement 123",
    "query": "BEGIN"
  },
  {
    "comment": "constraints - Statement 124",
    "query": "UPDATE unique_tbl SET i = 1 WHERE i = 0"
  },
  {
    "comment": "constraints - Statement 125",
    "query": "ROLLBACK"
  },
  {
    "comment": "constraints - Statement 126",
    "query": "UPDATE unique_tbl SET i = i+1"
  },
  {
    "comment": "constraints - Statement 127",
    "query": "SET CONSTRAINTS unique_tbl_i_key DEFERRED"
  },
  {
    "comment": "constraints - Statement 128",
    "query": "INSERT INTO unique_tbl VALUES (3, 'three')"
  },
  {
    "comment": "constraints - Statement 129",
    "query": "DELETE FROM unique_tbl WHERE t = 'tree'"
  },
  {
    "comment": "constraints - Statement 130",
    "query": "COMMIT"
  },
  {
    "comment": "constraints - Statement 131",
    "query": "ALTER TABLE unique_tbl DROP CONSTRAINT unique_tbl_i_key"
  },
  {
    "comment": "constraints - Statement 132",
    "query": "ALTER TABLE unique_tbl ADD CONSTRAINT unique_tbl_i_key UNIQUE (i) DEFERRABLE INITIALLY DEFERRED"
  },
  {
    "comment": "constraints - Statement 133",
    "query": "INSERT INTO unique_tbl VALUES (1, 'five')"
  },
  {
    "comment": "constraints - Statement 134",
    "query": "UPDATE unique_tbl SET i = 4 WHERE i = 2"
  },
  {
    "comment": "constraints - Statement 135",
    "query": "UPDATE unique_tbl SET i = 2 WHERE i = 4 AND t = 'four'"
  },
  {
    "comment": "constraints - Statement 136",
    "query": "DELETE FROM unique_tbl WHERE i = 1 AND t = 'one'"
  },
  {
    "comment": "constraints - Statement 137",
    "query": "DELETE FROM unique_tbl WHERE i = 5 AND t = 'five'"
  },
  {
    "comment": "constraints - Statement 138",
    "query": "SET CONSTRAINTS ALL IMMEDIATE"
  },
  {
    "comment": "constraints - Statement 139",
    "query": "SET CONSTRAINTS ALL DEFERRED"
  },
  {
    "comment": "constraints - Statement 140",
    "query": "CREATE TABLE parted_uniq_tbl (i int UNIQUE DEFERRABLE) partition by range (i)"
  },
  {
    "comment": "constraints - Statement 141",
    "query": "CREATE TABLE parted_uniq_tbl_1 PARTITION OF parted_uniq_tbl FOR VALUES FROM (0) TO (10)"
  },
  {
    "comment": "constraints - Statement 142",
    "query": "CREATE TABLE parted_uniq_tbl_2 PARTITION OF parted_uniq_tbl FOR VALUES FROM (20) TO (30)"
  },
  {
    "comment": "constraints - Statement 143",
    "query": "SELECT conname, conrelid::regclass FROM pg_constraint WHERE conname LIKE 'parted_uniq%' ORDER BY conname"
  },
  {
    "comment": "constraints - Statement 144",
    "query": "INSERT INTO parted_uniq_tbl VALUES (1)"
  },
  {
    "comment": "constraints - Statement 145",
    "query": "SAVEPOINT f"
  },
  {
    "comment": "constraints - Statement 146",
    "query": "ROLLBACK TO f"
  },
  {
    "comment": "constraints - Statement 147",
    "query": "SET CONSTRAINTS parted_uniq_tbl_i_key DEFERRED"
  },
  {
    "comment": "constraints - Statement 148",
    "query": "DROP TABLE parted_uniq_tbl"
  },
  {
    "comment": "constraints - Statement 149",
    "query": "CREATE TABLE parted_fk_naming ( id bigint NOT NULL default 1, id_abc bigint, CONSTRAINT dummy_constr FOREIGN KEY (id_abc) REFERENCES parted_fk_naming (id), PRIMARY KEY (id) ) PARTITION BY LIST (id)"
  },
  {
    "comment": "constraints - Statement 150",
    "query": "CREATE TABLE parted_fk_naming_1 ( id bigint NOT NULL default 1, id_abc bigint, PRIMARY KEY (id), CONSTRAINT dummy_constr CHECK (true) )"
  },
  {
    "comment": "constraints - Statement 151",
    "query": "ALTER TABLE parted_fk_naming ATTACH PARTITION parted_fk_naming_1 FOR VALUES IN ('1')"
  },
  {
    "comment": "constraints - Statement 152",
    "query": "SELECT conname FROM pg_constraint WHERE conrelid = 'parted_fk_naming_1'::regclass AND contype = 'f'"
  },
  {
    "comment": "constraints - Statement 153",
    "query": "DROP TABLE parted_fk_naming"
  },
  {
    "comment": "constraints - Statement 154",
    "query": "CREATE TEMP TABLE t (a integer, b integer) PARTITION BY HASH (a, b)"
  },
  {
    "comment": "constraints - Statement 155",
    "query": "CREATE TEMP TABLE tp (a integer, b integer, PRIMARY KEY (a, b), UNIQUE (b, a))"
  },
  {
    "comment": "constraints - Statement 156",
    "query": "ALTER TABLE t ATTACH PARTITION tp FOR VALUES WITH (MODULUS 1, REMAINDER 0)"
  },
  {
    "comment": "constraints - Statement 157",
    "query": "CREATE UNIQUE INDEX t_a_idx ON t (a, b)"
  },
  {
    "comment": "constraints - Statement 158",
    "query": "CREATE UNIQUE INDEX t_b_idx ON t (b, a)"
  },
  {
    "comment": "constraints - Statement 159",
    "query": "ALTER INDEX t_a_idx ATTACH PARTITION tp_pkey"
  },
  {
    "comment": "constraints - Statement 160",
    "query": "ALTER INDEX t_b_idx ATTACH PARTITION tp_b_a_key"
  },
  {
    "comment": "constraints - Statement 161",
    "query": "SELECT conname, conparentid, conislocal, coninhcount FROM pg_constraint WHERE conname IN ('tp_pkey', 'tp_b_a_key') ORDER BY conname DESC"
  },
  {
    "comment": "constraints - Statement 162",
    "query": "ALTER TABLE t DETACH PARTITION tp"
  },
  {
    "comment": "constraints - Statement 163",
    "query": "DROP TABLE t, tp"
  },
  {
    "comment": "constraints - Statement 164",
    "query": "CREATE TEMP TABLE t (a integer) PARTITION BY LIST (a)"
  },
  {
    "comment": "constraints - Statement 165",
    "query": "CREATE TEMP TABLE tp (a integer PRIMARY KEY)"
  },
  {
    "comment": "constraints - Statement 166",
    "query": "CREATE UNIQUE INDEX t_a_idx ON t (a)"
  },
  {
    "comment": "constraints - Statement 167",
    "query": "ALTER TABLE t ATTACH PARTITION tp FOR VALUES IN (1)"
  },
  {
    "comment": "constraints - Statement 168",
    "query": "CREATE UNIQUE INDEX t_a_idx ON ONLY t (a)"
  },
  {
    "comment": "constraints - Statement 169",
    "query": "CREATE TABLE regress_constr_partitioned (a integer) PARTITION BY LIST (a)"
  },
  {
    "comment": "constraints - Statement 170",
    "query": "CREATE TABLE regress_constr_partition1 PARTITION OF regress_constr_partitioned FOR VALUES IN (1)"
  },
  {
    "comment": "constraints - Statement 171",
    "query": "ALTER TABLE regress_constr_partition1 ADD PRIMARY KEY (a)"
  },
  {
    "comment": "constraints - Statement 172",
    "query": "CREATE UNIQUE INDEX ON regress_constr_partitioned (a)"
  },
  {
    "comment": "constraints - Statement 173",
    "query": "ALTER TABLE regress_constr_partitioned DETACH PARTITION regress_constr_partition1"
  },
  {
    "comment": "constraints - Statement 174",
    "query": "UPDATE unique_tbl SET t = 'THREE' WHERE i = 3 AND t = 'Three'"
  },
  {
    "comment": "constraints - Statement 175",
    "query": "INSERT INTO unique_tbl VALUES(3, 'tree')"
  },
  {
    "comment": "constraints - Statement 176",
    "query": "UPDATE unique_tbl SET t = 'threex' WHERE t = 'tree'"
  },
  {
    "comment": "constraints - Statement 177",
    "query": "DELETE FROM unique_tbl WHERE t = 'three'"
  },
  {
    "comment": "constraints - Statement 178",
    "query": "CREATE TABLE circles ( c1 CIRCLE, c2 TEXT, EXCLUDE USING gist (c1 WITH &&, (c2::circle) WITH &&) WHERE (circle_center(c1) <> '(0,0)') )"
  },
  {
    "comment": "constraints - Statement 179",
    "query": "INSERT INTO circles VALUES('<(0,0), 5>', '<(0,0), 5>')"
  },
  {
    "comment": "constraints - Statement 180",
    "query": "INSERT INTO circles VALUES('<(0,0), 5>', '<(0,0), 4>')"
  },
  {
    "comment": "constraints - Statement 181",
    "query": "INSERT INTO circles VALUES('<(10,10), 10>', '<(0,0), 5>')"
  },
  {
    "comment": "constraints - Statement 182",
    "query": "INSERT INTO circles VALUES('<(20,20), 10>', '<(0,0), 4>')"
  },
  {
    "comment": "constraints - Statement 183",
    "query": "INSERT INTO circles VALUES('<(20,20), 10>', '<(0,0), 4>') ON CONFLICT ON CONSTRAINT circles_c1_c2_excl DO NOTHING"
  },
  {
    "comment": "constraints - Statement 184",
    "query": "INSERT INTO circles VALUES('<(20,20), 10>', '<(0,0), 4>') ON CONFLICT ON CONSTRAINT circles_c1_c2_excl DO UPDATE SET c2 = EXCLUDED.c2"
  },
  {
    "comment": "constraints - Statement 185",
    "query": "INSERT INTO circles VALUES('<(20,20), 1>', '<(0,0), 5>')"
  },
  {
    "comment": "constraints - Statement 186",
    "query": "INSERT INTO circles VALUES('<(20,20), 10>', '<(10,10), 5>')"
  },
  {
    "comment": "constraints - Statement 187",
    "query": "ALTER TABLE circles ADD EXCLUDE USING gist (c1 WITH &&, (c2::circle) WITH &&)"
  },
  {
    "comment": "constraints - Statement 188",
    "query": "REINDEX INDEX circles_c1_c2_excl"
  },
  {
    "comment": "constraints - Statement 189",
    "query": "DROP TABLE circles"
  },
  {
    "comment": "constraints - Statement 190",
    "query": "CREATE TABLE deferred_excl ( f1 int, f2 int, CONSTRAINT deferred_excl_con EXCLUDE (f1 WITH =) INITIALLY DEFERRED )"
  },
  {
    "comment": "constraints - Statement 191",
    "query": "INSERT INTO deferred_excl VALUES(1)"
  },
  {
    "comment": "constraints - Statement 192",
    "query": "INSERT INTO deferred_excl VALUES(2)"
  },
  {
    "comment": "constraints - Statement 193",
    "query": "INSERT INTO deferred_excl VALUES(1) ON CONFLICT ON CONSTRAINT deferred_excl_con DO NOTHING"
  },
  {
    "comment": "constraints - Statement 194",
    "query": "INSERT INTO deferred_excl VALUES(3)"
  },
  {
    "comment": "constraints - Statement 195",
    "query": "INSERT INTO deferred_excl VALUES(2, 1)"
  },
  {
    "comment": "constraints - Statement 196",
    "query": "DELETE FROM deferred_excl WHERE f1 = 2 AND f2 IS NULL"
  },
  {
    "comment": "constraints - Statement 197",
    "query": "UPDATE deferred_excl SET f2 = 2 WHERE f1 = 2"
  },
  {
    "comment": "constraints - Statement 198",
    "query": "SELECT * FROM deferred_excl"
  },
  {
    "comment": "constraints - Statement 199",
    "query": "ALTER TABLE deferred_excl DROP CONSTRAINT deferred_excl_con"
  },
  {
    "comment": "constraints - Statement 200",
    "query": "UPDATE deferred_excl SET f1 = 3"
  },
  {
    "comment": "constraints - Statement 201",
    "query": "ALTER TABLE deferred_excl ADD EXCLUDE (f1 WITH =)"
  },
  {
    "comment": "constraints - Statement 202",
    "query": "DROP TABLE deferred_excl"
  },
  {
    "comment": "constraints - Statement 203",
    "query": "CREATE ROLE regress_constraint_comments"
  },
  {
    "comment": "constraints - Statement 204",
    "query": "SET SESSION AUTHORIZATION regress_constraint_comments"
  },
  {
    "comment": "constraints - Statement 205",
    "query": "CREATE TABLE constraint_comments_tbl (a int CONSTRAINT the_constraint CHECK (a > 0))"
  },
  {
    "comment": "constraints - Statement 206",
    "query": "CREATE DOMAIN constraint_comments_dom AS int CONSTRAINT the_constraint CHECK (value > 0)"
  },
  {
    "comment": "constraints - Statement 207",
    "query": "COMMENT ON CONSTRAINT the_constraint ON constraint_comments_tbl IS 'yes, the comment'"
  },
  {
    "comment": "constraints - Statement 208",
    "query": "COMMENT ON CONSTRAINT the_constraint ON DOMAIN constraint_comments_dom IS 'yes, another comment'"
  },
  {
    "comment": "constraints - Statement 209",
    "query": "COMMENT ON CONSTRAINT no_constraint ON constraint_comments_tbl IS 'yes, the comment'"
  },
  {
    "comment": "constraints - Statement 210",
    "query": "COMMENT ON CONSTRAINT no_constraint ON DOMAIN constraint_comments_dom IS 'yes, another comment'"
  },
  {
    "comment": "constraints - Statement 211",
    "query": "COMMENT ON CONSTRAINT the_constraint ON no_comments_tbl IS 'bad comment'"
  },
  {
    "comment": "constraints - Statement 212",
    "query": "COMMENT ON CONSTRAINT the_constraint ON DOMAIN no_comments_dom IS 'another bad comment'"
  },
  {
    "comment": "constraints - Statement 213",
    "query": "COMMENT ON CONSTRAINT the_constraint ON constraint_comments_tbl IS NULL"
  },
  {
    "comment": "constraints - Statement 214",
    "query": "COMMENT ON CONSTRAINT the_constraint ON DOMAIN constraint_comments_dom IS NULL"
  },
  {
    "comment": "constraints - Statement 215",
    "query": "RESET SESSION AUTHORIZATION"
  },
  {
    "comment": "constraints - Statement 216",
    "query": "CREATE ROLE regress_constraint_comments_noaccess"
  },
  {
    "comment": "constraints - Statement 217",
    "query": "SET SESSION AUTHORIZATION regress_constraint_comments_noaccess"
  },
  {
    "comment": "constraints - Statement 218",
    "query": "COMMENT ON CONSTRAINT the_constraint ON constraint_comments_tbl IS 'no, the comment'"
  },
  {
    "comment": "constraints - Statement 219",
    "query": "COMMENT ON CONSTRAINT the_constraint ON DOMAIN constraint_comments_dom IS 'no, another comment'"
  },
  {
    "comment": "constraints - Statement 220",
    "query": "DROP TABLE constraint_comments_tbl"
  },
  {
    "comment": "constraints - Statement 221",
    "query": "DROP DOMAIN constraint_comments_dom"
  },
  {
    "comment": "constraints - Statement 222",
    "query": "DROP ROLE regress_constraint_comments"
  },
  {
    "comment": "constraints - Statement 223",
    "query": "DROP ROLE regress_constraint_comments_noaccess"
  }
]