[
  {
    "comment": "create_table - Statement 1",
    "query": "CREATE TABLE unknowntab ( u unknown )"
  },
  {
    "comment": "create_table - Statement 2",
    "query": "CREATE TYPE unknown_comptype AS ( u unknown )"
  },
  {
    "comment": "create_table - Statement 3",
    "query": "CREATE TABLE tas_case WITH (\"Fillfactor\" = 10) AS SELECT 1 a"
  },
  {
    "comment": "create_table - Statement 4",
    "query": "CREATE UNLOGGED TABLE unlogged1 (a int primary key)"
  },
  {
    "comment": "create_table - Statement 5",
    "query": "CREATE TEMPORARY TABLE unlogged2 (a int primary key)"
  },
  {
    "comment": "create_table - Statement 6",
    "query": "SELECT relname, relkind, relpersistence FROM pg_class WHERE relname ~ '^unlogged\\d' ORDER BY relname"
  },
  {
    "comment": "create_table - Statement 7",
    "query": "REINDEX INDEX unlogged1_pkey"
  },
  {
    "comment": "create_table - Statement 8",
    "query": "REINDEX INDEX unlogged2_pkey"
  },
  {
    "comment": "create_table - Statement 9",
    "query": "DROP TABLE unlogged2"
  },
  {
    "comment": "create_table - Statement 10",
    "query": "INSERT INTO unlogged1 VALUES (42)"
  },
  {
    "comment": "create_table - Statement 11",
    "query": "CREATE UNLOGGED TABLE public.unlogged2 (a int primary key)"
  },
  {
    "comment": "create_table - Statement 12",
    "query": "CREATE UNLOGGED TABLE pg_temp.unlogged3 (a int primary key)"
  },
  {
    "comment": "create_table - Statement 13",
    "query": "CREATE TABLE pg_temp.implicitly_temp (a int primary key)"
  },
  {
    "comment": "create_table - Statement 14",
    "query": "CREATE TEMP TABLE explicitly_temp (a int primary key)"
  },
  {
    "comment": "create_table - Statement 15",
    "query": "CREATE TEMP TABLE pg_temp.doubly_temp (a int primary key)"
  },
  {
    "comment": "create_table - Statement 16",
    "query": "CREATE TEMP TABLE public.temp_to_perm (a int primary key)"
  },
  {
    "comment": "create_table - Statement 17",
    "query": "DROP TABLE unlogged1, public.unlogged2"
  },
  {
    "comment": "create_table - Statement 18",
    "query": "CREATE TABLE as_select1 AS SELECT * FROM pg_class WHERE relkind = 'r'"
  },
  {
    "comment": "create_table - Statement 19",
    "query": "CREATE TABLE IF NOT EXISTS as_select1 AS SELECT * FROM pg_class WHERE relkind = 'r'"
  },
  {
    "comment": "create_table - Statement 20",
    "query": "DROP TABLE as_select1"
  },
  {
    "comment": "create_table - Statement 21",
    "query": "PREPARE select1 AS SELECT 1 as a"
  },
  {
    "comment": "create_table - Statement 22",
    "query": "CREATE TABLE as_select1 AS EXECUTE select1"
  },
  {
    "comment": "create_table - Statement 23",
    "query": "SELECT * FROM as_select1"
  },
  {
    "comment": "create_table - Statement 24",
    "query": "CREATE TABLE IF NOT EXISTS as_select1 AS EXECUTE select1"
  },
  {
    "comment": "create_table - Statement 25",
    "query": "DEALLOCATE select1"
  },
  {
    "comment": "create_table - Statement 26",
    "query": "SELECT firstc, lastc FROM extra_wide_table"
  },
  {
    "comment": "create_table - Statement 27",
    "query": "CREATE TABLE withoid() WITH OIDS"
  },
  {
    "comment": "create_table - Statement 28",
    "query": "CREATE TABLE withoid() WITH (oids)"
  },
  {
    "comment": "create_table - Statement 29",
    "query": "CREATE TABLE withoid() WITH (oids = true)"
  },
  {
    "comment": "create_table - Statement 30",
    "query": "CREATE TEMP TABLE withoutoid() WITHOUT OIDS; DROP TABLE withoutoid"
  },
  {
    "comment": "create_table - Statement 31",
    "query": "CREATE TEMP TABLE withoutoid() WITH (oids = false); DROP TABLE withoutoid"
  },
  {
    "comment": "create_table - Statement 32",
    "query": "CREATE TABLE default_expr_column (id int DEFAULT (id))"
  },
  {
    "comment": "create_table - Statement 33",
    "query": "CREATE TABLE default_expr_column (id int DEFAULT (bar.id))"
  },
  {
    "comment": "create_table - Statement 34",
    "query": "CREATE TABLE default_expr_agg_column (id int DEFAULT (avg(id)))"
  },
  {
    "comment": "create_table - Statement 35",
    "query": "CREATE TABLE default_expr_non_column (a int DEFAULT (avg(non_existent)))"
  },
  {
    "comment": "create_table - Statement 36",
    "query": "CREATE TABLE default_expr_agg (a int DEFAULT (avg(1)))"
  },
  {
    "comment": "create_table - Statement 37",
    "query": "CREATE TABLE default_expr_agg (a int DEFAULT (select 1))"
  },
  {
    "comment": "create_table - Statement 38",
    "query": "CREATE TABLE default_expr_agg (a int DEFAULT (generate_series(1,3)))"
  },
  {
    "comment": "create_table - Statement 39",
    "query": "BEGIN"
  },
  {
    "comment": "create_table - Statement 40",
    "query": "CREATE TABLE remember_create_subid (c int)"
  },
  {
    "comment": "create_table - Statement 41",
    "query": "SAVEPOINT q; DROP TABLE remember_create_subid; ROLLBACK TO q"
  },
  {
    "comment": "create_table - Statement 42",
    "query": "COMMIT"
  },
  {
    "comment": "create_table - Statement 43",
    "query": "DROP TABLE remember_create_subid"
  },
  {
    "comment": "create_table - Statement 44",
    "query": "CREATE TABLE remember_node_subid (c int)"
  },
  {
    "comment": "create_table - Statement 45",
    "query": "ALTER TABLE remember_node_subid ALTER c TYPE bigint"
  },
  {
    "comment": "create_table - Statement 46",
    "query": "SAVEPOINT q; DROP TABLE remember_node_subid; ROLLBACK TO q"
  },
  {
    "comment": "create_table - Statement 47",
    "query": "DROP TABLE remember_node_subid"
  },
  {
    "comment": "create_table - Statement 48",
    "query": "CREATE TABLE partitioned ( a int ) INHERITS (some_table) PARTITION BY LIST (a)"
  },
  {
    "comment": "create_table - Statement 49",
    "query": "CREATE TABLE partitioned ( a1 int, a2 int ) PARTITION BY LIST (a1, a2)"
  },
  {
    "comment": "create_table - Statement 50",
    "query": "CREATE FUNCTION retset (a int) RETURNS SETOF int AS $$ SELECT 1; $$ LANGUAGE SQL IMMUTABLE"
  },
  {
    "comment": "create_table - Statement 51",
    "query": "CREATE TABLE partitioned ( a int ) PARTITION BY RANGE (retset(a))"
  },
  {
    "comment": "create_table - Statement 52",
    "query": "DROP FUNCTION retset(int)"
  },
  {
    "comment": "create_table - Statement 53",
    "query": "CREATE TABLE partitioned ( a int ) PARTITION BY RANGE ((avg(a)))"
  },
  {
    "comment": "create_table - Statement 54",
    "query": "CREATE TABLE partitioned ( a int, b int ) PARTITION BY RANGE ((avg(a) OVER (PARTITION BY b)))"
  },
  {
    "comment": "create_table - Statement 55",
    "query": "CREATE TABLE partitioned ( a int ) PARTITION BY LIST ((a LIKE (SELECT 1)))"
  },
  {
    "comment": "create_table - Statement 56",
    "query": "CREATE TABLE partitioned ( a int ) PARTITION BY RANGE ((42))"
  },
  {
    "comment": "create_table - Statement 57",
    "query": "CREATE FUNCTION const_func () RETURNS int AS $$ SELECT 1; $$ LANGUAGE SQL IMMUTABLE"
  },
  {
    "comment": "create_table - Statement 58",
    "query": "CREATE TABLE partitioned ( a int ) PARTITION BY RANGE (const_func())"
  },
  {
    "comment": "create_table - Statement 59",
    "query": "DROP FUNCTION const_func()"
  },
  {
    "comment": "create_table - Statement 60",
    "query": "CREATE TABLE partitioned ( a int ) PARTITION BY MAGIC (a)"
  },
  {
    "comment": "create_table - Statement 61",
    "query": "CREATE TABLE partitioned ( a int ) PARTITION BY RANGE (b)"
  },
  {
    "comment": "create_table - Statement 62",
    "query": "CREATE TABLE partitioned ( a int ) PARTITION BY RANGE (xmin)"
  },
  {
    "comment": "create_table - Statement 63",
    "query": "CREATE TABLE partitioned ( a int, b int ) PARTITION BY RANGE (((a, b)))"
  },
  {
    "comment": "create_table - Statement 64",
    "query": "CREATE TABLE partitioned ( a int, b int ) PARTITION BY RANGE (a, ('unknown'))"
  },
  {
    "comment": "create_table - Statement 65",
    "query": "CREATE FUNCTION immut_func (a int) RETURNS int AS $$ SELECT a + random()::int; $$ LANGUAGE SQL"
  },
  {
    "comment": "create_table - Statement 66",
    "query": "CREATE TABLE partitioned ( a int ) PARTITION BY RANGE (immut_func(a))"
  },
  {
    "comment": "create_table - Statement 67",
    "query": "DROP FUNCTION immut_func(int)"
  },
  {
    "comment": "create_table - Statement 68",
    "query": "CREATE TABLE partitioned ( a point ) PARTITION BY LIST (a)"
  },
  {
    "comment": "create_table - Statement 69",
    "query": "CREATE TABLE partitioned ( a point ) PARTITION BY LIST (a point_ops)"
  },
  {
    "comment": "create_table - Statement 70",
    "query": "CREATE TABLE partitioned ( a point ) PARTITION BY RANGE (a)"
  },
  {
    "comment": "create_table - Statement 71",
    "query": "CREATE TABLE partitioned ( a point ) PARTITION BY RANGE (a point_ops)"
  },
  {
    "comment": "create_table - Statement 72",
    "query": "CREATE TABLE partitioned ( a int, CONSTRAINT check_a CHECK (a > 0) NO INHERIT ) PARTITION BY RANGE (a)"
  },
  {
    "comment": "create_table - Statement 73",
    "query": "CREATE FUNCTION plusone(a int) RETURNS INT AS $$ SELECT a+1; $$ LANGUAGE SQL"
  },
  {
    "comment": "create_table - Statement 74",
    "query": "CREATE TABLE partitioned ( a int, b int, c text, d text ) PARTITION BY RANGE (a oid_ops, plusone(b), c collate \"default\", d collate \"C\")"
  },
  {
    "comment": "create_table - Statement 75",
    "query": "SELECT relkind FROM pg_class WHERE relname = 'partitioned'"
  },
  {
    "comment": "create_table - Statement 76",
    "query": "DROP FUNCTION plusone(int)"
  },
  {
    "comment": "create_table - Statement 77",
    "query": "CREATE TABLE partitioned2 ( a int, b text ) PARTITION BY RANGE ((a+1), substr(b, 1, 5))"
  },
  {
    "comment": "create_table - Statement 78",
    "query": "CREATE TABLE fail () INHERITS (partitioned2)"
  },
  {
    "comment": "create_table - Statement 79",
    "query": "CREATE TABLE part2_1 PARTITION OF partitioned2 FOR VALUES FROM (-1, 'aaaaa') TO (100, 'ccccc')"
  },
  {
    "comment": "create_table - Statement 80",
    "query": "create table partitioned (a int, b int) partition by list ((row(a, b)::partitioned))"
  },
  {
    "comment": "create_table - Statement 81",
    "query": "create table partitioned1 partition of partitioned for values in ('(1,2)'::partitioned)"
  },
  {
    "comment": "create_table - Statement 82",
    "query": "create table partitioned2 partition of partitioned for values in ('(2,4)'::partitioned)"
  },
  {
    "comment": "create_table - Statement 83",
    "query": "explain (costs off) select * from partitioned where row(a,b)::partitioned = '(1,2)'::partitioned"
  },
  {
    "comment": "create_table - Statement 84",
    "query": "drop table partitioned"
  },
  {
    "comment": "create_table - Statement 85",
    "query": "create table partitioned (a int, b int) partition by list ((partitioned))"
  },
  {
    "comment": "create_table - Statement 86",
    "query": "create table partitioned1 partition of partitioned for values in ('(1,2)')"
  },
  {
    "comment": "create_table - Statement 87",
    "query": "create table partitioned2 partition of partitioned for values in ('(2,4)')"
  },
  {
    "comment": "create_table - Statement 88",
    "query": "explain (costs off) select * from partitioned where partitioned = '(1,2)'::partitioned"
  },
  {
    "comment": "create_table - Statement 89",
    "query": "create domain intdom1 as int"
  },
  {
    "comment": "create_table - Statement 90",
    "query": "create table partitioned ( a intdom1, b text ) partition by range (a)"
  },
  {
    "comment": "create_table - Statement 91",
    "query": "alter table partitioned drop column a"
  },
  {
    "comment": "create_table - Statement 92",
    "query": "drop domain intdom1"
  },
  {
    "comment": "create_table - Statement 93",
    "query": "drop domain intdom1 cascade"
  },
  {
    "comment": "create_table - Statement 94",
    "query": "table partitioned"
  },
  {
    "comment": "create_table - Statement 95",
    "query": "create table partitioned ( a intdom1, b text ) partition by range (plusone(a))"
  },
  {
    "comment": "create_table - Statement 96",
    "query": "CREATE TABLE list_parted ( a int ) PARTITION BY LIST (a)"
  },
  {
    "comment": "create_table - Statement 97",
    "query": "CREATE TABLE part_p1 PARTITION OF list_parted FOR VALUES IN ('1')"
  },
  {
    "comment": "create_table - Statement 98",
    "query": "CREATE TABLE part_p2 PARTITION OF list_parted FOR VALUES IN (2)"
  },
  {
    "comment": "create_table - Statement 99",
    "query": "CREATE TABLE part_p3 PARTITION OF list_parted FOR VALUES IN ((2+1))"
  },
  {
    "comment": "create_table - Statement 100",
    "query": "CREATE TABLE part_null PARTITION OF list_parted FOR VALUES IN (null)"
  },
  {
    "comment": "create_table - Statement 101",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF list_parted FOR VALUES IN (somename.somename)"
  },
  {
    "comment": "create_table - Statement 102",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF list_parted FOR VALUES IN (a)"
  },
  {
    "comment": "create_table - Statement 103",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF list_parted FOR VALUES IN (sum(a))"
  },
  {
    "comment": "create_table - Statement 104",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF list_parted FOR VALUES IN (sum(somename))"
  },
  {
    "comment": "create_table - Statement 105",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF list_parted FOR VALUES IN (sum(1))"
  },
  {
    "comment": "create_table - Statement 106",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF list_parted FOR VALUES IN ((select 1))"
  },
  {
    "comment": "create_table - Statement 107",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF list_parted FOR VALUES IN (generate_series(4, 6))"
  },
  {
    "comment": "create_table - Statement 108",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF list_parted FOR VALUES IN ((1+1) collate \"POSIX\")"
  },
  {
    "comment": "create_table - Statement 109",
    "query": "CREATE TABLE fail_part PARTITION OF list_parted FOR VALUES IN ()"
  },
  {
    "comment": "create_table - Statement 110",
    "query": "CREATE TABLE fail_part PARTITION OF list_parted FOR VALUES FROM (1) TO (2)"
  },
  {
    "comment": "create_table - Statement 111",
    "query": "CREATE TABLE fail_part PARTITION OF list_parted FOR VALUES WITH (MODULUS 10, REMAINDER 1)"
  },
  {
    "comment": "create_table - Statement 112",
    "query": "CREATE TABLE part_default PARTITION OF list_parted DEFAULT"
  },
  {
    "comment": "create_table - Statement 113",
    "query": "CREATE TABLE fail_default_part PARTITION OF list_parted DEFAULT"
  },
  {
    "comment": "create_table - Statement 114",
    "query": "CREATE TABLE bools ( a bool ) PARTITION BY LIST (a)"
  },
  {
    "comment": "create_table - Statement 115",
    "query": "CREATE TABLE bools_true PARTITION OF bools FOR VALUES IN (1)"
  },
  {
    "comment": "create_table - Statement 116",
    "query": "DROP TABLE bools"
  },
  {
    "comment": "create_table - Statement 117",
    "query": "CREATE TABLE moneyp ( a money ) PARTITION BY LIST (a)"
  },
  {
    "comment": "create_table - Statement 118",
    "query": "CREATE TABLE moneyp_10 PARTITION OF moneyp FOR VALUES IN (10)"
  },
  {
    "comment": "create_table - Statement 119",
    "query": "CREATE TABLE moneyp_11 PARTITION OF moneyp FOR VALUES IN ('11')"
  },
  {
    "comment": "create_table - Statement 120",
    "query": "CREATE TABLE moneyp_12 PARTITION OF moneyp FOR VALUES IN (to_char(12, '99')::int)"
  },
  {
    "comment": "create_table - Statement 121",
    "query": "DROP TABLE moneyp"
  },
  {
    "comment": "create_table - Statement 122",
    "query": "CREATE TABLE bigintp ( a bigint ) PARTITION BY LIST (a)"
  },
  {
    "comment": "create_table - Statement 123",
    "query": "CREATE TABLE bigintp_10 PARTITION OF bigintp FOR VALUES IN (10)"
  },
  {
    "comment": "create_table - Statement 124",
    "query": "CREATE TABLE bigintp_10_2 PARTITION OF bigintp FOR VALUES IN ('10')"
  },
  {
    "comment": "create_table - Statement 125",
    "query": "DROP TABLE bigintp"
  },
  {
    "comment": "create_table - Statement 126",
    "query": "CREATE TABLE range_parted ( a date ) PARTITION BY RANGE (a)"
  },
  {
    "comment": "create_table - Statement 127",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF range_parted FOR VALUES FROM (somename) TO ('2019-01-01')"
  },
  {
    "comment": "create_table - Statement 128",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF range_parted FOR VALUES FROM (somename.somename) TO ('2019-01-01')"
  },
  {
    "comment": "create_table - Statement 129",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF range_parted FOR VALUES FROM (a) TO ('2019-01-01')"
  },
  {
    "comment": "create_table - Statement 130",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF range_parted FOR VALUES FROM (max(a)) TO ('2019-01-01')"
  },
  {
    "comment": "create_table - Statement 131",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF range_parted FOR VALUES FROM (max(somename)) TO ('2019-01-01')"
  },
  {
    "comment": "create_table - Statement 132",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF range_parted FOR VALUES FROM (max('2019-02-01'::date)) TO ('2019-01-01')"
  },
  {
    "comment": "create_table - Statement 133",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF range_parted FOR VALUES FROM ((select 1)) TO ('2019-01-01')"
  },
  {
    "comment": "create_table - Statement 134",
    "query": "CREATE TABLE part_bogus_expr_fail PARTITION OF range_parted FOR VALUES FROM (generate_series(1, 3)) TO ('2019-01-01')"
  },
  {
    "comment": "create_table - Statement 135",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted FOR VALUES IN ('a')"
  },
  {
    "comment": "create_table - Statement 136",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted FOR VALUES WITH (MODULUS 10, REMAINDER 1)"
  },
  {
    "comment": "create_table - Statement 137",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted FOR VALUES FROM ('a', 1) TO ('z')"
  },
  {
    "comment": "create_table - Statement 138",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted FOR VALUES FROM ('a') TO ('z', 1)"
  },
  {
    "comment": "create_table - Statement 139",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted FOR VALUES FROM (null) TO (maxvalue)"
  },
  {
    "comment": "create_table - Statement 140",
    "query": "CREATE TABLE hash_parted ( a int ) PARTITION BY HASH (a)"
  },
  {
    "comment": "create_table - Statement 141",
    "query": "CREATE TABLE hpart_1 PARTITION OF hash_parted FOR VALUES WITH (MODULUS 10, REMAINDER 0)"
  },
  {
    "comment": "create_table - Statement 142",
    "query": "CREATE TABLE hpart_2 PARTITION OF hash_parted FOR VALUES WITH (MODULUS 50, REMAINDER 1)"
  },
  {
    "comment": "create_table - Statement 143",
    "query": "CREATE TABLE hpart_3 PARTITION OF hash_parted FOR VALUES WITH (MODULUS 200, REMAINDER 2)"
  },
  {
    "comment": "create_table - Statement 144",
    "query": "CREATE TABLE hpart_4 PARTITION OF hash_parted FOR VALUES WITH (MODULUS 10, REMAINDER 3)"
  },
  {
    "comment": "create_table - Statement 145",
    "query": "CREATE TABLE fail_part PARTITION OF hash_parted FOR VALUES WITH (MODULUS 25, REMAINDER 3)"
  },
  {
    "comment": "create_table - Statement 146",
    "query": "CREATE TABLE fail_part PARTITION OF hash_parted FOR VALUES WITH (MODULUS 150, REMAINDER 3)"
  },
  {
    "comment": "create_table - Statement 147",
    "query": "CREATE TABLE fail_part PARTITION OF hash_parted FOR VALUES WITH (MODULUS 100, REMAINDER 3)"
  },
  {
    "comment": "create_table - Statement 148",
    "query": "CREATE TABLE fail_part PARTITION OF hash_parted FOR VALUES FROM ('a', 1) TO ('z')"
  },
  {
    "comment": "create_table - Statement 149",
    "query": "CREATE TABLE fail_part PARTITION OF hash_parted FOR VALUES IN (1000)"
  },
  {
    "comment": "create_table - Statement 150",
    "query": "CREATE TABLE fail_default_part PARTITION OF hash_parted DEFAULT"
  },
  {
    "comment": "create_table - Statement 151",
    "query": "CREATE TABLE unparted ( a int )"
  },
  {
    "comment": "create_table - Statement 152",
    "query": "CREATE TABLE fail_part PARTITION OF unparted FOR VALUES IN ('a')"
  },
  {
    "comment": "create_table - Statement 153",
    "query": "CREATE TABLE fail_part PARTITION OF unparted FOR VALUES WITH (MODULUS 2, REMAINDER 1)"
  },
  {
    "comment": "create_table - Statement 154",
    "query": "DROP TABLE unparted"
  },
  {
    "comment": "create_table - Statement 155",
    "query": "CREATE TEMP TABLE temp_parted ( a int ) PARTITION BY LIST (a)"
  },
  {
    "comment": "create_table - Statement 156",
    "query": "CREATE TABLE fail_part PARTITION OF temp_parted FOR VALUES IN ('a')"
  },
  {
    "comment": "create_table - Statement 157",
    "query": "DROP TABLE temp_parted"
  },
  {
    "comment": "create_table - Statement 158",
    "query": "CREATE TABLE list_parted2 ( a varchar ) PARTITION BY LIST (a)"
  },
  {
    "comment": "create_table - Statement 159",
    "query": "CREATE TABLE part_null_z PARTITION OF list_parted2 FOR VALUES IN (null, 'z')"
  },
  {
    "comment": "create_table - Statement 160",
    "query": "CREATE TABLE part_ab PARTITION OF list_parted2 FOR VALUES IN ('a', 'b')"
  },
  {
    "comment": "create_table - Statement 161",
    "query": "CREATE TABLE list_parted2_def PARTITION OF list_parted2 DEFAULT"
  },
  {
    "comment": "create_table - Statement 162",
    "query": "CREATE TABLE fail_part PARTITION OF list_parted2 FOR VALUES IN (null)"
  },
  {
    "comment": "create_table - Statement 163",
    "query": "CREATE TABLE fail_part PARTITION OF list_parted2 FOR VALUES IN ('b', 'c')"
  },
  {
    "comment": "create_table - Statement 164",
    "query": "INSERT INTO list_parted2 VALUES('X')"
  },
  {
    "comment": "create_table - Statement 165",
    "query": "CREATE TABLE fail_part PARTITION OF list_parted2 FOR VALUES IN ('W', 'X', 'Y')"
  },
  {
    "comment": "create_table - Statement 166",
    "query": "CREATE TABLE range_parted2 ( a int ) PARTITION BY RANGE (a)"
  },
  {
    "comment": "create_table - Statement 167",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (1) TO (0)"
  },
  {
    "comment": "create_table - Statement 168",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (1) TO (1)"
  },
  {
    "comment": "create_table - Statement 169",
    "query": "CREATE TABLE part0 PARTITION OF range_parted2 FOR VALUES FROM (minvalue) TO (1)"
  },
  {
    "comment": "create_table - Statement 170",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (minvalue) TO (2)"
  },
  {
    "comment": "create_table - Statement 171",
    "query": "CREATE TABLE part1 PARTITION OF range_parted2 FOR VALUES FROM (1) TO (10)"
  },
  {
    "comment": "create_table - Statement 172",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (-1) TO (1)"
  },
  {
    "comment": "create_table - Statement 173",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (9) TO (maxvalue)"
  },
  {
    "comment": "create_table - Statement 174",
    "query": "CREATE TABLE part2 PARTITION OF range_parted2 FOR VALUES FROM (20) TO (30)"
  },
  {
    "comment": "create_table - Statement 175",
    "query": "CREATE TABLE part3 PARTITION OF range_parted2 FOR VALUES FROM (30) TO (40)"
  },
  {
    "comment": "create_table - Statement 176",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (10) TO (30)"
  },
  {
    "comment": "create_table - Statement 177",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (10) TO (50)"
  },
  {
    "comment": "create_table - Statement 178",
    "query": "CREATE TABLE range2_default PARTITION OF range_parted2 DEFAULT"
  },
  {
    "comment": "create_table - Statement 179",
    "query": "CREATE TABLE fail_default_part PARTITION OF range_parted2 DEFAULT"
  },
  {
    "comment": "create_table - Statement 180",
    "query": "INSERT INTO range_parted2 VALUES (85)"
  },
  {
    "comment": "create_table - Statement 181",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (80) TO (90)"
  },
  {
    "comment": "create_table - Statement 182",
    "query": "CREATE TABLE part4 PARTITION OF range_parted2 FOR VALUES FROM (90) TO (100)"
  },
  {
    "comment": "create_table - Statement 183",
    "query": "CREATE TABLE range_parted3 ( a int, b int ) PARTITION BY RANGE (a, (b+1))"
  },
  {
    "comment": "create_table - Statement 184",
    "query": "CREATE TABLE part00 PARTITION OF range_parted3 FOR VALUES FROM (0, minvalue) TO (0, maxvalue)"
  },
  {
    "comment": "create_table - Statement 185",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted3 FOR VALUES FROM (0, minvalue) TO (0, 1)"
  },
  {
    "comment": "create_table - Statement 186",
    "query": "CREATE TABLE part10 PARTITION OF range_parted3 FOR VALUES FROM (1, minvalue) TO (1, 1)"
  },
  {
    "comment": "create_table - Statement 187",
    "query": "CREATE TABLE part11 PARTITION OF range_parted3 FOR VALUES FROM (1, 1) TO (1, 10)"
  },
  {
    "comment": "create_table - Statement 188",
    "query": "CREATE TABLE part12 PARTITION OF range_parted3 FOR VALUES FROM (1, 10) TO (1, maxvalue)"
  },
  {
    "comment": "create_table - Statement 189",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted3 FOR VALUES FROM (1, 10) TO (1, 20)"
  },
  {
    "comment": "create_table - Statement 190",
    "query": "CREATE TABLE range3_default PARTITION OF range_parted3 DEFAULT"
  },
  {
    "comment": "create_table - Statement 191",
    "query": "CREATE TABLE fail_part PARTITION OF range_parted3 FOR VALUES FROM (1, minvalue) TO (1, maxvalue)"
  },
  {
    "comment": "create_table - Statement 192",
    "query": "CREATE TABLE hash_parted2 ( a varchar ) PARTITION BY HASH (a)"
  },
  {
    "comment": "create_table - Statement 193",
    "query": "CREATE TABLE h2part_1 PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 4, REMAINDER 2)"
  },
  {
    "comment": "create_table - Statement 194",
    "query": "CREATE TABLE h2part_2 PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 8, REMAINDER 0)"
  },
  {
    "comment": "create_table - Statement 195",
    "query": "CREATE TABLE h2part_3 PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 8, REMAINDER 4)"
  },
  {
    "comment": "create_table - Statement 196",
    "query": "CREATE TABLE h2part_4 PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 8, REMAINDER 5)"
  },
  {
    "comment": "create_table - Statement 197",
    "query": "CREATE TABLE fail_part PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 2, REMAINDER 1)"
  },
  {
    "comment": "create_table - Statement 198",
    "query": "CREATE TABLE fail_part PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 0, REMAINDER 1)"
  },
  {
    "comment": "create_table - Statement 199",
    "query": "CREATE TABLE fail_part PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 8, REMAINDER 8)"
  },
  {
    "comment": "create_table - Statement 200",
    "query": "CREATE TABLE parted ( a text, b int NOT NULL DEFAULT 0, CONSTRAINT check_a CHECK (length(a) > 0) ) PARTITION BY LIST (a)"
  },
  {
    "comment": "create_table - Statement 201",
    "query": "CREATE TABLE part_a PARTITION OF parted FOR VALUES IN ('a')"
  },
  {
    "comment": "create_table - Statement 202",
    "query": "SELECT attname, attislocal, attinhcount FROM pg_attribute WHERE attrelid = 'part_a'::regclass and attnum > 0 ORDER BY attnum"
  },
  {
    "comment": "create_table - Statement 203",
    "query": "CREATE TABLE part_b PARTITION OF parted ( b NOT NULL, b DEFAULT 1, b CHECK (b >= 0), CONSTRAINT check_a CHECK (length(a) > 0) ) FOR VALUES IN ('b')"
  },
  {
    "comment": "create_table - Statement 204",
    "query": "CREATE TABLE part_b PARTITION OF parted ( b NOT NULL DEFAULT 1, CONSTRAINT check_a CHECK (length(a) > 0), CONSTRAINT check_b CHECK (b >= 0) ) FOR VALUES IN ('b')"
  },
  {
    "comment": "create_table - Statement 205",
    "query": "SELECT conname, conislocal, coninhcount FROM pg_constraint WHERE conrelid = 'part_b'::regclass ORDER BY coninhcount DESC, conname"
  },
  {
    "comment": "create_table - Statement 206",
    "query": "ALTER TABLE parted ADD CONSTRAINT check_b CHECK (b >= 0)"
  },
  {
    "comment": "create_table - Statement 207",
    "query": "ALTER TABLE part_b DROP CONSTRAINT check_a"
  },
  {
    "comment": "create_table - Statement 208",
    "query": "ALTER TABLE part_b DROP CONSTRAINT check_b"
  },
  {
    "comment": "create_table - Statement 209",
    "query": "ALTER TABLE parted DROP CONSTRAINT check_a, DROP CONSTRAINT check_b"
  },
  {
    "comment": "create_table - Statement 210",
    "query": "CREATE TABLE fail_part_col_not_found PARTITION OF parted FOR VALUES IN ('c') PARTITION BY RANGE (c)"
  },
  {
    "comment": "create_table - Statement 211",
    "query": "CREATE TABLE part_c PARTITION OF parted (b WITH OPTIONS NOT NULL DEFAULT 0) FOR VALUES IN ('c') PARTITION BY RANGE ((b))"
  },
  {
    "comment": "create_table - Statement 212",
    "query": "CREATE TABLE part_c_1_10 PARTITION OF part_c FOR VALUES FROM (1) TO (10)"
  },
  {
    "comment": "create_table - Statement 213",
    "query": "create table parted_notnull_inh_test (a int default 1, b int not null default 0) partition by list (a)"
  },
  {
    "comment": "create_table - Statement 214",
    "query": "create table parted_notnull_inh_test1 partition of parted_notnull_inh_test (a not null, b default 1) for values in (1)"
  },
  {
    "comment": "create_table - Statement 215",
    "query": "insert into parted_notnull_inh_test (b) values (null)"
  },
  {
    "comment": "create_table - Statement 216",
    "query": "create table parted_boolean_col (a bool, b text) partition by list(a)"
  },
  {
    "comment": "create_table - Statement 217",
    "query": "create table parted_boolean_less partition of parted_boolean_col for values in ('foo' < 'bar')"
  },
  {
    "comment": "create_table - Statement 218",
    "query": "create table parted_boolean_greater partition of parted_boolean_col for values in ('foo' > 'bar')"
  },
  {
    "comment": "create_table - Statement 219",
    "query": "drop table parted_boolean_col"
  },
  {
    "comment": "create_table - Statement 220",
    "query": "create table parted_collate_must_match (a text collate \"C\", b text collate \"C\") partition by range (a)"
  },
  {
    "comment": "create_table - Statement 221",
    "query": "create table parted_collate_must_match1 partition of parted_collate_must_match (a collate \"POSIX\") for values from ('a') to ('m')"
  },
  {
    "comment": "create_table - Statement 222",
    "query": "create table parted_collate_must_match2 partition of parted_collate_must_match (b collate \"POSIX\") for values from ('m') to ('z')"
  },
  {
    "comment": "create_table - Statement 223",
    "query": "drop table parted_collate_must_match"
  },
  {
    "comment": "create_table - Statement 224",
    "query": "create table test_part_coll_posix (a text) partition by range (a collate \"POSIX\")"
  },
  {
    "comment": "create_table - Statement 225",
    "query": "create table test_part_coll partition of test_part_coll_posix for values from ('a' collate \"C\") to ('g')"
  },
  {
    "comment": "create_table - Statement 226",
    "query": "create table test_part_coll2 partition of test_part_coll_posix for values from ('g') to ('m')"
  },
  {
    "comment": "create_table - Statement 227",
    "query": "create table test_part_coll_cast partition of test_part_coll_posix for values from (name 'm' collate \"C\") to ('s')"
  },
  {
    "comment": "create_table - Statement 228",
    "query": "create table test_part_coll_cast2 partition of test_part_coll_posix for values from (name 's') to ('z')"
  },
  {
    "comment": "create_table - Statement 229",
    "query": "drop table test_part_coll_posix"
  },
  {
    "comment": "create_table - Statement 230",
    "query": "CREATE TABLE unbounded_range_part PARTITION OF range_parted4 FOR VALUES FROM (MINVALUE, MINVALUE, MINVALUE) TO (MAXVALUE, MAXVALUE, MAXVALUE)"
  },
  {
    "comment": "create_table - Statement 231",
    "query": "CREATE TABLE range_parted4_1 PARTITION OF range_parted4 FOR VALUES FROM (MINVALUE, MINVALUE, MINVALUE) TO (1, MAXVALUE, MAXVALUE)"
  },
  {
    "comment": "create_table - Statement 232",
    "query": "CREATE FUNCTION my_int4_sort(int4,int4) RETURNS int LANGUAGE sql AS $$ SELECT CASE WHEN $1 = $2 THEN 0 WHEN $1 > $2 THEN 1 ELSE -1 END; $$"
  },
  {
    "comment": "create_table - Statement 233",
    "query": "CREATE OPERATOR CLASS test_int4_ops FOR TYPE int4 USING btree AS OPERATOR 1 < (int4,int4), OPERATOR 2 <= (int4,int4), OPERATOR 3 = (int4,int4), OPERATOR 4 >= (int4,int4), OPERATOR 5 > (int4,int4), FUNCTION 1 my_int4_sort(int4,int4)"
  },
  {
    "comment": "create_table - Statement 234",
    "query": "CREATE TABLE partkey_t (a int4) PARTITION BY RANGE (a test_int4_ops)"
  },
  {
    "comment": "create_table - Statement 235",
    "query": "CREATE TABLE partkey_t_1 PARTITION OF partkey_t FOR VALUES FROM (0) TO (1000)"
  },
  {
    "comment": "create_table - Statement 236",
    "query": "INSERT INTO partkey_t VALUES (100)"
  },
  {
    "comment": "create_table - Statement 237",
    "query": "INSERT INTO partkey_t VALUES (200)"
  },
  {
    "comment": "create_table - Statement 238",
    "query": "DROP TABLE parted, list_parted, range_parted, list_parted2, range_parted2, range_parted3"
  },
  {
    "comment": "create_table - Statement 239",
    "query": "DROP TABLE partkey_t, hash_parted, hash_parted2"
  },
  {
    "comment": "create_table - Statement 240",
    "query": "DROP OPERATOR CLASS test_int4_ops USING btree"
  },
  {
    "comment": "create_table - Statement 241",
    "query": "DROP FUNCTION my_int4_sort(int4,int4)"
  },
  {
    "comment": "create_table - Statement 242",
    "query": "CREATE TABLE parted_col_comment (a int, b text) PARTITION BY LIST (a)"
  },
  {
    "comment": "create_table - Statement 243",
    "query": "COMMENT ON TABLE parted_col_comment IS 'Am partitioned table'"
  },
  {
    "comment": "create_table - Statement 244",
    "query": "COMMENT ON COLUMN parted_col_comment.a IS 'Partition key'"
  },
  {
    "comment": "create_table - Statement 245",
    "query": "SELECT obj_description('parted_col_comment'::regclass)"
  },
  {
    "comment": "create_table - Statement 246",
    "query": "CREATE TABLE parted_col_comment (a int, b text) PARTITION BY LIST (a) WITH (fillfactor=100)"
  },
  {
    "comment": "create_table - Statement 247",
    "query": "CREATE TABLE arrlp (a int[]) PARTITION BY LIST (a)"
  },
  {
    "comment": "create_table - Statement 248",
    "query": "CREATE TABLE arrlp12 PARTITION OF arrlp FOR VALUES IN ('{1}', '{2}')"
  },
  {
    "comment": "create_table - Statement 249",
    "query": "create table boolspart (a bool) partition by list (a)"
  },
  {
    "comment": "create_table - Statement 250",
    "query": "create table boolspart_t partition of boolspart for values in (true)"
  },
  {
    "comment": "create_table - Statement 251",
    "query": "create table boolspart_f partition of boolspart for values in (false)"
  },
  {
    "comment": "create_table - Statement 252",
    "query": "create table perm_parted (a int) partition by list (a)"
  },
  {
    "comment": "create_table - Statement 253",
    "query": "create temporary table temp_parted (a int) partition by list (a)"
  },
  {
    "comment": "create_table - Statement 254",
    "query": "create table perm_part partition of temp_parted default"
  },
  {
    "comment": "create_table - Statement 255",
    "query": "create temp table temp_part partition of perm_parted default"
  },
  {
    "comment": "create_table - Statement 256",
    "query": "create temp table temp_part partition of temp_parted default"
  },
  {
    "comment": "create_table - Statement 257",
    "query": "drop table perm_parted cascade"
  },
  {
    "comment": "create_table - Statement 258",
    "query": "drop table temp_parted cascade"
  },
  {
    "comment": "create_table - Statement 259",
    "query": "create table tab_part_create (a int) partition by list (a)"
  },
  {
    "comment": "create_table - Statement 260",
    "query": "create or replace function func_part_create() returns trigger language plpgsql as $$ begin execute 'create table tab_part_create_1 partition of tab_part_create for values in (1)'"
  },
  {
    "comment": "create_table - Statement 261",
    "query": "return null"
  },
  {
    "comment": "create_table - Statement 262",
    "query": "end $$"
  },
  {
    "comment": "create_table - Statement 263",
    "query": "create trigger trig_part_create before insert on tab_part_create for each statement execute procedure func_part_create()"
  },
  {
    "comment": "create_table - Statement 264",
    "query": "insert into tab_part_create values (1)"
  },
  {
    "comment": "create_table - Statement 265",
    "query": "drop table tab_part_create"
  },
  {
    "comment": "create_table - Statement 266",
    "query": "drop function func_part_create()"
  },
  {
    "comment": "create_table - Statement 267",
    "query": "create table volatile_partbound_test (partkey timestamp) partition by range (partkey)"
  },
  {
    "comment": "create_table - Statement 268",
    "query": "create table volatile_partbound_test1 partition of volatile_partbound_test for values from (minvalue) to (current_timestamp)"
  },
  {
    "comment": "create_table - Statement 269",
    "query": "create table volatile_partbound_test2 partition of volatile_partbound_test for values from (current_timestamp) to (maxvalue)"
  },
  {
    "comment": "create_table - Statement 270",
    "query": "insert into volatile_partbound_test values (current_timestamp)"
  },
  {
    "comment": "create_table - Statement 271",
    "query": "select tableoid::regclass from volatile_partbound_test"
  },
  {
    "comment": "create_table - Statement 272",
    "query": "drop table volatile_partbound_test"
  },
  {
    "comment": "create_table - Statement 273",
    "query": "create table defcheck (a int, b int) partition by list (b)"
  },
  {
    "comment": "create_table - Statement 274",
    "query": "create table defcheck_def (a int, c int, b int)"
  },
  {
    "comment": "create_table - Statement 275",
    "query": "alter table defcheck_def drop c"
  },
  {
    "comment": "create_table - Statement 276",
    "query": "alter table defcheck attach partition defcheck_def default"
  },
  {
    "comment": "create_table - Statement 277",
    "query": "alter table defcheck_def add check (b <= 0 and b is not null)"
  },
  {
    "comment": "create_table - Statement 278",
    "query": "create table defcheck_1 partition of defcheck for values in (1, null)"
  },
  {
    "comment": "create_table - Statement 279",
    "query": "insert into defcheck_def values (0, 0)"
  },
  {
    "comment": "create_table - Statement 280",
    "query": "create table defcheck_0 partition of defcheck for values in (0)"
  },
  {
    "comment": "create_table - Statement 281",
    "query": "drop table defcheck"
  },
  {
    "comment": "create_table - Statement 282",
    "query": "create table part_column_drop ( useless_1 int, id int, useless_2 int, d int, b int, useless_3 int ) partition by range (id)"
  },
  {
    "comment": "create_table - Statement 283",
    "query": "alter table part_column_drop drop column useless_1"
  },
  {
    "comment": "create_table - Statement 284",
    "query": "alter table part_column_drop drop column useless_2"
  },
  {
    "comment": "create_table - Statement 285",
    "query": "alter table part_column_drop drop column useless_3"
  },
  {
    "comment": "create_table - Statement 286",
    "query": "create index part_column_drop_b_pred on part_column_drop(b) where b = 1"
  },
  {
    "comment": "create_table - Statement 287",
    "query": "create index part_column_drop_b_expr on part_column_drop((b = 1))"
  },
  {
    "comment": "create_table - Statement 288",
    "query": "create index part_column_drop_d_pred on part_column_drop(d) where d = 2"
  },
  {
    "comment": "create_table - Statement 289",
    "query": "create index part_column_drop_d_expr on part_column_drop((d = 2))"
  },
  {
    "comment": "create_table - Statement 290",
    "query": "create table part_column_drop_1_10 partition of part_column_drop for values from (1) to (10)"
  }
]