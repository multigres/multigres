[
  {
    "comment": "case - Statement 1",
    "query": "CREATE TABLE CASE_TBL ( i integer, f double precision )"
  },
  {
    "comment": "case - Statement 2",
    "query": "CREATE TABLE CASE2_TBL ( i integer, j integer )"
  },
  {
    "comment": "case - Statement 3",
    "query": "INSERT INTO CASE_TBL VALUES (1, 10.1)"
  },
  {
    "comment": "case - Statement 4",
    "query": "INSERT INTO CASE_TBL VALUES (2, 20.2)"
  },
  {
    "comment": "case - Statement 5",
    "query": "INSERT INTO CASE_TBL VALUES (3, -30.3)"
  },
  {
    "comment": "case - Statement 6",
    "query": "INSERT INTO CASE_TBL VALUES (4, NULL)"
  },
  {
    "comment": "case - Statement 7",
    "query": "INSERT INTO CASE2_TBL VALUES (1, -1)"
  },
  {
    "comment": "case - Statement 8",
    "query": "INSERT INTO CASE2_TBL VALUES (2, -2)"
  },
  {
    "comment": "case - Statement 9",
    "query": "INSERT INTO CASE2_TBL VALUES (3, -3)"
  },
  {
    "comment": "case - Statement 10",
    "query": "INSERT INTO CASE2_TBL VALUES (2, -4)"
  },
  {
    "comment": "case - Statement 11",
    "query": "INSERT INTO CASE2_TBL VALUES (1, NULL)"
  },
  {
    "comment": "case - Statement 12",
    "query": "INSERT INTO CASE2_TBL VALUES (NULL, -6)"
  },
  {
    "comment": "case - Statement 13",
    "query": "SELECT '3' AS \"One\", CASE WHEN 1 < 2 THEN 3 END AS \"Simple WHEN\""
  },
  {
    "comment": "case - Statement 14",
    "query": "SELECT '<NULL>' AS \"One\", CASE WHEN 1 > 2 THEN 3 END AS \"Simple default\""
  },
  {
    "comment": "case - Statement 15",
    "query": "SELECT '3' AS \"One\", CASE WHEN 1 < 2 THEN 3 ELSE 4 END AS \"Simple ELSE\""
  },
  {
    "comment": "case - Statement 16",
    "query": "SELECT '4' AS \"One\", CASE WHEN 1 > 2 THEN 3 ELSE 4 END AS \"ELSE default\""
  },
  {
    "comment": "case - Statement 17",
    "query": "SELECT '6' AS \"One\", CASE WHEN 1 > 2 THEN 3 WHEN 4 < 5 THEN 6 ELSE 7 END AS \"Two WHEN with default\""
  },
  {
    "comment": "case - Statement 18",
    "query": "SELECT '7' AS \"None\", CASE WHEN random() < 0 THEN 1 END AS \"NULL on no matches\""
  },
  {
    "comment": "case - Statement 19",
    "query": "SELECT CASE WHEN 1=0 THEN 1/0 WHEN 1=1 THEN 1 ELSE 2/0 END"
  },
  {
    "comment": "case - Statement 20",
    "query": "SELECT CASE 1 WHEN 0 THEN 1/0 WHEN 1 THEN 1 ELSE 2/0 END"
  },
  {
    "comment": "case - Statement 21",
    "query": "SELECT CASE WHEN i > 100 THEN 1/0 ELSE 0 END FROM case_tbl"
  },
  {
    "comment": "case - Statement 22",
    "query": "SELECT CASE 'a' WHEN 'a' THEN 1 ELSE 2 END"
  },
  {
    "comment": "case - Statement 23",
    "query": "SELECT CASE WHEN i >= 3 THEN i END AS \">= 3 or Null\" FROM CASE_TBL"
  },
  {
    "comment": "case - Statement 24",
    "query": "SELECT CASE WHEN i >= 3 THEN (i + i) ELSE i END AS \"Simplest Math\" FROM CASE_TBL"
  },
  {
    "comment": "case - Statement 25",
    "query": "SELECT i AS \"Value\", CASE WHEN (i < 0) THEN 'small' WHEN (i = 0) THEN 'zero' WHEN (i = 1) THEN 'one' WHEN (i = 2) THEN 'two' ELSE 'big' END AS \"Category\" FROM CASE_TBL"
  },
  {
    "comment": "case - Statement 26",
    "query": "SELECT CASE WHEN ((i < 0) or (i < 0)) THEN 'small' WHEN ((i = 0) or (i = 0)) THEN 'zero' WHEN ((i = 1) or (i = 1)) THEN 'one' WHEN ((i = 2) or (i = 2)) THEN 'two' ELSE 'big' END AS \"Category\" FROM CASE_TBL"
  },
  {
    "comment": "case - Statement 27",
    "query": "SELECT * FROM CASE_TBL WHERE COALESCE(f,i) = 4"
  },
  {
    "comment": "case - Statement 28",
    "query": "SELECT * FROM CASE_TBL WHERE NULLIF(f,i) = 2"
  },
  {
    "comment": "case - Statement 29",
    "query": "SELECT COALESCE(a.f, b.i, b.j) FROM CASE_TBL a, CASE2_TBL b"
  },
  {
    "comment": "case - Statement 30",
    "query": "SELECT * FROM CASE_TBL a, CASE2_TBL b WHERE COALESCE(a.f, b.i, b.j) = 2"
  },
  {
    "comment": "case - Statement 31",
    "query": "SELECT NULLIF(a.i,b.i) AS \"NULLIF(a.i,b.i)\", NULLIF(b.i, 4) AS \"NULLIF(b.i,4)\" FROM CASE_TBL a, CASE2_TBL b"
  },
  {
    "comment": "case - Statement 32",
    "query": "SELECT * FROM CASE_TBL a, CASE2_TBL b WHERE COALESCE(f,b.i) = 2"
  },
  {
    "comment": "case - Statement 33",
    "query": "explain (costs off) SELECT * FROM CASE_TBL WHERE NULLIF(1, 2) = 2"
  },
  {
    "comment": "case - Statement 34",
    "query": "explain (costs off) SELECT * FROM CASE_TBL WHERE NULLIF(1, 1) IS NOT NULL"
  },
  {
    "comment": "case - Statement 35",
    "query": "explain (costs off) SELECT * FROM CASE_TBL WHERE NULLIF(1, null) = 2"
  },
  {
    "comment": "case - Statement 36",
    "query": "UPDATE CASE_TBL SET i = CASE WHEN i >= 3 THEN (- i) ELSE (2 * i) END"
  },
  {
    "comment": "case - Statement 37",
    "query": "SELECT * FROM CASE_TBL"
  },
  {
    "comment": "case - Statement 38",
    "query": "UPDATE CASE_TBL SET i = CASE WHEN i >= 2 THEN (2 * i) ELSE (3 * i) END"
  },
  {
    "comment": "case - Statement 39",
    "query": "UPDATE CASE_TBL SET i = CASE WHEN b.i >= 2 THEN (2 * j) ELSE (3 * j) END FROM CASE2_TBL b WHERE j = -CASE_TBL.i"
  },
  {
    "comment": "case - Statement 40",
    "query": "BEGIN"
  },
  {
    "comment": "case - Statement 41",
    "query": "CREATE FUNCTION vol(text) returns text as 'begin return $1; end' language plpgsql volatile"
  },
  {
    "comment": "case - Statement 42",
    "query": "SELECT CASE (CASE vol('bar') WHEN 'foo' THEN 'it was foo!' WHEN vol(null) THEN 'null input' WHEN 'bar' THEN 'it was bar!' END ) WHEN 'it was foo!' THEN 'foo recognized' WHEN 'it was bar!' THEN 'bar recognized' ELSE 'unrecognized' END"
  },
  {
    "comment": "case - Statement 43",
    "query": "CREATE DOMAIN foodomain AS text"
  },
  {
    "comment": "case - Statement 44",
    "query": "CREATE FUNCTION volfoo(text) returns foodomain as 'begin return $1::foodomain; end' language plpgsql volatile"
  },
  {
    "comment": "case - Statement 45",
    "query": "CREATE FUNCTION inline_eq(foodomain, foodomain) returns boolean as 'SELECT CASE $2::text WHEN $1::text THEN true ELSE false END' language sql"
  },
  {
    "comment": "case - Statement 46",
    "query": "CREATE OPERATOR = (procedure = inline_eq, leftarg = foodomain, rightarg = foodomain)"
  },
  {
    "comment": "case - Statement 47",
    "query": "SELECT CASE volfoo('bar') WHEN 'foo'::foodomain THEN 'is foo' ELSE 'is not foo' END"
  },
  {
    "comment": "case - Statement 48",
    "query": "ROLLBACK"
  },
  {
    "comment": "case - Statement 49",
    "query": "CREATE DOMAIN arrdomain AS int[]"
  },
  {
    "comment": "case - Statement 50",
    "query": "CREATE FUNCTION make_ad(int,int) returns arrdomain as 'declare x arrdomain"
  },
  {
    "comment": "case - Statement 51",
    "query": "begin x := array[$1,$2]"
  },
  {
    "comment": "case - Statement 52",
    "query": "return x"
  },
  {
    "comment": "case - Statement 53",
    "query": "end' language plpgsql volatile"
  },
  {
    "comment": "case - Statement 54",
    "query": "CREATE FUNCTION ad_eq(arrdomain, arrdomain) returns boolean as 'begin return array_eq($1, $2); end' language plpgsql"
  },
  {
    "comment": "case - Statement 55",
    "query": "CREATE OPERATOR = (procedure = ad_eq, leftarg = arrdomain, rightarg = arrdomain)"
  },
  {
    "comment": "case - Statement 56",
    "query": "SELECT CASE make_ad(1,2) WHEN array[2,4]::arrdomain THEN 'wrong' WHEN array[2,5]::arrdomain THEN 'still wrong' WHEN array[1,2]::arrdomain THEN 'right' END"
  },
  {
    "comment": "case - Statement 57",
    "query": "SELECT NULLIF(make_ad(1,2), array[2,3]::arrdomain)"
  },
  {
    "comment": "case - Statement 58",
    "query": "CREATE TYPE casetestenum AS ENUM ('e', 'f', 'g')"
  },
  {
    "comment": "case - Statement 59",
    "query": "SELECT CASE 'foo'::text WHEN 'foo' THEN ARRAY['a', 'b', 'c', 'd'] || enum_range(NULL::casetestenum)::text[] ELSE ARRAY['x', 'y'] END"
  },
  {
    "comment": "case - Statement 60",
    "query": "DROP TABLE CASE_TBL"
  },
  {
    "comment": "case - Statement 61",
    "query": "DROP TABLE CASE2_TBL"
  }
]