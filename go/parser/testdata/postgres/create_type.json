[
  {
    "comment": "create_type - Statement 1",
    "query": "CREATE FUNCTION widget_out(widget) RETURNS cstring AS 'regresslib' LANGUAGE C STRICT IMMUTABLE",
    "expected": "CREATE FUNCTION widget_out (widget) RETURNS cstring AS $$regresslib$$ LANGUAGE c STRICT IMMUTABLE"
  },
  {
    "comment": "create_type - Statement 2",
    "query": "CREATE FUNCTION int44in(cstring) RETURNS city_budget AS 'regresslib' LANGUAGE C STRICT IMMUTABLE",
    "expected": "CREATE FUNCTION int44in (cstring) RETURNS city_budget AS $$regresslib$$ LANGUAGE c STRICT IMMUTABLE"
  },
  {
    "comment": "create_type - Statement 3",
    "query": "CREATE FUNCTION int44out(city_budget) RETURNS cstring AS 'regresslib' LANGUAGE C STRICT IMMUTABLE",
    "expected": "CREATE FUNCTION int44out (city_budget) RETURNS cstring AS $$regresslib$$ LANGUAGE c STRICT IMMUTABLE"
  },
  {
    "comment": "create_type - Statement 4",
    "query": "CREATE TYPE widget ( internallength = 24, input = widget_in, output = widget_out, typmod_in = numerictypmodin, typmod_out = numerictypmodout, alignment = double )",
    "expected": "CREATE TYPE widget (internallength = 24, input = widget_in, output = widget_out, typmod_in = numerictypmodin, typmod_out = numerictypmodout, alignment = double)"
  },
  {
    "comment": "create_type - Statement 5",
    "query": "CREATE TYPE city_budget ( internallength = 16, input = int44in, output = int44out, element = int4, category = 'x', preferred = true )",
    "expected": "CREATE TYPE city_budget (internallength = 16, input = int44in, output = int44out, element = INT, category = 'x', preferred = 'true')"
  },
  {
    "comment": "create_type - Statement 6",
    "query": "CREATE TYPE shell"
  },
  {
    "comment": "create_type - Statement 7",
    "query": "DROP TYPE shell"
  },
  {
    "comment": "create_type - Statement 8",
    "query": "CREATE TYPE myshell"
  },
  {
    "comment": "create_type - Statement 9",
    "query": "CREATE TYPE int42"
  },
  {
    "comment": "create_type - Statement 10",
    "query": "CREATE TYPE text_w_default"
  },
  {
    "comment": "create_type - Statement 11",
    "query": "CREATE FUNCTION int42_in(cstring) RETURNS int42 AS 'int4in' LANGUAGE internal STRICT IMMUTABLE",
    "expected": "CREATE FUNCTION int42_in (cstring) RETURNS int42 AS $$int4in$$ LANGUAGE internal STRICT IMMUTABLE"
  },
  {
    "comment": "create_type - Statement 12",
    "query": "CREATE FUNCTION int42_out(int42) RETURNS cstring AS 'int4out' LANGUAGE internal STRICT IMMUTABLE",
    "expected": "CREATE FUNCTION int42_out (int42) RETURNS cstring AS $$int4out$$ LANGUAGE internal STRICT IMMUTABLE"
  },
  {
    "comment": "create_type - Statement 13",
    "query": "CREATE FUNCTION text_w_default_in(cstring) RETURNS text_w_default AS 'textin' LANGUAGE internal STRICT IMMUTABLE",
    "expected": "CREATE FUNCTION text_w_default_in (cstring) RETURNS text_w_default AS $$textin$$ LANGUAGE internal STRICT IMMUTABLE"
  },
  {
    "comment": "create_type - Statement 14",
    "query": "CREATE FUNCTION text_w_default_out(text_w_default) RETURNS cstring AS 'textout' LANGUAGE internal STRICT IMMUTABLE",
    "expected": "CREATE FUNCTION text_w_default_out (text_w_default) RETURNS cstring AS $$textout$$ LANGUAGE internal STRICT IMMUTABLE"
  },
  {
    "comment": "create_type - Statement 15",
    "query": "CREATE TYPE int42 ( internallength = 4, input = int42_in, output = int42_out, alignment = int4, default = 42, passedbyvalue )",
    "expected": "CREATE TYPE int42 (internallength = 4, input = int42_in, output = int42_out, alignment = INT, \"default\" = 42, passedbyvalue)"
  },
  {
    "comment": "create_type - Statement 16",
    "query": "CREATE TYPE text_w_default ( internallength = variable, input = text_w_default_in, output = text_w_default_out, alignment = int4, default = 'zippo' )",
    "expected": "CREATE TYPE text_w_default (internallength = variable, input = text_w_default_in, output = text_w_default_out, alignment = INT, \"default\" = 'zippo')"
  },
  {
    "comment": "create_type - Statement 17",
    "query": "CREATE TABLE default_test (f1 text_w_default, f2 int42)"
  },
  {
    "comment": "create_type - Statement 18",
    "query": "INSERT INTO default_test DEFAULT VALUES"
  },
  {
    "comment": "create_type - Statement 19",
    "query": "SELECT * FROM default_test"
  },
  {
    "comment": "create_type - Statement 20",
    "query": "CREATE TYPE bogus_type"
  },
  {
    "comment": "create_type - Statement 21",
    "query": "CREATE TYPE bogus_type ( \"Internallength\" = 4, \"Input\" = int42_in, \"Output\" = int42_out, \"Alignment\" = int4, \"Default\" = 42, \"Passedbyvalue\" )",
    "expected": "CREATE TYPE bogus_type (\"Internallength\" = 4, \"Input\" = int42_in, \"Output\" = int42_out, \"Alignment\" = INT, \"Default\" = 42, \"Passedbyvalue\")"
  },
  {
    "comment": "create_type - Statement 22",
    "query": "CREATE TYPE bogus_type (INPUT = array_in, OUTPUT = array_out, ELEMENT = int, INTERNALLENGTH = 32)",
    "expected": "CREATE TYPE bogus_type (input = array_in, output = array_out, element = INT, internallength = 32)"
  },
  {
    "comment": "create_type - Statement 23",
    "query": "DROP TYPE bogus_type"
  },
  {
    "comment": "create_type - Statement 24",
    "query": "CREATE TYPE default_test_row AS (f1 text_w_default, f2 int42)"
  },
  {
    "comment": "create_type - Statement 25",
    "query": "CREATE FUNCTION get_default_test() RETURNS SETOF default_test_row AS ' SELECT * FROM default_test",
    "error": "unterminated quoted string"
  },
  {
    "comment": "create_type - Statement 26",
    "query": "' LANGUAGE SQL",
    "error": "unterminated quoted string"
  },
  {
    "comment": "create_type - Statement 27",
    "query": "SELECT * FROM get_default_test()"
  },
  {
    "comment": "create_type - Statement 28",
    "query": "COMMENT ON TYPE bad IS 'bad comment'"
  },
  {
    "comment": "create_type - Statement 29",
    "query": "COMMENT ON TYPE default_test_row IS 'good comment'"
  },
  {
    "comment": "create_type - Statement 30",
    "query": "COMMENT ON TYPE default_test_row IS NULL"
  },
  {
    "comment": "create_type - Statement 31",
    "query": "COMMENT ON COLUMN default_test_row.nope IS 'bad comment'"
  },
  {
    "comment": "create_type - Statement 32",
    "query": "COMMENT ON COLUMN default_test_row.f1 IS 'good comment'"
  },
  {
    "comment": "create_type - Statement 33",
    "query": "COMMENT ON COLUMN default_test_row.f1 IS NULL"
  },
  {
    "comment": "create_type - Statement 34",
    "query": "DROP TYPE default_test_row CASCADE"
  },
  {
    "comment": "create_type - Statement 35",
    "query": "DROP TABLE default_test"
  },
  {
    "comment": "create_type - Statement 36",
    "query": "CREATE TYPE base_type"
  },
  {
    "comment": "create_type - Statement 37",
    "query": "CREATE FUNCTION base_fn_in(cstring) RETURNS base_type AS 'boolin' LANGUAGE internal IMMUTABLE STRICT",
    "expected": "CREATE FUNCTION base_fn_in (cstring) RETURNS base_type AS $$boolin$$ LANGUAGE internal IMMUTABLE STRICT"
  },
  {
    "comment": "create_type - Statement 38",
    "query": "CREATE FUNCTION base_fn_out(base_type) RETURNS cstring AS 'boolout' LANGUAGE internal IMMUTABLE STRICT",
    "expected": "CREATE FUNCTION base_fn_out (base_type) RETURNS cstring AS $$boolout$$ LANGUAGE internal IMMUTABLE STRICT"
  },
  {
    "comment": "create_type - Statement 39",
    "query": "CREATE TYPE base_type(INPUT = base_fn_in, OUTPUT = base_fn_out)",
    "expected": "CREATE TYPE base_type (input = base_fn_in, output = base_fn_out)"
  },
  {
    "comment": "create_type - Statement 40",
    "query": "DROP FUNCTION base_fn_in(cstring)"
  },
  {
    "comment": "create_type - Statement 41",
    "query": "DROP FUNCTION base_fn_out(base_type)"
  },
  {
    "comment": "create_type - Statement 42",
    "query": "DROP TYPE base_type"
  },
  {
    "comment": "create_type - Statement 43",
    "query": "DROP TYPE base_type CASCADE"
  },
  {
    "comment": "create_type - Statement 44",
    "query": "CREATE TEMP TABLE mytab (foo widget(42,13,7))",
    "expected": "CREATE TEMPORARY TABLE mytab (foo widget(42, 13, 7))"
  },
  {
    "comment": "create_type - Statement 45",
    "query": "CREATE TEMP TABLE mytab (foo widget(42,13))",
    "expected": "CREATE TEMPORARY TABLE mytab (foo widget(42, 13))"
  },
  {
    "comment": "create_type - Statement 46",
    "query": "SELECT format_type(atttypid,atttypmod) FROM pg_attribute WHERE attrelid = 'mytab'::regclass AND attnum \u003e 0",
    "expected": "SELECT format_type(atttypid, atttypmod) FROM pg_attribute WHERE attrelid = CAST('mytab' AS regclass) AND attnum \u003e 0"
  },
  {
    "comment": "create_type - Statement 47",
    "query": "INSERT INTO mytab VALUES ('(1,2,3)'), ('(-44,5.5,12)')"
  },
  {
    "comment": "create_type - Statement 48",
    "query": "TABLE mytab",
    "expected": "SELECT * FROM mytab"
  },
  {
    "comment": "create_type - Statement 49",
    "query": "select format_type('varchar'::regtype, 42)",
    "expected": "SELECT format_type(CAST('varchar' AS regtype), 42)"
  },
  {
    "comment": "create_type - Statement 50",
    "query": "select format_type('bpchar'::regtype, null)",
    "expected": "SELECT format_type(CAST('bpchar' AS regtype), NULL)"
  },
  {
    "comment": "create_type - Statement 51",
    "query": "select format_type('bpchar'::regtype, -1)",
    "expected": "SELECT format_type(CAST('bpchar' AS regtype), -1)"
  },
  {
    "comment": "create_type - Statement 52",
    "query": "SELECT pg_input_is_valid('(1,2,3)', 'widget')"
  },
  {
    "comment": "create_type - Statement 53",
    "query": "SELECT pg_input_is_valid('(1,2)', 'widget')"
  },
  {
    "comment": "create_type - Statement 54",
    "query": "SELECT pg_input_is_valid('{\"(1,2,3)\"}', 'widget[]')"
  },
  {
    "comment": "create_type - Statement 55",
    "query": "SELECT pg_input_is_valid('{\"(1,2)\"}', 'widget[]')"
  },
  {
    "comment": "create_type - Statement 56",
    "query": "SELECT pg_input_is_valid('(\"(1,2,3)\")', 'mytab')"
  },
  {
    "comment": "create_type - Statement 57",
    "query": "SELECT pg_input_is_valid('(\"(1,2)\")', 'mytab')"
  },
  {
    "comment": "create_type - Statement 58",
    "query": "CREATE FUNCTION pt_in_widget(point, widget) RETURNS bool AS 'regresslib' LANGUAGE C STRICT",
    "expected": "CREATE FUNCTION pt_in_widget (point, widget) RETURNS BOOLEAN AS $$regresslib$$ LANGUAGE c STRICT"
  },
  {
    "comment": "create_type - Statement 59",
    "query": "CREATE OPERATOR \u003c% ( leftarg = point, rightarg = widget, procedure = pt_in_widget, commutator = \u003e% , negator = \u003e=% )",
    "expected": "CREATE OPERATOR \u003c% (leftarg = point, rightarg = widget, procedure = pt_in_widget, commutator = '\u003e%', negator = '\u003e=%')"
  },
  {
    "comment": "create_type - Statement 60",
    "query": "SELECT point '(1,2)' \u003c% widget '(0,0,3)' AS t, point '(1,2)' \u003c% widget '(0,0,1)' AS f",
    "expected": "SELECT CAST('(1,2)' AS point) \u003c% CAST('(0,0,3)' AS widget) AS t, CAST('(1,2)' AS point) \u003c% CAST('(0,0,1)' AS widget) AS f"
  },
  {
    "comment": "create_type - Statement 61",
    "query": "CREATE TABLE city ( name\t\tname, location \tbox, budget \t\tcity_budget )",
    "expected": "CREATE TABLE city (name name, location box, budget city_budget)"
  },
  {
    "comment": "create_type - Statement 62",
    "query": "INSERT INTO city VALUES ('Podunk', '(1,2),(3,4)', '100,127,1000'), ('Gotham', '(1000,34),(1100,334)', '123456,127,-1000,6789')"
  },
  {
    "comment": "create_type - Statement 63",
    "query": "TABLE city",
    "expected": "SELECT * FROM city"
  },
  {
    "comment": "create_type - Statement 64",
    "query": "CREATE TYPE myvarchar"
  },
  {
    "comment": "create_type - Statement 65",
    "query": "CREATE FUNCTION myvarcharin(cstring, oid, integer) RETURNS myvarchar LANGUAGE internal IMMUTABLE PARALLEL SAFE STRICT AS 'varcharin'",
    "expected": "CREATE FUNCTION myvarcharin (cstring, oid, INT) RETURNS myvarchar LANGUAGE internal IMMUTABLE PARALLEL SAFE STRICT AS $$varcharin$$"
  },
  {
    "comment": "create_type - Statement 66",
    "query": "CREATE FUNCTION myvarcharout(myvarchar) RETURNS cstring LANGUAGE internal IMMUTABLE PARALLEL SAFE STRICT AS 'varcharout'",
    "expected": "CREATE FUNCTION myvarcharout (myvarchar) RETURNS cstring LANGUAGE internal IMMUTABLE PARALLEL SAFE STRICT AS $$varcharout$$"
  },
  {
    "comment": "create_type - Statement 67",
    "query": "CREATE FUNCTION myvarcharsend(myvarchar) RETURNS bytea LANGUAGE internal STABLE PARALLEL SAFE STRICT AS 'varcharsend'",
    "expected": "CREATE FUNCTION myvarcharsend (myvarchar) RETURNS BYTEA LANGUAGE internal STABLE PARALLEL SAFE STRICT AS $$varcharsend$$"
  },
  {
    "comment": "create_type - Statement 68",
    "query": "CREATE FUNCTION myvarcharrecv(internal, oid, integer) RETURNS myvarchar LANGUAGE internal STABLE PARALLEL SAFE STRICT AS 'varcharrecv'",
    "expected": "CREATE FUNCTION myvarcharrecv (internal, oid, INT) RETURNS myvarchar LANGUAGE internal STABLE PARALLEL SAFE STRICT AS $$varcharrecv$$"
  },
  {
    "comment": "create_type - Statement 69",
    "query": "ALTER TYPE myvarchar SET (storage = extended)",
    "expected": "ALTER TYPE myvarchar SET (STORAGE = extended)"
  },
  {
    "comment": "create_type - Statement 70",
    "query": "CREATE TYPE myvarchar ( input = myvarcharin, output = myvarcharout, alignment = integer, storage = main )",
    "expected": "CREATE TYPE myvarchar (input = myvarcharin, output = myvarcharout, alignment = INT, storage = main)"
  },
  {
    "comment": "create_type - Statement 71",
    "query": "CREATE DOMAIN myvarchardom AS myvarchar"
  },
  {
    "comment": "create_type - Statement 72",
    "query": "ALTER TYPE myvarchar SET (storage = plain)",
    "expected": "ALTER TYPE myvarchar SET (STORAGE = plain)"
  },
  {
    "comment": "create_type - Statement 73",
    "query": "ALTER TYPE myvarchar SET ( send = myvarcharsend, receive = myvarcharrecv, typmod_in = varchartypmodin, typmod_out = varchartypmodout, analyze = ts_typanalyze, subscript = raw_array_subscript_handler )",
    "expected": "ALTER TYPE myvarchar SET (SEND = myvarcharsend, RECEIVE = myvarcharrecv, TYPMOD_IN = varchartypmodin, TYPMOD_OUT = varchartypmodout, ANALYZE = ts_typanalyze, SUBSCRIPT = raw_array_subscript_handler)"
  },
  {
    "comment": "create_type - Statement 74",
    "query": "SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout, typanalyze, typsubscript, typstorage FROM pg_type WHERE typname = 'myvarchar'"
  },
  {
    "comment": "create_type - Statement 75",
    "query": "SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout, typanalyze, typsubscript, typstorage FROM pg_type WHERE typname = '_myvarchar'"
  },
  {
    "comment": "create_type - Statement 76",
    "query": "SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout, typanalyze, typsubscript, typstorage FROM pg_type WHERE typname = 'myvarchardom'"
  },
  {
    "comment": "create_type - Statement 77",
    "query": "SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout, typanalyze, typsubscript, typstorage FROM pg_type WHERE typname = '_myvarchardom'"
  },
  {
    "comment": "create_type - Statement 78",
    "query": "DROP FUNCTION myvarcharsend(myvarchar)"
  },
  {
    "comment": "create_type - Statement 79",
    "query": "DROP TYPE myvarchar"
  },
  {
    "comment": "create_type - Statement 80",
    "query": "DROP TYPE myvarchar CASCADE"
  }
]
